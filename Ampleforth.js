"use strict";

var nil = "patch me with nil";

var currentActor;

var theGlobalObject = this;

function SM(n,m,s){this.name=n; this.isMutable=m; this.isSynthetic=s; };

function MM(n,sy,src){this.name=n; this.isSynthetic=sy; this.source=src; };

function dnuCatcher(s){ return function() {
return this.dnu(vmmirror.kernel.$Message().$selector$arguments$(s, Array.prototype.slice.call(arguments)));
} };

var mixins = new function () {
 this.$RuntimeForV8WithMirrorBuilders = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for RuntimeForV8WithMirrorBuilders";
  this.name = "RuntimeForV8WithMirrorBuilders";
  this.header = 1;
  this.slots = [
   new SM("Kernel", false, false),
   new SM("Actors", false, false),
   new SM("Aliens", false, false),
   new SM("Collections", false, false),
   new SM("Graphics", false, false),
   new SM("Hopscotch", false, false),
   new SM("Mirrors", false, false),
   new SM("MirrorGroups", false, false),
   new SM("Streams", false, false),
   new SM("CombinatorialParsing", false, false),
   new SM("NewspeakGrammar", false, false),
   new SM("NewspeakASTs", false, false),
   new SM("NewspeakParsing", false, false),
   new SM("JavascriptGeneration", false, false),
   new SM("Compilation", false, false),
   new SM("accept16px", false, false),
   new SM("cancel16px", false, false),
   new SM("disclosureClosedImage", false, false),
   new SM("disclosureTransitionImage", false, false),
   new SM("disclosureOpenImage", false, false),
   new SM("RuntimeForV8WithMirrorBuilders`Platform", true, true)
  ];
  this.methods = [
   new MM("superInit`RuntimeForV8WithMirrorBuilders", true, 2),
   new MM("instance`initializer", true, 3),
   new MM("using:", false, 4),
   new MM("Platform", true, 0),
   new MM("init`Kernel:", true, 0),
   new MM("Kernel", true, 0),
   new MM("init`Actors:", true, 0),
   new MM("Actors", true, 0),
   new MM("init`Aliens:", true, 0),
   new MM("Aliens", true, 0),
   new MM("init`Collections:", true, 0),
   new MM("Collections", true, 0),
   new MM("init`Graphics:", true, 0),
   new MM("Graphics", true, 0),
   new MM("init`Hopscotch:", true, 0),
   new MM("Hopscotch", true, 0),
   new MM("init`Mirrors:", true, 0),
   new MM("Mirrors", true, 0),
   new MM("init`MirrorGroups:", true, 0),
   new MM("MirrorGroups", true, 0),
   new MM("init`Streams:", true, 0),
   new MM("Streams", true, 0),
   new MM("init`CombinatorialParsing:", true, 0),
   new MM("CombinatorialParsing", true, 0),
   new MM("init`NewspeakGrammar:", true, 0),
   new MM("NewspeakGrammar", true, 0),
   new MM("init`NewspeakASTs:", true, 0),
   new MM("NewspeakASTs", true, 0),
   new MM("init`NewspeakParsing:", true, 0),
   new MM("NewspeakParsing", true, 0),
   new MM("init`JavascriptGeneration:", true, 0),
   new MM("JavascriptGeneration", true, 0),
   new MM("init`Compilation:", true, 0),
   new MM("Compilation", true, 0),
   new MM("init`accept16px:", true, 0),
   new MM("accept16px", true, 0),
   new MM("init`cancel16px:", true, 0),
   new MM("cancel16px", true, 0),
   new MM("init`disclosureClosedImage:", true, 0),
   new MM("disclosureClosedImage", true, 0),
   new MM("init`disclosureTransitionImage:", true, 0),
   new MM("disclosureTransitionImage", true, 0),
   new MM("init`disclosureOpenImage:", true, 0),
   new MM("disclosureOpenImage", true, 0),
   new MM("init`RuntimeForV8WithMirrorBuilders`Platform:", true, 0),
   new MM("RuntimeForV8WithMirrorBuilders`Platform", true, 0),
   new MM("RuntimeForV8WithMirrorBuilders`Platform:", true, 0)
  ];
  this.nestedClasses = ["RuntimeForV8WithMirrorBuilders`Platform"];
  this.applications = [];
  this.$superInit$RuntimeForV8WithMirrorBuilders = function ($manifest) {
   var self = this;
   self.$super$RuntimeForV8WithMirrorBuilders$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($manifest) {
   var self = this;
   self._$superInit$RuntimeForV8WithMirrorBuilders($manifest);
   self._$init$Kernel$($manifest.$KernelForV8());
   self._$init$Actors$($manifest.$ActorsForV8());
   self._$init$Aliens$($manifest.$AliensForV8());
   self._$init$Collections$($manifest.$Collections());
   self._$init$Graphics$($manifest.$GraphicsForHTML5());
   self._$init$Hopscotch$($manifest.$HopscotchForHTML5());
   self._$init$Mirrors$($manifest.$MirrorsForV8());
   self._$init$MirrorGroups$($manifest.$MirrorGroups());
   self._$init$Streams$($manifest.$Streams());
   self._$init$CombinatorialParsing$($manifest.$CombinatorialParsing());
   self._$init$NewspeakGrammar$($manifest.$NewspeakGrammar());
   self._$init$NewspeakASTs$($manifest.$NewspeakASTs());
   self._$init$NewspeakParsing$($manifest.$NewspeakParsing());
   self._$init$JavascriptGeneration$($manifest.$JavascriptGeneration());
   self._$init$Compilation$($manifest.$Newspeak2V8Compilation().$mixinApply$($manifest.$NewspeakCompilation()));
   self._$init$accept16px$($manifest.$accept16px());
   self._$init$cancel16px$($manifest.$cancel16px());
   self._$init$disclosureClosedImage$($manifest.$disclosureClosedImage());
   self._$init$disclosureTransitionImage$($manifest.$disclosureTransitionImage());
   self._$init$disclosureOpenImage$($manifest.$disclosureOpenImage());
   return self;
  };
  this.$using$ = function ($vmmirror) {
   var self = this;
   self._$Object().$enclosingObject().$augmentPrototypes();
   return self._$Platform().$usingVmMirror$($vmmirror);
  };
  this.$Platform = function () {
   if (nil === this.$RuntimeForV8WithMirrorBuilders$Platform$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$RuntimeForV8WithMirrorBuilders);
    var mixin = $.$RuntimeForV8WithMirrorBuilders$Platform;
    this.$RuntimeForV8WithMirrorBuilders$Platform$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$RuntimeForV8WithMirrorBuilders$Platform$slot;
  };
  this.$init$Kernel$ = function (v) {
   this.$Kernel$slot = v;
   return this;
  };
  this.$Kernel = function () {
   return this.$Kernel$slot;
  };
  this.$init$Actors$ = function (v) {
   this.$Actors$slot = v;
   return this;
  };
  this.$Actors = function () {
   return this.$Actors$slot;
  };
  this.$init$Aliens$ = function (v) {
   this.$Aliens$slot = v;
   return this;
  };
  this.$Aliens = function () {
   return this.$Aliens$slot;
  };
  this.$init$Collections$ = function (v) {
   this.$Collections$slot = v;
   return this;
  };
  this.$Collections = function () {
   return this.$Collections$slot;
  };
  this.$init$Graphics$ = function (v) {
   this.$Graphics$slot = v;
   return this;
  };
  this.$Graphics = function () {
   return this.$Graphics$slot;
  };
  this.$init$Hopscotch$ = function (v) {
   this.$Hopscotch$slot = v;
   return this;
  };
  this.$Hopscotch = function () {
   return this.$Hopscotch$slot;
  };
  this.$init$Mirrors$ = function (v) {
   this.$Mirrors$slot = v;
   return this;
  };
  this.$Mirrors = function () {
   return this.$Mirrors$slot;
  };
  this.$init$MirrorGroups$ = function (v) {
   this.$MirrorGroups$slot = v;
   return this;
  };
  this.$MirrorGroups = function () {
   return this.$MirrorGroups$slot;
  };
  this.$init$Streams$ = function (v) {
   this.$Streams$slot = v;
   return this;
  };
  this.$Streams = function () {
   return this.$Streams$slot;
  };
  this.$init$CombinatorialParsing$ = function (v) {
   this.$CombinatorialParsing$slot = v;
   return this;
  };
  this.$CombinatorialParsing = function () {
   return this.$CombinatorialParsing$slot;
  };
  this.$init$NewspeakGrammar$ = function (v) {
   this.$NewspeakGrammar$slot = v;
   return this;
  };
  this.$NewspeakGrammar = function () {
   return this.$NewspeakGrammar$slot;
  };
  this.$init$NewspeakASTs$ = function (v) {
   this.$NewspeakASTs$slot = v;
   return this;
  };
  this.$NewspeakASTs = function () {
   return this.$NewspeakASTs$slot;
  };
  this.$init$NewspeakParsing$ = function (v) {
   this.$NewspeakParsing$slot = v;
   return this;
  };
  this.$NewspeakParsing = function () {
   return this.$NewspeakParsing$slot;
  };
  this.$init$JavascriptGeneration$ = function (v) {
   this.$JavascriptGeneration$slot = v;
   return this;
  };
  this.$JavascriptGeneration = function () {
   return this.$JavascriptGeneration$slot;
  };
  this.$init$Compilation$ = function (v) {
   this.$Compilation$slot = v;
   return this;
  };
  this.$Compilation = function () {
   return this.$Compilation$slot;
  };
  this.$init$accept16px$ = function (v) {
   this.$accept16px$slot = v;
   return this;
  };
  this.$accept16px = function () {
   return this.$accept16px$slot;
  };
  this.$init$cancel16px$ = function (v) {
   this.$cancel16px$slot = v;
   return this;
  };
  this.$cancel16px = function () {
   return this.$cancel16px$slot;
  };
  this.$init$disclosureClosedImage$ = function (v) {
   this.$disclosureClosedImage$slot = v;
   return this;
  };
  this.$disclosureClosedImage = function () {
   return this.$disclosureClosedImage$slot;
  };
  this.$init$disclosureTransitionImage$ = function (v) {
   this.$disclosureTransitionImage$slot = v;
   return this;
  };
  this.$disclosureTransitionImage = function () {
   return this.$disclosureTransitionImage$slot;
  };
  this.$init$disclosureOpenImage$ = function (v) {
   this.$disclosureOpenImage$slot = v;
   return this;
  };
  this.$disclosureOpenImage = function () {
   return this.$disclosureOpenImage$slot;
  };
  this.$init$RuntimeForV8WithMirrorBuilders$Platform$ = function (v) {
   this.$RuntimeForV8WithMirrorBuilders$Platform$slot = v;
   return this;
  };
  this.$RuntimeForV8WithMirrorBuilders$Platform = function () {
   return this.$RuntimeForV8WithMirrorBuilders$Platform$slot;
  };
  this.$RuntimeForV8WithMirrorBuilders$Platform$ = function (v) {
   this.$RuntimeForV8WithMirrorBuilders$Platform$slot = v;
   return this;
  };
  this.$RuntimeForV8WithMirrorBuilders$Platform = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for RuntimeForV8WithMirrorBuilders`Platform";
   this.name = "RuntimeForV8WithMirrorBuilders`Platform";
   this.header = 5;
   this.slots = [
    new SM("namespace", false, false),
    new SM("kernel", false, false),
    new SM("actors", false, false),
    new SM("aliens", false, false),
    new SM("collections", false, false),
    new SM("graphics", false, false),
    new SM("hopscotch", false, false),
    new SM("mirrors", false, false),
    new SM("streams", false, false)
   ];
   this.methods = [
    new MM("superInit`RuntimeForV8WithMirrorBuilders`Platform", true, 6),
    new MM("instance`initializer", true, 7),
    new MM("Exception", false, 8),
    new MM("Message", false, 9),
    new MM("MessageNotUnderstood", false, 10),
    new MM("UnhandledError", false, 11),
    new MM("squeak", false, 12),
    new MM("init`namespace:", true, 0),
    new MM("namespace", true, 0),
    new MM("init`kernel:", true, 0),
    new MM("kernel", true, 0),
    new MM("init`actors:", true, 0),
    new MM("actors", true, 0),
    new MM("init`aliens:", true, 0),
    new MM("aliens", true, 0),
    new MM("init`collections:", true, 0),
    new MM("collections", true, 0),
    new MM("init`graphics:", true, 0),
    new MM("graphics", true, 0),
    new MM("init`hopscotch:", true, 0),
    new MM("hopscotch", true, 0),
    new MM("init`mirrors:", true, 0),
    new MM("mirrors", true, 0),
    new MM("init`streams:", true, 0),
    new MM("streams", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$RuntimeForV8WithMirrorBuilders$Platform = function ($vmmirror) {
    var self = this;
    self.$super$RuntimeForV8WithMirrorBuilders$Platform$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($vmmirror) {
    var self = this;
    self._$superInit$RuntimeForV8WithMirrorBuilders$Platform($vmmirror);
    self._$init$namespace$(self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]);
    self._$init$kernel$(self._$Object().$enclosingObject());
    self._$init$actors$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Actors().$usingPlatform$(self);
    }));
    self._$init$aliens$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Aliens().$usingPlatform$(self);
    }));
    self._$init$collections$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Collections().$usingPlatform$(self);
    }));
    self._$init$graphics$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Graphics().$usingPlatform$(self);
    }));
    self._$init$hopscotch$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Hopscotch().$usingPlatform$(self);
    }));
    self._$init$mirrors$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Mirrors().$usingPlatform$vmMirror$(self, $vmmirror);
    }));
    self._$init$streams$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform[0]._$Streams().$usingPlatform$(self);
    }));
    self._$kernel().$platform$(self);
    self._$actors().$yourself();
    return self;
   };
   this.$Exception = function () {
    var self = this;
    return self._$Error();
   };
   this.$Message = function () {
    var self = this;
    return self._$kernel().$Message();
   };
   this.$MessageNotUnderstood = function () {
    var self = this;
    return self._$kernel().$MessageNotUnderstood();
   };
   this.$UnhandledError = function () {
    var self = this;
    return self._$Error();
   };
   this.$squeak = function () {
    var self = this;
    return self;
   };
   this.$init$namespace$ = function (v) {
    this.$namespace$slot = v;
    return this;
   };
   this.$namespace = function () {
    return this.$namespace$slot;
   };
   this.$init$kernel$ = function (v) {
    this.$kernel$slot = v;
    return this;
   };
   this.$kernel = function () {
    return this.$kernel$slot;
   };
   this.$init$actors$ = function (v) {
    this.$actors$slot = v;
    return this;
   };
   this.$actors = function () {
    return this.$actors$slot;
   };
   this.$init$aliens$ = function (v) {
    this.$aliens$slot = v;
    return this;
   };
   this.$aliens = function () {
    return this.$aliens$slot;
   };
   this.$init$collections$ = function (v) {
    this.$collections$slot = v;
    return this;
   };
   this.$collections = function () {
    return this.$collections$slot;
   };
   this.$init$graphics$ = function (v) {
    this.$graphics$slot = v;
    return this;
   };
   this.$graphics = function () {
    return this.$graphics$slot;
   };
   this.$init$hopscotch$ = function (v) {
    this.$hopscotch$slot = v;
    return this;
   };
   this.$hopscotch = function () {
    return this.$hopscotch$slot;
   };
   this.$init$mirrors$ = function (v) {
    this.$mirrors$slot = v;
    return this;
   };
   this.$mirrors = function () {
    return this.$mirrors$slot;
   };
   this.$init$streams$ = function (v) {
    this.$streams$slot = v;
    return this;
   };
   this.$streams = function () {
    return this.$streams$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for RuntimeForV8WithMirrorBuilders`Platform";
     this._$superInit$RuntimeForV8WithMirrorBuilders$Platform = $.$superInit$RuntimeForV8WithMirrorBuilders$Platform;
     this.$superInit$RuntimeForV8WithMirrorBuilders$Platform = dnuCatcher("$superInit$RuntimeForV8WithMirrorBuilders$Platform");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$Exception = this._$Exception = $.$Exception;
     this.$Message = this._$Message = $.$Message;
     this.$MessageNotUnderstood = this._$MessageNotUnderstood = $.$MessageNotUnderstood;
     this.$UnhandledError = this._$UnhandledError = $.$UnhandledError;
     this.$squeak = this._$squeak = $.$squeak;
     this.$init$namespace$ = this._$init$namespace$ = $.$init$namespace$;
     this.$namespace = this._$namespace = $.$namespace;
     this.$init$kernel$ = this._$init$kernel$ = $.$init$kernel$;
     this.$kernel = this._$kernel = $.$kernel;
     this.$init$actors$ = this._$init$actors$ = $.$init$actors$;
     this.$actors = this._$actors = $.$actors;
     this.$init$aliens$ = this._$init$aliens$ = $.$init$aliens$;
     this.$aliens = this._$aliens = $.$aliens;
     this.$init$collections$ = this._$init$collections$ = $.$init$collections$;
     this.$collections = this._$collections = $.$collections;
     this.$init$graphics$ = this._$init$graphics$ = $.$init$graphics$;
     this.$graphics = this._$graphics = $.$graphics;
     this.$init$hopscotch$ = this._$init$hopscotch$ = $.$init$hopscotch$;
     this.$hopscotch = this._$hopscotch = $.$hopscotch;
     this.$init$mirrors$ = this._$init$mirrors$ = $.$init$mirrors$;
     this.$mirrors = this._$mirrors = $.$mirrors;
     this.$init$streams$ = this._$init$streams$ = $.$init$streams$;
     this.$streams = this._$streams = $.$streams;
     this.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform = enclosingObjects;
     this.$super$RuntimeForV8WithMirrorBuilders$Platform$slot = runtimeSuperclass;
     this["RuntimeForV8WithMirrorBuilders`Platform"] = function () {
      superBasicNew.call(this);
      this.$namespace$slot = nil;
      this.$kernel$slot = nil;
      this.$actors$slot = nil;
      this.$aliens$slot = nil;
      this.$collections$slot = nil;
      this.$graphics$slot = nil;
      this.$hopscotch$slot = nil;
      this.$mirrors$slot = nil;
      this.$streams$slot = nil;
     };
     this.basicNew = this["RuntimeForV8WithMirrorBuilders`Platform"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for RuntimeForV8WithMirrorBuilders`Platform";
    this.slots = [];
    this.methods = [new MM("usingVmMirror:", true, 0)];
    this.nestedClasses = [];
    this.$usingVmMirror$ = function ($vmmirror) {
     return (new this.nonMeta.basicNew()).$instance$initializer($vmmirror);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for RuntimeForV8WithMirrorBuilders`Platform";
      this.$usingVmMirror$ = this._$usingVmMirror$ = $.$usingVmMirror$;
      this.$enclosingObjects$RuntimeForV8WithMirrorBuilders$Platform = enclosingObjects;
      this.$super$RuntimeForV8WithMirrorBuilders$Platform = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$RuntimeForV8WithMirrorBuilders$Platform.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for RuntimeForV8WithMirrorBuilders";
    this._$superInit$RuntimeForV8WithMirrorBuilders = $.$superInit$RuntimeForV8WithMirrorBuilders;
    this.$superInit$RuntimeForV8WithMirrorBuilders = dnuCatcher("$superInit$RuntimeForV8WithMirrorBuilders");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$using$ = this._$using$ = $.$using$;
    this._$Platform = $.$Platform;
    this.$Platform = dnuCatcher("$Platform");
    this._$init$Kernel$ = $.$init$Kernel$;
    this.$init$Kernel$ = dnuCatcher("$init$Kernel$");
    this._$Kernel = $.$Kernel;
    this.$Kernel = dnuCatcher("$Kernel");
    this._$init$Actors$ = $.$init$Actors$;
    this.$init$Actors$ = dnuCatcher("$init$Actors$");
    this._$Actors = $.$Actors;
    this.$Actors = dnuCatcher("$Actors");
    this._$init$Aliens$ = $.$init$Aliens$;
    this.$init$Aliens$ = dnuCatcher("$init$Aliens$");
    this._$Aliens = $.$Aliens;
    this.$Aliens = dnuCatcher("$Aliens");
    this._$init$Collections$ = $.$init$Collections$;
    this.$init$Collections$ = dnuCatcher("$init$Collections$");
    this._$Collections = $.$Collections;
    this.$Collections = dnuCatcher("$Collections");
    this._$init$Graphics$ = $.$init$Graphics$;
    this.$init$Graphics$ = dnuCatcher("$init$Graphics$");
    this._$Graphics = $.$Graphics;
    this.$Graphics = dnuCatcher("$Graphics");
    this.$init$Hopscotch$ = this._$init$Hopscotch$ = $.$init$Hopscotch$;
    this.$Hopscotch = this._$Hopscotch = $.$Hopscotch;
    this._$init$Mirrors$ = $.$init$Mirrors$;
    this.$init$Mirrors$ = dnuCatcher("$init$Mirrors$");
    this._$Mirrors = $.$Mirrors;
    this.$Mirrors = dnuCatcher("$Mirrors");
    this.$init$MirrorGroups$ = this._$init$MirrorGroups$ = $.$init$MirrorGroups$;
    this.$MirrorGroups = this._$MirrorGroups = $.$MirrorGroups;
    this._$init$Streams$ = $.$init$Streams$;
    this.$init$Streams$ = dnuCatcher("$init$Streams$");
    this._$Streams = $.$Streams;
    this.$Streams = dnuCatcher("$Streams");
    this.$init$CombinatorialParsing$ = this._$init$CombinatorialParsing$ = $.$init$CombinatorialParsing$;
    this.$CombinatorialParsing = this._$CombinatorialParsing = $.$CombinatorialParsing;
    this.$init$NewspeakGrammar$ = this._$init$NewspeakGrammar$ = $.$init$NewspeakGrammar$;
    this.$NewspeakGrammar = this._$NewspeakGrammar = $.$NewspeakGrammar;
    this.$init$NewspeakASTs$ = this._$init$NewspeakASTs$ = $.$init$NewspeakASTs$;
    this.$NewspeakASTs = this._$NewspeakASTs = $.$NewspeakASTs;
    this.$init$NewspeakParsing$ = this._$init$NewspeakParsing$ = $.$init$NewspeakParsing$;
    this.$NewspeakParsing = this._$NewspeakParsing = $.$NewspeakParsing;
    this.$init$JavascriptGeneration$ = this._$init$JavascriptGeneration$ = $.$init$JavascriptGeneration$;
    this.$JavascriptGeneration = this._$JavascriptGeneration = $.$JavascriptGeneration;
    this.$init$Compilation$ = this._$init$Compilation$ = $.$init$Compilation$;
    this.$Compilation = this._$Compilation = $.$Compilation;
    this.$init$accept16px$ = this._$init$accept16px$ = $.$init$accept16px$;
    this.$accept16px = this._$accept16px = $.$accept16px;
    this.$init$cancel16px$ = this._$init$cancel16px$ = $.$init$cancel16px$;
    this.$cancel16px = this._$cancel16px = $.$cancel16px;
    this.$init$disclosureClosedImage$ = this._$init$disclosureClosedImage$ = $.$init$disclosureClosedImage$;
    this.$disclosureClosedImage = this._$disclosureClosedImage = $.$disclosureClosedImage;
    this.$init$disclosureTransitionImage$ = this._$init$disclosureTransitionImage$ = $.$init$disclosureTransitionImage$;
    this.$disclosureTransitionImage = this._$disclosureTransitionImage = $.$disclosureTransitionImage;
    this.$init$disclosureOpenImage$ = this._$init$disclosureOpenImage$ = $.$init$disclosureOpenImage$;
    this.$disclosureOpenImage = this._$disclosureOpenImage = $.$disclosureOpenImage;
    this.$init$RuntimeForV8WithMirrorBuilders$Platform$ = this._$init$RuntimeForV8WithMirrorBuilders$Platform$ = $.$init$RuntimeForV8WithMirrorBuilders$Platform$;
    this.$RuntimeForV8WithMirrorBuilders$Platform = this._$RuntimeForV8WithMirrorBuilders$Platform = $.$RuntimeForV8WithMirrorBuilders$Platform;
    this.$RuntimeForV8WithMirrorBuilders$Platform$ = this._$RuntimeForV8WithMirrorBuilders$Platform$ = $.$RuntimeForV8WithMirrorBuilders$Platform$;
    this.$enclosingObjects$RuntimeForV8WithMirrorBuilders = enclosingObjects;
    this.$super$RuntimeForV8WithMirrorBuilders$slot = runtimeSuperclass;
    this.RuntimeForV8WithMirrorBuilders = function () {
     superBasicNew.call(this);
     this.$Kernel$slot = nil;
     this.$Actors$slot = nil;
     this.$Aliens$slot = nil;
     this.$Collections$slot = nil;
     this.$Graphics$slot = nil;
     this.$Hopscotch$slot = nil;
     this.$Mirrors$slot = nil;
     this.$MirrorGroups$slot = nil;
     this.$Streams$slot = nil;
     this.$CombinatorialParsing$slot = nil;
     this.$NewspeakGrammar$slot = nil;
     this.$NewspeakASTs$slot = nil;
     this.$NewspeakParsing$slot = nil;
     this.$JavascriptGeneration$slot = nil;
     this.$Compilation$slot = nil;
     this.$accept16px$slot = nil;
     this.$cancel16px$slot = nil;
     this.$disclosureClosedImage$slot = nil;
     this.$disclosureTransitionImage$slot = nil;
     this.$disclosureOpenImage$slot = nil;
     this.$RuntimeForV8WithMirrorBuilders$Platform$slot = nil;
    };
    this.basicNew = this.RuntimeForV8WithMirrorBuilders;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for RuntimeForV8WithMirrorBuilders";
   this.slots = [];
   this.methods = [new MM("packageUsing:", true, 0)];
   this.nestedClasses = [];
   this.$packageUsing$ = function ($manifest) {
    return (new this.nonMeta.basicNew()).$instance$initializer($manifest);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for RuntimeForV8WithMirrorBuilders";
     this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
     this.$enclosingObjects$RuntimeForV8WithMirrorBuilders = enclosingObjects;
     this.$super$RuntimeForV8WithMirrorBuilders = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$KernelForV8 = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for KernelForV8";
  this.name = "KernelForV8";
  this.header = 13;
  this.slots = [
   new SM("vmmirror", false, false),
   new SM("platform", true, false),
   new SM("KernelForV8`Array", true, true),
   new SM("KernelForV8`Block", true, true),
   new SM("KernelForV8`Boolean", true, true),
   new SM("KernelForV8`Class", true, true),
   new SM("KernelForV8`Error", true, true),
   new SM("KernelForV8`Future", true, true),
   new SM("KernelForV8`Message", true, true),
   new SM("KernelForV8`MessageNotUnderstood", true, true),
   new SM("KernelForV8`Metaclass", true, true),
   new SM("KernelForV8`Mixin", true, true),
   new SM("KernelForV8`Number", true, true),
   new SM("KernelForV8`Object", true, true),
   new SM("KernelForV8`Stopwatch", true, true),
   new SM("KernelForV8`String", true, true),
   new SM("KernelForV8`UndefinedObject", true, true)
  ];
  this.methods = [
   new MM("superInit`KernelForV8", true, 14),
   new MM("instance`initializer", true, 15),
   new MM("MutableString", false, 16),
   new MM("augment:withPropertiesOf:", false, 17),
   new MM("augmentPrototypes", false, 18),
   new MM("classOf:", false, 19),
   new MM("Array", true, 0),
   new MM("Block", true, 0),
   new MM("Boolean", true, 0),
   new MM("Class", true, 0),
   new MM("Error", true, 0),
   new MM("Future", true, 0),
   new MM("Message", true, 0),
   new MM("MessageNotUnderstood", true, 0),
   new MM("Metaclass", true, 0),
   new MM("Mixin", true, 0),
   new MM("Number", true, 0),
   new MM("Object", true, 0),
   new MM("Stopwatch", true, 0),
   new MM("String", true, 0),
   new MM("UndefinedObject", true, 0),
   new MM("init`vmmirror:", true, 0),
   new MM("vmmirror", true, 0),
   new MM("init`platform:", true, 0),
   new MM("platform", true, 0),
   new MM("platform:", true, 0),
   new MM("init`KernelForV8`Array:", true, 0),
   new MM("KernelForV8`Array", true, 0),
   new MM("KernelForV8`Array:", true, 0),
   new MM("init`KernelForV8`Block:", true, 0),
   new MM("KernelForV8`Block", true, 0),
   new MM("KernelForV8`Block:", true, 0),
   new MM("init`KernelForV8`Boolean:", true, 0),
   new MM("KernelForV8`Boolean", true, 0),
   new MM("KernelForV8`Boolean:", true, 0),
   new MM("init`KernelForV8`Class:", true, 0),
   new MM("KernelForV8`Class", true, 0),
   new MM("KernelForV8`Class:", true, 0),
   new MM("init`KernelForV8`Error:", true, 0),
   new MM("KernelForV8`Error", true, 0),
   new MM("KernelForV8`Error:", true, 0),
   new MM("init`KernelForV8`Future:", true, 0),
   new MM("KernelForV8`Future", true, 0),
   new MM("KernelForV8`Future:", true, 0),
   new MM("init`KernelForV8`Message:", true, 0),
   new MM("KernelForV8`Message", true, 0),
   new MM("KernelForV8`Message:", true, 0),
   new MM("init`KernelForV8`MessageNotUnderstood:", true, 0),
   new MM("KernelForV8`MessageNotUnderstood", true, 0),
   new MM("KernelForV8`MessageNotUnderstood:", true, 0),
   new MM("init`KernelForV8`Metaclass:", true, 0),
   new MM("KernelForV8`Metaclass", true, 0),
   new MM("KernelForV8`Metaclass:", true, 0),
   new MM("init`KernelForV8`Mixin:", true, 0),
   new MM("KernelForV8`Mixin", true, 0),
   new MM("KernelForV8`Mixin:", true, 0),
   new MM("init`KernelForV8`Number:", true, 0),
   new MM("KernelForV8`Number", true, 0),
   new MM("KernelForV8`Number:", true, 0),
   new MM("init`KernelForV8`Object:", true, 0),
   new MM("KernelForV8`Object", true, 0),
   new MM("KernelForV8`Object:", true, 0),
   new MM("init`KernelForV8`Stopwatch:", true, 0),
   new MM("KernelForV8`Stopwatch", true, 0),
   new MM("KernelForV8`Stopwatch:", true, 0),
   new MM("init`KernelForV8`String:", true, 0),
   new MM("KernelForV8`String", true, 0),
   new MM("KernelForV8`String:", true, 0),
   new MM("init`KernelForV8`UndefinedObject:", true, 0),
   new MM("KernelForV8`UndefinedObject", true, 0),
   new MM("KernelForV8`UndefinedObject:", true, 0)
  ];
  this.nestedClasses = [
   "KernelForV8`Array",
   "KernelForV8`Block",
   "KernelForV8`Boolean",
   "KernelForV8`Class",
   "KernelForV8`Error",
   "KernelForV8`Future",
   "KernelForV8`Message",
   "KernelForV8`MessageNotUnderstood",
   "KernelForV8`Metaclass",
   "KernelForV8`Mixin",
   "KernelForV8`Number",
   "KernelForV8`Object",
   "KernelForV8`Stopwatch",
   "KernelForV8`String",
   "KernelForV8`UndefinedObject"
  ];
  this.applications = [];
  this.$superInit$KernelForV8 = function ($vmm) {
   var self = this;
   self.$super$KernelForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($vmm) {
   var self = this;
   self._$superInit$KernelForV8($vmm);
   self._$init$vmmirror$($vmm);
   return self;
  };
  this.$MutableString = function () {
   var self = this;
   "BOGUS";
   return self._$String();
  };
  this.$augment$withPropertiesOf$ = function ($prototype, $runtimeClass) {
   var self = this;
   var $keys = nil;
   $keys = Object.keys($runtimeClass);
   $keys.forEach(function (key) {
    $prototype[key] = $runtimeClass[key];
   });
   return self;
  };
  this.$augmentPrototypes = function () {
   var self = this;
   installDnuHandlersOn(Object.prototype);
   self._$augment$withPropertiesOf$(Array.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Array.prototype, self._$Array().runtimeClass);
   self._$augment$withPropertiesOf$(Boolean.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Boolean.prototype, self._$Boolean().runtimeClass);
   self._$augment$withPropertiesOf$(Function.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Function.prototype, self._$Block().runtimeClass);
   self._$augment$withPropertiesOf$(Number.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Number.prototype, self._$Number().runtimeClass);
   self._$augment$withPropertiesOf$(String.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(String.prototype, self._$String().runtimeClass);
   return self;
  };
  this.$classOf$ = function (self, $object) {
   if (typeof $object === "string") {
    return self._$String();
   } else {
    nil;
   };
   if (typeof $object === "number") {
    return self._$Number();
   } else {
    nil;
   };
   if (typeof $object === "boolean") {
    return self._$Boolean();
   } else {
    nil;
   };
   if (typeof $object === "function") {
    return self._$Block();
   } else {
    nil;
   };
   if ($object instanceof Array) {
    return self._$Array();
   } else {
    nil;
   };
   return $object.newspeakClass;
  };
  this.$Array = function () {
   if (nil === this.$KernelForV8$Array$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Array;
    this.$KernelForV8$Array$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Array$slot;
  };
  this.$Block = function () {
   if (nil === this.$KernelForV8$Block$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Block;
    this.$KernelForV8$Block$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Block$slot;
  };
  this.$Boolean = function () {
   if (nil === this.$KernelForV8$Boolean$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Boolean;
    this.$KernelForV8$Boolean$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Boolean$slot;
  };
  this.$Class = function () {
   if (nil === this.$KernelForV8$Class$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Class;
    this.$KernelForV8$Class$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Class$slot;
  };
  this.$Error = function () {
   if (nil === this.$KernelForV8$Error$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Error;
    this.$KernelForV8$Error$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Error$slot;
  };
  this.$Future = function () {
   if (nil === this.$KernelForV8$Future$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Future;
    this.$KernelForV8$Future$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Future$slot;
  };
  this.$Message = function () {
   if (nil === this.$KernelForV8$Message$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Message;
    this.$KernelForV8$Message$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Message$slot;
  };
  this.$MessageNotUnderstood = function () {
   if (nil === this.$KernelForV8$MessageNotUnderstood$slot) {
    var self = this;
    var superclass = self._$Error();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$MessageNotUnderstood;
    this.$KernelForV8$MessageNotUnderstood$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$MessageNotUnderstood$slot;
  };
  this.$Metaclass = function () {
   if (nil === this.$KernelForV8$Metaclass$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Metaclass;
    this.$KernelForV8$Metaclass$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Metaclass$slot;
  };
  this.$Mixin = function () {
   if (nil === this.$KernelForV8$Mixin$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Mixin;
    this.$KernelForV8$Mixin$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Mixin$slot;
  };
  this.$Number = function () {
   if (nil === this.$KernelForV8$Number$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Number;
    this.$KernelForV8$Number$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Number$slot;
  };
  this.$Object = function () {
   if (nil === this.$KernelForV8$Object$slot) {
    var self = this;
    var superclass = self._$ImplementationBase();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Object;
    this.$KernelForV8$Object$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Object$slot;
  };
  this.$Stopwatch = function () {
   if (nil === this.$KernelForV8$Stopwatch$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$Stopwatch;
    this.$KernelForV8$Stopwatch$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Stopwatch$slot;
  };
  this.$String = function () {
   if (nil === this.$KernelForV8$String$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$String;
    this.$KernelForV8$String$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$String$slot;
  };
  this.$UndefinedObject = function () {
   if (nil === this.$KernelForV8$UndefinedObject$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    var mixin = $.$KernelForV8$UndefinedObject;
    this.$KernelForV8$UndefinedObject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$UndefinedObject$slot;
  };
  this.$init$vmmirror$ = function (v) {
   this.$vmmirror$slot = v;
   return this;
  };
  this.$vmmirror = function () {
   return this.$vmmirror$slot;
  };
  this.$init$platform$ = function (v) {
   this.$platform$slot = v;
   return this;
  };
  this.$platform = function () {
   return this.$platform$slot;
  };
  this.$platform$ = function (v) {
   this.$platform$slot = v;
   return this;
  };
  this.$init$KernelForV8$Array$ = function (v) {
   this.$KernelForV8$Array$slot = v;
   return this;
  };
  this.$KernelForV8$Array = function () {
   return this.$KernelForV8$Array$slot;
  };
  this.$KernelForV8$Array$ = function (v) {
   this.$KernelForV8$Array$slot = v;
   return this;
  };
  this.$init$KernelForV8$Block$ = function (v) {
   this.$KernelForV8$Block$slot = v;
   return this;
  };
  this.$KernelForV8$Block = function () {
   return this.$KernelForV8$Block$slot;
  };
  this.$KernelForV8$Block$ = function (v) {
   this.$KernelForV8$Block$slot = v;
   return this;
  };
  this.$init$KernelForV8$Boolean$ = function (v) {
   this.$KernelForV8$Boolean$slot = v;
   return this;
  };
  this.$KernelForV8$Boolean = function () {
   return this.$KernelForV8$Boolean$slot;
  };
  this.$KernelForV8$Boolean$ = function (v) {
   this.$KernelForV8$Boolean$slot = v;
   return this;
  };
  this.$init$KernelForV8$Class$ = function (v) {
   this.$KernelForV8$Class$slot = v;
   return this;
  };
  this.$KernelForV8$Class = function () {
   return this.$KernelForV8$Class$slot;
  };
  this.$KernelForV8$Class$ = function (v) {
   this.$KernelForV8$Class$slot = v;
   return this;
  };
  this.$init$KernelForV8$Error$ = function (v) {
   this.$KernelForV8$Error$slot = v;
   return this;
  };
  this.$KernelForV8$Error = function () {
   return this.$KernelForV8$Error$slot;
  };
  this.$KernelForV8$Error$ = function (v) {
   this.$KernelForV8$Error$slot = v;
   return this;
  };
  this.$init$KernelForV8$Future$ = function (v) {
   this.$KernelForV8$Future$slot = v;
   return this;
  };
  this.$KernelForV8$Future = function () {
   return this.$KernelForV8$Future$slot;
  };
  this.$KernelForV8$Future$ = function (v) {
   this.$KernelForV8$Future$slot = v;
   return this;
  };
  this.$init$KernelForV8$Message$ = function (v) {
   this.$KernelForV8$Message$slot = v;
   return this;
  };
  this.$KernelForV8$Message = function () {
   return this.$KernelForV8$Message$slot;
  };
  this.$KernelForV8$Message$ = function (v) {
   this.$KernelForV8$Message$slot = v;
   return this;
  };
  this.$init$KernelForV8$MessageNotUnderstood$ = function (v) {
   this.$KernelForV8$MessageNotUnderstood$slot = v;
   return this;
  };
  this.$KernelForV8$MessageNotUnderstood = function () {
   return this.$KernelForV8$MessageNotUnderstood$slot;
  };
  this.$KernelForV8$MessageNotUnderstood$ = function (v) {
   this.$KernelForV8$MessageNotUnderstood$slot = v;
   return this;
  };
  this.$init$KernelForV8$Metaclass$ = function (v) {
   this.$KernelForV8$Metaclass$slot = v;
   return this;
  };
  this.$KernelForV8$Metaclass = function () {
   return this.$KernelForV8$Metaclass$slot;
  };
  this.$KernelForV8$Metaclass$ = function (v) {
   this.$KernelForV8$Metaclass$slot = v;
   return this;
  };
  this.$init$KernelForV8$Mixin$ = function (v) {
   this.$KernelForV8$Mixin$slot = v;
   return this;
  };
  this.$KernelForV8$Mixin = function () {
   return this.$KernelForV8$Mixin$slot;
  };
  this.$KernelForV8$Mixin$ = function (v) {
   this.$KernelForV8$Mixin$slot = v;
   return this;
  };
  this.$init$KernelForV8$Number$ = function (v) {
   this.$KernelForV8$Number$slot = v;
   return this;
  };
  this.$KernelForV8$Number = function () {
   return this.$KernelForV8$Number$slot;
  };
  this.$KernelForV8$Number$ = function (v) {
   this.$KernelForV8$Number$slot = v;
   return this;
  };
  this.$init$KernelForV8$Object$ = function (v) {
   this.$KernelForV8$Object$slot = v;
   return this;
  };
  this.$KernelForV8$Object = function () {
   return this.$KernelForV8$Object$slot;
  };
  this.$KernelForV8$Object$ = function (v) {
   this.$KernelForV8$Object$slot = v;
   return this;
  };
  this.$init$KernelForV8$Stopwatch$ = function (v) {
   this.$KernelForV8$Stopwatch$slot = v;
   return this;
  };
  this.$KernelForV8$Stopwatch = function () {
   return this.$KernelForV8$Stopwatch$slot;
  };
  this.$KernelForV8$Stopwatch$ = function (v) {
   this.$KernelForV8$Stopwatch$slot = v;
   return this;
  };
  this.$init$KernelForV8$String$ = function (v) {
   this.$KernelForV8$String$slot = v;
   return this;
  };
  this.$KernelForV8$String = function () {
   return this.$KernelForV8$String$slot;
  };
  this.$KernelForV8$String$ = function (v) {
   this.$KernelForV8$String$slot = v;
   return this;
  };
  this.$init$KernelForV8$UndefinedObject$ = function (v) {
   this.$KernelForV8$UndefinedObject$slot = v;
   return this;
  };
  this.$KernelForV8$UndefinedObject = function () {
   return this.$KernelForV8$UndefinedObject$slot;
  };
  this.$KernelForV8$UndefinedObject$ = function (v) {
   this.$KernelForV8$UndefinedObject$slot = v;
   return this;
  };
  this.$KernelForV8$Array = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Array";
   this.name = "KernelForV8`Array";
   this.header = 20;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Array", true, 21),
    new MM("instance`initializer", true, 22),
    new MM(",", false, 23),
    new MM("=", false, 24),
    new MM("asArray", false, 25),
    new MM("asOrderedCollection", false, 26),
    new MM("at:", false, 27),
    new MM("at:put:", false, 28),
    new MM("binarySearchFor:between:and:toCompare:", false, 29),
    new MM("class", false, 30),
    new MM("collect:", false, 31),
    new MM("copyFrom:to:", false, 32),
    new MM("copyWith:", false, 33),
    new MM("copyWithSize:", false, 34),
    new MM("do:", false, 35),
    new MM("do:separatedBy:", false, 36),
    new MM("doWithIndex:", false, 37),
    new MM("first", false, 38),
    new MM("includes:", false, 39),
    new MM("inject:into:", false, 40),
    new MM("isArray", false, 41),
    new MM("isCollection", false, 42),
    new MM("isEmpty", false, 43),
    new MM("keysAndValuesDo:", false, 44),
    new MM("last", false, 45),
    new MM("printString", false, 46),
    new MM("replaceFrom:to:with:", false, 47),
    new MM("replaceFrom:to:with:startingAt:", false, 48),
    new MM("select:", false, 49),
    new MM("size", false, 50),
    new MM("sort:", false, 51)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Array = function () {
    var self = this;
    self.$super$KernelForV8$Array$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Array();
    return self;
   };
   this.$$comma = function ($otherSequence) {
    var self = this;
    return self.concat($otherSequence.$asArray());
   };
   this.$$equal = function ($other) {
    var self = this;
    if (self === $other) {
     return true;
    } else {
     nil;
    };
    if (!$other.$isArray()) {
     return false;
    } else {
     nil;
    };
    if (!self._$size().$$equal($other.$size())) {
     return false;
    } else {
     nil;
    };
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      if (!self._$at$($index).$$equal($other.$at$($index))) {
       return false;
      } else {
       nil;
      };
      $index = (1).$$plus($index);
     };
    };
    return true;
   };
   this.$asArray = function () {
    var self = this;
    return self;
   };
   this.$asOrderedCollection = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Array[0]._$platform().$collections().$OrderedCollection().$withAll$(self);
   };
   this.$at$ = function ($index) {
    var self = this;
    return this[$index - 1];
   };
   this.$at$put$ = function ($index, $value) {
    var self = this;
    return this[$index - 1] = $value;
   };
   this.$binarySearchFor$between$and$toCompare$ = function ($el, $start, $end, $compare) {
    var self = this;
    var $low = nil;
    var $high = nil;
    $low = $start;
    $high = $end;
    {
     nil;
     for (; $low.$$less$equal($high); ) {
      var $mid = nil;
      $mid = ($low + $high).$$over$over(2);
      if ($compare.$value$value$(self._$at$($mid), $el)) {
       $low = $mid + 1;
      } else {
       $high = $mid - 1;
      };
     };
    };
    return $low;
   };
   this.$class = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Array[0]._$Array();
   };
   this.$collect$ = function ($block) {
    var self = this;
    return self.map($block);
   };
   this.$copyFrom$to$ = function ($start, $end) {
    var self = this;
    return self.slice($start - 1, $end);
   };
   this.$copyWith$ = function ($extraElement) {
    var self = this;
    var $newSize = nil;
    var $a = nil;
    $newSize = self._$size() + 1;
    $a = self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($newSize).$replaceFrom$to$with$(1, self._$size(), self);
    $a.$at$put$($newSize, $extraElement);
    return $a;
   };
   this.$copyWithSize$ = function ($s) {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($s).$replaceFrom$to$with$(1, $s.$min$(self._$size()), self);
   };
   this.$do$ = function ($block) {
    var self = this;
    self.forEach($block);
    return self;
   };
   this.$do$separatedBy$ = function ($block, $betweenBlock) {
    var self = this;
    var $firstTime = nil;
    $firstTime = true;
    self._$do$(function ($element) {
     if ($firstTime) {
      $firstTime = false;
     } else {
      $betweenBlock.$value();
     };
     return $block.$value$($element);
    });
    return self;
   };
   this.$doWithIndex$ = function ($block) {
    var self = this;
    {
     var $$limit = nil;
     var $n = nil;
     nil;
     $n = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($n); ) {
      $block.$value$value$(self._$at$($n), $n);
      $n = (1).$$plus($n);
     };
    };
    return self;
   };
   this.$first = function () {
    var self = this;
    return self._$at$(1);
   };
   this.$includes$ = function ($element) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $each.$$equal($element).$ifTrue$(function () {
       {
        NLR.value = true;
        throw NLR;
       };
      });
     });
     return false;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$inject$into$ = function ($initialValue, $accumulator) {
    var self = this;
    return self.reduce($accumulator, $initialValue);
   };
   this.$isArray = function () {
    var self = this;
    return true;
   };
   this.$isCollection = function () {
    var self = this;
    return true;
   };
   this.$isEmpty = function () {
    var self = this;
    return 0 === self._$size();
   };
   this.$keysAndValuesDo$ = function ($binaryBlock) {
    var self = this;
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $binaryBlock.$value$value$($index, self._$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$last = function () {
    var self = this;
    return self._$at$(self._$size());
   };
   this.$printString = function () {
    var self = this;
    var $x = nil;
    $x = "{";
    "FLAG";
    self._$do$separatedBy$(function ($ea) {
     return $x = $x.$$comma($ea.$printString());
    }, function () {
     return $x = $x.$$comma(". ");
    });
    return $x.$$comma("}");
   };
   this.$replaceFrom$to$with$ = function ($start, $stop, $replacement) {
    var self = this;
    if (!$replacement.$size().$$equal(($stop - $start) + 1)) {
     self._$error$("Size of replacement doesnt match");
    } else {
     nil;
    };
    return self._$replaceFrom$to$with$startingAt$($start, $stop, $replacement, 1);
   };
   this.$replaceFrom$to$with$startingAt$ = function ($start, $stop, $replacement, $repStart) {
    var self = this;
    var $index = nil;
    var $repOff = nil;
    $repOff = $repStart - $start;
    $index = $start - 1;
    {
     nil;
     for (; ($index = $index + 1).$$less$equal($stop); ) {
      self._$at$put$($index, $replacement.$at$($repOff + $index));
     };
    };
    return self;
   };
   this.$select$ = function ($block) {
    var self = this;
    return self.filter($block);
   };
   this.$size = function () {
    var self = this;
    return this.length;
   };
   this.$sort$ = function ($binaryBlock) {
    var self = this;
    self.sort(function (a, b) {
     return $binaryBlock.$value$value$(a, b).$ifTrue$ifFalse$(function () {
      return -1;
     }, function () {
      return 1;
     });
    });
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Array";
     this._$superInit$KernelForV8$Array = $.$superInit$KernelForV8$Array;
     this.$superInit$KernelForV8$Array = dnuCatcher("$superInit$KernelForV8$Array");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$comma = this._$$comma = $.$$comma;
     this.$$equal = this._$$equal = $.$$equal;
     this.$asArray = this._$asArray = $.$asArray;
     this.$asOrderedCollection = this._$asOrderedCollection = $.$asOrderedCollection;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$binarySearchFor$between$and$toCompare$ = this._$binarySearchFor$between$and$toCompare$ = $.$binarySearchFor$between$and$toCompare$;
     this._$class = $.$class;
     this.$class = dnuCatcher("$class");
     this.$collect$ = this._$collect$ = $.$collect$;
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$copyWith$ = this._$copyWith$ = $.$copyWith$;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$do$ = this._$do$ = $.$do$;
     this.$do$separatedBy$ = this._$do$separatedBy$ = $.$do$separatedBy$;
     this.$doWithIndex$ = this._$doWithIndex$ = $.$doWithIndex$;
     this.$first = this._$first = $.$first;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
     this.$isArray = this._$isArray = $.$isArray;
     this.$isCollection = this._$isCollection = $.$isCollection;
     this.$isEmpty = this._$isEmpty = $.$isEmpty;
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this.$last = this._$last = $.$last;
     this.$printString = this._$printString = $.$printString;
     this.$replaceFrom$to$with$ = this._$replaceFrom$to$with$ = $.$replaceFrom$to$with$;
     this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
     this.$select$ = this._$select$ = $.$select$;
     this.$size = this._$size = $.$size;
     this.$sort$ = this._$sort$ = $.$sort$;
     this.$enclosingObjects$KernelForV8$Array = enclosingObjects;
     this.$super$KernelForV8$Array$slot = runtimeSuperclass;
     this["KernelForV8`Array"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Array"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Array";
    this.slots = [];
    this.methods = [
     new MM("uninstantiable", true, 0),
     new MM("new", false, 52),
     new MM("new:", false, 53),
     new MM("new:withAll:", false, 54),
     new MM("with:", false, 55)
    ];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$new = function () {
     var self = this;
     return [];
    };
    this.$new$ = function ($size) {
     var self = this;
     return self._$new$withAll$($size, nil);
    };
    this.$new$withAll$ = function ($size, $initialElement) {
     var self = this;
     var $array = nil;
     var $i = nil;
     $array = new Array($size);
     $i = 0;
     for (; $i < $size; $i++) {
      $array[$i] = $initialElement;
     };
     return $array;
    };
    this.$with$ = function ($element) {
     var self = this;
     return [$element];
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Array";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$new = this._$new = $.$new;
      this.$new$ = this._$new$ = $.$new$;
      this.$new$withAll$ = this._$new$withAll$ = $.$new$withAll$;
      this.$with$ = this._$with$ = $.$with$;
      this.$enclosingObjects$KernelForV8$Array = enclosingObjects;
      this.$super$KernelForV8$Array = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Block = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Block";
   this.name = "KernelForV8`Block";
   this.header = 56;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Block", true, 57),
    new MM("instance`initializer", true, 58),
    new MM("cull:", false, 59),
    new MM("ensure:", false, 60),
    new MM("isBlock", false, 61),
    new MM("numArgs", false, 62),
    new MM("on:do:", false, 63),
    new MM("value", false, 64),
    new MM("value:", false, 65),
    new MM("value:value:", false, 66),
    new MM("value:value:value:", false, 67),
    new MM("valueWithArguments:", false, 68),
    new MM("whileFalse:", false, 69)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Block = function () {
    var self = this;
    self.$super$KernelForV8$Block$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Block();
    return self;
   };
   this.$cull$ = function ($a1) {
    var self = this;
    return this($a1);
   };
   this.$ensure$ = function ($onUnwind) {
    var self = this;
    var $result = nil;
    try {
     $result = self._$value();
    } catch (e) {
     $onUnwind.$value();
     throw e;
    };
    $onUnwind.$value();
    return $result;
   };
   this.$isBlock = function () {
    var self = this;
    return true;
   };
   this.$numArgs = function () {
    var self = this;
    return self.length;
   };
   this.$on$do$ = function ($errorClass, $handler) {
    var self = this;
    var $c = nil;
    try {
     return self._$value();
    } catch (e) {
     for ($c = $0.$classOf$(self.$enclosingObjects$KernelForV8$Block[0], e); $c !== nil; ) {
      if ($c === $errorClass) {
       return $handler.$value$(e);
      };
      $c = $c.$superclass();
     };
     throw e;
    };
    return self;
   };
   this.$value = function () {
    var self = this;
    return this();
   };
   this.$value$ = function ($a1) {
    var self = this;
    return this($a1);
   };
   this.$value$value$ = function ($a1, $a2) {
    var self = this;
    return this($a1, $a2);
   };
   this.$value$value$value$ = function ($a1, $a2, $a3) {
    var self = this;
    return this($a1, $a2, $a3);
   };
   this.$valueWithArguments$ = function ($args) {
    var self = this;
    return this.apply(this, $args);
   };
   this.$whileFalse$ = function ($aBlock) {
    var self = this;
    {
     nil;
     for (; !self._$value(); ) {
      $aBlock.$value();
     };
    };
    return nil;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Block";
     this._$superInit$KernelForV8$Block = $.$superInit$KernelForV8$Block;
     this.$superInit$KernelForV8$Block = dnuCatcher("$superInit$KernelForV8$Block");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cull$ = this._$cull$ = $.$cull$;
     this.$ensure$ = this._$ensure$ = $.$ensure$;
     this.$isBlock = this._$isBlock = $.$isBlock;
     this.$numArgs = this._$numArgs = $.$numArgs;
     this.$on$do$ = this._$on$do$ = $.$on$do$;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$value$value$ = this._$value$value$ = $.$value$value$;
     this.$value$value$value$ = this._$value$value$value$ = $.$value$value$value$;
     this.$valueWithArguments$ = this._$valueWithArguments$ = $.$valueWithArguments$;
     this.$whileFalse$ = this._$whileFalse$ = $.$whileFalse$;
     this.$enclosingObjects$KernelForV8$Block = enclosingObjects;
     this.$super$KernelForV8$Block$slot = runtimeSuperclass;
     this["KernelForV8`Block"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Block"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Block";
    this.slots = [];
    this.methods = [new MM("uninstantiable", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Block";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$Block = enclosingObjects;
      this.$super$KernelForV8$Block = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Boolean = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Boolean";
   this.name = "KernelForV8`Boolean";
   this.header = 70;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Boolean", true, 71),
    new MM("instance`initializer", true, 72),
    new MM("&", false, 73),
    new MM("ifFalse:", false, 74),
    new MM("ifFalse:ifTrue:", false, 75),
    new MM("ifTrue:", false, 76),
    new MM("ifTrue:ifFalse:", false, 77),
    new MM("isBoolean", false, 78),
    new MM("not", false, 79),
    new MM("printString", false, 80),
    new MM("value", false, 81),
    new MM("|", false, 82)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Boolean = function () {
    var self = this;
    self.$super$KernelForV8$Boolean$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Boolean();
    return self;
   };
   this.$$amp = function ($other) {
    var self = this;
    return self && $other;
   };
   this.$ifFalse$ = function ($else) {
    var self = this;
    return (self ? nil : $else());
   };
   this.$ifFalse$ifTrue$ = function ($else, $then) {
    var self = this;
    return (self ? $then() : $else());
   };
   this.$ifTrue$ = function ($onTrue) {
    var self = this;
    return (self ? $onTrue() : nil);
   };
   this.$ifTrue$ifFalse$ = function ($then, $else) {
    var self = this;
    return (self ? $then() : $else());
   };
   this.$isBoolean = function () {
    var self = this;
    return true;
   };
   this.$not = function () {
    var self = this;
    return !self;
   };
   this.$printString = function () {
    var self = this;
    return self._$ifTrue$ifFalse$(function () {
     return "true";
    }, function () {
     return "false";
    });
   };
   this.$value = function () {
    var self = this;
    return self;
   };
   this.$$pipe = function ($other) {
    var self = this;
    return self || $other;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Boolean";
     this._$superInit$KernelForV8$Boolean = $.$superInit$KernelForV8$Boolean;
     this.$superInit$KernelForV8$Boolean = dnuCatcher("$superInit$KernelForV8$Boolean");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$amp = this._$$amp = $.$$amp;
     this.$ifFalse$ = this._$ifFalse$ = $.$ifFalse$;
     this.$ifFalse$ifTrue$ = this._$ifFalse$ifTrue$ = $.$ifFalse$ifTrue$;
     this.$ifTrue$ = this._$ifTrue$ = $.$ifTrue$;
     this.$ifTrue$ifFalse$ = this._$ifTrue$ifFalse$ = $.$ifTrue$ifFalse$;
     this.$isBoolean = this._$isBoolean = $.$isBoolean;
     this.$not = this._$not = $.$not;
     this.$printString = this._$printString = $.$printString;
     this.$value = this._$value = $.$value;
     this.$$pipe = this._$$pipe = $.$$pipe;
     this.$enclosingObjects$KernelForV8$Boolean = enclosingObjects;
     this.$super$KernelForV8$Boolean$slot = runtimeSuperclass;
     this["KernelForV8`Boolean"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Boolean"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Boolean";
    this.slots = [];
    this.methods = [new MM("uninstantiable", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Boolean";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$Boolean = enclosingObjects;
      this.$super$KernelForV8$Boolean = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Class = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Class";
   this.name = "KernelForV8`Class";
   this.header = 83;
   this.slots = [
    new SM("superclass", true, false),
    new SM("mixin", true, false),
    new SM("enclosingObject", true, false),
    new SM("enclosingObjects", true, false),
    new SM("name", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Class", true, 84),
    new MM("instance`initializer", true, 85),
    new MM("isBehavior", false, 86),
    new MM("isMeta", false, 87),
    new MM("mixinApply:", false, 88),
    new MM("simpleName", false, 89),
    new MM("init`superclass:", true, 0),
    new MM("superclass", true, 0),
    new MM("superclass:", true, 0),
    new MM("init`mixin:", true, 0),
    new MM("mixin", true, 0),
    new MM("mixin:", true, 0),
    new MM("init`enclosingObject:", true, 0),
    new MM("enclosingObject", true, 0),
    new MM("enclosingObject:", true, 0),
    new MM("init`enclosingObjects:", true, 0),
    new MM("enclosingObjects", true, 0),
    new MM("enclosingObjects:", true, 0),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Class = function () {
    var self = this;
    self.$super$KernelForV8$Class$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Class();
    return self;
   };
   this.$isBehavior = function () {
    var self = this;
    return true;
   };
   this.$isMeta = function () {
    var self = this;
    return true;
   };
   this.$mixinApply$ = function ($newSuperclass) {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Class[0]._$vmmirror().$applyMixin$toSuperclass$withEnclosingObjects$(self._$mixin().runtimeMixin, $newSuperclass, self._$enclosingObjects());
   };
   this.$simpleName = function () {
    var self = this;
    return self._$mixin().$name();
   };
   this.$init$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$superclass = function () {
    return this.$superclass$slot;
   };
   this.$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$init$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$mixin = function () {
    return this.$mixin$slot;
   };
   this.$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$init$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$enclosingObject = function () {
    return this.$enclosingObject$slot;
   };
   this.$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$init$enclosingObjects$ = function (v) {
    this.$enclosingObjects$slot = v;
    return this;
   };
   this.$enclosingObjects = function () {
    return this.$enclosingObjects$slot;
   };
   this.$enclosingObjects$ = function (v) {
    this.$enclosingObjects$slot = v;
    return this;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Class";
     this._$superInit$KernelForV8$Class = $.$superInit$KernelForV8$Class;
     this.$superInit$KernelForV8$Class = dnuCatcher("$superInit$KernelForV8$Class");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isBehavior = this._$isBehavior = $.$isBehavior;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$mixinApply$ = this._$mixinApply$ = $.$mixinApply$;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$init$superclass$ = this._$init$superclass$ = $.$init$superclass$;
     this.$superclass = this._$superclass = $.$superclass;
     this.$superclass$ = this._$superclass$ = $.$superclass$;
     this.$init$mixin$ = this._$init$mixin$ = $.$init$mixin$;
     this.$mixin = this._$mixin = $.$mixin;
     this.$mixin$ = this._$mixin$ = $.$mixin$;
     this.$init$enclosingObject$ = this._$init$enclosingObject$ = $.$init$enclosingObject$;
     this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
     this.$enclosingObject$ = this._$enclosingObject$ = $.$enclosingObject$;
     this.$init$enclosingObjects$ = this._$init$enclosingObjects$ = $.$init$enclosingObjects$;
     this.$enclosingObjects = this._$enclosingObjects = $.$enclosingObjects;
     this.$enclosingObjects$ = this._$enclosingObjects$ = $.$enclosingObjects$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$enclosingObjects$KernelForV8$Class = enclosingObjects;
     this.$super$KernelForV8$Class$slot = runtimeSuperclass;
     this["KernelForV8`Class"] = function () {
      superBasicNew.call(this);
      this.$superclass$slot = nil;
      this.$mixin$slot = nil;
      this.$enclosingObject$slot = nil;
      this.$enclosingObjects$slot = nil;
      this.$name$slot = nil;
     };
     this.basicNew = this["KernelForV8`Class"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Class";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Class";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Class = enclosingObjects;
      this.$super$KernelForV8$Class = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Error = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Error";
   this.name = "KernelForV8`Error";
   this.header = 90;
   this.slots = [new SM("description", false, false)];
   this.methods = [
    new MM("superInit`KernelForV8`Error", true, 91),
    new MM("instance`initializer", true, 92),
    new MM("isError", false, 93),
    new MM("printString", false, 94),
    new MM("signal", false, 95),
    new MM("init`description:", true, 0),
    new MM("description", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Error = function ($d) {
    var self = this;
    self.$super$KernelForV8$Error$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($d) {
    var self = this;
    self._$superInit$KernelForV8$Error($d);
    self._$init$description$($d);
    return self;
   };
   this.$isError = function () {
    var self = this;
    return true;
   };
   this.$printString = function () {
    var self = this;
    return self._$description();
   };
   this.$signal = function () {
    var self = this;
    this.trace = new Error().stack;
    throw self;
    return self;
   };
   this.$init$description$ = function (v) {
    this.$description$slot = v;
    return this;
   };
   this.$description = function () {
    return this.$description$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Error";
     this._$superInit$KernelForV8$Error = $.$superInit$KernelForV8$Error;
     this.$superInit$KernelForV8$Error = dnuCatcher("$superInit$KernelForV8$Error");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isError = this._$isError = $.$isError;
     this.$printString = this._$printString = $.$printString;
     this.$signal = this._$signal = $.$signal;
     this.$init$description$ = this._$init$description$ = $.$init$description$;
     this.$description = this._$description = $.$description;
     this.$enclosingObjects$KernelForV8$Error = enclosingObjects;
     this.$super$KernelForV8$Error$slot = runtimeSuperclass;
     this["KernelForV8`Error"] = function () {
      superBasicNew.call(this);
      this.$description$slot = nil;
     };
     this.basicNew = this["KernelForV8`Error"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Error";
    this.slots = [];
    this.methods = [
     new MM("description:", true, 0),
     new MM("signal:", false, 96)
    ];
    this.nestedClasses = [];
    this.$description$ = function ($d) {
     return (new this.nonMeta.basicNew()).$instance$initializer($d);
    };
    this.$signal$ = function ($description) {
     var self = this;
     return self._$description$($description).$signal();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Error";
      this.$description$ = this._$description$ = $.$description$;
      this.$signal$ = this._$signal$ = $.$signal$;
      this.$enclosingObjects$KernelForV8$Error = enclosingObjects;
      this.$super$KernelForV8$Error = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Future = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Future";
   this.name = "KernelForV8`Future";
   this.header = 97;
   this.slots = [
    new SM("blockOrValue000", true, false),
    new SM("state000", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Future", true, 98),
    new MM("instance`initializer", true, 99),
    new MM("doesNotUnderstand:", false, 100),
    new MM("isFuture", false, 101),
    new MM("resolve", false, 102),
    new MM("yourself", false, 103),
    new MM("init`blockOrValue000:", true, 0),
    new MM("blockOrValue000", true, 0),
    new MM("blockOrValue000:", true, 0),
    new MM("init`state000:", true, 0),
    new MM("state000", true, 0),
    new MM("state000:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Future = function ($block) {
    var self = this;
    self.$super$KernelForV8$Future$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($block) {
    var self = this;
    self._$superInit$KernelForV8$Future($block);
    $1.$init$blockOrValue000$(self, $block);
    $1.$init$state000$(self, "unresolved");
    return self;
   };
   this.$doesNotUnderstand$ = function ($message) {
    var self = this;
    return $message.$sendTo$(self._$resolve());
   };
   this.$isFuture = function () {
    var self = this;
    return true;
   };
   this.$resolve = function () {
    var self = this;
    if ($1.$state000(self).$$equal("resolving")) {
     self.$enclosingObjects$KernelForV8$Future[0]._$Error().$signal$("Divergent evaluation of ".$$comma($1.$blockOrValue000(self).$printString()));
    } else {
     nil;
    };
    if ($1.$state000(self).$$equal("unresolved")) {
     $1.$state000$(self, "resolving");
     $1.$blockOrValue000$(self, $1.$blockOrValue000(self).$value());
     {
      nil;
      for (; $1.$blockOrValue000(self).$isFuture(); ) {
       $1.$blockOrValue000$(self, $1.$blockOrValue000(self).$resolve());
      };
     };
     $1.$state000$(self, "resolved");
    } else {
     nil;
    };
    return $1.$blockOrValue000(self);
   };
   this.$yourself = function () {
    var self = this;
    return self._$resolve();
   };
   this.$init$blockOrValue000$ = function (self, v) {
    self.$blockOrValue000$slot = v;
    return self;
   };
   this.$blockOrValue000 = function (self) {
    return self.$blockOrValue000$slot;
   };
   this.$blockOrValue000$ = function (self, v) {
    self.$blockOrValue000$slot = v;
    return self;
   };
   this.$init$state000$ = function (self, v) {
    self.$state000$slot = v;
    return self;
   };
   this.$state000 = function (self) {
    return self.$state000$slot;
   };
   this.$state000$ = function (self, v) {
    self.$state000$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Future";
     this._$superInit$KernelForV8$Future = $.$superInit$KernelForV8$Future;
     this.$superInit$KernelForV8$Future = dnuCatcher("$superInit$KernelForV8$Future");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$isFuture = this._$isFuture = $.$isFuture;
     this._$resolve = $.$resolve;
     this.$resolve = dnuCatcher("$resolve");
     this.$yourself = this._$yourself = $.$yourself;
     this.$enclosingObjects$KernelForV8$Future = enclosingObjects;
     this.$super$KernelForV8$Future$slot = runtimeSuperclass;
     this["KernelForV8`Future"] = function () {
      superBasicNew.call(this);
      this.$blockOrValue000$slot = nil;
      this.$state000$slot = nil;
     };
     this.basicNew = this["KernelForV8`Future"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Future";
    this.slots = [];
    this.methods = [new MM("computing:", true, 0)];
    this.nestedClasses = [];
    this.$computing$ = function ($block) {
     return (new this.nonMeta.basicNew()).$instance$initializer($block);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Future";
      this.$computing$ = this._$computing$ = $.$computing$;
      this.$enclosingObjects$KernelForV8$Future = enclosingObjects;
      this.$super$KernelForV8$Future = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Message = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Message";
   this.name = "KernelForV8`Message";
   this.header = 104;
   this.slots = [
    new SM("mangledSelector", false, false),
    new SM("arguments", false, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Message", true, 105),
    new MM("instance`initializer", true, 106),
    new MM("printString", false, 107),
    new MM("selector", false, 108),
    new MM("sendTo:", false, 109),
    new MM("init`mangledSelector:", true, 0),
    new MM("mangledSelector", true, 0),
    new MM("init`arguments:", true, 0),
    new MM("arguments", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Message = function ($s, $a) {
    var self = this;
    self.$super$KernelForV8$Message$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $a) {
    var self = this;
    self._$superInit$KernelForV8$Message($s, $a);
    self._$init$mangledSelector$($s);
    self._$init$arguments$($a);
    return self;
   };
   this.$printString = function () {
    var self = this;
    return "#".$$comma(self._$selector());
   };
   this.$selector = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Message[0]._$vmmirror().$unmangleSelector$(self._$mangledSelector());
   };
   this.$sendTo$ = function ($receiver) {
    var self = this;
    return $receiver[self._$mangledSelector()].apply($receiver, self._$arguments());
   };
   this.$init$mangledSelector$ = function (v) {
    this.$mangledSelector$slot = v;
    return this;
   };
   this.$mangledSelector = function () {
    return this.$mangledSelector$slot;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Message";
     this._$superInit$KernelForV8$Message = $.$superInit$KernelForV8$Message;
     this.$superInit$KernelForV8$Message = dnuCatcher("$superInit$KernelForV8$Message");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$printString = this._$printString = $.$printString;
     this.$selector = this._$selector = $.$selector;
     this.$sendTo$ = this._$sendTo$ = $.$sendTo$;
     this.$init$mangledSelector$ = this._$init$mangledSelector$ = $.$init$mangledSelector$;
     this.$mangledSelector = this._$mangledSelector = $.$mangledSelector;
     this.$init$arguments$ = this._$init$arguments$ = $.$init$arguments$;
     this.$arguments = this._$arguments = $.$arguments;
     this.$enclosingObjects$KernelForV8$Message = enclosingObjects;
     this.$super$KernelForV8$Message$slot = runtimeSuperclass;
     this["KernelForV8`Message"] = function () {
      superBasicNew.call(this);
      this.$mangledSelector$slot = nil;
      this.$arguments$slot = nil;
     };
     this.basicNew = this["KernelForV8`Message"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Message";
    this.slots = [];
    this.methods = [
     new MM("selector:arguments:", true, 0),
     new MM("mangle:", false, 110),
     new MM("selector:", false, 111)
    ];
    this.nestedClasses = [];
    this.$selector$arguments$ = function ($s, $a) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s, $a);
    };
    this.$mangle$ = function ($selector) {
     var self = this;
     return "$".$$comma($selector).$replaceAll$with$(":", "$").$replaceAll$with$("`", "$").$replaceAll$with$(".", "$");
    };
    this.$selector$ = function ($s) {
     var self = this;
     return self._$selector$arguments$(self._$mangle$($s), []);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Message";
      this.$selector$arguments$ = this._$selector$arguments$ = $.$selector$arguments$;
      this._$mangle$ = $.$mangle$;
      this.$mangle$ = dnuCatcher("$mangle$");
      this.$selector$ = this._$selector$ = $.$selector$;
      this.$enclosingObjects$KernelForV8$Message = enclosingObjects;
      this.$super$KernelForV8$Message = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$MessageNotUnderstood = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`MessageNotUnderstood";
   this.name = "KernelForV8`MessageNotUnderstood";
   this.header = 112;
   this.slots = [
    new SM("receiver", false, false),
    new SM("message", false, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`MessageNotUnderstood", true, 113),
    new MM("instance`initializer", true, 114),
    new MM("init`receiver:", true, 0),
    new MM("receiver", true, 0),
    new MM("init`message:", true, 0),
    new MM("message", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$MessageNotUnderstood = function ($r, $m) {
    var self = this;
    self.$super$KernelForV8$MessageNotUnderstood$slot._$instance$initializer.call(self, "MessageNotUnderstood: ".$$comma($0.$classOf$(self.$enclosingObjects$KernelForV8$MessageNotUnderstood[0], $r).$name()).$$comma(">>").$$comma($m.$selector()));
    return self;
   };
   this.$instance$initializer = function ($r, $m) {
    var self = this;
    self._$superInit$KernelForV8$MessageNotUnderstood($r, $m);
    self._$init$receiver$($r);
    self._$init$message$($m);
    return self;
   };
   this.$init$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.$receiver = function () {
    return this.$receiver$slot;
   };
   this.$init$message$ = function (v) {
    this.$message$slot = v;
    return this;
   };
   this.$message = function () {
    return this.$message$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`MessageNotUnderstood";
     this._$superInit$KernelForV8$MessageNotUnderstood = $.$superInit$KernelForV8$MessageNotUnderstood;
     this.$superInit$KernelForV8$MessageNotUnderstood = dnuCatcher("$superInit$KernelForV8$MessageNotUnderstood");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$receiver$ = this._$init$receiver$ = $.$init$receiver$;
     this.$receiver = this._$receiver = $.$receiver;
     this.$init$message$ = this._$init$message$ = $.$init$message$;
     this.$message = this._$message = $.$message;
     this.$enclosingObjects$KernelForV8$MessageNotUnderstood = enclosingObjects;
     this.$super$KernelForV8$MessageNotUnderstood$slot = runtimeSuperclass;
     this["KernelForV8`MessageNotUnderstood"] = function () {
      superBasicNew.call(this);
      this.$receiver$slot = nil;
      this.$message$slot = nil;
     };
     this.basicNew = this["KernelForV8`MessageNotUnderstood"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`MessageNotUnderstood";
    this.slots = [];
    this.methods = [new MM("receiver:message:", true, 0)];
    this.nestedClasses = [];
    this.$receiver$message$ = function ($r, $m) {
     return (new this.nonMeta.basicNew()).$instance$initializer($r, $m);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`MessageNotUnderstood";
      this.$receiver$message$ = this._$receiver$message$ = $.$receiver$message$;
      this.$enclosingObjects$KernelForV8$MessageNotUnderstood = enclosingObjects;
      this.$super$KernelForV8$MessageNotUnderstood = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Metaclass = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Metaclass";
   this.name = "KernelForV8`Metaclass";
   this.header = 115;
   this.slots = [
    new SM("superclass", true, false),
    new SM("mixin", true, false),
    new SM("enclosingObject", true, false),
    new SM("name", true, false),
    new SM("thisClass", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Metaclass", true, 116),
    new MM("instance`initializer", true, 117),
    new MM("isBehavior", false, 118),
    new MM("isMeta", false, 119),
    new MM("init`superclass:", true, 0),
    new MM("superclass", true, 0),
    new MM("superclass:", true, 0),
    new MM("init`mixin:", true, 0),
    new MM("mixin", true, 0),
    new MM("mixin:", true, 0),
    new MM("init`enclosingObject:", true, 0),
    new MM("enclosingObject", true, 0),
    new MM("enclosingObject:", true, 0),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0),
    new MM("init`thisClass:", true, 0),
    new MM("thisClass", true, 0),
    new MM("thisClass:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Metaclass = function () {
    var self = this;
    self.$super$KernelForV8$Metaclass$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Metaclass();
    return self;
   };
   this.$isBehavior = function () {
    var self = this;
    return true;
   };
   this.$isMeta = function () {
    var self = this;
    return true;
   };
   this.$init$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$superclass = function () {
    return this.$superclass$slot;
   };
   this.$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$init$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$mixin = function () {
    return this.$mixin$slot;
   };
   this.$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$init$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$enclosingObject = function () {
    return this.$enclosingObject$slot;
   };
   this.$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$init$thisClass$ = function (v) {
    this.$thisClass$slot = v;
    return this;
   };
   this.$thisClass = function () {
    return this.$thisClass$slot;
   };
   this.$thisClass$ = function (v) {
    this.$thisClass$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Metaclass";
     this._$superInit$KernelForV8$Metaclass = $.$superInit$KernelForV8$Metaclass;
     this.$superInit$KernelForV8$Metaclass = dnuCatcher("$superInit$KernelForV8$Metaclass");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isBehavior = this._$isBehavior = $.$isBehavior;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$init$superclass$ = this._$init$superclass$ = $.$init$superclass$;
     this.$superclass = this._$superclass = $.$superclass;
     this.$superclass$ = this._$superclass$ = $.$superclass$;
     this.$init$mixin$ = this._$init$mixin$ = $.$init$mixin$;
     this.$mixin = this._$mixin = $.$mixin;
     this.$mixin$ = this._$mixin$ = $.$mixin$;
     this.$init$enclosingObject$ = this._$init$enclosingObject$ = $.$init$enclosingObject$;
     this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
     this.$enclosingObject$ = this._$enclosingObject$ = $.$enclosingObject$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$init$thisClass$ = this._$init$thisClass$ = $.$init$thisClass$;
     this.$thisClass = this._$thisClass = $.$thisClass;
     this.$thisClass$ = this._$thisClass$ = $.$thisClass$;
     this.$enclosingObjects$KernelForV8$Metaclass = enclosingObjects;
     this.$super$KernelForV8$Metaclass$slot = runtimeSuperclass;
     this["KernelForV8`Metaclass"] = function () {
      superBasicNew.call(this);
      this.$superclass$slot = nil;
      this.$mixin$slot = nil;
      this.$enclosingObject$slot = nil;
      this.$name$slot = nil;
      this.$thisClass$slot = nil;
     };
     this.basicNew = this["KernelForV8`Metaclass"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Metaclass";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Metaclass";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Metaclass = enclosingObjects;
      this.$super$KernelForV8$Metaclass = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Mixin = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Mixin";
   this.name = "KernelForV8`Mixin";
   this.header = 120;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Mixin", true, 121),
    new MM("instance`initializer", true, 122),
    new MM("applyTo:", false, 123),
    new MM("applyTo:withName:", false, 124),
    new MM("isMeta", false, 125),
    new MM("name", false, 126),
    new MM("printString", false, 127)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Mixin = function ($rm) {
    var self = this;
    self.$super$KernelForV8$Mixin$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($rm) {
    var self = this;
    self._$superInit$KernelForV8$Mixin($rm);
    self.runtimeMixin = $rm;
    return self;
   };
   this.$applyTo$ = function ($superclass) {
    var self = this;
    self._$assert$message$(function () {
     return self._$isMeta().$not();
    }, "Only instance-side mixins may be applied directly");
    return self._$applyTo$withName$($superclass, $superclass.$name().$$comma(" <: ").$$comma(self._$name()));
   };
   this.$applyTo$withName$ = function ($superclass, $name) {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Mixin[0]._$vmmirror().$applyMixin$toSuperclass$withEnclosingObjects$(self.runtimeMixin, $superclass, [nil]);
   };
   this.$isMeta = function () {
    var self = this;
    return self.runtimeMixin.meta === undefined;
   };
   this.$name = function () {
    var self = this;
    return self._$isMeta().$ifTrue$ifFalse$(function () {
     return self.runtimeMixin.nonMeta.name.$$comma(" class");
    }, function () {
     return self.runtimeMixin.name;
    });
   };
   this.$printString = function () {
    var self = this;
    return self._$name().$$comma(" mixin");
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Mixin";
     this._$superInit$KernelForV8$Mixin = $.$superInit$KernelForV8$Mixin;
     this.$superInit$KernelForV8$Mixin = dnuCatcher("$superInit$KernelForV8$Mixin");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyTo$ = this._$applyTo$ = $.$applyTo$;
     this.$applyTo$withName$ = this._$applyTo$withName$ = $.$applyTo$withName$;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$name = this._$name = $.$name;
     this.$printString = this._$printString = $.$printString;
     this.$enclosingObjects$KernelForV8$Mixin = enclosingObjects;
     this.$super$KernelForV8$Mixin$slot = runtimeSuperclass;
     this["KernelForV8`Mixin"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Mixin"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Mixin";
    this.slots = [];
    this.methods = [new MM("fromRuntimeMixin:", true, 0)];
    this.nestedClasses = [];
    this.$fromRuntimeMixin$ = function ($rm) {
     return (new this.nonMeta.basicNew()).$instance$initializer($rm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Mixin";
      this.$fromRuntimeMixin$ = this._$fromRuntimeMixin$ = $.$fromRuntimeMixin$;
      this.$enclosingObjects$KernelForV8$Mixin = enclosingObjects;
      this.$super$KernelForV8$Mixin = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Number = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Number";
   this.name = "KernelForV8`Number";
   this.header = 128;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Number", true, 129),
    new MM("instance`initializer", true, 130),
    new MM("*", false, 131),
    new MM("**", false, 132),
    new MM("+", false, 133),
    new MM("-", false, 134),
    new MM("/", false, 135),
    new MM("//", false, 136),
    new MM("<", false, 137),
    new MM("<<", false, 138),
    new MM("<=", false, 139),
    new MM("=", false, 140),
    new MM(">", false, 141),
    new MM(">=", false, 142),
    new MM(">>", false, 143),
    new MM("@", false, 144),
    new MM("\\\\", false, 145),
    new MM("abs", false, 146),
    new MM("asFloat", false, 147),
    new MM("asInteger", false, 148),
    new MM("asString", false, 149),
    new MM("between:and:", false, 150),
    new MM("bitAnd:", false, 151),
    new MM("bitInvert", false, 152),
    new MM("bitOr:", false, 153),
    new MM("bitXor:", false, 154),
    new MM("ceiling", false, 155),
    new MM("cos", false, 156),
    new MM("exp", false, 157),
    new MM("floor", false, 158),
    new MM("hash", false, 159),
    new MM("isNumber", false, 160),
    new MM("ln", false, 161),
    new MM("max:", false, 162),
    new MM("min:", false, 163),
    new MM("printString", false, 164),
    new MM("quo:", false, 165),
    new MM("rem:", false, 166),
    new MM("sign", false, 167),
    new MM("sin", false, 168),
    new MM("sqrt", false, 169),
    new MM("tan", false, 170),
    new MM("timesRepeat:", false, 171),
    new MM("to:", false, 172),
    new MM("to:do:", false, 173),
    new MM("truncated", false, 174)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Number = function () {
    var self = this;
    self.$super$KernelForV8$Number$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Number();
    return self;
   };
   this.$$times = function ($other) {
    var self = this;
    return self * $other;
   };
   this.$$times$times = function ($exponent) {
    var self = this;
    return Math.pow(self, $exponent);
   };
   this.$$plus = function ($other) {
    var self = this;
    return self + $other;
   };
   this.$$minus = function ($other) {
    var self = this;
    return self - $other;
   };
   this.$$over = function ($other) {
    var self = this;
    return self / $other;
   };
   this.$$over$over = function ($other) {
    var self = this;
    return (self / $other).$floor();
   };
   this.$$less = function ($other) {
    var self = this;
    return self < $other;
   };
   this.$$less$less = function ($other) {
    var self = this;
    return self << $other;
   };
   this.$$less$equal = function ($other) {
    var self = this;
    return self <= $other;
   };
   this.$$equal = function ($other) {
    var self = this;
    return self === $other;
   };
   this.$$greater = function ($other) {
    var self = this;
    return self > $other;
   };
   this.$$greater$equal = function ($other) {
    var self = this;
    return self >= $other;
   };
   this.$$greater$greater = function ($other) {
    var self = this;
    return self >> $other;
   };
   this.$$at = function ($y) {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Number[0]._$platform().$graphics().$Point().$x$y$(self, $y);
   };
   this.$$back$back = function ($other) {
    var self = this;
    return self - (self._$$over$over($other) * $other);
   };
   this.$abs = function () {
    var self = this;
    if (self >= 0) {
     return self;
    } else {
     return -1 * self;
    };
    return self;
   };
   this.$asFloat = function () {
    var self = this;
    return self * 1;
   };
   this.$asInteger = function () {
    var self = this;
    return self._$truncated();
   };
   this.$asString = function () {
    var self = this;
    return self.toString();
   };
   this.$between$and$ = function ($min, $max) {
    var self = this;
    return self._$$less$equal($max) && self._$$greater$equal($min);
   };
   this.$bitAnd$ = function ($other) {
    var self = this;
    return self & $other;
   };
   this.$bitInvert = function () {
    var self = this;
    return -1 - self;
   };
   this.$bitOr$ = function ($other) {
    var self = this;
    return self | $other;
   };
   this.$bitXor$ = function ($other) {
    var self = this;
    return self ^ $other;
   };
   this.$ceiling = function () {
    var self = this;
    return Math.ceil(self);
   };
   this.$cos = function () {
    var self = this;
    return Math.cos(self);
   };
   this.$exp = function () {
    var self = this;
    return Math.exp(self);
   };
   this.$floor = function () {
    var self = this;
    return Math.floor(self);
   };
   this.$hash = function () {
    var self = this;
    return self._$rem$(16777215);
   };
   this.$isNumber = function () {
    var self = this;
    return true;
   };
   this.$ln = function () {
    var self = this;
    return Math.log(self);
   };
   this.$max$ = function ($other) {
    var self = this;
    return self._$$greater($other).$ifTrue$ifFalse$(function () {
     return self;
    }, function () {
     return $other;
    });
   };
   this.$min$ = function ($other) {
    var self = this;
    return self._$$less($other).$ifTrue$ifFalse$(function () {
     return self;
    }, function () {
     return $other;
    });
   };
   this.$printString = function () {
    var self = this;
    return self.toString();
   };
   this.$quo$ = function ($other) {
    var self = this;
    return (self / $other).$truncated();
   };
   this.$rem$ = function ($other) {
    var self = this;
    return self - (self._$quo$($other) * $other);
   };
   this.$sign = function () {
    var self = this;
    if (self > 0) {
     return 1;
    } else {
     nil;
    };
    if (self < 0) {
     return -1;
    } else {
     nil;
    };
    return 0;
   };
   this.$sin = function () {
    var self = this;
    return Math.sin(self);
   };
   this.$sqrt = function () {
    var self = this;
    return Math.sqrt(self);
   };
   this.$tan = function () {
    var self = this;
    return Math.tan(self);
   };
   this.$timesRepeat$ = function ($block) {
    var self = this;
    var $i = nil;
    $i = 0;
    for (; $i < this; $i++) {
     $block();
    };
    return self;
   };
   this.$to$ = function ($stop) {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Number[0]._$platform().$collections().$Interval().$from$to$(self, $stop);
   };
   this.$to$do$ = function ($limit, $block) {
    var self = this;
    var $i = nil;
    $i = self;
    for (; $i <= $limit; $i++) {
     $block($i);
    };
    return self;
   };
   this.$truncated = function () {
    var self = this;
    return self | 0;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Number";
     this._$superInit$KernelForV8$Number = $.$superInit$KernelForV8$Number;
     this.$superInit$KernelForV8$Number = dnuCatcher("$superInit$KernelForV8$Number");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$times = this._$$times = $.$$times;
     this.$$times$times = this._$$times$times = $.$$times$times;
     this.$$plus = this._$$plus = $.$$plus;
     this.$$minus = this._$$minus = $.$$minus;
     this.$$over = this._$$over = $.$$over;
     this.$$over$over = this._$$over$over = $.$$over$over;
     this.$$less = this._$$less = $.$$less;
     this.$$less$less = this._$$less$less = $.$$less$less;
     this.$$less$equal = this._$$less$equal = $.$$less$equal;
     this.$$equal = this._$$equal = $.$$equal;
     this.$$greater = this._$$greater = $.$$greater;
     this.$$greater$equal = this._$$greater$equal = $.$$greater$equal;
     this.$$greater$greater = this._$$greater$greater = $.$$greater$greater;
     this.$$at = this._$$at = $.$$at;
     this.$$back$back = this._$$back$back = $.$$back$back;
     this.$abs = this._$abs = $.$abs;
     this.$asFloat = this._$asFloat = $.$asFloat;
     this.$asInteger = this._$asInteger = $.$asInteger;
     this.$asString = this._$asString = $.$asString;
     this.$between$and$ = this._$between$and$ = $.$between$and$;
     this.$bitAnd$ = this._$bitAnd$ = $.$bitAnd$;
     this.$bitInvert = this._$bitInvert = $.$bitInvert;
     this.$bitOr$ = this._$bitOr$ = $.$bitOr$;
     this.$bitXor$ = this._$bitXor$ = $.$bitXor$;
     this.$ceiling = this._$ceiling = $.$ceiling;
     this.$cos = this._$cos = $.$cos;
     this.$exp = this._$exp = $.$exp;
     this.$floor = this._$floor = $.$floor;
     this.$hash = this._$hash = $.$hash;
     this.$isNumber = this._$isNumber = $.$isNumber;
     this.$ln = this._$ln = $.$ln;
     this.$max$ = this._$max$ = $.$max$;
     this.$min$ = this._$min$ = $.$min$;
     this.$printString = this._$printString = $.$printString;
     this.$quo$ = this._$quo$ = $.$quo$;
     this.$rem$ = this._$rem$ = $.$rem$;
     this.$sign = this._$sign = $.$sign;
     this.$sin = this._$sin = $.$sin;
     this.$sqrt = this._$sqrt = $.$sqrt;
     this.$tan = this._$tan = $.$tan;
     this.$timesRepeat$ = this._$timesRepeat$ = $.$timesRepeat$;
     this.$to$ = this._$to$ = $.$to$;
     this.$to$do$ = this._$to$do$ = $.$to$do$;
     this.$truncated = this._$truncated = $.$truncated;
     this.$enclosingObjects$KernelForV8$Number = enclosingObjects;
     this.$super$KernelForV8$Number$slot = runtimeSuperclass;
     this["KernelForV8`Number"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Number"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Number";
    this.slots = [];
    this.methods = [new MM("uninstantiable", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Number";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$Number = enclosingObjects;
      this.$super$KernelForV8$Number = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Object = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Object";
   this.name = "KernelForV8`Object";
   this.header = 175;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Object", true, 176),
    new MM("instance`initializer", true, 177),
    new MM("=", false, 178),
    new MM("==", false, 179),
    new MM("Array", false, 180),
    new MM("Character", false, 181),
    new MM("Error", false, 182),
    new MM("Future", false, 183),
    new MM("Object", false, 184),
    new MM("String", false, 185),
    new MM("assert:message:", false, 186),
    new MM("class", false, 187),
    new MM("clone", false, 188),
    new MM("doesNotUnderstand:", false, 189),
    new MM("hash", false, 190),
    new MM("identityHash", false, 191),
    new MM("ifNil:", false, 192),
    new MM("ifNil:ifNotNil:", false, 193),
    new MM("ifNotNil:", false, 194),
    new MM("isAlien", false, 195),
    new MM("isBlock", false, 196),
    new MM("isExpat", false, 197),
    new MM("isFuture", false, 198),
    new MM("isNil", false, 199),
    new MM("notNil", false, 200),
    new MM("out", false, 201),
    new MM("perform:withArguments:", false, 202),
    new MM("print:", false, 203),
    new MM("printString", false, 204),
    new MM("yourself", false, 205),
    new MM("~=", false, 206)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Object = function () {
    var self = this;
    self.$super$KernelForV8$Object$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Object();
    return self;
   };
   this.$$equal = function ($other) {
    var self = this;
    return self === $other;
   };
   this.$$equal$equal = function ($other) {
    var self = this;
    return self === $other;
   };
   this.$Array = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Array();
   };
   this.$Character = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$String();
   };
   this.$Error = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Error();
   };
   this.$Future = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Future();
   };
   this.$Object = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Object();
   };
   this.$String = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$String();
   };
   this.$assert$message$ = function ($condition, $message) {
    var self = this;
    if (!$condition.$isBlock()) {
     self._$Error().$signal$("Block required");
    } else {
     nil;
    };
    if (!$condition.$value()) {
     self._$Error().$signal$("Assertion failed: ".$$comma($message));
    } else {
     nil;
    };
    return self;
   };
   this.$class = function () {
    var self = this;
    return this.newspeakClass;
   };
   this.$clone = function () {
    var self = this;
    var $originalProto = nil;
    var $cloneConstructor = nil;
    var $newObject = nil;
    var $propNames = nil;
    $originalProto = Object.getPrototypeOf(self);
    $cloneConstructor = function () {};
    $cloneConstructor.prototype = $originalProto;
    $newObject = new $cloneConstructor();
    $propNames = Object.getOwnPropertyNames(self);
    $propNames.forEach(function (name) {
     $newObject[name] = self[name];
    });
    return $newObject;
   };
   this.$doesNotUnderstand$ = function ($message) {
    var self = this;
    if ($message.$selector().$startsWith$("is") && $message.$arguments().$size().$$equal(0)) {
     return false;
    } else {
     nil;
    };
    return self.$enclosingObjects$KernelForV8$Object[0]._$MessageNotUnderstood().$receiver$message$(self, $message).$signal();
   };
   this.$hash = function () {
    var self = this;
    return self._$identityHash();
   };
   this.$identityHash = function () {
    var self = this;
    while(this.hashCode === 0) this.hashCode = Math.random() * 0x3FFFFFF | 0;
    return this.hashCode;
   };
   this.$ifNil$ = function ($nilBlock) {
    var self = this;
    return self;
   };
   this.$ifNil$ifNotNil$ = function ($nilBlock, $notNilBlock) {
    var self = this;
    return $notNilBlock.$value$(self);
   };
   this.$ifNotNil$ = function ($nonNilBlock) {
    var self = this;
    return $nonNilBlock.$value$(self);
   };
   this.$isAlien = function () {
    var self = this;
    return false;
   };
   this.$isBlock = function () {
    var self = this;
    return false;
   };
   this.$isExpat = function () {
    var self = this;
    return false;
   };
   this.$isFuture = function () {
    var self = this;
    return false;
   };
   this.$isNil = function () {
    var self = this;
    return false;
   };
   this.$notNil = function () {
    var self = this;
    return true;
   };
   this.$out = function () {
    var self = this;
    self._$print$(self);
    return self;
   };
   this.$perform$withArguments$ = function ($selector, $arguments) {
    var self = this;
    return self[self.$enclosingObjects$KernelForV8$Object[0]._$vmmirror().$mangleSelector$($selector)].apply(self, $arguments);
   };
   this.$print$ = function ($obj) {
    var self = this;
    (typeof console === "undefined" ? print($obj.$printString()) : console.log($obj.$printString()));
    return self;
   };
   this.$printString = function () {
    var self = this;
    return "instance of ".$$comma(self._$class().$name());
   };
   this.$yourself = function () {
    var self = this;
    return self;
   };
   this.$$tilde$equal = function ($other) {
    var self = this;
    return self._$$equal($other).$not();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Object";
     this._$superInit$KernelForV8$Object = $.$superInit$KernelForV8$Object;
     this.$superInit$KernelForV8$Object = dnuCatcher("$superInit$KernelForV8$Object");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$$equal$equal = this._$$equal$equal = $.$$equal$equal;
     this._$Array = $.$Array;
     this.$Array = dnuCatcher("$Array");
     this._$Character = $.$Character;
     this.$Character = dnuCatcher("$Character");
     this._$Error = $.$Error;
     this.$Error = dnuCatcher("$Error");
     this._$Future = $.$Future;
     this.$Future = dnuCatcher("$Future");
     this._$Object = $.$Object;
     this.$Object = dnuCatcher("$Object");
     this._$String = $.$String;
     this.$String = dnuCatcher("$String");
     this._$assert$message$ = $.$assert$message$;
     this.$assert$message$ = dnuCatcher("$assert$message$");
     this._$class = $.$class;
     this.$class = dnuCatcher("$class");
     this.$clone = this._$clone = $.$clone;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$hash = this._$hash = $.$hash;
     this.$identityHash = this._$identityHash = $.$identityHash;
     this.$ifNil$ = this._$ifNil$ = $.$ifNil$;
     this.$ifNil$ifNotNil$ = this._$ifNil$ifNotNil$ = $.$ifNil$ifNotNil$;
     this.$ifNotNil$ = this._$ifNotNil$ = $.$ifNotNil$;
     this.$isAlien = this._$isAlien = $.$isAlien;
     this.$isBlock = this._$isBlock = $.$isBlock;
     this.$isExpat = this._$isExpat = $.$isExpat;
     this.$isFuture = this._$isFuture = $.$isFuture;
     this.$isNil = this._$isNil = $.$isNil;
     this.$notNil = this._$notNil = $.$notNil;
     this.$out = this._$out = $.$out;
     this.$perform$withArguments$ = this._$perform$withArguments$ = $.$perform$withArguments$;
     this.$print$ = this._$print$ = $.$print$;
     this.$printString = this._$printString = $.$printString;
     this.$yourself = this._$yourself = $.$yourself;
     this.$$tilde$equal = this._$$tilde$equal = $.$$tilde$equal;
     this.$enclosingObjects$KernelForV8$Object = enclosingObjects;
     this.$super$KernelForV8$Object$slot = runtimeSuperclass;
     this["KernelForV8`Object"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Object"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Object";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Object";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Object = enclosingObjects;
      this.$super$KernelForV8$Object = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Stopwatch = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Stopwatch";
   this.name = "KernelForV8`Stopwatch";
   this.header = 207;
   this.slots = [
    new SM("cumulativeMillis", true, false),
    new SM("startMillis", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Stopwatch", true, 208),
    new MM("instance`initializer", true, 209),
    new MM("currentMonotonicMillis", false, 210),
    new MM("elapsedMicroseconds", false, 211),
    new MM("elapsedMilliseconds", false, 212),
    new MM("start", false, 213),
    new MM("stop", false, 214),
    new MM("init`cumulativeMillis:", true, 0),
    new MM("cumulativeMillis", true, 0),
    new MM("cumulativeMillis:", true, 0),
    new MM("init`startMillis:", true, 0),
    new MM("startMillis", true, 0),
    new MM("startMillis:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Stopwatch = function () {
    var self = this;
    self.$super$KernelForV8$Stopwatch$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$Stopwatch();
    $1.$init$cumulativeMillis$(self, 0);
    return self;
   };
   this.$currentMonotonicMillis = function (self) {
    return performance.now();
   };
   this.$elapsedMicroseconds = function () {
    var self = this;
    return self._$elapsedMilliseconds() * 1000;
   };
   this.$elapsedMilliseconds = function () {
    var self = this;
    if (nil.$$equal($1.$startMillis(self))) {
     return $1.$cumulativeMillis(self);
    } else {
     nil;
    };
    return $1.$cumulativeMillis(self) + ($1.$currentMonotonicMillis(self) - $1.$startMillis(self));
   };
   this.$start = function () {
    var self = this;
    if (!nil.$$equal($1.$startMillis(self))) {
     return self;
    } else {
     nil;
    };
    $1.$startMillis$(self, $1.$currentMonotonicMillis(self));
    return self;
   };
   this.$stop = function () {
    var self = this;
    if (nil.$$equal($1.$startMillis(self))) {
     return self;
    } else {
     nil;
    };
    $1.$cumulativeMillis$(self, $1.$cumulativeMillis(self) + ($1.$currentMonotonicMillis(self) - $1.$startMillis(self)));
    self._$startMicros$(nil);
    return self;
   };
   this.$init$cumulativeMillis$ = function (self, v) {
    self.$cumulativeMillis$slot = v;
    return self;
   };
   this.$cumulativeMillis = function (self) {
    return self.$cumulativeMillis$slot;
   };
   this.$cumulativeMillis$ = function (self, v) {
    self.$cumulativeMillis$slot = v;
    return self;
   };
   this.$init$startMillis$ = function (self, v) {
    self.$startMillis$slot = v;
    return self;
   };
   this.$startMillis = function (self) {
    return self.$startMillis$slot;
   };
   this.$startMillis$ = function (self, v) {
    self.$startMillis$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Stopwatch";
     this._$superInit$KernelForV8$Stopwatch = $.$superInit$KernelForV8$Stopwatch;
     this.$superInit$KernelForV8$Stopwatch = dnuCatcher("$superInit$KernelForV8$Stopwatch");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$elapsedMicroseconds = this._$elapsedMicroseconds = $.$elapsedMicroseconds;
     this.$elapsedMilliseconds = this._$elapsedMilliseconds = $.$elapsedMilliseconds;
     this.$start = this._$start = $.$start;
     this.$stop = this._$stop = $.$stop;
     this.$enclosingObjects$KernelForV8$Stopwatch = enclosingObjects;
     this.$super$KernelForV8$Stopwatch$slot = runtimeSuperclass;
     this["KernelForV8`Stopwatch"] = function () {
      superBasicNew.call(this);
      this.$cumulativeMillis$slot = nil;
      this.$startMillis$slot = nil;
     };
     this.basicNew = this["KernelForV8`Stopwatch"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Stopwatch";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Stopwatch";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Stopwatch = enclosingObjects;
      this.$super$KernelForV8$Stopwatch = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$String = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`String";
   this.name = "KernelForV8`String";
   this.header = 215;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`String", true, 216),
    new MM("instance`initializer", true, 217),
    new MM(",", false, 218),
    new MM("<", false, 219),
    new MM("<=", false, 220),
    new MM("=", false, 221),
    new MM(">=", false, 222),
    new MM("asNumber", false, 223),
    new MM("asString", false, 224),
    new MM("asSymbol", false, 225),
    new MM("at:", false, 226),
    new MM("at:put:", false, 227),
    new MM("beginsWith:", false, 228),
    new MM("between:and:", false, 229),
    new MM("charCode", false, 230),
    new MM("class", false, 231),
    new MM("copyFrom:to:", false, 232),
    new MM("do:", false, 233),
    new MM("first", false, 234),
    new MM("hash", false, 235),
    new MM("identityHash", false, 236),
    new MM("includes:", false, 237),
    new MM("inject:into:", false, 238),
    new MM("isString", false, 239),
    new MM("last", false, 240),
    new MM("printString", false, 241),
    new MM("replaceAll:with:", false, 242),
    new MM("runeAt:", false, 243),
    new MM("size", false, 244),
    new MM("splitBy:", false, 245),
    new MM("startsWith:", false, 246)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$String = function () {
    var self = this;
    self.$super$KernelForV8$String$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$String();
    return self;
   };
   this.$$comma = function ($other) {
    var self = this;
    return self.concat($other);
   };
   this.$$less = function ($other) {
    var self = this;
    return self < $other;
   };
   this.$$less$equal = function ($other) {
    var self = this;
    return self <= $other;
   };
   this.$$equal = function ($other) {
    var self = this;
    return self === $other;
   };
   this.$$greater$equal = function ($other) {
    var self = this;
    return self >= $other;
   };
   this.$asNumber = function () {
    var self = this;
    return parseInt(self);
   };
   this.$asString = function () {
    var self = this;
    return self;
   };
   this.$asSymbol = function () {
    var self = this;
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    return this[$index - 1];
   };
   this.$at$put$ = function ($index, $value) {
    var self = this;
    return this[$index - 1] = $value;
   };
   this.$beginsWith$ = function ($substring) {
    var self = this;
    return 0 == self.indexOf($substring);
   };
   this.$between$and$ = function ($min, $max) {
    var self = this;
    return self._$$less$equal($max) && self._$$greater$equal($min);
   };
   this.$charCode = function () {
    var self = this;
    "BOGUS";
    return this.charCodeAt(0);
   };
   this.$class = function () {
    var self = this;
    return self.$enclosingObjects$KernelForV8$String[0]._$String();
   };
   this.$copyFrom$to$ = function ($start, $end) {
    var self = this;
    return self.substring($start - 1, $end);
   };
   this.$do$ = function ($action) {
    var self = this;
    var $i = nil;
    var $len = nil;
    $i = 0;
    $len = this.length;
    for (; $i < $len; $i++) {
     $action(self[$i]);
    };
    return self;
   };
   this.$first = function () {
    var self = this;
    return self._$at$(1);
   };
   this.$hash = function () {
    var self = this;
    var l = this.length;
    return (l == 0 ? 0 : (l * 32 ^ this.charCodeAt(0)) * 32 ^ this.charCodeAt(l - 1));
   };
   this.$identityHash = function () {
    var self = this;
    return self._$hash();
   };
   this.$includes$ = function ($object) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($element) {
      return $object.$$equal($element).$ifTrue$(function () {
       {
        NLR.value = true;
        throw NLR;
       };
      });
     });
     return false;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$inject$into$ = function ($initialValue, $foldBlock) {
    var self = this;
    var $runningValue = nil;
    $runningValue = $initialValue;
    self._$do$(function ($element) {
     return $runningValue = $foldBlock.$value$value$($runningValue, $element);
    });
    return $runningValue;
   };
   this.$isString = function () {
    var self = this;
    return true;
   };
   this.$last = function () {
    var self = this;
    return self._$at$(self._$size());
   };
   this.$printString = function () {
    var self = this;
    return "'"+this.toString()+"'";
   };
   this.$replaceAll$with$ = function ($substring, $newSubstring) {
    var self = this;
    "BOGUS";
    var target = $substring;
    var replacement = $newSubstring;
    return this.replace(new RegExp(target.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), replacement);
   };
   this.$runeAt$ = function ($index) {
    var self = this;
    return self.charCodeAt($index - 1);
   };
   this.$size = function () {
    var self = this;
    return this.length;
   };
   this.$splitBy$ = function ($str) {
    var self = this;
    return self.split($str);
   };
   this.$startsWith$ = function ($substring) {
    var self = this;
    return 0 == self.indexOf($substring);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`String";
     this._$superInit$KernelForV8$String = $.$superInit$KernelForV8$String;
     this.$superInit$KernelForV8$String = dnuCatcher("$superInit$KernelForV8$String");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$comma = this._$$comma = $.$$comma;
     this.$$less = this._$$less = $.$$less;
     this.$$less$equal = this._$$less$equal = $.$$less$equal;
     this.$$equal = this._$$equal = $.$$equal;
     this.$$greater$equal = this._$$greater$equal = $.$$greater$equal;
     this.$asNumber = this._$asNumber = $.$asNumber;
     this.$asString = this._$asString = $.$asString;
     this.$asSymbol = this._$asSymbol = $.$asSymbol;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$beginsWith$ = this._$beginsWith$ = $.$beginsWith$;
     this.$between$and$ = this._$between$and$ = $.$between$and$;
     this.$charCode = this._$charCode = $.$charCode;
     this._$class = $.$class;
     this.$class = dnuCatcher("$class");
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$do$ = this._$do$ = $.$do$;
     this.$first = this._$first = $.$first;
     this.$hash = this._$hash = $.$hash;
     this.$identityHash = this._$identityHash = $.$identityHash;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
     this.$isString = this._$isString = $.$isString;
     this.$last = this._$last = $.$last;
     this.$printString = this._$printString = $.$printString;
     this.$replaceAll$with$ = this._$replaceAll$with$ = $.$replaceAll$with$;
     this.$runeAt$ = this._$runeAt$ = $.$runeAt$;
     this.$size = this._$size = $.$size;
     this.$splitBy$ = this._$splitBy$ = $.$splitBy$;
     this.$startsWith$ = this._$startsWith$ = $.$startsWith$;
     this.$enclosingObjects$KernelForV8$String = enclosingObjects;
     this.$super$KernelForV8$String$slot = runtimeSuperclass;
     this["KernelForV8`String"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`String"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`String";
    this.slots = [];
    this.methods = [
     new MM("uninstantiable", true, 0),
     new MM("cr", false, 247),
     new MM("fromCharCode:", false, 248),
     new MM("fromRunes:", false, 249),
     new MM("lf", false, 250),
     new MM("space", false, 251),
     new MM("tab", false, 252),
     new MM("withAll:", false, 253)
    ];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$cr = function () {
     var self = this;
     return "\r";
    };
    this.$fromCharCode$ = function ($unicodeValue) {
     var self = this;
     return String.fromCharCode($unicodeValue);
    };
    this.$fromRunes$ = function ($runes) {
     var self = this;
     return String.fromCharCode.apply(null, $runes.$asArray());
    };
    this.$lf = function () {
     var self = this;
     return "\n";
    };
    this.$space = function () {
     var self = this;
     return " ";
    };
    this.$tab = function () {
     var self = this;
     return "\t";
    };
    this.$withAll$ = function ($characters) {
     var self = this;
     return $characters.$asArray().join("");
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`String";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$cr = this._$cr = $.$cr;
      this.$fromCharCode$ = this._$fromCharCode$ = $.$fromCharCode$;
      this.$fromRunes$ = this._$fromRunes$ = $.$fromRunes$;
      this.$lf = this._$lf = $.$lf;
      this.$space = this._$space = $.$space;
      this.$tab = this._$tab = $.$tab;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$KernelForV8$String = enclosingObjects;
      this.$super$KernelForV8$String = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$UndefinedObject = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for KernelForV8`UndefinedObject";
   this.name = "KernelForV8`UndefinedObject";
   this.header = 254;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`UndefinedObject", true, 255),
    new MM("instance`initializer", true, 256),
    new MM("ifNil:", false, 257),
    new MM("ifNil:ifNotNil:", false, 258),
    new MM("ifNotNil:", false, 259),
    new MM("isNil", false, 260),
    new MM("notNil", false, 261),
    new MM("printString", false, 262)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$UndefinedObject = function () {
    var self = this;
    self.$super$KernelForV8$UndefinedObject$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$KernelForV8$UndefinedObject();
    return self;
   };
   this.$ifNil$ = function ($nilBlock) {
    var self = this;
    return $nilBlock.$value();
   };
   this.$ifNil$ifNotNil$ = function ($nilBlock, $notNilBlock) {
    var self = this;
    return $nilBlock.$value();
   };
   this.$ifNotNil$ = function ($notNilBlock) {
    var self = this;
    return self;
   };
   this.$isNil = function () {
    var self = this;
    return true;
   };
   this.$notNil = function () {
    var self = this;
    return false;
   };
   this.$printString = function () {
    var self = this;
    return "nil";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`UndefinedObject";
     this._$superInit$KernelForV8$UndefinedObject = $.$superInit$KernelForV8$UndefinedObject;
     this.$superInit$KernelForV8$UndefinedObject = dnuCatcher("$superInit$KernelForV8$UndefinedObject");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$ifNil$ = this._$ifNil$ = $.$ifNil$;
     this.$ifNil$ifNotNil$ = this._$ifNil$ifNotNil$ = $.$ifNil$ifNotNil$;
     this.$ifNotNil$ = this._$ifNotNil$ = $.$ifNotNil$;
     this.$isNil = this._$isNil = $.$isNil;
     this.$notNil = this._$notNil = $.$notNil;
     this.$printString = this._$printString = $.$printString;
     this.$enclosingObjects$KernelForV8$UndefinedObject = enclosingObjects;
     this.$super$KernelForV8$UndefinedObject$slot = runtimeSuperclass;
     this["KernelForV8`UndefinedObject"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`UndefinedObject"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`UndefinedObject";
    this.slots = [];
    this.methods = [new MM("uninstantiable", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`UndefinedObject";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$UndefinedObject = enclosingObjects;
      this.$super$KernelForV8$UndefinedObject = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Array.enclosingMixin = this;
  this.$KernelForV8$Block.enclosingMixin = this;
  this.$KernelForV8$Boolean.enclosingMixin = this;
  this.$KernelForV8$Class.enclosingMixin = this;
  this.$KernelForV8$Error.enclosingMixin = this;
  this.$KernelForV8$Future.enclosingMixin = this;
  this.$KernelForV8$Message.enclosingMixin = this;
  this.$KernelForV8$MessageNotUnderstood.enclosingMixin = this;
  this.$KernelForV8$Metaclass.enclosingMixin = this;
  this.$KernelForV8$Mixin.enclosingMixin = this;
  this.$KernelForV8$Number.enclosingMixin = this;
  this.$KernelForV8$Object.enclosingMixin = this;
  this.$KernelForV8$Stopwatch.enclosingMixin = this;
  this.$KernelForV8$String.enclosingMixin = this;
  this.$KernelForV8$UndefinedObject.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for KernelForV8";
    this._$superInit$KernelForV8 = $.$superInit$KernelForV8;
    this.$superInit$KernelForV8 = dnuCatcher("$superInit$KernelForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$MutableString = this._$MutableString = $.$MutableString;
    this._$augment$withPropertiesOf$ = $.$augment$withPropertiesOf$;
    this.$augment$withPropertiesOf$ = dnuCatcher("$augment$withPropertiesOf$");
    this.$augmentPrototypes = this._$augmentPrototypes = $.$augmentPrototypes;
    this.$Array = this._$Array = $.$Array;
    this.$Block = this._$Block = $.$Block;
    this.$Boolean = this._$Boolean = $.$Boolean;
    this.$Class = this._$Class = $.$Class;
    this.$Error = this._$Error = $.$Error;
    this.$Future = this._$Future = $.$Future;
    this.$Message = this._$Message = $.$Message;
    this.$MessageNotUnderstood = this._$MessageNotUnderstood = $.$MessageNotUnderstood;
    this.$Metaclass = this._$Metaclass = $.$Metaclass;
    this.$Mixin = this._$Mixin = $.$Mixin;
    this.$Number = this._$Number = $.$Number;
    this.$Object = this._$Object = $.$Object;
    this.$Stopwatch = this._$Stopwatch = $.$Stopwatch;
    this.$String = this._$String = $.$String;
    this.$UndefinedObject = this._$UndefinedObject = $.$UndefinedObject;
    this._$init$vmmirror$ = $.$init$vmmirror$;
    this.$init$vmmirror$ = dnuCatcher("$init$vmmirror$");
    this._$vmmirror = $.$vmmirror;
    this.$vmmirror = dnuCatcher("$vmmirror");
    this.$init$platform$ = this._$init$platform$ = $.$init$platform$;
    this.$platform = this._$platform = $.$platform;
    this.$platform$ = this._$platform$ = $.$platform$;
    this.$init$KernelForV8$Array$ = this._$init$KernelForV8$Array$ = $.$init$KernelForV8$Array$;
    this.$KernelForV8$Array = this._$KernelForV8$Array = $.$KernelForV8$Array;
    this.$KernelForV8$Array$ = this._$KernelForV8$Array$ = $.$KernelForV8$Array$;
    this.$init$KernelForV8$Block$ = this._$init$KernelForV8$Block$ = $.$init$KernelForV8$Block$;
    this.$KernelForV8$Block = this._$KernelForV8$Block = $.$KernelForV8$Block;
    this.$KernelForV8$Block$ = this._$KernelForV8$Block$ = $.$KernelForV8$Block$;
    this.$init$KernelForV8$Boolean$ = this._$init$KernelForV8$Boolean$ = $.$init$KernelForV8$Boolean$;
    this.$KernelForV8$Boolean = this._$KernelForV8$Boolean = $.$KernelForV8$Boolean;
    this.$KernelForV8$Boolean$ = this._$KernelForV8$Boolean$ = $.$KernelForV8$Boolean$;
    this.$init$KernelForV8$Class$ = this._$init$KernelForV8$Class$ = $.$init$KernelForV8$Class$;
    this.$KernelForV8$Class = this._$KernelForV8$Class = $.$KernelForV8$Class;
    this.$KernelForV8$Class$ = this._$KernelForV8$Class$ = $.$KernelForV8$Class$;
    this.$init$KernelForV8$Error$ = this._$init$KernelForV8$Error$ = $.$init$KernelForV8$Error$;
    this.$KernelForV8$Error = this._$KernelForV8$Error = $.$KernelForV8$Error;
    this.$KernelForV8$Error$ = this._$KernelForV8$Error$ = $.$KernelForV8$Error$;
    this.$init$KernelForV8$Future$ = this._$init$KernelForV8$Future$ = $.$init$KernelForV8$Future$;
    this.$KernelForV8$Future = this._$KernelForV8$Future = $.$KernelForV8$Future;
    this.$KernelForV8$Future$ = this._$KernelForV8$Future$ = $.$KernelForV8$Future$;
    this.$init$KernelForV8$Message$ = this._$init$KernelForV8$Message$ = $.$init$KernelForV8$Message$;
    this.$KernelForV8$Message = this._$KernelForV8$Message = $.$KernelForV8$Message;
    this.$KernelForV8$Message$ = this._$KernelForV8$Message$ = $.$KernelForV8$Message$;
    this.$init$KernelForV8$MessageNotUnderstood$ = this._$init$KernelForV8$MessageNotUnderstood$ = $.$init$KernelForV8$MessageNotUnderstood$;
    this.$KernelForV8$MessageNotUnderstood = this._$KernelForV8$MessageNotUnderstood = $.$KernelForV8$MessageNotUnderstood;
    this.$KernelForV8$MessageNotUnderstood$ = this._$KernelForV8$MessageNotUnderstood$ = $.$KernelForV8$MessageNotUnderstood$;
    this.$init$KernelForV8$Metaclass$ = this._$init$KernelForV8$Metaclass$ = $.$init$KernelForV8$Metaclass$;
    this.$KernelForV8$Metaclass = this._$KernelForV8$Metaclass = $.$KernelForV8$Metaclass;
    this.$KernelForV8$Metaclass$ = this._$KernelForV8$Metaclass$ = $.$KernelForV8$Metaclass$;
    this.$init$KernelForV8$Mixin$ = this._$init$KernelForV8$Mixin$ = $.$init$KernelForV8$Mixin$;
    this.$KernelForV8$Mixin = this._$KernelForV8$Mixin = $.$KernelForV8$Mixin;
    this.$KernelForV8$Mixin$ = this._$KernelForV8$Mixin$ = $.$KernelForV8$Mixin$;
    this.$init$KernelForV8$Number$ = this._$init$KernelForV8$Number$ = $.$init$KernelForV8$Number$;
    this.$KernelForV8$Number = this._$KernelForV8$Number = $.$KernelForV8$Number;
    this.$KernelForV8$Number$ = this._$KernelForV8$Number$ = $.$KernelForV8$Number$;
    this.$init$KernelForV8$Object$ = this._$init$KernelForV8$Object$ = $.$init$KernelForV8$Object$;
    this.$KernelForV8$Object = this._$KernelForV8$Object = $.$KernelForV8$Object;
    this.$KernelForV8$Object$ = this._$KernelForV8$Object$ = $.$KernelForV8$Object$;
    this.$init$KernelForV8$Stopwatch$ = this._$init$KernelForV8$Stopwatch$ = $.$init$KernelForV8$Stopwatch$;
    this.$KernelForV8$Stopwatch = this._$KernelForV8$Stopwatch = $.$KernelForV8$Stopwatch;
    this.$KernelForV8$Stopwatch$ = this._$KernelForV8$Stopwatch$ = $.$KernelForV8$Stopwatch$;
    this.$init$KernelForV8$String$ = this._$init$KernelForV8$String$ = $.$init$KernelForV8$String$;
    this.$KernelForV8$String = this._$KernelForV8$String = $.$KernelForV8$String;
    this.$KernelForV8$String$ = this._$KernelForV8$String$ = $.$KernelForV8$String$;
    this.$init$KernelForV8$UndefinedObject$ = this._$init$KernelForV8$UndefinedObject$ = $.$init$KernelForV8$UndefinedObject$;
    this.$KernelForV8$UndefinedObject = this._$KernelForV8$UndefinedObject = $.$KernelForV8$UndefinedObject;
    this.$KernelForV8$UndefinedObject$ = this._$KernelForV8$UndefinedObject$ = $.$KernelForV8$UndefinedObject$;
    this.$enclosingObjects$KernelForV8 = enclosingObjects;
    this.$super$KernelForV8$slot = runtimeSuperclass;
    this.KernelForV8 = function () {
     superBasicNew.call(this);
     this.$vmmirror$slot = nil;
     this.$platform$slot = nil;
     this.$KernelForV8$Array$slot = nil;
     this.$KernelForV8$Block$slot = nil;
     this.$KernelForV8$Boolean$slot = nil;
     this.$KernelForV8$Class$slot = nil;
     this.$KernelForV8$Error$slot = nil;
     this.$KernelForV8$Future$slot = nil;
     this.$KernelForV8$Message$slot = nil;
     this.$KernelForV8$MessageNotUnderstood$slot = nil;
     this.$KernelForV8$Metaclass$slot = nil;
     this.$KernelForV8$Mixin$slot = nil;
     this.$KernelForV8$Number$slot = nil;
     this.$KernelForV8$Object$slot = nil;
     this.$KernelForV8$Stopwatch$slot = nil;
     this.$KernelForV8$String$slot = nil;
     this.$KernelForV8$UndefinedObject$slot = nil;
    };
    this.basicNew = this.KernelForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for KernelForV8";
   this.slots = [];
   this.methods = [new MM("usingVmMirror:", true, 0)];
   this.nestedClasses = [];
   this.$usingVmMirror$ = function ($vmm) {
    return (new this.nonMeta.basicNew()).$instance$initializer($vmm);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for KernelForV8";
     this.$usingVmMirror$ = this._$usingVmMirror$ = $.$usingVmMirror$;
     this.$enclosingObjects$KernelForV8 = enclosingObjects;
     this.$super$KernelForV8 = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$ActorsForV8 = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for ActorsForV8";
  this.name = "ActorsForV8";
  this.header = 263;
  this.slots = [
   new SM("WeakMap", false, false),
   new SM("List", false, false),
   new SM("internalRefs", false, false),
   new SM("Promise", false, false),
   new SM("defaultActor", false, false),
   new SM("ActorsForV8`Actor", true, true),
   new SM("ActorsForV8`DOMActor", true, true),
   new SM("ActorsForV8`EventualSendReactor", true, true),
   new SM("ActorsForV8`InternalActor", true, true),
   new SM("ActorsForV8`InternalBrokenRef", true, true),
   new SM("ActorsForV8`InternalFarReference", true, true),
   new SM("ActorsForV8`InternalLocalPromise", true, true),
   new SM("ActorsForV8`InternalNearRef", true, true),
   new SM("ActorsForV8`InternalRef", true, true),
   new SM("ActorsForV8`InternalRemotePromise", true, true),
   new SM("ActorsForV8`PendingDelivery", true, true),
   new SM("ActorsForV8`PromiseUtils", true, true),
   new SM("ActorsForV8`RedirectReactor", true, true),
   new SM("ActorsForV8`Ref", true, true),
   new SM("ActorsForV8`Resolver", true, true),
   new SM("ActorsForV8`Scheduler", true, true),
   new SM("ActorsForV8`Timer", true, true),
   new SM("ActorsForV8`WhenReactor", true, true)
  ];
  this.methods = [
   new MM("superInit`ActorsForV8", true, 264),
   new MM("instance`initializer", true, 265),
   new MM("asInternalRef:", false, 266),
   new MM("check:allowedIn:", false, 267),
   new MM("createFarReferenceTo:in:for:", false, 268),
   new MM("createRemotePromiseOf:in:for:", false, 269),
   new MM("currentActor", false, 270),
   new MM("isRef:", false, 271),
   new MM("isValueObject:", false, 272),
   new MM("wrapArgument:from:to:", false, 273),
   new MM("wrapArguments:from:to:", false, 274),
   new MM("Actor", true, 0),
   new MM("DOMActor", true, 0),
   new MM("EventualSendReactor", true, 0),
   new MM("InternalActor", true, 0),
   new MM("InternalBrokenRef", true, 0),
   new MM("InternalFarReference", true, 0),
   new MM("InternalLocalPromise", true, 0),
   new MM("InternalNearRef", true, 0),
   new MM("InternalRef", true, 0),
   new MM("InternalRemotePromise", true, 0),
   new MM("PendingDelivery", true, 0),
   new MM("PromiseUtils", true, 0),
   new MM("RedirectReactor", true, 0),
   new MM("Ref", true, 0),
   new MM("Resolver", true, 0),
   new MM("Scheduler", true, 0),
   new MM("Timer", true, 0),
   new MM("WhenReactor", true, 0),
   new MM("init`WeakMap:", true, 0),
   new MM("WeakMap", true, 0),
   new MM("init`List:", true, 0),
   new MM("List", true, 0),
   new MM("init`internalRefs:", true, 0),
   new MM("internalRefs", true, 0),
   new MM("init`Promise:", true, 0),
   new MM("Promise", true, 0),
   new MM("init`defaultActor:", true, 0),
   new MM("defaultActor", true, 0),
   new MM("init`ActorsForV8`Actor:", true, 0),
   new MM("ActorsForV8`Actor", true, 0),
   new MM("ActorsForV8`Actor:", true, 0),
   new MM("init`ActorsForV8`DOMActor:", true, 0),
   new MM("ActorsForV8`DOMActor", true, 0),
   new MM("ActorsForV8`DOMActor:", true, 0),
   new MM("init`ActorsForV8`EventualSendReactor:", true, 0),
   new MM("ActorsForV8`EventualSendReactor", true, 0),
   new MM("ActorsForV8`EventualSendReactor:", true, 0),
   new MM("init`ActorsForV8`InternalActor:", true, 0),
   new MM("ActorsForV8`InternalActor", true, 0),
   new MM("ActorsForV8`InternalActor:", true, 0),
   new MM("init`ActorsForV8`InternalBrokenRef:", true, 0),
   new MM("ActorsForV8`InternalBrokenRef", true, 0),
   new MM("ActorsForV8`InternalBrokenRef:", true, 0),
   new MM("init`ActorsForV8`InternalFarReference:", true, 0),
   new MM("ActorsForV8`InternalFarReference", true, 0),
   new MM("ActorsForV8`InternalFarReference:", true, 0),
   new MM("init`ActorsForV8`InternalLocalPromise:", true, 0),
   new MM("ActorsForV8`InternalLocalPromise", true, 0),
   new MM("ActorsForV8`InternalLocalPromise:", true, 0),
   new MM("init`ActorsForV8`InternalNearRef:", true, 0),
   new MM("ActorsForV8`InternalNearRef", true, 0),
   new MM("ActorsForV8`InternalNearRef:", true, 0),
   new MM("init`ActorsForV8`InternalRef:", true, 0),
   new MM("ActorsForV8`InternalRef", true, 0),
   new MM("ActorsForV8`InternalRef:", true, 0),
   new MM("init`ActorsForV8`InternalRemotePromise:", true, 0),
   new MM("ActorsForV8`InternalRemotePromise", true, 0),
   new MM("ActorsForV8`InternalRemotePromise:", true, 0),
   new MM("init`ActorsForV8`PendingDelivery:", true, 0),
   new MM("ActorsForV8`PendingDelivery", true, 0),
   new MM("ActorsForV8`PendingDelivery:", true, 0),
   new MM("init`ActorsForV8`PromiseUtils:", true, 0),
   new MM("ActorsForV8`PromiseUtils", true, 0),
   new MM("ActorsForV8`PromiseUtils:", true, 0),
   new MM("init`ActorsForV8`RedirectReactor:", true, 0),
   new MM("ActorsForV8`RedirectReactor", true, 0),
   new MM("ActorsForV8`RedirectReactor:", true, 0),
   new MM("init`ActorsForV8`Ref:", true, 0),
   new MM("ActorsForV8`Ref", true, 0),
   new MM("ActorsForV8`Ref:", true, 0),
   new MM("init`ActorsForV8`Resolver:", true, 0),
   new MM("ActorsForV8`Resolver", true, 0),
   new MM("ActorsForV8`Resolver:", true, 0),
   new MM("init`ActorsForV8`Scheduler:", true, 0),
   new MM("ActorsForV8`Scheduler", true, 0),
   new MM("ActorsForV8`Scheduler:", true, 0),
   new MM("init`ActorsForV8`Timer:", true, 0),
   new MM("ActorsForV8`Timer", true, 0),
   new MM("ActorsForV8`Timer:", true, 0),
   new MM("init`ActorsForV8`WhenReactor:", true, 0),
   new MM("ActorsForV8`WhenReactor", true, 0),
   new MM("ActorsForV8`WhenReactor:", true, 0)
  ];
  this.nestedClasses = [
   "ActorsForV8`Actor",
   "ActorsForV8`DOMActor",
   "ActorsForV8`EventualSendReactor",
   "ActorsForV8`InternalActor",
   "ActorsForV8`InternalBrokenRef",
   "ActorsForV8`InternalFarReference",
   "ActorsForV8`InternalLocalPromise",
   "ActorsForV8`InternalNearRef",
   "ActorsForV8`InternalRef",
   "ActorsForV8`InternalRemotePromise",
   "ActorsForV8`PendingDelivery",
   "ActorsForV8`PromiseUtils",
   "ActorsForV8`RedirectReactor",
   "ActorsForV8`Ref",
   "ActorsForV8`Resolver",
   "ActorsForV8`Scheduler",
   "ActorsForV8`Timer",
   "ActorsForV8`WhenReactor"
  ];
  this.applications = [];
  this.$superInit$ActorsForV8 = function ($p) {
   var self = this;
   self.$super$ActorsForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   var self = this;
   self._$superInit$ActorsForV8($p);
   $0.$init$WeakMap$(self, $p.$collections().$IdentityDictionary());
   $0.$init$List$(self, $p.$collections().$OrderedCollection());
   $0.$init$internalRefs$(self, $0.$WeakMap(self).$new());
   self._$init$Promise$(self._$PromiseUtils().$new());
   self._$init$defaultActor$(self._$DOMActor().$named$("Default actor"));
   currentActor = self._$defaultActor();
   return self;
  };
  this.$asInternalRef$ = function (self, $externalRefOrUnboxedNearRef) {
   return $0.$isRef$(self, $externalRefOrUnboxedNearRef).$ifTrue$ifFalse$(function () {
    return $0.$internalRefs(self).$at$ifAbsent$($externalRefOrUnboxedNearRef, function () {
     return self._$halt();
    });
   }, function () {
    return self._$InternalNearRef().$wrapping$__owner$($externalRefOrUnboxedNearRef, $0.$currentActor(self));
   });
  };
  this.$check$allowedIn$ = function (self, $object, $actor) {
   self._$assert$message$(function () {
    return nil.$$tilde$equal($actor);
   }, "Invalid actor");
   if ($0.$isRef$(self, $object)) {
    if (!($object.$__owner() === $actor)) {
     self._$halt();
    } else {
     nil;
    };
   } else {
    nil;
   };
   return self;
  };
  this.$createFarReferenceTo$in$for$ = function (self, $target, $targetActor, $sourceActor) {
   return self._$InternalFarReference().$target$targetsActor$__owner$($target, $targetActor, $sourceActor).$externalRef();
  };
  this.$createRemotePromiseOf$in$for$ = function (self, $resolverInTarget, $targetActor, $sourceActor) {
   var $sourceResolver = nil;
   var $redirector = nil;
   var $message = nil;
   var $remotePromise = nil;
   if ($sourceActor === $targetActor) {
    self._$halt();
   } else {
    nil;
   };
   $sourceResolver = self._$InternalLocalPromise().$__owner$($sourceActor);
   $sourceResolver.$state$("remote");
   $sourceResolver.$_targetPromise$($resolverInTarget);
   $sourceResolver.$_targetActor$($targetActor);
   $redirector = self._$RedirectReactor().$from$to$resolver$($targetActor, $sourceActor, $sourceResolver);
   $message = self._$PendingDelivery().$receiver$selector$arguments$resolver$($resolverInTarget, "addReactor:", [$redirector], nil);
   $targetActor.$enqueueMessage$($message);
   return self._$Ref().$wrapping$__owner$($sourceResolver, $sourceActor);
  };
  this.$currentActor = function (self) {
   return currentActor;
  };
  this.$isRef$ = function (self, $object) {
   return self._$Ref() === $object.newspeakClass;
  };
  this.$isValueObject$ = function (self, $object) {
   if (nil === $object) {
    return true;
   } else {
    nil;
   };
   if (true === $object) {
    return true;
   } else {
    nil;
   };
   if (false === $object) {
    return true;
   } else {
    nil;
   };
   if ($object.$isString()) {
    return true;
   } else {
    nil;
   };
   if ($object.$isNumber()) {
    return true;
   } else {
    nil;
   };
   if ($object.$isCharacter()) {
    return true;
   } else {
    nil;
   };
   if ($object.$isBehavior()) {
    return $0.$isValueObject$(self, $object.$enclosingClass());
   } else {
    nil;
   };
   if (self._$Promise() === $object) {
    return true;
   } else {
    nil;
   };
   return false;
  };
  this.$wrapArgument$from$to$ = function (self, $argument, $sourceActor, $targetActor) {
   if ($sourceActor === $targetActor) {
    self._$halt();
   } else {
    nil;
   };
   return $0.$asInternalRef$(self, $argument).$wrapFor$($targetActor);
  };
  this.$wrapArguments$from$to$ = function (self, $arguments, $sourceActor, $targetActor) {
   return $arguments.$collect$(function ($argument) {
    return $0.$wrapArgument$from$to$(self, $argument, $sourceActor, $targetActor);
   });
  };
  this.$Actor = function () {
   if (nil === this.$ActorsForV8$Actor$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$Actor;
    this.$ActorsForV8$Actor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Actor$slot;
  };
  this.$DOMActor = function () {
   if (nil === this.$ActorsForV8$DOMActor$slot) {
    var self = this;
    var superclass = self._$InternalActor();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$DOMActor;
    this.$ActorsForV8$DOMActor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$DOMActor$slot;
  };
  this.$EventualSendReactor = function () {
   if (nil === this.$ActorsForV8$EventualSendReactor$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$EventualSendReactor;
    this.$ActorsForV8$EventualSendReactor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$EventualSendReactor$slot;
  };
  this.$InternalActor = function () {
   if (nil === this.$ActorsForV8$InternalActor$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalActor;
    this.$ActorsForV8$InternalActor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalActor$slot;
  };
  this.$InternalBrokenRef = function () {
   if (nil === this.$ActorsForV8$InternalBrokenRef$slot) {
    var self = this;
    var superclass = self._$InternalRef();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalBrokenRef;
    this.$ActorsForV8$InternalBrokenRef$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalBrokenRef$slot;
  };
  this.$InternalFarReference = function () {
   if (nil === this.$ActorsForV8$InternalFarReference$slot) {
    var self = this;
    var superclass = self._$InternalRef();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalFarReference;
    this.$ActorsForV8$InternalFarReference$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalFarReference$slot;
  };
  this.$InternalLocalPromise = function () {
   if (nil === this.$ActorsForV8$InternalLocalPromise$slot) {
    var self = this;
    var superclass = self._$InternalRef();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalLocalPromise;
    this.$ActorsForV8$InternalLocalPromise$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalLocalPromise$slot;
  };
  this.$InternalNearRef = function () {
   if (nil === this.$ActorsForV8$InternalNearRef$slot) {
    var self = this;
    var superclass = self._$InternalRef();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalNearRef;
    this.$ActorsForV8$InternalNearRef$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalNearRef$slot;
  };
  this.$InternalRef = function () {
   if (nil === this.$ActorsForV8$InternalRef$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalRef;
    this.$ActorsForV8$InternalRef$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalRef$slot;
  };
  this.$InternalRemotePromise = function () {
   if (nil === this.$ActorsForV8$InternalRemotePromise$slot) {
    var self = this;
    var superclass = self._$InternalRef();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$InternalRemotePromise;
    this.$ActorsForV8$InternalRemotePromise$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalRemotePromise$slot;
  };
  this.$PendingDelivery = function () {
   if (nil === this.$ActorsForV8$PendingDelivery$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$PendingDelivery;
    this.$ActorsForV8$PendingDelivery$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$PendingDelivery$slot;
  };
  this.$PromiseUtils = function () {
   if (nil === this.$ActorsForV8$PromiseUtils$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$PromiseUtils;
    this.$ActorsForV8$PromiseUtils$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$PromiseUtils$slot;
  };
  this.$RedirectReactor = function () {
   if (nil === this.$ActorsForV8$RedirectReactor$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$RedirectReactor;
    this.$ActorsForV8$RedirectReactor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$RedirectReactor$slot;
  };
  this.$Ref = function () {
   if (nil === this.$ActorsForV8$Ref$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$Ref;
    this.$ActorsForV8$Ref$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Ref$slot;
  };
  this.$Resolver = function () {
   if (nil === this.$ActorsForV8$Resolver$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$Resolver;
    this.$ActorsForV8$Resolver$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Resolver$slot;
  };
  this.$Scheduler = function () {
   if (nil === this.$ActorsForV8$Scheduler$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$Scheduler;
    this.$ActorsForV8$Scheduler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Scheduler$slot;
  };
  this.$Timer = function () {
   if (nil === this.$ActorsForV8$Timer$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$Timer;
    this.$ActorsForV8$Timer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Timer$slot;
  };
  this.$WhenReactor = function () {
   if (nil === this.$ActorsForV8$WhenReactor$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    var mixin = $.$ActorsForV8$WhenReactor;
    this.$ActorsForV8$WhenReactor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$WhenReactor$slot;
  };
  this.$init$WeakMap$ = function (self, v) {
   self.$WeakMap$slot = v;
   return self;
  };
  this.$WeakMap = function (self) {
   return self.$WeakMap$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$internalRefs$ = function (self, v) {
   self.$internalRefs$slot = v;
   return self;
  };
  this.$internalRefs = function (self) {
   return self.$internalRefs$slot;
  };
  this.$init$Promise$ = function (v) {
   this.$Promise$slot = v;
   return this;
  };
  this.$Promise = function () {
   return this.$Promise$slot;
  };
  this.$init$defaultActor$ = function (v) {
   this.$defaultActor$slot = v;
   return this;
  };
  this.$defaultActor = function () {
   return this.$defaultActor$slot;
  };
  this.$init$ActorsForV8$Actor$ = function (v) {
   this.$ActorsForV8$Actor$slot = v;
   return this;
  };
  this.$ActorsForV8$Actor = function () {
   return this.$ActorsForV8$Actor$slot;
  };
  this.$ActorsForV8$Actor$ = function (v) {
   this.$ActorsForV8$Actor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$DOMActor$ = function (v) {
   this.$ActorsForV8$DOMActor$slot = v;
   return this;
  };
  this.$ActorsForV8$DOMActor = function () {
   return this.$ActorsForV8$DOMActor$slot;
  };
  this.$ActorsForV8$DOMActor$ = function (v) {
   this.$ActorsForV8$DOMActor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$EventualSendReactor$ = function (v) {
   this.$ActorsForV8$EventualSendReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$EventualSendReactor = function () {
   return this.$ActorsForV8$EventualSendReactor$slot;
  };
  this.$ActorsForV8$EventualSendReactor$ = function (v) {
   this.$ActorsForV8$EventualSendReactor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalActor$ = function (v) {
   this.$ActorsForV8$InternalActor$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalActor = function () {
   return this.$ActorsForV8$InternalActor$slot;
  };
  this.$ActorsForV8$InternalActor$ = function (v) {
   this.$ActorsForV8$InternalActor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalBrokenRef$ = function (v) {
   this.$ActorsForV8$InternalBrokenRef$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalBrokenRef = function () {
   return this.$ActorsForV8$InternalBrokenRef$slot;
  };
  this.$ActorsForV8$InternalBrokenRef$ = function (v) {
   this.$ActorsForV8$InternalBrokenRef$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalFarReference$ = function (v) {
   this.$ActorsForV8$InternalFarReference$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalFarReference = function () {
   return this.$ActorsForV8$InternalFarReference$slot;
  };
  this.$ActorsForV8$InternalFarReference$ = function (v) {
   this.$ActorsForV8$InternalFarReference$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalLocalPromise$ = function (v) {
   this.$ActorsForV8$InternalLocalPromise$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalLocalPromise = function () {
   return this.$ActorsForV8$InternalLocalPromise$slot;
  };
  this.$ActorsForV8$InternalLocalPromise$ = function (v) {
   this.$ActorsForV8$InternalLocalPromise$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalNearRef$ = function (v) {
   this.$ActorsForV8$InternalNearRef$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalNearRef = function () {
   return this.$ActorsForV8$InternalNearRef$slot;
  };
  this.$ActorsForV8$InternalNearRef$ = function (v) {
   this.$ActorsForV8$InternalNearRef$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalRef$ = function (v) {
   this.$ActorsForV8$InternalRef$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalRef = function () {
   return this.$ActorsForV8$InternalRef$slot;
  };
  this.$ActorsForV8$InternalRef$ = function (v) {
   this.$ActorsForV8$InternalRef$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalRemotePromise$ = function (v) {
   this.$ActorsForV8$InternalRemotePromise$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalRemotePromise = function () {
   return this.$ActorsForV8$InternalRemotePromise$slot;
  };
  this.$ActorsForV8$InternalRemotePromise$ = function (v) {
   this.$ActorsForV8$InternalRemotePromise$slot = v;
   return this;
  };
  this.$init$ActorsForV8$PendingDelivery$ = function (v) {
   this.$ActorsForV8$PendingDelivery$slot = v;
   return this;
  };
  this.$ActorsForV8$PendingDelivery = function () {
   return this.$ActorsForV8$PendingDelivery$slot;
  };
  this.$ActorsForV8$PendingDelivery$ = function (v) {
   this.$ActorsForV8$PendingDelivery$slot = v;
   return this;
  };
  this.$init$ActorsForV8$PromiseUtils$ = function (v) {
   this.$ActorsForV8$PromiseUtils$slot = v;
   return this;
  };
  this.$ActorsForV8$PromiseUtils = function () {
   return this.$ActorsForV8$PromiseUtils$slot;
  };
  this.$ActorsForV8$PromiseUtils$ = function (v) {
   this.$ActorsForV8$PromiseUtils$slot = v;
   return this;
  };
  this.$init$ActorsForV8$RedirectReactor$ = function (v) {
   this.$ActorsForV8$RedirectReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$RedirectReactor = function () {
   return this.$ActorsForV8$RedirectReactor$slot;
  };
  this.$ActorsForV8$RedirectReactor$ = function (v) {
   this.$ActorsForV8$RedirectReactor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Ref$ = function (v) {
   this.$ActorsForV8$Ref$slot = v;
   return this;
  };
  this.$ActorsForV8$Ref = function () {
   return this.$ActorsForV8$Ref$slot;
  };
  this.$ActorsForV8$Ref$ = function (v) {
   this.$ActorsForV8$Ref$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Resolver$ = function (v) {
   this.$ActorsForV8$Resolver$slot = v;
   return this;
  };
  this.$ActorsForV8$Resolver = function () {
   return this.$ActorsForV8$Resolver$slot;
  };
  this.$ActorsForV8$Resolver$ = function (v) {
   this.$ActorsForV8$Resolver$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Scheduler$ = function (v) {
   this.$ActorsForV8$Scheduler$slot = v;
   return this;
  };
  this.$ActorsForV8$Scheduler = function () {
   return this.$ActorsForV8$Scheduler$slot;
  };
  this.$ActorsForV8$Scheduler$ = function (v) {
   this.$ActorsForV8$Scheduler$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Timer$ = function (v) {
   this.$ActorsForV8$Timer$slot = v;
   return this;
  };
  this.$ActorsForV8$Timer = function () {
   return this.$ActorsForV8$Timer$slot;
  };
  this.$ActorsForV8$Timer$ = function (v) {
   this.$ActorsForV8$Timer$slot = v;
   return this;
  };
  this.$init$ActorsForV8$WhenReactor$ = function (v) {
   this.$ActorsForV8$WhenReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$WhenReactor = function () {
   return this.$ActorsForV8$WhenReactor$slot;
  };
  this.$ActorsForV8$WhenReactor$ = function (v) {
   this.$ActorsForV8$WhenReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$Actor = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Actor";
   this.name = "ActorsForV8`Actor";
   this.header = 275;
   this.slots = [new SM("internalActor", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`Actor", true, 276),
    new MM("instance`initializer", true, 277),
    new MM("interrupt", false, 278),
    new MM("onError:", false, 279),
    new MM("seed:", false, 280),
    new MM("terminate", false, 281),
    new MM("init`internalActor:", true, 0),
    new MM("internalActor", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Actor = function ($debugName) {
    var self = this;
    self.$super$ActorsForV8$Actor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($debugName) {
    var self = this;
    self._$superInit$ActorsForV8$Actor($debugName);
    $1.$init$internalActor$(self, self.$enclosingObjects$ActorsForV8$Actor[0]._$DOMActor().$named$($debugName));
    return self;
   };
   this.$interrupt = function () {
    var self = this;
    self._$unimplemented();
    return self;
   };
   this.$onError$ = function ($onError) {
    var self = this;
    self._$unimplemented();
    return self;
   };
   this.$seed$ = function ($value) {
    var self = this;
    if (!$0.$isValueObject$(self.$enclosingObjects$ActorsForV8$Actor[0], $value)) {
     self._$Error().$signal$("Cannot seed an actor with a non-Value.");
    } else {
     nil;
    };
    return $0.$createFarReferenceTo$in$for$(self.$enclosingObjects$ActorsForV8$Actor[0], $value, $1.$internalActor(self), $0.$currentActor(self.$enclosingObjects$ActorsForV8$Actor[0]));
   };
   this.$terminate = function () {
    var self = this;
    self._$unimplemented();
    return self;
   };
   this.$init$internalActor$ = function (self, v) {
    self.$internalActor$slot = v;
    return self;
   };
   this.$internalActor = function (self) {
    return self.$internalActor$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Actor";
     this._$superInit$ActorsForV8$Actor = $.$superInit$ActorsForV8$Actor;
     this.$superInit$ActorsForV8$Actor = dnuCatcher("$superInit$ActorsForV8$Actor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$interrupt = this._$interrupt = $.$interrupt;
     this.$onError$ = this._$onError$ = $.$onError$;
     this.$seed$ = this._$seed$ = $.$seed$;
     this.$terminate = this._$terminate = $.$terminate;
     this.$enclosingObjects$ActorsForV8$Actor = enclosingObjects;
     this.$super$ActorsForV8$Actor$slot = runtimeSuperclass;
     this["ActorsForV8`Actor"] = function () {
      superBasicNew.call(this);
      this.$internalActor$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Actor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Actor";
    this.slots = [];
    this.methods = [new MM("named:", true, 0)];
    this.nestedClasses = [];
    this.$named$ = function ($debugName) {
     return (new this.nonMeta.basicNew()).$instance$initializer($debugName);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Actor";
      this.$named$ = this._$named$ = $.$named$;
      this.$enclosingObjects$ActorsForV8$Actor = enclosingObjects;
      this.$super$ActorsForV8$Actor = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$DOMActor = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`DOMActor";
   this.name = "ActorsForV8`DOMActor";
   this.header = 282;
   this.slots = [new SM("name", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`DOMActor", true, 283),
    new MM("instance`initializer", true, 284),
    new MM("enqueueMessage:", false, 285),
    new MM("init`name:", true, 0),
    new MM("name", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$DOMActor = function ($n) {
    var self = this;
    self.$super$ActorsForV8$DOMActor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n) {
    var self = this;
    self._$superInit$ActorsForV8$DOMActor($n);
    self._$init$name$($n);
    return self;
   };
   this.$enqueueMessage$ = function ($actorMessage) {
    var self = this;
    $actorMessage.$postedTo$(self);
    theGlobalObject.setTimeout(function () {
     currentActor = self;
     return $actorMessage.$deliverIn$(self);
    }, 0);
    return self;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`DOMActor";
     this._$superInit$ActorsForV8$DOMActor = $.$superInit$ActorsForV8$DOMActor;
     this.$superInit$ActorsForV8$DOMActor = dnuCatcher("$superInit$ActorsForV8$DOMActor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enqueueMessage$ = this._$enqueueMessage$ = $.$enqueueMessage$;
     this._$init$name$ = $.$init$name$;
     this.$init$name$ = dnuCatcher("$init$name$");
     this._$name = $.$name;
     this.$name = dnuCatcher("$name");
     this.$enclosingObjects$ActorsForV8$DOMActor = enclosingObjects;
     this.$super$ActorsForV8$DOMActor$slot = runtimeSuperclass;
     this["ActorsForV8`DOMActor"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
     };
     this.basicNew = this["ActorsForV8`DOMActor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`DOMActor";
    this.slots = [];
    this.methods = [new MM("named:", true, 0)];
    this.nestedClasses = [];
    this.$named$ = function ($n) {
     return (new this.nonMeta.basicNew()).$instance$initializer($n);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`DOMActor";
      this.$named$ = this._$named$ = $.$named$;
      this.$enclosingObjects$ActorsForV8$DOMActor = enclosingObjects;
      this.$super$ActorsForV8$DOMActor = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$EventualSendReactor = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`EventualSendReactor";
   this.name = "ActorsForV8`EventualSendReactor";
   this.header = 286;
   this.slots = [
    new SM("selector", false, false),
    new SM("arguments", false, false),
    new SM("resolver", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`EventualSendReactor", true, 287),
    new MM("instance`initializer", true, 288),
    new MM("reactBroken:", false, 289),
    new MM("reactMoreResolved:", false, 290),
    new MM("reactResolved:", false, 291),
    new MM("init`selector:", true, 0),
    new MM("selector", true, 0),
    new MM("init`arguments:", true, 0),
    new MM("arguments", true, 0),
    new MM("init`resolver:", true, 0),
    new MM("resolver", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$EventualSendReactor = function ($s, $a, $r) {
    var self = this;
    self.$super$ActorsForV8$EventualSendReactor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $a, $r) {
    var self = this;
    self._$superInit$ActorsForV8$EventualSendReactor($s, $a, $r);
    self._$init$selector$($s);
    self._$init$arguments$($a);
    self._$init$resolver$($r);
    return self;
   };
   this.$reactBroken$ = function ($error) {
    var self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]))) {
     self._$halt();
    } else {
     nil;
    };
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$resolver(), "internalResolve:", [self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]._$InternalBrokenRef().$problem$__owner$($error, self._$resolver().$__owner())], nil));
    return self;
   };
   this.$reactMoreResolved$ = function ($internalRef) {
    var self = this;
    self._$resolver().$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0], $internalRef.$eventualSend$arguments$(self._$selector(), self._$arguments())));
    return self;
   };
   this.$reactResolved$ = function ($value) {
    var self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]))) {
     self._$halt();
    } else {
     nil;
    };
    self._$resolver().$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0], $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]).$eventualSendTo$selector$arguments$($value, self._$selector(), self._$arguments())));
    return self;
   };
   this.$init$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$selector = function () {
    return this.$selector$slot;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`EventualSendReactor";
     this._$superInit$ActorsForV8$EventualSendReactor = $.$superInit$ActorsForV8$EventualSendReactor;
     this.$superInit$ActorsForV8$EventualSendReactor = dnuCatcher("$superInit$ActorsForV8$EventualSendReactor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$reactBroken$ = this._$reactBroken$ = $.$reactBroken$;
     this.$reactMoreResolved$ = this._$reactMoreResolved$ = $.$reactMoreResolved$;
     this.$reactResolved$ = this._$reactResolved$ = $.$reactResolved$;
     this._$init$selector$ = $.$init$selector$;
     this.$init$selector$ = dnuCatcher("$init$selector$");
     this._$selector = $.$selector;
     this.$selector = dnuCatcher("$selector");
     this._$init$arguments$ = $.$init$arguments$;
     this.$init$arguments$ = dnuCatcher("$init$arguments$");
     this._$arguments = $.$arguments;
     this.$arguments = dnuCatcher("$arguments");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$EventualSendReactor = enclosingObjects;
     this.$super$ActorsForV8$EventualSendReactor$slot = runtimeSuperclass;
     this["ActorsForV8`EventualSendReactor"] = function () {
      superBasicNew.call(this);
      this.$selector$slot = nil;
      this.$arguments$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`EventualSendReactor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`EventualSendReactor";
    this.slots = [];
    this.methods = [new MM("selector:arguments:resolver:", true, 0)];
    this.nestedClasses = [];
    this.$selector$arguments$resolver$ = function ($s, $a, $r) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s, $a, $r);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`EventualSendReactor";
      this.$selector$arguments$resolver$ = this._$selector$arguments$resolver$ = $.$selector$arguments$resolver$;
      this.$enclosingObjects$ActorsForV8$EventualSendReactor = enclosingObjects;
      this.$super$ActorsForV8$EventualSendReactor = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalActor = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalActor";
   this.name = "ActorsForV8`InternalActor";
   this.header = 292;
   this.slots = [];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalActor", true, 293),
    new MM("instance`initializer", true, 294),
    new MM("currentActor", false, 295),
    new MM("eventualSendTo:selector:arguments:", false, 296)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalActor = function () {
    var self = this;
    self.$super$ActorsForV8$InternalActor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$ActorsForV8$InternalActor();
    return self;
   };
   this.$currentActor = function () {
    var self = this;
    return self;
   };
   this.$eventualSendTo$selector$arguments$ = function ($receiver, $selector, $arguments) {
    var self = this;
    return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$InternalActor[0], $receiver).$eventualSend$arguments$($selector, $arguments);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalActor";
     this._$superInit$ActorsForV8$InternalActor = $.$superInit$ActorsForV8$InternalActor;
     this.$superInit$ActorsForV8$InternalActor = dnuCatcher("$superInit$ActorsForV8$InternalActor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$currentActor = this._$currentActor = $.$currentActor;
     this.$eventualSendTo$selector$arguments$ = this._$eventualSendTo$selector$arguments$ = $.$eventualSendTo$selector$arguments$;
     this.$enclosingObjects$ActorsForV8$InternalActor = enclosingObjects;
     this.$super$ActorsForV8$InternalActor$slot = runtimeSuperclass;
     this["ActorsForV8`InternalActor"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["ActorsForV8`InternalActor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalActor";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalActor";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$InternalActor = enclosingObjects;
      this.$super$ActorsForV8$InternalActor = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalBrokenRef = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalBrokenRef";
   this.name = "ActorsForV8`InternalBrokenRef";
   this.header = 297;
   this.slots = [new SM("problem", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalBrokenRef", true, 298),
    new MM("instance`initializer", true, 299),
    new MM("addReactor:", false, 300),
    new MM("checkCycle", false, 301),
    new MM("eventualSend:arguments:", false, 302),
    new MM("immediateSend:", false, 303),
    new MM("printOn:", false, 304),
    new MM("refPrintOn:", false, 305),
    new MM("shorten", false, 306),
    new MM("whenFulfilled:whenBroken:", false, 307),
    new MM("wrapFor:", false, 308),
    new MM("init`problem:", true, 0),
    new MM("problem", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalBrokenRef = function ($p, $o) {
    var self = this;
    self.$super$ActorsForV8$InternalBrokenRef$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($p, $o) {
    var self = this;
    self._$superInit$ActorsForV8$InternalBrokenRef($p, $o);
    self._$init$problem$($p);
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    var self = this;
    $reactor.$reactBroken$(self._$problem());
    return self;
   };
   this.$checkCycle = function () {
    var self = this;
    return false;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    var self = this;
    return self._$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    var self = this;
    return self._$Error().$signal$("Cannot immediate-send to a broken ref: ".$$comma($message.$selector()));
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("InternalBrokenRef: ");
    self._$problem().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("<broken ref: ");
    self._$problem().$printOn$($stream);
    $stream.$nextPutAll$(">");
    return self;
   };
   this.$shorten = function () {
    var self = this;
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    var self = this;
    var $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($onError, "cull:", [self._$problem()], $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    var self = this;
    self._$checkCurrentActor();
    "BOGUS";
    return self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]._$InternalBrokenRef().$problem$__owner$(self._$problem(), $targetActor).$externalRef();
   };
   this.$init$problem$ = function (v) {
    this.$problem$slot = v;
    return this;
   };
   this.$problem = function () {
    return this.$problem$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalBrokenRef";
     this._$superInit$ActorsForV8$InternalBrokenRef = $.$superInit$ActorsForV8$InternalBrokenRef;
     this.$superInit$ActorsForV8$InternalBrokenRef = dnuCatcher("$superInit$ActorsForV8$InternalBrokenRef");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$problem$ = $.$init$problem$;
     this.$init$problem$ = dnuCatcher("$init$problem$");
     this._$problem = $.$problem;
     this.$problem = dnuCatcher("$problem");
     this.$enclosingObjects$ActorsForV8$InternalBrokenRef = enclosingObjects;
     this.$super$ActorsForV8$InternalBrokenRef$slot = runtimeSuperclass;
     this["ActorsForV8`InternalBrokenRef"] = function () {
      superBasicNew.call(this);
      this.$problem$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalBrokenRef"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalBrokenRef";
    this.slots = [];
    this.methods = [new MM("problem:__owner:", true, 0)];
    this.nestedClasses = [];
    this.$problem$__owner$ = function ($p, $o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p, $o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalBrokenRef";
      this.$problem$__owner$ = this._$problem$__owner$ = $.$problem$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalBrokenRef = enclosingObjects;
      this.$super$ActorsForV8$InternalBrokenRef = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalFarReference = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalFarReference";
   this.name = "ActorsForV8`InternalFarReference";
   this.header = 309;
   this.slots = [
    new SM("target", false, false),
    new SM("targetsActor", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalFarReference", true, 310),
    new MM("instance`initializer", true, 311),
    new MM("addReactor:", false, 312),
    new MM("checkCycle", false, 313),
    new MM("eventualSend:arguments:", false, 314),
    new MM("immediateSend:", false, 315),
    new MM("printOn:", false, 316),
    new MM("refPrintOn:", false, 317),
    new MM("shorten", false, 318),
    new MM("whenFulfilled:whenBroken:", false, 319),
    new MM("wrapFor:", false, 320),
    new MM("init`target:", true, 0),
    new MM("target", true, 0),
    new MM("init`targetsActor:", true, 0),
    new MM("targetsActor", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalFarReference = function ($t, $ta, $o) {
    var self = this;
    self.$super$ActorsForV8$InternalFarReference$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($t, $ta, $o) {
    var self = this;
    self._$superInit$ActorsForV8$InternalFarReference($t, $ta, $o);
    self._$init$target$($t);
    self._$init$targetsActor$($ta);
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    var self = this;
    $reactor.$reactResolved$(self._$externalRef());
    return self;
   };
   this.$checkCycle = function () {
    var self = this;
    return false;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    var self = this;
    var $resolverInTarget = nil;
    var $remotePromise = nil;
    var $redirector = nil;
    $resolverInTarget = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalLocalPromise().$__owner$(self._$targetsActor());
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), $selector, $0.$wrapArguments$from$to$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0], $arguments, $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]), self._$targetsActor()), $resolverInTarget));
    $remotePromise = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalRemotePromise().$target$targetsActor$__owner$($resolverInTarget, self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]));
    $redirector = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]), $remotePromise);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($resolverInTarget, "addReactor:", [$redirector], nil));
    return $remotePromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    var self = this;
    return self._$Error().$signal$("Cannot immediate-send to an eventual ref: ".$$comma($message.$selector()));
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("InternalFarRef: ");
    self._$target().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("<far ref: ");
    self._$target().$printOn$($stream);
    $stream.$nextPutAll$(">");
    return self;
   };
   this.$shorten = function () {
    var self = this;
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    var self = this;
    var $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($onValue, "cull:", [self._$externalRef()], $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    var self = this;
    if (self._$targetsActor() === $targetActor) {
     return self._$target();
    } else {
     nil;
    };
    return self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalFarReference().$target$targetsActor$__owner$(self._$target(), self._$targetsActor(), $targetActor).$externalRef();
   };
   this.$init$target$ = function (v) {
    this.$target$slot = v;
    return this;
   };
   this.$target = function () {
    return this.$target$slot;
   };
   this.$init$targetsActor$ = function (v) {
    this.$targetsActor$slot = v;
    return this;
   };
   this.$targetsActor = function () {
    return this.$targetsActor$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalFarReference";
     this._$superInit$ActorsForV8$InternalFarReference = $.$superInit$ActorsForV8$InternalFarReference;
     this.$superInit$ActorsForV8$InternalFarReference = dnuCatcher("$superInit$ActorsForV8$InternalFarReference");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$target$ = $.$init$target$;
     this.$init$target$ = dnuCatcher("$init$target$");
     this._$target = $.$target;
     this.$target = dnuCatcher("$target");
     this._$init$targetsActor$ = $.$init$targetsActor$;
     this.$init$targetsActor$ = dnuCatcher("$init$targetsActor$");
     this._$targetsActor = $.$targetsActor;
     this.$targetsActor = dnuCatcher("$targetsActor");
     this.$enclosingObjects$ActorsForV8$InternalFarReference = enclosingObjects;
     this.$super$ActorsForV8$InternalFarReference$slot = runtimeSuperclass;
     this["ActorsForV8`InternalFarReference"] = function () {
      superBasicNew.call(this);
      this.$target$slot = nil;
      this.$targetsActor$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalFarReference"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalFarReference";
    this.slots = [];
    this.methods = [new MM("target:targetsActor:__owner:", true, 0)];
    this.nestedClasses = [];
    this.$target$targetsActor$__owner$ = function ($t, $ta, $o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($t, $ta, $o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalFarReference";
      this.$target$targetsActor$__owner$ = this._$target$targetsActor$__owner$ = $.$target$targetsActor$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalFarReference = enclosingObjects;
      this.$super$ActorsForV8$InternalFarReference = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalLocalPromise = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalLocalPromise";
   this.name = "ActorsForV8`InternalLocalPromise";
   this.header = 321;
   this.slots = [
    new SM("state", true, false),
    new SM("resolution", true, false),
    new SM("reactors", true, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalLocalPromise", true, 322),
    new MM("instance`initializer", true, 323),
    new MM("addReactor:", false, 324),
    new MM("checkCycle", false, 325),
    new MM("eventualSend:arguments:", false, 326),
    new MM("immediateSend:", false, 327),
    new MM("internalResolve:", false, 328),
    new MM("printOn:", false, 329),
    new MM("refPrintOn:", false, 330),
    new MM("shorten", false, 331),
    new MM("whenFulfilled:whenBroken:", false, 332),
    new MM("wrapFor:", false, 333),
    new MM("init`state:", true, 0),
    new MM("state", true, 0),
    new MM("state:", true, 0),
    new MM("init`resolution:", true, 0),
    new MM("resolution", true, 0),
    new MM("resolution:", true, 0),
    new MM("init`reactors:", true, 0),
    new MM("reactors", true, 0),
    new MM("reactors:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalLocalPromise = function ($o) {
    var self = this;
    self.$super$ActorsForV8$InternalLocalPromise$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($o) {
    var self = this;
    self._$superInit$ActorsForV8$InternalLocalPromise($o);
    self._$init$state$("unresolved");
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    var self = this;
    if (self._$state() === "unresolved") {
     if (self._$reactors() === nil) {
      self._$reactors$($0.$List(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]).$new());
     } else {
      nil;
     };
     self._$reactors().$add$($reactor);
     return self;
    } else {
     nil;
    };
    if (self._$state() === "resolved") {
     return self._$resolution().$addReactor$($reactor);
    } else {
     nil;
    };
    self._$halt();
    return self;
   };
   this.$checkCycle = function () {
    var self = this;
    if (self._$state() === "resolving") {
     return true;
    } else {
     nil;
    };
    if (self._$state() === "unresolved") {
     return false;
    } else {
     nil;
    };
    if (self._$state() === "resolved") {
     return self._$resolution().$checkCycle();
    } else {
     nil;
    };
    self._$halt();
    return self;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    var self = this;
    var $localPromise = nil;
    self._$checkCurrentActor();
    if (self._$state() === "resolved") {
     return self._$resolution().$eventualSend$arguments$($selector, $arguments);
    } else {
     nil;
    };
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    self._$addReactor$(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$EventualSendReactor().$selector$arguments$resolver$($selector, $arguments, $localPromise));
    return $localPromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    var self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$immediateSend$($message);
    } else {
     nil;
    };
    return self._$Error().$signal$("Cannot immediate-send to an eventual ref: ".$$comma($message.$selector()));
   };
   this.$internalResolve$ = function ($internalRef) {
    var self = this;
    if (!(self._$state() === "unresolved")) {
     return self._$Error().$signal$("Already resolved");
    } else {
     nil;
    };
    if (!$internalRef.$isInternalRef()) {
     self._$halt();
    } else {
     nil;
    };
    self._$state$("resolving");
    if ($internalRef.$checkCycle()) {
     self._$resolution$(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalBrokenRef().$problem$__owner$(self._$Error().$new().$messageText$("Cyclic resolution"), self._$__owner()));
    } else {
     self._$resolution$($internalRef);
    };
    self._$state$("resolved");
    if (!(nil === self._$reactors())) {
     self._$reactors().$do$(function ($reactor) {
      return self._$resolution().$addReactor$($reactor);
     });
     self._$reactors$(nil);
    } else {
     nil;
    };
    return self;
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("InternalLocalPromise: ");
    self._$state().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    var self = this;
    if (self._$state() === "resolved") {
     self._$resolution().$refPrintOn$($stream);
    } else {
     $stream.$nextPutAll$("<local promise>");
    };
    return self;
   };
   this.$shorten = function () {
    var self = this;
    if (self._$state() === "unresolved") {
     return self;
    } else {
     nil;
    };
    if (self._$state() === "resolved") {
     return self._$resolution();
    } else {
     nil;
    };
    self._$halt();
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    var self = this;
    var $localPromise = nil;
    self._$checkCurrentActor();
    if (self._$state() === "resolved") {
     return self._$resolution().$whenFulfilled$whenBroken$($onValue, $onError);
    } else {
     nil;
    };
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    self._$addReactor$(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$WhenReactor().$onValue$onError$resolver$($onValue, $onError, $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    var self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$wrapFor$($targetActor);
    } else {
     nil;
    };
    self._$checkCurrentActor();
    if ($targetActor === self._$__owner()) {
     self._$halt();
    } else {
     nil;
    };
    return self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalRemotePromise().$target$targetsActor$__owner$(self, $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]), $targetActor).$externalRef();
   };
   this.$init$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$state = function () {
    return this.$state$slot;
   };
   this.$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$init$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.$resolution = function () {
    return this.$resolution$slot;
   };
   this.$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.$init$reactors$ = function (v) {
    this.$reactors$slot = v;
    return this;
   };
   this.$reactors = function () {
    return this.$reactors$slot;
   };
   this.$reactors$ = function (v) {
    this.$reactors$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalLocalPromise";
     this._$superInit$ActorsForV8$InternalLocalPromise = $.$superInit$ActorsForV8$InternalLocalPromise;
     this.$superInit$ActorsForV8$InternalLocalPromise = dnuCatcher("$superInit$ActorsForV8$InternalLocalPromise");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$internalResolve$ = this._$internalResolve$ = $.$internalResolve$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$state$ = $.$init$state$;
     this.$init$state$ = dnuCatcher("$init$state$");
     this._$state = $.$state;
     this.$state = dnuCatcher("$state");
     this._$state$ = $.$state$;
     this.$state$ = dnuCatcher("$state$");
     this._$init$resolution$ = $.$init$resolution$;
     this.$init$resolution$ = dnuCatcher("$init$resolution$");
     this._$resolution = $.$resolution;
     this.$resolution = dnuCatcher("$resolution");
     this._$resolution$ = $.$resolution$;
     this.$resolution$ = dnuCatcher("$resolution$");
     this._$init$reactors$ = $.$init$reactors$;
     this.$init$reactors$ = dnuCatcher("$init$reactors$");
     this._$reactors = $.$reactors;
     this.$reactors = dnuCatcher("$reactors");
     this._$reactors$ = $.$reactors$;
     this.$reactors$ = dnuCatcher("$reactors$");
     this.$enclosingObjects$ActorsForV8$InternalLocalPromise = enclosingObjects;
     this.$super$ActorsForV8$InternalLocalPromise$slot = runtimeSuperclass;
     this["ActorsForV8`InternalLocalPromise"] = function () {
      superBasicNew.call(this);
      this.$state$slot = nil;
      this.$resolution$slot = nil;
      this.$reactors$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalLocalPromise"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalLocalPromise";
    this.slots = [];
    this.methods = [new MM("__owner:", true, 0)];
    this.nestedClasses = [];
    this.$__owner$ = function ($o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalLocalPromise";
      this.$__owner$ = this._$__owner$ = $.$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalLocalPromise = enclosingObjects;
      this.$super$ActorsForV8$InternalLocalPromise = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalNearRef = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalNearRef";
   this.name = "ActorsForV8`InternalNearRef";
   this.header = 334;
   this.slots = [new SM("target", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalNearRef", true, 335),
    new MM("instance`initializer", true, 336),
    new MM("addReactor:", false, 337),
    new MM("checkCycle", false, 338),
    new MM("eventualSend:arguments:", false, 339),
    new MM("immediateSend:", false, 340),
    new MM("printOn:", false, 341),
    new MM("refPrintOn:", false, 342),
    new MM("shorten", false, 343),
    new MM("whenFulfilled:whenBroken:", false, 344),
    new MM("wrapFor:", false, 345),
    new MM("init`target:", true, 0),
    new MM("target", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalNearRef = function ($t, $o) {
    var self = this;
    self.$super$ActorsForV8$InternalNearRef$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($t, $o) {
    var self = this;
    self._$superInit$ActorsForV8$InternalNearRef($t, $o);
    self._$init$target$($t);
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    var self = this;
    $reactor.$reactResolved$(self._$target());
    return self;
   };
   this.$checkCycle = function () {
    var self = this;
    return false;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    var self = this;
    var $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), $selector, $arguments, $localPromise));
    return $localPromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    var self = this;
    return $message.$sendTo$(self._$target());
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("InternalNearRef: ");
    self._$target().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("<near ref: ");
    self._$target().$printOn$($stream);
    $stream.$nextPutAll$(">");
    return self;
   };
   this.$shorten = function () {
    var self = this;
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    var self = this;
    var $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($onValue, "cull:", [self._$target()], $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    var self = this;
    self._$checkCurrentActor();
    if ($0.$isValueObject$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0], self._$target())) {
     return self._$target();
    } else {
     nil;
    };
    return $0.$createFarReferenceTo$in$for$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0], self._$target(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]), $targetActor);
   };
   this.$init$target$ = function (v) {
    this.$target$slot = v;
    return this;
   };
   this.$target = function () {
    return this.$target$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalNearRef";
     this._$superInit$ActorsForV8$InternalNearRef = $.$superInit$ActorsForV8$InternalNearRef;
     this.$superInit$ActorsForV8$InternalNearRef = dnuCatcher("$superInit$ActorsForV8$InternalNearRef");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$target$ = $.$init$target$;
     this.$init$target$ = dnuCatcher("$init$target$");
     this._$target = $.$target;
     this.$target = dnuCatcher("$target");
     this.$enclosingObjects$ActorsForV8$InternalNearRef = enclosingObjects;
     this.$super$ActorsForV8$InternalNearRef$slot = runtimeSuperclass;
     this["ActorsForV8`InternalNearRef"] = function () {
      superBasicNew.call(this);
      this.$target$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalNearRef"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalNearRef";
    this.slots = [];
    this.methods = [new MM("wrapping:__owner:", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$__owner$ = function ($t, $o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($t, $o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalNearRef";
      this.$wrapping$__owner$ = this._$wrapping$__owner$ = $.$wrapping$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalNearRef = enclosingObjects;
      this.$super$ActorsForV8$InternalNearRef = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalRef = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalRef";
   this.name = "ActorsForV8`InternalRef";
   this.header = 346;
   this.slots = [new SM("__owner", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalRef", true, 347),
    new MM("instance`initializer", true, 348),
    new MM("checkCurrentActor", false, 349),
    new MM("checkCycle", false, 350),
    new MM("eventualSend:arguments:", false, 351),
    new MM("externalRef", false, 352),
    new MM("immediateSend:", false, 353),
    new MM("isInternalRef", false, 354),
    new MM("refPrintOn:", false, 355),
    new MM("shorten", false, 356),
    new MM("whenFulfilled:whenBroken:", false, 357),
    new MM("wrapFor:", false, 358),
    new MM("init`__owner:", true, 0),
    new MM("__owner", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalRef = function ($o) {
    var self = this;
    self.$super$ActorsForV8$InternalRef$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o) {
    var self = this;
    self._$superInit$ActorsForV8$InternalRef($o);
    self._$init$__owner$($o);
    return self;
   };
   this.$checkCurrentActor = function () {
    var self = this;
    if (!($0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRef[0]) === self._$__owner())) {
     self._$halt();
    } else {
     nil;
    };
    return self;
   };
   this.$checkCycle = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$externalRef = function () {
    var self = this;
    return self.$enclosingObjects$ActorsForV8$InternalRef[0]._$Ref().$wrapping$(self);
   };
   this.$immediateSend$ = function ($message) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$isInternalRef = function () {
    var self = this;
    return true;
   };
   this.$refPrintOn$ = function ($stream) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$shorten = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$wrapFor$ = function ($targetActor) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$init$__owner$ = function (v) {
    this.$__owner$slot = v;
    return this;
   };
   this.$__owner = function () {
    return this.$__owner$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalRef";
     this._$superInit$ActorsForV8$InternalRef = $.$superInit$ActorsForV8$InternalRef;
     this.$superInit$ActorsForV8$InternalRef = dnuCatcher("$superInit$ActorsForV8$InternalRef");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$checkCurrentActor = $.$checkCurrentActor;
     this.$checkCurrentActor = dnuCatcher("$checkCurrentActor");
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$externalRef = this._$externalRef = $.$externalRef;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$isInternalRef = this._$isInternalRef = $.$isInternalRef;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this.$init$__owner$ = this._$init$__owner$ = $.$init$__owner$;
     this.$__owner = this._$__owner = $.$__owner;
     this.$enclosingObjects$ActorsForV8$InternalRef = enclosingObjects;
     this.$super$ActorsForV8$InternalRef$slot = runtimeSuperclass;
     this["ActorsForV8`InternalRef"] = function () {
      superBasicNew.call(this);
      this.$__owner$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalRef"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalRef";
    this.slots = [];
    this.methods = [new MM("__owner:", true, 0)];
    this.nestedClasses = [];
    this.$__owner$ = function ($o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalRef";
      this.$__owner$ = this._$__owner$ = $.$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalRef = enclosingObjects;
      this.$super$ActorsForV8$InternalRef = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalRemotePromise = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalRemotePromise";
   this.name = "ActorsForV8`InternalRemotePromise";
   this.header = 359;
   this.slots = [
    new SM("target", false, false),
    new SM("targetsActor", false, false),
    new SM("state", true, false),
    new SM("resolution", true, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalRemotePromise", true, 360),
    new MM("instance`initializer", true, 361),
    new MM("addReactor:", false, 362),
    new MM("checkCycle", false, 363),
    new MM("eventualSend:arguments:", false, 364),
    new MM("immediateSend:", false, 365),
    new MM("internalResolve:", false, 366),
    new MM("printOn:", false, 367),
    new MM("redirectFrom:to:resolving:", false, 368),
    new MM("refPrintOn:", false, 369),
    new MM("shorten", false, 370),
    new MM("whenFulfilled:whenBroken:", false, 371),
    new MM("wrapFor:", false, 372),
    new MM("init`target:", true, 0),
    new MM("target", true, 0),
    new MM("init`targetsActor:", true, 0),
    new MM("targetsActor", true, 0),
    new MM("init`state:", true, 0),
    new MM("state", true, 0),
    new MM("state:", true, 0),
    new MM("init`resolution:", true, 0),
    new MM("resolution", true, 0),
    new MM("resolution:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalRemotePromise = function ($t, $ta, $o) {
    var self = this;
    self.$super$ActorsForV8$InternalRemotePromise$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($t, $ta, $o) {
    var self = this;
    self._$superInit$ActorsForV8$InternalRemotePromise($t, $ta, $o);
    self._$init$target$($t);
    self._$init$targetsActor$($ta);
    self._$init$state$("unresolved");
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    var self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$addReactor$($reactor);
    } else {
     nil;
    };
    if (self._$state() === "unresolved") {
     return $reactor.$reactMoreResolved$(self);
    } else {
     nil;
    };
    self._$stop5();
    return self;
   };
   this.$checkCycle = function () {
    var self = this;
    if (self._$state() === "resolving") {
     return true;
    } else {
     nil;
    };
    if (self._$state() === "unresolved") {
     return false;
    } else {
     nil;
    };
    if (self._$state() === "resolved") {
     return self._$resolution().$checkCycle();
    } else {
     nil;
    };
    self._$halt();
    return self;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    var self = this;
    var $resolverInTarget = nil;
    var $remotePromise = nil;
    var $redirector = nil;
    $resolverInTarget = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalLocalPromise().$__owner$(self._$targetsActor());
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), "eventualSend:arguments:", [
     $selector,
     $0.$wrapArguments$from$to$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0], $arguments, $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]), self._$targetsActor())
    ], $resolverInTarget));
    $remotePromise = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalRemotePromise().$target$targetsActor$__owner$($resolverInTarget, self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]));
    $redirector = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]), $remotePromise);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($resolverInTarget, "addReactor:", [$redirector], nil));
    return $remotePromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    var self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$immediateSend$($message);
    } else {
     nil;
    };
    return self._$Error().$signal$("Cannot immediate-send to an eventual ref: ".$$comma($message.$selector()));
   };
   this.$internalResolve$ = function ($internalRef) {
    var self = this;
    if (!(self._$state() === "unresolved")) {
     return self._$Error().$signal$("Already resolved");
    } else {
     nil;
    };
    if (!$internalRef.$isInternalRef()) {
     self._$halt();
    } else {
     nil;
    };
    self._$state$("resolving");
    if ($internalRef.$checkCycle()) {
     self._$resolution$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalBrokenRef().$problem$__owner$(self._$Error().$new().$messageText$("Cyclic resolution"), self._$__owner()));
    } else {
     self._$resolution$($internalRef);
    };
    self._$state$("resolved");
    return self;
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    $stream.$nextPutAll$("InternalRemotePromise: ");
    self._$state().$printOn$($stream);
    return self;
   };
   this.$redirectFrom$to$resolving$ = function ($sourceActor, $destinationActor, $resolver) {
    var self = this;
    var $redirector = nil;
    if ($destinationActor === self._$targetsActor()) {
     self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($resolver, "internalResolve:", [self._$target()], nil));
     return self;
    } else {
     nil;
    };
    $redirector = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $destinationActor, $resolver);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), "addReactor:", [$redirector], nil));
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    var self = this;
    if (self._$state() === "resolved") {
     self._$resolution().$refPrintOn$($stream);
    } else {
     $stream.$nextPutAll$("<remote promise>");
    };
    return self;
   };
   this.$shorten = function () {
    var self = this;
    if (self._$state() === "unresolved") {
     return self;
    } else {
     nil;
    };
    if (self._$state() === "resolved") {
     return self._$resolution();
    } else {
     nil;
    };
    self._$halt();
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    var self = this;
    var $localPromise = nil;
    var $redirector = nil;
    self._$checkCurrentActor();
    if (self._$state() === "resolved") {
     return self._$resolution().$whenFulfilled$whenBroken$($onValue, $onError);
    } else {
     nil;
    };
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $redirector = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]), $localPromise);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), "addReactor:", [$redirector], nil));
    return $localPromise.$whenFulfilled$whenBroken$($onValue, $onError);
   };
   this.$wrapFor$ = function ($targetActor) {
    var self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$wrapFor$($targetActor);
    } else {
     nil;
    };
    if ($targetActor === self._$targetsActor()) {
     return self._$target().$externalRef();
    } else {
     nil;
    };
    return self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalRemotePromise().$target$targetsActor$__owner$(self._$target(), self._$targetsActor(), $targetActor).$externalRef();
   };
   this.$init$target$ = function (v) {
    this.$target$slot = v;
    return this;
   };
   this.$target = function () {
    return this.$target$slot;
   };
   this.$init$targetsActor$ = function (v) {
    this.$targetsActor$slot = v;
    return this;
   };
   this.$targetsActor = function () {
    return this.$targetsActor$slot;
   };
   this.$init$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$state = function () {
    return this.$state$slot;
   };
   this.$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$init$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.$resolution = function () {
    return this.$resolution$slot;
   };
   this.$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalRemotePromise";
     this._$superInit$ActorsForV8$InternalRemotePromise = $.$superInit$ActorsForV8$InternalRemotePromise;
     this.$superInit$ActorsForV8$InternalRemotePromise = dnuCatcher("$superInit$ActorsForV8$InternalRemotePromise");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$internalResolve$ = this._$internalResolve$ = $.$internalResolve$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$redirectFrom$to$resolving$ = this._$redirectFrom$to$resolving$ = $.$redirectFrom$to$resolving$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$target$ = $.$init$target$;
     this.$init$target$ = dnuCatcher("$init$target$");
     this._$target = $.$target;
     this.$target = dnuCatcher("$target");
     this._$init$targetsActor$ = $.$init$targetsActor$;
     this.$init$targetsActor$ = dnuCatcher("$init$targetsActor$");
     this._$targetsActor = $.$targetsActor;
     this.$targetsActor = dnuCatcher("$targetsActor");
     this._$init$state$ = $.$init$state$;
     this.$init$state$ = dnuCatcher("$init$state$");
     this._$state = $.$state;
     this.$state = dnuCatcher("$state");
     this._$state$ = $.$state$;
     this.$state$ = dnuCatcher("$state$");
     this._$init$resolution$ = $.$init$resolution$;
     this.$init$resolution$ = dnuCatcher("$init$resolution$");
     this._$resolution = $.$resolution;
     this.$resolution = dnuCatcher("$resolution");
     this._$resolution$ = $.$resolution$;
     this.$resolution$ = dnuCatcher("$resolution$");
     this.$enclosingObjects$ActorsForV8$InternalRemotePromise = enclosingObjects;
     this.$super$ActorsForV8$InternalRemotePromise$slot = runtimeSuperclass;
     this["ActorsForV8`InternalRemotePromise"] = function () {
      superBasicNew.call(this);
      this.$target$slot = nil;
      this.$targetsActor$slot = nil;
      this.$state$slot = nil;
      this.$resolution$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalRemotePromise"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalRemotePromise";
    this.slots = [];
    this.methods = [new MM("target:targetsActor:__owner:", true, 0)];
    this.nestedClasses = [];
    this.$target$targetsActor$__owner$ = function ($t, $ta, $o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($t, $ta, $o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalRemotePromise";
      this.$target$targetsActor$__owner$ = this._$target$targetsActor$__owner$ = $.$target$targetsActor$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalRemotePromise = enclosingObjects;
      this.$super$ActorsForV8$InternalRemotePromise = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$PendingDelivery = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`PendingDelivery";
   this.name = "ActorsForV8`PendingDelivery";
   this.header = 373;
   this.slots = [
    new SM("receiver", false, false),
    new SM("selector", false, false),
    new SM("arguments", false, false),
    new SM("resolver", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`PendingDelivery", true, 374),
    new MM("instance`initializer", true, 375),
    new MM("deliverIn:", false, 376),
    new MM("postedTo:", false, 377),
    new MM("printOn:", false, 378),
    new MM("init`receiver:", true, 0),
    new MM("receiver", true, 0),
    new MM("init`selector:", true, 0),
    new MM("selector", true, 0),
    new MM("init`arguments:", true, 0),
    new MM("arguments", true, 0),
    new MM("init`resolver:", true, 0),
    new MM("resolver", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$PendingDelivery = function ($r, $s, $a, $y) {
    var self = this;
    self.$super$ActorsForV8$PendingDelivery$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r, $s, $a, $y) {
    var self = this;
    self._$superInit$ActorsForV8$PendingDelivery($r, $s, $a, $y);
    self._$init$receiver$($r);
    self._$init$selector$($s);
    self._$init$arguments$($a);
    self._$init$resolver$($y);
    return self;
   };
   this.$deliverIn$ = function ($fastCurrentActor) {
    var self = this;
    var $resolution = nil;
    var $type = nil;
    var $msg = nil;
    (function () {
     $resolution = self._$receiver().$perform$withArguments$(self._$selector(), self._$arguments());
     return $type = "internalResolve:";
    }).$on$do$(self._$Error(), function ($error) {
     $error.$out();
     if (self._$resolver() === nil) {
      $error.$pass();
     } else {
      nil;
     };
     $resolution = $error;
     return $type = "internalBreak:";
    });
    if (nil === self._$resolver()) {
     if ($type === "internalBreak:") {
      [
       "silent failure",
       $resolution
      ].$out();
     } else {
      nil;
     };
     return self;
    } else {
     nil;
    };
    self._$resolver().$internalResolve$(($type === "internalResolve:").$ifTrue$ifFalse$(function () {
     return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$PendingDelivery[0], $resolution);
    }, function () {
     return self.$enclosingObjects$ActorsForV8$PendingDelivery[0]._$InternalBrokenRef().$problem$__owner$($resolution, self);
    }));
    return self;
   };
   this.$postedTo$ = function ($actor) {
    var self = this;
    if (!(self._$resolver() === nil)) {
     if (!(self._$resolver().$__owner() === $actor)) {
      self._$halt();
     } else {
      nil;
     };
    } else {
     nil;
    };
    return self;
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    self._$receiver().$printOn$($stream);
    $stream.$nextPutAll$(" <-: ");
    $stream.$nextPutAll$(self._$selector());
    $stream.$space();
    if (!self._$arguments().$isEmpty()) {
     self._$arguments().$printOn$($stream);
    } else {
     nil;
    };
    return self;
   };
   this.$init$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.$receiver = function () {
    return this.$receiver$slot;
   };
   this.$init$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$selector = function () {
    return this.$selector$slot;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`PendingDelivery";
     this._$superInit$ActorsForV8$PendingDelivery = $.$superInit$ActorsForV8$PendingDelivery;
     this.$superInit$ActorsForV8$PendingDelivery = dnuCatcher("$superInit$ActorsForV8$PendingDelivery");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$deliverIn$ = this._$deliverIn$ = $.$deliverIn$;
     this.$postedTo$ = this._$postedTo$ = $.$postedTo$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$init$receiver$ = $.$init$receiver$;
     this.$init$receiver$ = dnuCatcher("$init$receiver$");
     this._$receiver = $.$receiver;
     this.$receiver = dnuCatcher("$receiver");
     this._$init$selector$ = $.$init$selector$;
     this.$init$selector$ = dnuCatcher("$init$selector$");
     this._$selector = $.$selector;
     this.$selector = dnuCatcher("$selector");
     this._$init$arguments$ = $.$init$arguments$;
     this.$init$arguments$ = dnuCatcher("$init$arguments$");
     this._$arguments = $.$arguments;
     this.$arguments = dnuCatcher("$arguments");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$PendingDelivery = enclosingObjects;
     this.$super$ActorsForV8$PendingDelivery$slot = runtimeSuperclass;
     this["ActorsForV8`PendingDelivery"] = function () {
      superBasicNew.call(this);
      this.$receiver$slot = nil;
      this.$selector$slot = nil;
      this.$arguments$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`PendingDelivery"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`PendingDelivery";
    this.slots = [];
    this.methods = [new MM("receiver:selector:arguments:resolver:", true, 0)];
    this.nestedClasses = [];
    this.$receiver$selector$arguments$resolver$ = function ($r, $s, $a, $y) {
     return (new this.nonMeta.basicNew()).$instance$initializer($r, $s, $a, $y);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`PendingDelivery";
      this.$receiver$selector$arguments$resolver$ = this._$receiver$selector$arguments$resolver$ = $.$receiver$selector$arguments$resolver$;
      this.$enclosingObjects$ActorsForV8$PendingDelivery = enclosingObjects;
      this.$super$ActorsForV8$PendingDelivery = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$PromiseUtils = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`PromiseUtils";
   this.name = "ActorsForV8`PromiseUtils";
   this.header = 379;
   this.slots = [];
   this.methods = [
    new MM("superInit`ActorsForV8`PromiseUtils", true, 380),
    new MM("instance`initializer", true, 381),
    new MM("all:", false, 382),
    new MM("broken:", false, 383),
    new MM("fulfilled:", false, 384),
    new MM("timeout:after:", false, 385),
    new MM("when:fulfilled:", false, 386),
    new MM("when:fulfilled:broken:", false, 387),
    new MM("when:partitioned:", false, 388)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$PromiseUtils = function () {
    var self = this;
    self.$super$ActorsForV8$PromiseUtils$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$ActorsForV8$PromiseUtils();
    return self;
   };
   this.$all$ = function ($refs) {
    var self = this;
    return self;
   };
   this.$broken$ = function ($problem) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$break$($problem);
     return cascadeReceiver.$promise();
    })(self.$enclosingObjects$ActorsForV8$PromiseUtils[0]._$Resolver().$new());
   };
   this.$fulfilled$ = function ($resolution) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$fulfill$($resolution);
     return cascadeReceiver.$promise();
    })(self.$enclosingObjects$ActorsForV8$PromiseUtils[0]._$Resolver().$new());
   };
   this.$timeout$after$ = function ($ref, $milliseconds) {
    var self = this;
    "BOGUS";
    return self;
   };
   this.$when$fulfilled$ = function ($ref, $onValue) {
    var self = this;
    return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$PromiseUtils[0], $ref).$whenFulfilled$whenBroken$($onValue, function ($e) {
     return $e.$signal();
    });
   };
   this.$when$fulfilled$broken$ = function ($ref, $onValue, $onError) {
    var self = this;
    return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$PromiseUtils[0], $ref).$whenFulfilled$whenBroken$($onValue, $onError);
   };
   this.$when$partitioned$ = function ($ref, $onPartition) {
    var self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`PromiseUtils";
     this._$superInit$ActorsForV8$PromiseUtils = $.$superInit$ActorsForV8$PromiseUtils;
     this.$superInit$ActorsForV8$PromiseUtils = dnuCatcher("$superInit$ActorsForV8$PromiseUtils");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$all$ = this._$all$ = $.$all$;
     this.$broken$ = this._$broken$ = $.$broken$;
     this.$fulfilled$ = this._$fulfilled$ = $.$fulfilled$;
     this.$timeout$after$ = this._$timeout$after$ = $.$timeout$after$;
     this.$when$fulfilled$ = this._$when$fulfilled$ = $.$when$fulfilled$;
     this.$when$fulfilled$broken$ = this._$when$fulfilled$broken$ = $.$when$fulfilled$broken$;
     this.$when$partitioned$ = this._$when$partitioned$ = $.$when$partitioned$;
     this.$enclosingObjects$ActorsForV8$PromiseUtils = enclosingObjects;
     this.$super$ActorsForV8$PromiseUtils$slot = runtimeSuperclass;
     this["ActorsForV8`PromiseUtils"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["ActorsForV8`PromiseUtils"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`PromiseUtils";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`PromiseUtils";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$PromiseUtils = enclosingObjects;
      this.$super$ActorsForV8$PromiseUtils = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$RedirectReactor = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`RedirectReactor";
   this.name = "ActorsForV8`RedirectReactor";
   this.header = 389;
   this.slots = [
    new SM("sourceActor", false, false),
    new SM("destinationActor", false, false),
    new SM("resolver", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`RedirectReactor", true, 390),
    new MM("instance`initializer", true, 391),
    new MM("reactBroken:", false, 392),
    new MM("reactMoreResolved:", false, 393),
    new MM("reactResolved:", false, 394),
    new MM("init`sourceActor:", true, 0),
    new MM("sourceActor", true, 0),
    new MM("init`destinationActor:", true, 0),
    new MM("destinationActor", true, 0),
    new MM("init`resolver:", true, 0),
    new MM("resolver", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$RedirectReactor = function ($s, $d, $r) {
    var self = this;
    self.$super$ActorsForV8$RedirectReactor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $d, $r) {
    var self = this;
    self._$superInit$ActorsForV8$RedirectReactor($s, $d, $r);
    self._$init$sourceActor$($s);
    self._$init$destinationActor$($d);
    self._$init$resolver$($r);
    return self;
   };
   this.$reactBroken$ = function ($r) {
    var self = this;
    var $msg = nil;
    if (!($0.$currentActor(self.$enclosingObjects$ActorsForV8$RedirectReactor[0]) === self._$sourceActor())) {
     self._$halt();
    } else {
     nil;
    };
    $msg = self.$enclosingObjects$ActorsForV8$RedirectReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$resolver(), "internalResolve:", [self.$enclosingObjects$ActorsForV8$RedirectReactor[0]._$InternalBrokenRef().$problem$__owner$($r, self._$destinationActor())], nil);
    self._$destinationActor().$enqueueMessage$($msg);
    return self;
   };
   this.$reactMoreResolved$ = function ($internalRef) {
    var self = this;
    $internalRef.$redirectFrom$to$resolving$(self._$sourceActor(), self._$destinationActor(), self._$resolver());
    return self;
   };
   this.$reactResolved$ = function ($r) {
    var self = this;
    var $msg = nil;
    if (!($0.$currentActor(self.$enclosingObjects$ActorsForV8$RedirectReactor[0]) === self._$sourceActor())) {
     self._$halt();
    } else {
     nil;
    };
    $msg = self.$enclosingObjects$ActorsForV8$RedirectReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$resolver(), "internalResolve:", [$0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$RedirectReactor[0], $0.$wrapArgument$from$to$(self.$enclosingObjects$ActorsForV8$RedirectReactor[0], $r, self._$sourceActor(), self._$destinationActor()))], nil);
    self._$destinationActor().$enqueueMessage$($msg);
    return self;
   };
   this.$init$sourceActor$ = function (v) {
    this.$sourceActor$slot = v;
    return this;
   };
   this.$sourceActor = function () {
    return this.$sourceActor$slot;
   };
   this.$init$destinationActor$ = function (v) {
    this.$destinationActor$slot = v;
    return this;
   };
   this.$destinationActor = function () {
    return this.$destinationActor$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`RedirectReactor";
     this._$superInit$ActorsForV8$RedirectReactor = $.$superInit$ActorsForV8$RedirectReactor;
     this.$superInit$ActorsForV8$RedirectReactor = dnuCatcher("$superInit$ActorsForV8$RedirectReactor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$reactBroken$ = this._$reactBroken$ = $.$reactBroken$;
     this.$reactMoreResolved$ = this._$reactMoreResolved$ = $.$reactMoreResolved$;
     this.$reactResolved$ = this._$reactResolved$ = $.$reactResolved$;
     this._$init$sourceActor$ = $.$init$sourceActor$;
     this.$init$sourceActor$ = dnuCatcher("$init$sourceActor$");
     this._$sourceActor = $.$sourceActor;
     this.$sourceActor = dnuCatcher("$sourceActor");
     this._$init$destinationActor$ = $.$init$destinationActor$;
     this.$init$destinationActor$ = dnuCatcher("$init$destinationActor$");
     this._$destinationActor = $.$destinationActor;
     this.$destinationActor = dnuCatcher("$destinationActor");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$RedirectReactor = enclosingObjects;
     this.$super$ActorsForV8$RedirectReactor$slot = runtimeSuperclass;
     this["ActorsForV8`RedirectReactor"] = function () {
      superBasicNew.call(this);
      this.$sourceActor$slot = nil;
      this.$destinationActor$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`RedirectReactor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`RedirectReactor";
    this.slots = [];
    this.methods = [new MM("from:to:resolver:", true, 0)];
    this.nestedClasses = [];
    this.$from$to$resolver$ = function ($s, $d, $r) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s, $d, $r);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`RedirectReactor";
      this.$from$to$resolver$ = this._$from$to$resolver$ = $.$from$to$resolver$;
      this.$enclosingObjects$ActorsForV8$RedirectReactor = enclosingObjects;
      this.$super$ActorsForV8$RedirectReactor = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Ref = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Ref";
   this.name = "ActorsForV8`Ref";
   this.header = 395;
   this.slots = [new SM("internalRef", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`Ref", true, 396),
    new MM("instance`initializer", true, 397),
    new MM("doesNotUnderstand:", false, 398),
    new MM("isPromise", false, 399),
    new MM("printOn:", false, 400),
    new MM("yourself", false, 401),
    new MM("init`internalRef:", true, 0),
    new MM("internalRef", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Ref = function ($ref) {
    var self = this;
    self.$super$ActorsForV8$Ref$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ref) {
    var self = this;
    self._$superInit$ActorsForV8$Ref($ref);
    self._$init$internalRef$($ref);
    $0.$internalRefs(self.$enclosingObjects$ActorsForV8$Ref[0]).$at$put$(self, $ref);
    return self;
   };
   this.$doesNotUnderstand$ = function ($message) {
    var self = this;
    if ((0).$$equal($message.$arguments().$size())) {
     if ($message.$selector().$startsWith$("is")) {
      return false;
     } else {
      nil;
     };
    } else {
     nil;
    };
    return self._$internalRef().$immediateSend$($message);
   };
   this.$isPromise = function () {
    var self = this;
    return true;
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    self._$internalRef().$refPrintOn$($stream);
    return self;
   };
   this.$yourself = function () {
    var self = this;
    return self.$super$ActorsForV8$Ref$slot._$yourself.call(self);
   };
   this.$init$internalRef$ = function (v) {
    this.$internalRef$slot = v;
    return this;
   };
   this.$internalRef = function () {
    return this.$internalRef$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Ref";
     this._$superInit$ActorsForV8$Ref = $.$superInit$ActorsForV8$Ref;
     this.$superInit$ActorsForV8$Ref = dnuCatcher("$superInit$ActorsForV8$Ref");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$isPromise = this._$isPromise = $.$isPromise;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$yourself = $.$yourself;
     this.$yourself = dnuCatcher("$yourself");
     this._$init$internalRef$ = $.$init$internalRef$;
     this.$init$internalRef$ = dnuCatcher("$init$internalRef$");
     this._$internalRef = $.$internalRef;
     this.$internalRef = dnuCatcher("$internalRef");
     this.$enclosingObjects$ActorsForV8$Ref = enclosingObjects;
     this.$super$ActorsForV8$Ref$slot = runtimeSuperclass;
     this["ActorsForV8`Ref"] = function () {
      superBasicNew.call(this);
      this.$internalRef$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Ref"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Ref";
    this.slots = [];
    this.methods = [new MM("wrapping:", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$ = function ($ref) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ref);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Ref";
      this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
      this.$enclosingObjects$ActorsForV8$Ref = enclosingObjects;
      this.$super$ActorsForV8$Ref = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Resolver = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Resolver";
   this.name = "ActorsForV8`Resolver";
   this.header = 402;
   this.slots = [
    new SM("internalResolver", false, false),
    new SM("promise", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`Resolver", true, 403),
    new MM("instance`initializer", true, 404),
    new MM("break:", false, 405),
    new MM("fulfill:", false, 406),
    new MM("isResolver", false, 407),
    new MM("init`internalResolver:", true, 0),
    new MM("internalResolver", true, 0),
    new MM("init`promise:", true, 0),
    new MM("promise", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Resolver = function () {
    var self = this;
    self.$super$ActorsForV8$Resolver$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$ActorsForV8$Resolver();
    $1.$init$internalResolver$(self, self.$enclosingObjects$ActorsForV8$Resolver[0]._$InternalLocalPromise().$__owner$($0.$currentActor(self.$enclosingObjects$ActorsForV8$Resolver[0])));
    self._$init$promise$($1.$internalResolver(self).$externalRef());
    return self;
   };
   this.$break$ = function ($error) {
    var self = this;
    $1.$internalResolver(self).$internalResolve$(self.$enclosingObjects$ActorsForV8$Resolver[0]._$InternalBrokenRef().$problem$__owner$($error, $0.$currentActor(self.$enclosingObjects$ActorsForV8$Resolver[0])));
    return self;
   };
   this.$fulfill$ = function ($value) {
    var self = this;
    $1.$internalResolver(self).$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$Resolver[0], $value));
    return self;
   };
   this.$isResolver = function () {
    var self = this;
    return true;
   };
   this.$init$internalResolver$ = function (self, v) {
    self.$internalResolver$slot = v;
    return self;
   };
   this.$internalResolver = function (self) {
    return self.$internalResolver$slot;
   };
   this.$init$promise$ = function (v) {
    this.$promise$slot = v;
    return this;
   };
   this.$promise = function () {
    return this.$promise$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Resolver";
     this._$superInit$ActorsForV8$Resolver = $.$superInit$ActorsForV8$Resolver;
     this.$superInit$ActorsForV8$Resolver = dnuCatcher("$superInit$ActorsForV8$Resolver");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$break$ = this._$break$ = $.$break$;
     this.$fulfill$ = this._$fulfill$ = $.$fulfill$;
     this.$isResolver = this._$isResolver = $.$isResolver;
     this.$init$promise$ = this._$init$promise$ = $.$init$promise$;
     this.$promise = this._$promise = $.$promise;
     this.$enclosingObjects$ActorsForV8$Resolver = enclosingObjects;
     this.$super$ActorsForV8$Resolver$slot = runtimeSuperclass;
     this["ActorsForV8`Resolver"] = function () {
      superBasicNew.call(this);
      this.$internalResolver$slot = nil;
      this.$promise$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Resolver"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Resolver";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Resolver";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$Resolver = enclosingObjects;
      this.$super$ActorsForV8$Resolver = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Scheduler = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Scheduler";
   this.name = "ActorsForV8`Scheduler";
   this.header = 408;
   this.slots = [];
   this.methods = [
    new MM("superInit`ActorsForV8`Scheduler", true, 409),
    new MM("instance`initializer", true, 410),
    new MM("eventualSendTo:selector:arguments:", false, 411)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Scheduler = function () {
    var self = this;
    self.$super$ActorsForV8$Scheduler$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$ActorsForV8$Scheduler();
    return self;
   };
   this.$eventualSendTo$selector$arguments$ = function ($r, $s, $a) {
    var self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Scheduler";
     this._$superInit$ActorsForV8$Scheduler = $.$superInit$ActorsForV8$Scheduler;
     this.$superInit$ActorsForV8$Scheduler = dnuCatcher("$superInit$ActorsForV8$Scheduler");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$eventualSendTo$selector$arguments$ = this._$eventualSendTo$selector$arguments$ = $.$eventualSendTo$selector$arguments$;
     this.$enclosingObjects$ActorsForV8$Scheduler = enclosingObjects;
     this.$super$ActorsForV8$Scheduler$slot = runtimeSuperclass;
     this["ActorsForV8`Scheduler"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["ActorsForV8`Scheduler"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Scheduler";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Scheduler";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$Scheduler = enclosingObjects;
      this.$super$ActorsForV8$Scheduler = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Timer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Timer";
   this.name = "ActorsForV8`Timer";
   this.header = 412;
   this.slots = [new SM("cancelled", true, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`Timer", true, 413),
    new MM("instance`initializer", true, 414),
    new MM("cancel", false, 415),
    new MM("isActive", false, 416),
    new MM("isTimer", false, 417),
    new MM("schedule:after:", false, 418),
    new MM("schedule:every:", false, 419),
    new MM("init`cancelled:", true, 0),
    new MM("cancelled", true, 0),
    new MM("cancelled:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Timer = function ($milliseconds, $callback, $repeating) {
    var self = this;
    self.$super$ActorsForV8$Timer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($milliseconds, $callback, $repeating) {
    var self = this;
    self._$superInit$ActorsForV8$Timer($milliseconds, $callback, $repeating);
    self._$init$cancelled$(false);
    if ($repeating) {
     self._$schedule$every$($callback, $milliseconds);
    } else {
     self._$schedule$after$($callback, $milliseconds);
    };
    return self;
   };
   this.$cancel = function () {
    var self = this;
    self._$cancelled$(true);
    if (!(nil === self._$process())) {
     self._$process().$terminate();
     self._$process$(nil);
    } else {
     nil;
    };
    return self;
   };
   this.$isActive = function () {
    var self = this;
    if (self._$cancelled()) {
     return false;
    } else {
     nil;
    };
    return nil.$$tilde$equal(self._$process());
   };
   this.$isTimer = function () {
    var self = this;
    return true;
   };
   this.$schedule$after$ = function ($callback, $ms) {
    var self = this;
    window.setTimeout($callback, $ms);
    return self;
   };
   this.$schedule$every$ = function ($callback, $ms) {
    var self = this;
    window.setInterval($callback, $ms);
    return self;
   };
   this.$init$cancelled$ = function (v) {
    this.$cancelled$slot = v;
    return this;
   };
   this.$cancelled = function () {
    return this.$cancelled$slot;
   };
   this.$cancelled$ = function (v) {
    this.$cancelled$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Timer";
     this._$superInit$ActorsForV8$Timer = $.$superInit$ActorsForV8$Timer;
     this.$superInit$ActorsForV8$Timer = dnuCatcher("$superInit$ActorsForV8$Timer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cancel = this._$cancel = $.$cancel;
     this.$isActive = this._$isActive = $.$isActive;
     this.$isTimer = this._$isTimer = $.$isTimer;
     this._$schedule$after$ = $.$schedule$after$;
     this.$schedule$after$ = dnuCatcher("$schedule$after$");
     this._$schedule$every$ = $.$schedule$every$;
     this.$schedule$every$ = dnuCatcher("$schedule$every$");
     this._$init$cancelled$ = $.$init$cancelled$;
     this.$init$cancelled$ = dnuCatcher("$init$cancelled$");
     this._$cancelled = $.$cancelled;
     this.$cancelled = dnuCatcher("$cancelled");
     this._$cancelled$ = $.$cancelled$;
     this.$cancelled$ = dnuCatcher("$cancelled$");
     this.$enclosingObjects$ActorsForV8$Timer = enclosingObjects;
     this.$super$ActorsForV8$Timer$slot = runtimeSuperclass;
     this["ActorsForV8`Timer"] = function () {
      superBasicNew.call(this);
      this.$cancelled$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Timer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Timer";
    this.slots = [];
    this.methods = [
     new MM("__duration:callback:repeating:", true, 0),
     new MM("after:do:", false, 420),
     new MM("every:do:", false, 421)
    ];
    this.nestedClasses = [];
    this.$__duration$callback$repeating$ = function ($milliseconds, $callback, $repeating) {
     return (new this.nonMeta.basicNew()).$instance$initializer($milliseconds, $callback, $repeating);
    };
    this.$after$do$ = function ($duration, $callback) {
     var self = this;
     return self._$__duration$callback$repeating$($duration, $callback, false);
    };
    this.$every$do$ = function ($duration, $callback) {
     var self = this;
     return self._$__duration$callback$repeating$($duration, $callback, true);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Timer";
      this.$__duration$callback$repeating$ = this._$__duration$callback$repeating$ = $.$__duration$callback$repeating$;
      this.$after$do$ = this._$after$do$ = $.$after$do$;
      this.$every$do$ = this._$every$do$ = $.$every$do$;
      this.$enclosingObjects$ActorsForV8$Timer = enclosingObjects;
      this.$super$ActorsForV8$Timer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$WhenReactor = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`WhenReactor";
   this.name = "ActorsForV8`WhenReactor";
   this.header = 422;
   this.slots = [
    new SM("onValue", false, false),
    new SM("onError", false, false),
    new SM("resolver", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`WhenReactor", true, 423),
    new MM("instance`initializer", true, 424),
    new MM("reactBroken:", false, 425),
    new MM("reactMoreResolved:", false, 426),
    new MM("reactResolved:", false, 427),
    new MM("init`onValue:", true, 0),
    new MM("onValue", true, 0),
    new MM("init`onError:", true, 0),
    new MM("onError", true, 0),
    new MM("init`resolver:", true, 0),
    new MM("resolver", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$WhenReactor = function ($v, $e, $r) {
    var self = this;
    self.$super$ActorsForV8$WhenReactor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($v, $e, $r) {
    var self = this;
    self._$superInit$ActorsForV8$WhenReactor($v, $e, $r);
    self._$init$onValue$($v);
    self._$init$onError$($e);
    self._$init$resolver$($r);
    return self;
   };
   this.$reactBroken$ = function ($value) {
    var self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]))) {
     self._$halt();
    } else {
     nil;
    };
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$WhenReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$onError(), "cull:", [$value], self._$resolver()));
    return self;
   };
   this.$reactMoreResolved$ = function ($internalRef) {
    var self = this;
    self._$resolver().$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$WhenReactor[0], $internalRef.$whenFulfilled$whenBroken$(self._$onValue(), self._$onError())));
    return self;
   };
   this.$reactResolved$ = function ($value) {
    var self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]))) {
     self._$halt();
    } else {
     nil;
    };
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$WhenReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$onValue(), "cull:", [$value], self._$resolver()));
    return self;
   };
   this.$init$onValue$ = function (v) {
    this.$onValue$slot = v;
    return this;
   };
   this.$onValue = function () {
    return this.$onValue$slot;
   };
   this.$init$onError$ = function (v) {
    this.$onError$slot = v;
    return this;
   };
   this.$onError = function () {
    return this.$onError$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`WhenReactor";
     this._$superInit$ActorsForV8$WhenReactor = $.$superInit$ActorsForV8$WhenReactor;
     this.$superInit$ActorsForV8$WhenReactor = dnuCatcher("$superInit$ActorsForV8$WhenReactor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$reactBroken$ = this._$reactBroken$ = $.$reactBroken$;
     this.$reactMoreResolved$ = this._$reactMoreResolved$ = $.$reactMoreResolved$;
     this.$reactResolved$ = this._$reactResolved$ = $.$reactResolved$;
     this._$init$onValue$ = $.$init$onValue$;
     this.$init$onValue$ = dnuCatcher("$init$onValue$");
     this._$onValue = $.$onValue;
     this.$onValue = dnuCatcher("$onValue");
     this._$init$onError$ = $.$init$onError$;
     this.$init$onError$ = dnuCatcher("$init$onError$");
     this._$onError = $.$onError;
     this.$onError = dnuCatcher("$onError");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$WhenReactor = enclosingObjects;
     this.$super$ActorsForV8$WhenReactor$slot = runtimeSuperclass;
     this["ActorsForV8`WhenReactor"] = function () {
      superBasicNew.call(this);
      this.$onValue$slot = nil;
      this.$onError$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`WhenReactor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`WhenReactor";
    this.slots = [];
    this.methods = [new MM("onValue:onError:resolver:", true, 0)];
    this.nestedClasses = [];
    this.$onValue$onError$resolver$ = function ($v, $e, $r) {
     return (new this.nonMeta.basicNew()).$instance$initializer($v, $e, $r);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`WhenReactor";
      this.$onValue$onError$resolver$ = this._$onValue$onError$resolver$ = $.$onValue$onError$resolver$;
      this.$enclosingObjects$ActorsForV8$WhenReactor = enclosingObjects;
      this.$super$ActorsForV8$WhenReactor = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Actor.enclosingMixin = this;
  this.$ActorsForV8$DOMActor.enclosingMixin = this;
  this.$ActorsForV8$EventualSendReactor.enclosingMixin = this;
  this.$ActorsForV8$InternalActor.enclosingMixin = this;
  this.$ActorsForV8$InternalBrokenRef.enclosingMixin = this;
  this.$ActorsForV8$InternalFarReference.enclosingMixin = this;
  this.$ActorsForV8$InternalLocalPromise.enclosingMixin = this;
  this.$ActorsForV8$InternalNearRef.enclosingMixin = this;
  this.$ActorsForV8$InternalRef.enclosingMixin = this;
  this.$ActorsForV8$InternalRemotePromise.enclosingMixin = this;
  this.$ActorsForV8$PendingDelivery.enclosingMixin = this;
  this.$ActorsForV8$PromiseUtils.enclosingMixin = this;
  this.$ActorsForV8$RedirectReactor.enclosingMixin = this;
  this.$ActorsForV8$Ref.enclosingMixin = this;
  this.$ActorsForV8$Resolver.enclosingMixin = this;
  this.$ActorsForV8$Scheduler.enclosingMixin = this;
  this.$ActorsForV8$Timer.enclosingMixin = this;
  this.$ActorsForV8$WhenReactor.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for ActorsForV8";
    this._$superInit$ActorsForV8 = $.$superInit$ActorsForV8;
    this.$superInit$ActorsForV8 = dnuCatcher("$superInit$ActorsForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$Actor = this._$Actor = $.$Actor;
    this._$DOMActor = $.$DOMActor;
    this.$DOMActor = dnuCatcher("$DOMActor");
    this._$EventualSendReactor = $.$EventualSendReactor;
    this.$EventualSendReactor = dnuCatcher("$EventualSendReactor");
    this._$InternalActor = $.$InternalActor;
    this.$InternalActor = dnuCatcher("$InternalActor");
    this._$InternalBrokenRef = $.$InternalBrokenRef;
    this.$InternalBrokenRef = dnuCatcher("$InternalBrokenRef");
    this._$InternalFarReference = $.$InternalFarReference;
    this.$InternalFarReference = dnuCatcher("$InternalFarReference");
    this._$InternalLocalPromise = $.$InternalLocalPromise;
    this.$InternalLocalPromise = dnuCatcher("$InternalLocalPromise");
    this._$InternalNearRef = $.$InternalNearRef;
    this.$InternalNearRef = dnuCatcher("$InternalNearRef");
    this._$InternalRef = $.$InternalRef;
    this.$InternalRef = dnuCatcher("$InternalRef");
    this._$InternalRemotePromise = $.$InternalRemotePromise;
    this.$InternalRemotePromise = dnuCatcher("$InternalRemotePromise");
    this._$PendingDelivery = $.$PendingDelivery;
    this.$PendingDelivery = dnuCatcher("$PendingDelivery");
    this._$PromiseUtils = $.$PromiseUtils;
    this.$PromiseUtils = dnuCatcher("$PromiseUtils");
    this._$RedirectReactor = $.$RedirectReactor;
    this.$RedirectReactor = dnuCatcher("$RedirectReactor");
    this._$Ref = $.$Ref;
    this.$Ref = dnuCatcher("$Ref");
    this.$Resolver = this._$Resolver = $.$Resolver;
    this._$Scheduler = $.$Scheduler;
    this.$Scheduler = dnuCatcher("$Scheduler");
    this.$Timer = this._$Timer = $.$Timer;
    this._$WhenReactor = $.$WhenReactor;
    this.$WhenReactor = dnuCatcher("$WhenReactor");
    this.$init$Promise$ = this._$init$Promise$ = $.$init$Promise$;
    this.$Promise = this._$Promise = $.$Promise;
    this._$init$defaultActor$ = $.$init$defaultActor$;
    this.$init$defaultActor$ = dnuCatcher("$init$defaultActor$");
    this._$defaultActor = $.$defaultActor;
    this.$defaultActor = dnuCatcher("$defaultActor");
    this.$init$ActorsForV8$Actor$ = this._$init$ActorsForV8$Actor$ = $.$init$ActorsForV8$Actor$;
    this.$ActorsForV8$Actor = this._$ActorsForV8$Actor = $.$ActorsForV8$Actor;
    this.$ActorsForV8$Actor$ = this._$ActorsForV8$Actor$ = $.$ActorsForV8$Actor$;
    this.$init$ActorsForV8$DOMActor$ = this._$init$ActorsForV8$DOMActor$ = $.$init$ActorsForV8$DOMActor$;
    this.$ActorsForV8$DOMActor = this._$ActorsForV8$DOMActor = $.$ActorsForV8$DOMActor;
    this.$ActorsForV8$DOMActor$ = this._$ActorsForV8$DOMActor$ = $.$ActorsForV8$DOMActor$;
    this.$init$ActorsForV8$EventualSendReactor$ = this._$init$ActorsForV8$EventualSendReactor$ = $.$init$ActorsForV8$EventualSendReactor$;
    this.$ActorsForV8$EventualSendReactor = this._$ActorsForV8$EventualSendReactor = $.$ActorsForV8$EventualSendReactor;
    this.$ActorsForV8$EventualSendReactor$ = this._$ActorsForV8$EventualSendReactor$ = $.$ActorsForV8$EventualSendReactor$;
    this.$init$ActorsForV8$InternalActor$ = this._$init$ActorsForV8$InternalActor$ = $.$init$ActorsForV8$InternalActor$;
    this.$ActorsForV8$InternalActor = this._$ActorsForV8$InternalActor = $.$ActorsForV8$InternalActor;
    this.$ActorsForV8$InternalActor$ = this._$ActorsForV8$InternalActor$ = $.$ActorsForV8$InternalActor$;
    this.$init$ActorsForV8$InternalBrokenRef$ = this._$init$ActorsForV8$InternalBrokenRef$ = $.$init$ActorsForV8$InternalBrokenRef$;
    this.$ActorsForV8$InternalBrokenRef = this._$ActorsForV8$InternalBrokenRef = $.$ActorsForV8$InternalBrokenRef;
    this.$ActorsForV8$InternalBrokenRef$ = this._$ActorsForV8$InternalBrokenRef$ = $.$ActorsForV8$InternalBrokenRef$;
    this.$init$ActorsForV8$InternalFarReference$ = this._$init$ActorsForV8$InternalFarReference$ = $.$init$ActorsForV8$InternalFarReference$;
    this.$ActorsForV8$InternalFarReference = this._$ActorsForV8$InternalFarReference = $.$ActorsForV8$InternalFarReference;
    this.$ActorsForV8$InternalFarReference$ = this._$ActorsForV8$InternalFarReference$ = $.$ActorsForV8$InternalFarReference$;
    this.$init$ActorsForV8$InternalLocalPromise$ = this._$init$ActorsForV8$InternalLocalPromise$ = $.$init$ActorsForV8$InternalLocalPromise$;
    this.$ActorsForV8$InternalLocalPromise = this._$ActorsForV8$InternalLocalPromise = $.$ActorsForV8$InternalLocalPromise;
    this.$ActorsForV8$InternalLocalPromise$ = this._$ActorsForV8$InternalLocalPromise$ = $.$ActorsForV8$InternalLocalPromise$;
    this.$init$ActorsForV8$InternalNearRef$ = this._$init$ActorsForV8$InternalNearRef$ = $.$init$ActorsForV8$InternalNearRef$;
    this.$ActorsForV8$InternalNearRef = this._$ActorsForV8$InternalNearRef = $.$ActorsForV8$InternalNearRef;
    this.$ActorsForV8$InternalNearRef$ = this._$ActorsForV8$InternalNearRef$ = $.$ActorsForV8$InternalNearRef$;
    this.$init$ActorsForV8$InternalRef$ = this._$init$ActorsForV8$InternalRef$ = $.$init$ActorsForV8$InternalRef$;
    this.$ActorsForV8$InternalRef = this._$ActorsForV8$InternalRef = $.$ActorsForV8$InternalRef;
    this.$ActorsForV8$InternalRef$ = this._$ActorsForV8$InternalRef$ = $.$ActorsForV8$InternalRef$;
    this.$init$ActorsForV8$InternalRemotePromise$ = this._$init$ActorsForV8$InternalRemotePromise$ = $.$init$ActorsForV8$InternalRemotePromise$;
    this.$ActorsForV8$InternalRemotePromise = this._$ActorsForV8$InternalRemotePromise = $.$ActorsForV8$InternalRemotePromise;
    this.$ActorsForV8$InternalRemotePromise$ = this._$ActorsForV8$InternalRemotePromise$ = $.$ActorsForV8$InternalRemotePromise$;
    this.$init$ActorsForV8$PendingDelivery$ = this._$init$ActorsForV8$PendingDelivery$ = $.$init$ActorsForV8$PendingDelivery$;
    this.$ActorsForV8$PendingDelivery = this._$ActorsForV8$PendingDelivery = $.$ActorsForV8$PendingDelivery;
    this.$ActorsForV8$PendingDelivery$ = this._$ActorsForV8$PendingDelivery$ = $.$ActorsForV8$PendingDelivery$;
    this.$init$ActorsForV8$PromiseUtils$ = this._$init$ActorsForV8$PromiseUtils$ = $.$init$ActorsForV8$PromiseUtils$;
    this.$ActorsForV8$PromiseUtils = this._$ActorsForV8$PromiseUtils = $.$ActorsForV8$PromiseUtils;
    this.$ActorsForV8$PromiseUtils$ = this._$ActorsForV8$PromiseUtils$ = $.$ActorsForV8$PromiseUtils$;
    this.$init$ActorsForV8$RedirectReactor$ = this._$init$ActorsForV8$RedirectReactor$ = $.$init$ActorsForV8$RedirectReactor$;
    this.$ActorsForV8$RedirectReactor = this._$ActorsForV8$RedirectReactor = $.$ActorsForV8$RedirectReactor;
    this.$ActorsForV8$RedirectReactor$ = this._$ActorsForV8$RedirectReactor$ = $.$ActorsForV8$RedirectReactor$;
    this.$init$ActorsForV8$Ref$ = this._$init$ActorsForV8$Ref$ = $.$init$ActorsForV8$Ref$;
    this.$ActorsForV8$Ref = this._$ActorsForV8$Ref = $.$ActorsForV8$Ref;
    this.$ActorsForV8$Ref$ = this._$ActorsForV8$Ref$ = $.$ActorsForV8$Ref$;
    this.$init$ActorsForV8$Resolver$ = this._$init$ActorsForV8$Resolver$ = $.$init$ActorsForV8$Resolver$;
    this.$ActorsForV8$Resolver = this._$ActorsForV8$Resolver = $.$ActorsForV8$Resolver;
    this.$ActorsForV8$Resolver$ = this._$ActorsForV8$Resolver$ = $.$ActorsForV8$Resolver$;
    this.$init$ActorsForV8$Scheduler$ = this._$init$ActorsForV8$Scheduler$ = $.$init$ActorsForV8$Scheduler$;
    this.$ActorsForV8$Scheduler = this._$ActorsForV8$Scheduler = $.$ActorsForV8$Scheduler;
    this.$ActorsForV8$Scheduler$ = this._$ActorsForV8$Scheduler$ = $.$ActorsForV8$Scheduler$;
    this.$init$ActorsForV8$Timer$ = this._$init$ActorsForV8$Timer$ = $.$init$ActorsForV8$Timer$;
    this.$ActorsForV8$Timer = this._$ActorsForV8$Timer = $.$ActorsForV8$Timer;
    this.$ActorsForV8$Timer$ = this._$ActorsForV8$Timer$ = $.$ActorsForV8$Timer$;
    this.$init$ActorsForV8$WhenReactor$ = this._$init$ActorsForV8$WhenReactor$ = $.$init$ActorsForV8$WhenReactor$;
    this.$ActorsForV8$WhenReactor = this._$ActorsForV8$WhenReactor = $.$ActorsForV8$WhenReactor;
    this.$ActorsForV8$WhenReactor$ = this._$ActorsForV8$WhenReactor$ = $.$ActorsForV8$WhenReactor$;
    this.$enclosingObjects$ActorsForV8 = enclosingObjects;
    this.$super$ActorsForV8$slot = runtimeSuperclass;
    this.ActorsForV8 = function () {
     superBasicNew.call(this);
     this.$WeakMap$slot = nil;
     this.$List$slot = nil;
     this.$internalRefs$slot = nil;
     this.$Promise$slot = nil;
     this.$defaultActor$slot = nil;
     this.$ActorsForV8$Actor$slot = nil;
     this.$ActorsForV8$DOMActor$slot = nil;
     this.$ActorsForV8$EventualSendReactor$slot = nil;
     this.$ActorsForV8$InternalActor$slot = nil;
     this.$ActorsForV8$InternalBrokenRef$slot = nil;
     this.$ActorsForV8$InternalFarReference$slot = nil;
     this.$ActorsForV8$InternalLocalPromise$slot = nil;
     this.$ActorsForV8$InternalNearRef$slot = nil;
     this.$ActorsForV8$InternalRef$slot = nil;
     this.$ActorsForV8$InternalRemotePromise$slot = nil;
     this.$ActorsForV8$PendingDelivery$slot = nil;
     this.$ActorsForV8$PromiseUtils$slot = nil;
     this.$ActorsForV8$RedirectReactor$slot = nil;
     this.$ActorsForV8$Ref$slot = nil;
     this.$ActorsForV8$Resolver$slot = nil;
     this.$ActorsForV8$Scheduler$slot = nil;
     this.$ActorsForV8$Timer$slot = nil;
     this.$ActorsForV8$WhenReactor$slot = nil;
    };
    this.basicNew = this.ActorsForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for ActorsForV8";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for ActorsForV8";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$ActorsForV8 = enclosingObjects;
     this.$super$ActorsForV8 = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$AliensForV8 = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for AliensForV8";
  this.name = "AliensForV8";
  this.header = 428;
  this.slots = [
   new SM("global", false, false),
   new SM("AliensForV8`Alien", true, true),
   new SM("AliensForV8`Expat", true, true)
  ];
  this.methods = [
   new MM("superInit`AliensForV8", true, 429),
   new MM("instance`initializer", true, 430),
   new MM("alienate:", false, 431),
   new MM("copyUntilFirstColon:", false, 432),
   new MM("expatriate:", false, 433),
   new MM("expatriateBlock:", false, 434),
   new MM("Alien", true, 0),
   new MM("Expat", true, 0),
   new MM("init`global:", true, 0),
   new MM("global", true, 0),
   new MM("init`AliensForV8`Alien:", true, 0),
   new MM("AliensForV8`Alien", true, 0),
   new MM("AliensForV8`Alien:", true, 0),
   new MM("init`AliensForV8`Expat:", true, 0),
   new MM("AliensForV8`Expat", true, 0),
   new MM("AliensForV8`Expat:", true, 0)
  ];
  this.nestedClasses = [
   "AliensForV8`Alien",
   "AliensForV8`Expat"
  ];
  this.applications = [];
  this.$superInit$AliensForV8 = function ($p) {
   var self = this;
   self.$super$AliensForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   var self = this;
   self._$superInit$AliensForV8($p);
   self._$init$global$(self._$Alien().$wrapping$(theGlobalObject));
   return self;
  };
  this.$alienate$ = function ($jsObj) {
   var self = this;
   "TODO";
   if (typeof $jsObj === "string") {
    return $jsObj;
   } else {
    nil;
   };
   if (typeof $jsObj === "number") {
    return $jsObj;
   } else {
    nil;
   };
   if (typeof $jsObj === "boolean") {
    return $jsObj;
   } else {
    nil;
   };
   if (typeof $jsObj === "function") {
    return self._$Alien().$wrapping$($jsObj);
   } else {
    nil;
   };
   if ($jsObj instanceof self._$Object().runtimeClass.basicNew) {
    if ($jsObj.$isAlien()) {
     self._$Error().$signal$("Shouldnt be asked to double alienate...");
    } else {
     nil;
    };
    if ($jsObj.$isExpat()) {
     return $jsObj.$_nsTarget();
    } else {
     nil;
    };
    self._$Error().$signal$("Asked to alienate a raw Newspeak object...");
   } else {
    nil;
   };
   if ($jsObj instanceof Array) {
    self._$Error().$signal$("TODO: Support arrays");
   } else {
    nil;
   };
   return self._$Alien().$wrapping$($jsObj);
  };
  this.$copyUntilFirstColon$ = function ($sel) {
   var self = this;
   "BOGUS";
   {
    var $$limit = nil;
    var $i = nil;
    nil;
    $i = 2;
    $$limit = $sel.$size();
    for (; $$limit.$$greater$equal($i); ) {
     if ($sel.$at$($i).$$equal("$")) {
      return $sel.$copyFrom$to$(2, $i - 1);
     } else {
      nil;
     };
     $i = (1).$$plus($i);
    };
   };
   return $sel.$copyFrom$to$(2, $sel.$size());
  };
  this.$expatriate$ = function ($nsObj) {
   var self = this;
   "TODO";
   if (typeof $nsObj === "string") {
    return $nsObj;
   } else {
    nil;
   };
   if (typeof $nsObj === "number") {
    return $nsObj;
   } else {
    nil;
   };
   if (typeof $nsObj === "boolean") {
    return $nsObj;
   } else {
    nil;
   };
   if (typeof $nsObj === "function") {
    return self._$expatriateBlock$($nsObj);
   } else {
    nil;
   };
   if ($nsObj instanceof self._$Object().runtimeClass.basicNew) {
    if ($nsObj.$isAlien()) {
     return $nsObj.jsTarget;
    } else {
     nil;
    };
    if ($nsObj.$isExpat()) {
     self._$Error().$signal$("Shouldnt be asked to double expatriate...");
    } else {
     nil;
    };
    return self._$Expat().$wrapping$($nsObj);
   } else {
    nil;
   };
   if ($nsObj instanceof Array) {
    self._$Error().$signal$("TODO: Support arrays");
   } else {
    nil;
   };
   self._$Error().$signal$("Asked to expatriate a raw JS object...");
   return self;
  };
  this.$expatriateBlock$ = function ($b) {
   var self = this;
   return function () {
    return self._$expatriate$($b.$valueWithArguments$(Array.prototype.slice.call(arguments, 0).$collect$(function ($ea) {
     return self._$alienate$($ea);
    })));
   };
  };
  this.$Alien = function () {
   if (nil === this.$AliensForV8$Alien$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$AliensForV8);
    var mixin = $.$AliensForV8$Alien;
    this.$AliensForV8$Alien$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$AliensForV8$Alien$slot;
  };
  this.$Expat = function () {
   if (nil === this.$AliensForV8$Expat$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$AliensForV8);
    var mixin = $.$AliensForV8$Expat;
    this.$AliensForV8$Expat$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$AliensForV8$Expat$slot;
  };
  this.$init$global$ = function (v) {
   this.$global$slot = v;
   return this;
  };
  this.$global = function () {
   return this.$global$slot;
  };
  this.$init$AliensForV8$Alien$ = function (v) {
   this.$AliensForV8$Alien$slot = v;
   return this;
  };
  this.$AliensForV8$Alien = function () {
   return this.$AliensForV8$Alien$slot;
  };
  this.$AliensForV8$Alien$ = function (v) {
   this.$AliensForV8$Alien$slot = v;
   return this;
  };
  this.$init$AliensForV8$Expat$ = function (v) {
   this.$AliensForV8$Expat$slot = v;
   return this;
  };
  this.$AliensForV8$Expat = function () {
   return this.$AliensForV8$Expat$slot;
  };
  this.$AliensForV8$Expat$ = function (v) {
   this.$AliensForV8$Expat$slot = v;
   return this;
  };
  this.$AliensForV8$Alien = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for AliensForV8`Alien";
   this.name = "AliensForV8`Alien";
   this.header = 435;
   this.slots = [];
   this.methods = [
    new MM("superInit`AliensForV8`Alien", true, 436),
    new MM("instance`initializer", true, 437),
    new MM("applyConstructorUsingEval:", false, 438),
    new MM("at:", false, 439),
    new MM("at:put:", false, 440),
    new MM("doesNotUnderstand:", false, 441),
    new MM("isAlien", false, 442),
    new MM("isExpat", false, 443),
    new MM("isUndefined", false, 444),
    new MM("printString", false, 445),
    new MM("value", false, 446),
    new MM("value:", false, 447),
    new MM("value:value:", false, 448),
    new MM("value:value:value:", false, 449)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$AliensForV8$Alien = function ($o) {
    var self = this;
    self.$super$AliensForV8$Alien$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o) {
    var self = this;
    self._$superInit$AliensForV8$Alien($o);
    self.jsTarget = $o;
    return self;
   };
   this.$applyConstructorUsingEval$ = function ($jsArguments) {
    var self = this;
    function applyNewUsingEval(weirdConstructor, args) {
	var a = [];
	for (var i = 0; i < args.length; i++)
		a[i] = "args[" + i + "]";
	return eval("new weirdConstructor(" + a.join() + ")");
};
    return applyNewUsingEval(self.jsTarget, $jsArguments);
   };
   this.$at$ = function ($memberName) {
    var self = this;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(self.jsTarget[$memberName]);
   };
   this.$at$put$ = function ($memberName, $value) {
    var self = this;
    self.jsTarget[$memberName] = self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($value);
    return $value;
   };
   this.$doesNotUnderstand$ = function ($msg) {
    var self = this;
    var $jsTarget = nil;
    var $jsArguments = nil;
    var $jsSelector = nil;
    $jsTarget = self.jsTarget;
    $jsArguments = $msg.$arguments().$collect$(function ($arg) {
     return self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($arg);
    });
    $jsSelector = self.$enclosingObjects$AliensForV8$Alien[0]._$copyUntilFirstColon$($msg.$mangledSelector());
    if ($jsSelector.$$equal("new")) {
     var $args = nil;
     var $boundFunction = nil;
     if (!(typeof $jsTarget === "function")) {
      return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(self._$applyConstructorUsingEval$($jsArguments));
     } else {
      nil;
     };
     $args = [null].concat($jsArguments);
     $boundFunction = $jsTarget.bind.apply($jsTarget, $args);
     return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(new $boundFunction());
    } else {
     var $jsFunction = nil;
     var $jsResult = nil;
     $jsFunction = $jsTarget[$jsSelector];
     if ($jsFunction === undefined) {
      return self.$super$AliensForV8$Alien$slot._$doesNotUnderstand$.call(self, $msg);
     } else {
      nil;
     };
     $jsResult = $jsFunction.apply($jsTarget, $jsArguments);
     return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsResult);
    };
    return self;
   };
   this.$isAlien = function () {
    var self = this;
    return true;
   };
   this.$isExpat = function () {
    var self = this;
    return false;
   };
   this.$isUndefined = function () {
    var self = this;
    return self.jsTarget === undefined;
   };
   this.$printString = function () {
    var self = this;
    return "Alien wrapping: ".$$comma(self.jsTarget.toString());
   };
   this.$value = function () {
    var self = this;
    var $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget));
   };
   this.$value$ = function ($a1) {
    var self = this;
    var $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1)));
   };
   this.$value$value$ = function ($a1, $a2) {
    var self = this;
    var $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a2)));
   };
   this.$value$value$value$ = function ($a1, $a2, $a3) {
    var self = this;
    var $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a2), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a3)));
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for AliensForV8`Alien";
     this._$superInit$AliensForV8$Alien = $.$superInit$AliensForV8$Alien;
     this.$superInit$AliensForV8$Alien = dnuCatcher("$superInit$AliensForV8$Alien");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$applyConstructorUsingEval$ = $.$applyConstructorUsingEval$;
     this.$applyConstructorUsingEval$ = dnuCatcher("$applyConstructorUsingEval$");
     this.$at$ = this._$at$ = $.$at$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$isAlien = this._$isAlien = $.$isAlien;
     this.$isExpat = this._$isExpat = $.$isExpat;
     this.$isUndefined = this._$isUndefined = $.$isUndefined;
     this.$printString = this._$printString = $.$printString;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$value$value$ = this._$value$value$ = $.$value$value$;
     this.$value$value$value$ = this._$value$value$value$ = $.$value$value$value$;
     this.$enclosingObjects$AliensForV8$Alien = enclosingObjects;
     this.$super$AliensForV8$Alien$slot = runtimeSuperclass;
     this["AliensForV8`Alien"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["AliensForV8`Alien"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for AliensForV8`Alien";
    this.slots = [];
    this.methods = [new MM("wrapping:", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$ = function ($o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for AliensForV8`Alien";
      this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
      this.$enclosingObjects$AliensForV8$Alien = enclosingObjects;
      this.$super$AliensForV8$Alien = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$AliensForV8$Expat = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for AliensForV8`Expat";
   this.name = "AliensForV8`Expat";
   this.header = 450;
   this.slots = [new SM("_nsTarget", false, false)];
   this.methods = [
    new MM("superInit`AliensForV8`Expat", true, 451),
    new MM("instance`initializer", true, 452),
    new MM("doesNotUnderstand:", false, 453),
    new MM("isAlien", false, 454),
    new MM("isExpat", false, 455),
    new MM("init`_nsTarget:", true, 0),
    new MM("_nsTarget", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$AliensForV8$Expat = function ($o) {
    var self = this;
    self.$super$AliensForV8$Expat$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o) {
    var self = this;
    self._$superInit$AliensForV8$Expat($o);
    $1.$init$_nsTarget$(self, $o);
    return self;
   };
   this.$doesNotUnderstand$ = function ($msg) {
    var self = this;
    var $nsSelector = nil;
    var $nsArguments = nil;
    var $nsResult = nil;
    $nsSelector = self._$something$($msg.$selector());
    $nsArguments = $msg.$arguments().$collect$(function ($arg) {
     return self.$enclosingObjects$AliensForV8$Expat[0]._$alienate$($arg);
    });
    $nsResult = $1.$_nsTarget(self)[$nsSelector].apply($1.$_nsTarget(self), $nsArguments);
    return self.$enclosingObjects$AliensForV8$Expat[0]._$expatriate$($nsResult);
   };
   this.$isAlien = function () {
    var self = this;
    return false;
   };
   this.$isExpat = function () {
    var self = this;
    return true;
   };
   this.$init$_nsTarget$ = function (self, v) {
    self.$_nsTarget$slot = v;
    return self;
   };
   this.$_nsTarget = function (self) {
    return self.$_nsTarget$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for AliensForV8`Expat";
     this._$superInit$AliensForV8$Expat = $.$superInit$AliensForV8$Expat;
     this.$superInit$AliensForV8$Expat = dnuCatcher("$superInit$AliensForV8$Expat");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$isAlien = this._$isAlien = $.$isAlien;
     this.$isExpat = this._$isExpat = $.$isExpat;
     this.$enclosingObjects$AliensForV8$Expat = enclosingObjects;
     this.$super$AliensForV8$Expat$slot = runtimeSuperclass;
     this["AliensForV8`Expat"] = function () {
      superBasicNew.call(this);
      this.$_nsTarget$slot = nil;
     };
     this.basicNew = this["AliensForV8`Expat"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for AliensForV8`Expat";
    this.slots = [];
    this.methods = [new MM("wrapping:", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$ = function ($o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for AliensForV8`Expat";
      this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
      this.$enclosingObjects$AliensForV8$Expat = enclosingObjects;
      this.$super$AliensForV8$Expat = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$AliensForV8$Alien.enclosingMixin = this;
  this.$AliensForV8$Expat.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for AliensForV8";
    this._$superInit$AliensForV8 = $.$superInit$AliensForV8;
    this.$superInit$AliensForV8 = dnuCatcher("$superInit$AliensForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$alienate$ = $.$alienate$;
    this.$alienate$ = dnuCatcher("$alienate$");
    this._$copyUntilFirstColon$ = $.$copyUntilFirstColon$;
    this.$copyUntilFirstColon$ = dnuCatcher("$copyUntilFirstColon$");
    this._$expatriate$ = $.$expatriate$;
    this.$expatriate$ = dnuCatcher("$expatriate$");
    this._$expatriateBlock$ = $.$expatriateBlock$;
    this.$expatriateBlock$ = dnuCatcher("$expatriateBlock$");
    this._$Alien = $.$Alien;
    this.$Alien = dnuCatcher("$Alien");
    this._$Expat = $.$Expat;
    this.$Expat = dnuCatcher("$Expat");
    this.$init$global$ = this._$init$global$ = $.$init$global$;
    this.$global = this._$global = $.$global;
    this.$init$AliensForV8$Alien$ = this._$init$AliensForV8$Alien$ = $.$init$AliensForV8$Alien$;
    this.$AliensForV8$Alien = this._$AliensForV8$Alien = $.$AliensForV8$Alien;
    this.$AliensForV8$Alien$ = this._$AliensForV8$Alien$ = $.$AliensForV8$Alien$;
    this.$init$AliensForV8$Expat$ = this._$init$AliensForV8$Expat$ = $.$init$AliensForV8$Expat$;
    this.$AliensForV8$Expat = this._$AliensForV8$Expat = $.$AliensForV8$Expat;
    this.$AliensForV8$Expat$ = this._$AliensForV8$Expat$ = $.$AliensForV8$Expat$;
    this.$enclosingObjects$AliensForV8 = enclosingObjects;
    this.$super$AliensForV8$slot = runtimeSuperclass;
    this.AliensForV8 = function () {
     superBasicNew.call(this);
     this.$global$slot = nil;
     this.$AliensForV8$Alien$slot = nil;
     this.$AliensForV8$Expat$slot = nil;
    };
    this.basicNew = this.AliensForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for AliensForV8";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for AliensForV8";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$AliensForV8 = enclosingObjects;
     this.$super$AliensForV8 = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Collections = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for Collections";
  this.name = "Collections";
  this.header = 456;
  this.slots = [
   new SM("MutableAddableList", false, false),
   new SM("OrderedCollection", false, false),
   new SM("Dictionary", false, false),
   new SM("IdentityDictionary", false, false),
   new SM("SortedCollection", false, false),
   new SM("ListReadStream", false, false),
   new SM("ListReadWriteStream", false, false),
   new SM("WeakArray", false, false),
   new SM("Collections`AddableList", true, true),
   new SM("Collections`Association", true, true),
   new SM("Collections`Bag", true, true),
   new SM("Collections`Collection", true, true),
   new SM("Collections`HashedCollection", true, true),
   new SM("Collections`IdentityMutableHashedMap", true, true),
   new SM("Collections`IdentitySet", true, true),
   new SM("Collections`Interval", true, true),
   new SM("Collections`List", true, true),
   new SM("Collections`MutableArrayList", true, true),
   new SM("Collections`MutableHashedMap", true, true),
   new SM("Collections`MutableList", true, true),
   new SM("Collections`Set", true, true),
   new SM("Collections`SortedList", true, true)
  ];
  this.methods = [
   new MM("superInit`Collections", true, 457),
   new MM("instance`initializer", true, 458),
   new MM("AddableList", true, 0),
   new MM("Association", true, 0),
   new MM("Bag", true, 0),
   new MM("Collection", true, 0),
   new MM("HashedCollection", true, 0),
   new MM("IdentityMutableHashedMap", true, 0),
   new MM("IdentitySet", true, 0),
   new MM("Interval", true, 0),
   new MM("List", true, 0),
   new MM("MutableArrayList", true, 0),
   new MM("MutableHashedMap", true, 0),
   new MM("MutableList", true, 0),
   new MM("Set", true, 0),
   new MM("SortedList", true, 0),
   new MM("init`MutableAddableList:", true, 0),
   new MM("MutableAddableList", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`Dictionary:", true, 0),
   new MM("Dictionary", true, 0),
   new MM("init`IdentityDictionary:", true, 0),
   new MM("IdentityDictionary", true, 0),
   new MM("init`SortedCollection:", true, 0),
   new MM("SortedCollection", true, 0),
   new MM("init`ListReadStream:", true, 0),
   new MM("ListReadStream", true, 0),
   new MM("init`ListReadWriteStream:", true, 0),
   new MM("ListReadWriteStream", true, 0),
   new MM("init`WeakArray:", true, 0),
   new MM("WeakArray", true, 0),
   new MM("init`Collections`AddableList:", true, 0),
   new MM("Collections`AddableList", true, 0),
   new MM("Collections`AddableList:", true, 0),
   new MM("init`Collections`Association:", true, 0),
   new MM("Collections`Association", true, 0),
   new MM("Collections`Association:", true, 0),
   new MM("init`Collections`Bag:", true, 0),
   new MM("Collections`Bag", true, 0),
   new MM("Collections`Bag:", true, 0),
   new MM("init`Collections`Collection:", true, 0),
   new MM("Collections`Collection", true, 0),
   new MM("Collections`Collection:", true, 0),
   new MM("init`Collections`HashedCollection:", true, 0),
   new MM("Collections`HashedCollection", true, 0),
   new MM("Collections`HashedCollection:", true, 0),
   new MM("init`Collections`IdentityMutableHashedMap:", true, 0),
   new MM("Collections`IdentityMutableHashedMap", true, 0),
   new MM("Collections`IdentityMutableHashedMap:", true, 0),
   new MM("init`Collections`IdentitySet:", true, 0),
   new MM("Collections`IdentitySet", true, 0),
   new MM("Collections`IdentitySet:", true, 0),
   new MM("init`Collections`Interval:", true, 0),
   new MM("Collections`Interval", true, 0),
   new MM("Collections`Interval:", true, 0),
   new MM("init`Collections`List:", true, 0),
   new MM("Collections`List", true, 0),
   new MM("Collections`List:", true, 0),
   new MM("init`Collections`MutableArrayList:", true, 0),
   new MM("Collections`MutableArrayList", true, 0),
   new MM("Collections`MutableArrayList:", true, 0),
   new MM("init`Collections`MutableHashedMap:", true, 0),
   new MM("Collections`MutableHashedMap", true, 0),
   new MM("Collections`MutableHashedMap:", true, 0),
   new MM("init`Collections`MutableList:", true, 0),
   new MM("Collections`MutableList", true, 0),
   new MM("Collections`MutableList:", true, 0),
   new MM("init`Collections`Set:", true, 0),
   new MM("Collections`Set", true, 0),
   new MM("Collections`Set:", true, 0),
   new MM("init`Collections`SortedList:", true, 0),
   new MM("Collections`SortedList", true, 0),
   new MM("Collections`SortedList:", true, 0)
  ];
  this.nestedClasses = [
   "Collections`AddableList",
   "Collections`Association",
   "Collections`Bag",
   "Collections`Collection",
   "Collections`HashedCollection",
   "Collections`IdentityMutableHashedMap",
   "Collections`IdentitySet",
   "Collections`Interval",
   "Collections`List",
   "Collections`MutableArrayList",
   "Collections`MutableHashedMap",
   "Collections`MutableList",
   "Collections`Set",
   "Collections`SortedList"
  ];
  this.applications = [];
  this.$superInit$Collections = function ($p) {
   var self = this;
   self.$super$Collections$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   var self = this;
   self._$superInit$Collections($p);
   $0.$init$MutableAddableList$(self, self._$MutableList().$mixinApply$(self._$AddableList()));
   self._$init$OrderedCollection$(self._$MutableArrayList());
   self._$init$Dictionary$(self._$MutableHashedMap());
   self._$init$IdentityDictionary$(self._$IdentityMutableHashedMap());
   self._$init$SortedCollection$(self._$SortedList());
   $0.$init$ListReadStream$(self, $p.$streams().$SeqCltnReadStream());
   $0.$init$ListReadWriteStream$(self, $p.$streams().$SeqCltnReadWriteStream());
   self._$init$WeakArray$(self._$Future().$computing$(function () {
    return $p.$squeak().$WeakArray();
   }));
   return self;
  };
  this.$AddableList = function () {
   if (nil === this.$Collections$AddableList$slot) {
    var self = this;
    var superclass = self._$List();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$AddableList;
    this.$Collections$AddableList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$AddableList$slot;
  };
  this.$Association = function () {
   if (nil === this.$Collections$Association$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$Association;
    this.$Collections$Association$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Association$slot;
  };
  this.$Bag = function () {
   if (nil === this.$Collections$Bag$slot) {
    var self = this;
    var superclass = self._$Collection();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$Bag;
    this.$Collections$Bag$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Bag$slot;
  };
  this.$Collection = function () {
   if (nil === this.$Collections$Collection$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$Collection;
    this.$Collections$Collection$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Collection$slot;
  };
  this.$HashedCollection = function () {
   if (nil === this.$Collections$HashedCollection$slot) {
    var self = this;
    var superclass = self._$Collection();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$HashedCollection;
    this.$Collections$HashedCollection$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$HashedCollection$slot;
  };
  this.$IdentityMutableHashedMap = function () {
   if (nil === this.$Collections$IdentityMutableHashedMap$slot) {
    var self = this;
    var superclass = self._$MutableHashedMap();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$IdentityMutableHashedMap;
    this.$Collections$IdentityMutableHashedMap$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$IdentityMutableHashedMap$slot;
  };
  this.$IdentitySet = function () {
   if (nil === this.$Collections$IdentitySet$slot) {
    var self = this;
    var superclass = self._$Set();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$IdentitySet;
    this.$Collections$IdentitySet$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$IdentitySet$slot;
  };
  this.$Interval = function () {
   if (nil === this.$Collections$Interval$slot) {
    var self = this;
    var superclass = self._$List();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$Interval;
    this.$Collections$Interval$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Interval$slot;
  };
  this.$List = function () {
   if (nil === this.$Collections$List$slot) {
    var self = this;
    var superclass = self._$Collection();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$List;
    this.$Collections$List$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$List$slot;
  };
  this.$MutableArrayList = function () {
   if (nil === this.$Collections$MutableArrayList$slot) {
    var self = this;
    var superclass = $0.$MutableAddableList(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$MutableArrayList;
    this.$Collections$MutableArrayList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$MutableArrayList$slot;
  };
  this.$MutableHashedMap = function () {
   if (nil === this.$Collections$MutableHashedMap$slot) {
    var self = this;
    var superclass = self._$HashedCollection();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$MutableHashedMap;
    this.$Collections$MutableHashedMap$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$MutableHashedMap$slot;
  };
  this.$MutableList = function () {
   if (nil === this.$Collections$MutableList$slot) {
    var self = this;
    var superclass = self._$List();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$MutableList;
    this.$Collections$MutableList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$MutableList$slot;
  };
  this.$Set = function () {
   if (nil === this.$Collections$Set$slot) {
    var self = this;
    var superclass = self._$HashedCollection();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$Set;
    this.$Collections$Set$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Set$slot;
  };
  this.$SortedList = function () {
   if (nil === this.$Collections$SortedList$slot) {
    var self = this;
    var superclass = self._$AddableList();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    var mixin = $.$Collections$SortedList;
    this.$Collections$SortedList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$SortedList$slot;
  };
  this.$init$MutableAddableList$ = function (self, v) {
   self.$MutableAddableList$slot = v;
   return self;
  };
  this.$MutableAddableList = function (self) {
   return self.$MutableAddableList$slot;
  };
  this.$init$OrderedCollection$ = function (v) {
   this.$OrderedCollection$slot = v;
   return this;
  };
  this.$OrderedCollection = function () {
   return this.$OrderedCollection$slot;
  };
  this.$init$Dictionary$ = function (v) {
   this.$Dictionary$slot = v;
   return this;
  };
  this.$Dictionary = function () {
   return this.$Dictionary$slot;
  };
  this.$init$IdentityDictionary$ = function (v) {
   this.$IdentityDictionary$slot = v;
   return this;
  };
  this.$IdentityDictionary = function () {
   return this.$IdentityDictionary$slot;
  };
  this.$init$SortedCollection$ = function (v) {
   this.$SortedCollection$slot = v;
   return this;
  };
  this.$SortedCollection = function () {
   return this.$SortedCollection$slot;
  };
  this.$init$ListReadStream$ = function (self, v) {
   self.$ListReadStream$slot = v;
   return self;
  };
  this.$ListReadStream = function (self) {
   return self.$ListReadStream$slot;
  };
  this.$init$ListReadWriteStream$ = function (self, v) {
   self.$ListReadWriteStream$slot = v;
   return self;
  };
  this.$ListReadWriteStream = function (self) {
   return self.$ListReadWriteStream$slot;
  };
  this.$init$WeakArray$ = function (v) {
   this.$WeakArray$slot = v;
   return this;
  };
  this.$WeakArray = function () {
   return this.$WeakArray$slot;
  };
  this.$init$Collections$AddableList$ = function (v) {
   this.$Collections$AddableList$slot = v;
   return this;
  };
  this.$Collections$AddableList = function () {
   return this.$Collections$AddableList$slot;
  };
  this.$Collections$AddableList$ = function (v) {
   this.$Collections$AddableList$slot = v;
   return this;
  };
  this.$init$Collections$Association$ = function (v) {
   this.$Collections$Association$slot = v;
   return this;
  };
  this.$Collections$Association = function () {
   return this.$Collections$Association$slot;
  };
  this.$Collections$Association$ = function (v) {
   this.$Collections$Association$slot = v;
   return this;
  };
  this.$init$Collections$Bag$ = function (v) {
   this.$Collections$Bag$slot = v;
   return this;
  };
  this.$Collections$Bag = function () {
   return this.$Collections$Bag$slot;
  };
  this.$Collections$Bag$ = function (v) {
   this.$Collections$Bag$slot = v;
   return this;
  };
  this.$init$Collections$Collection$ = function (v) {
   this.$Collections$Collection$slot = v;
   return this;
  };
  this.$Collections$Collection = function () {
   return this.$Collections$Collection$slot;
  };
  this.$Collections$Collection$ = function (v) {
   this.$Collections$Collection$slot = v;
   return this;
  };
  this.$init$Collections$HashedCollection$ = function (v) {
   this.$Collections$HashedCollection$slot = v;
   return this;
  };
  this.$Collections$HashedCollection = function () {
   return this.$Collections$HashedCollection$slot;
  };
  this.$Collections$HashedCollection$ = function (v) {
   this.$Collections$HashedCollection$slot = v;
   return this;
  };
  this.$init$Collections$IdentityMutableHashedMap$ = function (v) {
   this.$Collections$IdentityMutableHashedMap$slot = v;
   return this;
  };
  this.$Collections$IdentityMutableHashedMap = function () {
   return this.$Collections$IdentityMutableHashedMap$slot;
  };
  this.$Collections$IdentityMutableHashedMap$ = function (v) {
   this.$Collections$IdentityMutableHashedMap$slot = v;
   return this;
  };
  this.$init$Collections$IdentitySet$ = function (v) {
   this.$Collections$IdentitySet$slot = v;
   return this;
  };
  this.$Collections$IdentitySet = function () {
   return this.$Collections$IdentitySet$slot;
  };
  this.$Collections$IdentitySet$ = function (v) {
   this.$Collections$IdentitySet$slot = v;
   return this;
  };
  this.$init$Collections$Interval$ = function (v) {
   this.$Collections$Interval$slot = v;
   return this;
  };
  this.$Collections$Interval = function () {
   return this.$Collections$Interval$slot;
  };
  this.$Collections$Interval$ = function (v) {
   this.$Collections$Interval$slot = v;
   return this;
  };
  this.$init$Collections$List$ = function (v) {
   this.$Collections$List$slot = v;
   return this;
  };
  this.$Collections$List = function () {
   return this.$Collections$List$slot;
  };
  this.$Collections$List$ = function (v) {
   this.$Collections$List$slot = v;
   return this;
  };
  this.$init$Collections$MutableArrayList$ = function (v) {
   this.$Collections$MutableArrayList$slot = v;
   return this;
  };
  this.$Collections$MutableArrayList = function () {
   return this.$Collections$MutableArrayList$slot;
  };
  this.$Collections$MutableArrayList$ = function (v) {
   this.$Collections$MutableArrayList$slot = v;
   return this;
  };
  this.$init$Collections$MutableHashedMap$ = function (v) {
   this.$Collections$MutableHashedMap$slot = v;
   return this;
  };
  this.$Collections$MutableHashedMap = function () {
   return this.$Collections$MutableHashedMap$slot;
  };
  this.$Collections$MutableHashedMap$ = function (v) {
   this.$Collections$MutableHashedMap$slot = v;
   return this;
  };
  this.$init$Collections$MutableList$ = function (v) {
   this.$Collections$MutableList$slot = v;
   return this;
  };
  this.$Collections$MutableList = function () {
   return this.$Collections$MutableList$slot;
  };
  this.$Collections$MutableList$ = function (v) {
   this.$Collections$MutableList$slot = v;
   return this;
  };
  this.$init$Collections$Set$ = function (v) {
   this.$Collections$Set$slot = v;
   return this;
  };
  this.$Collections$Set = function () {
   return this.$Collections$Set$slot;
  };
  this.$Collections$Set$ = function (v) {
   this.$Collections$Set$slot = v;
   return this;
  };
  this.$init$Collections$SortedList$ = function (v) {
   this.$Collections$SortedList$slot = v;
   return this;
  };
  this.$Collections$SortedList = function () {
   return this.$Collections$SortedList$slot;
  };
  this.$Collections$SortedList$ = function (v) {
   this.$Collections$SortedList$slot = v;
   return this;
  };
  this.$Collections$AddableList = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`AddableList";
   this.name = "Collections`AddableList";
   this.header = 459;
   this.slots = [
    new SM("contents", true, false),
    new SM("startGap", true, false),
    new SM("lastIndex", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`AddableList", true, 460),
    new MM("instance`initializer", true, 461),
    new MM("add:", false, 462),
    new MM("addAll:", false, 463),
    new MM("at:", false, 464),
    new MM("at:ifAbsent:", false, 465),
    new MM("includeAll:", false, 466),
    new MM("indexOf:ifAbsent:", false, 467),
    new MM("remove:at:", false, 468),
    new MM("remove:ifAbsent:", false, 469),
    new MM("removeAll", false, 470),
    new MM("removeAll:", false, 471),
    new MM("removeAt:", false, 472),
    new MM("removeEvery:", false, 473),
    new MM("removeEvery:startingAt:", false, 474),
    new MM("removeFirst", false, 475),
    new MM("removeLast", false, 476),
    new MM("size", false, 477),
    new MM("size:", false, 478),
    new MM("include:", false, 479),
    new MM("include:ifNew:", false, 480),
    new MM("remove:", false, 481),
    new MM("removeAllSuchThat:", false, 482),
    new MM("makeSpaceAtStart:", false, 483),
    new MM("copyWithSize:", false, 484),
    new MM("initCapacity:", false, 485),
    new MM("do:", false, 486),
    new MM("endGap", false, 487),
    new MM("firstIndex", false, 488),
    new MM("internalIndexIsValid:", false, 489),
    new MM("internalRangeCheck:", false, 490),
    new MM("makeSpace:beforeIndex:", false, 491),
    new MM("needSpaceAtEnd:", false, 492),
    new MM("needSpaceAtStart:", false, 493),
    new MM("postCopy", false, 494),
    new MM("init`contents:", true, 0),
    new MM("contents", true, 0),
    new MM("contents:", true, 0),
    new MM("init`startGap:", true, 0),
    new MM("startGap", true, 0),
    new MM("startGap:", true, 0),
    new MM("init`lastIndex:", true, 0),
    new MM("lastIndex", true, 0),
    new MM("lastIndex:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$AddableList = function () {
    var self = this;
    self.$super$Collections$AddableList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Collections$AddableList();
    self._$initCapacity$(self._$class().$defaultCapacity());
    return self;
   };
   this.$add$ = function ($e) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$addAll$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$add$($el);
    });
    return $c;
   };
   this.$at$ = function ($i) {
    var self = this;
    var $adjusted = nil;
    $adjusted = $i + self._$startGap();
    if (!((0 < $i) && $adjusted.$$less$equal(self._$lastIndex()))) {
     self._$error$("invalid index");
    } else {
     nil;
    };
    return self._$contents().$at$($adjusted);
   };
   this.$at$ifAbsent$ = function ($i, $f) {
    var self = this;
    var $internal = nil;
    $internal = $i + self._$startGap();
    return self._$internalIndexIsValid$($internal).$ifTrue$ifFalse$(function () {
     return self._$contents().$at$($internal);
    }, function () {
     return $f.$value();
    });
   };
   this.$includeAll$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$include$($el);
    });
    return $c;
   };
   this.$indexOf$ifAbsent$ = function ($el, $f) {
    var self = this;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$at$($i).$$equal($el)) {
       return $i;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return $f.$value();
   };
   this.$remove$at$ = function ($nElements, $i) {
    var self = this;
    var $el = nil;
    var $internal = nil;
    $el = self._$at$($i);
    $internal = self._$startGap() + $i;
    self._$internalRangeCheck$($internal);
    self._$internalRangeCheck$(($internal + $nElements) - 1);
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = $internal;
     $$limit = self._$lastIndex() - $nElements;
     for (; $$limit.$$greater$equal($index); ) {
      self._$contents().$at$put$($index, self._$contents().$at$($index + $nElements));
      $index = (1).$$plus($index);
     };
    };
    self._$contents().$at$put$(self._$lastIndex(), nil);
    self._$lastIndex$(self._$lastIndex() - $nElements);
    return self;
   };
   this.$remove$ifAbsent$ = function ($el, $f) {
    var self = this;
    var NLR = new Object();
    try {
     self._$removeAt$(self._$indexOf$ifAbsent$($el, function () {
      {
       NLR.value = $f.$value();
       throw NLR;
      };
     }));
     return $el;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeAll = function () {
    var self = this;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = self._$startGap() + 1;
     $$limit = self._$lastIndex();
     for (; $$limit.$$greater$equal($i); ) {
      self._$contents().$at$put$($i, nil);
      $i = (1).$$plus($i);
     };
    };
    self._$lastIndex$(self._$startGap());
    return self;
   };
   this.$removeAll$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$remove$($el);
    });
    return $c;
   };
   this.$removeAt$ = function ($index) {
    var self = this;
    var $el = nil;
    $el = self._$at$($index);
    self._$remove$at$(1, $index);
    return $el;
   };
   this.$removeEvery$ = function ($val) {
    var self = this;
    return self._$removeEvery$startingAt$($val, 1);
   };
   this.$removeEvery$startingAt$ = function ($val, $start) {
    var self = this;
    var NLR = new Object();
    try {
     var $index = nil;
     $index = self._$indexOf$ifAbsent$($val, function () {
      {
       NLR.value = $val;
       throw NLR;
      };
     });
     self._$removeAt$($index);
     return self._$removeEvery$startingAt$($val, $index);
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeFirst = function () {
    var self = this;
    return self._$removeAt$(1);
   };
   this.$removeLast = function () {
    var self = this;
    return self._$removeAt$(self._$size());
   };
   this.$size = function () {
    var self = this;
    return self._$lastIndex() - self._$startGap();
   };
   this.$size$ = function ($s) {
    var self = this;
    var $delta = nil;
    var $newLastIndex = nil;
    $delta = $s - self._$size();
    $newLastIndex = self._$lastIndex() + $delta;
    if ($delta < 0) {
     {
      var $$limit = nil;
      var $i = nil;
      nil;
      $i = $newLastIndex + 1;
      $$limit = self._$lastIndex();
      for (; $$limit.$$greater$equal($i); ) {
       self._$contents().$at$put$($i, nil);
       $i = (1).$$plus($i);
      };
     };
    } else {
     nil;
    };
    if ($delta > 0) {
     self._$needSpaceAtEnd$($delta);
    } else {
     nil;
    };
    self._$lastIndex$(self._$lastIndex() + $delta);
    return self;
   };
   this.$include$ = function ($e) {
    var self = this;
    return self._$include$ifNew$($e, function () {
     return nil;
    });
   };
   this.$include$ifNew$ = function ($e, $blk) {
    var self = this;
    if (!self._$includes$($e)) {
     self._$add$($e);
     $blk.$value();
    } else {
     nil;
    };
    return $e;
   };
   this.$remove$ = function ($el) {
    var self = this;
    return self._$remove$ifAbsent$($el, function () {
     return self._$error$("element not found");
    });
   };
   this.$removeAllSuchThat$ = function ($test) {
    var self = this;
    var $i = nil;
    $i = 1;
    {
     nil;
     for (; $i.$$less$equal(self._$size()); ) {
      if ($test.$value$(self._$at$($i))) {
       self._$removeAt$($i);
      } else {
       $i = $i + 1;
      };
     };
    };
    return self;
   };
   this.$makeSpaceAtStart$ = function ($nslots) {
    var self = this;
    var $newGap = nil;
    var $diff = nil;
    var $newContents = nil;
    var $sz = nil;
    var $newLastIndex = nil;
    if (self._$isEmpty() && $nslots.$$less$equal(self._$contents().$size())) {
     self._$startGap$($nslots);
     self._$lastIndex$($nslots);
     return $nslots;
    } else {
     nil;
    };
    $sz = self._$size();
    $newGap = $nslots.$max$($sz);
    $diff = $newGap - self._$startGap();
    $newLastIndex = $newGap + $sz;
    $newContents = self._$Array().$new$(self._$contents().$size() + $diff);
    $newContents.$replaceFrom$to$with$startingAt$($newGap + 1, $newLastIndex, self._$contents(), self._$firstIndex());
    self._$startGap$($newGap);
    self._$contents$($newContents);
    self._$lastIndex$($newLastIndex);
    return $diff;
   };
   this.$copyWithSize$ = function ($s) {
    var self = this;
    var $safeself = nil;
    $safeself = self;
    return self._$Array().$new$($s).$replaceFrom$to$with$(1, $s.$min$(self._$size()), $safeself);
   };
   this.$initCapacity$ = function ($c) {
    var self = this;
    self._$contents$(self._$Array().$new$($c));
    self._$startGap$(0);
    self._$lastIndex$(0);
    return self;
   };
   this.$do$ = function ($action) {
    var self = this;
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = self._$startGap() + 1;
     $$limit = self._$lastIndex();
     for (; $$limit.$$greater$equal($index); ) {
      $action.$value$(self._$contents().$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$endGap = function () {
    var self = this;
    return self._$contents().$size() - self._$lastIndex();
   };
   this.$firstIndex = function () {
    var self = this;
    return 1 + self._$startGap();
   };
   this.$internalIndexIsValid$ = function ($index) {
    var self = this;
    return $index.$$greater(self._$startGap()) && $index.$$less$equal(self._$lastIndex());
   };
   this.$internalRangeCheck$ = function ($index) {
    var self = this;
    if (!self._$internalIndexIsValid$($index)) {
     self._$error$("invalid index");
    } else {
     nil;
    };
    return self;
   };
   this.$makeSpace$beforeIndex$ = function ($slots, $i) {
    var self = this;
    return (($i - self._$startGap()) - 1).$$greater((self._$lastIndex() - $i) + 1).$ifTrue$ifFalse$(function () {
     self._$needSpaceAtEnd$($slots);
     self._$contents().$replaceFrom$to$with$startingAt$($i + $slots, self._$lastIndex() + $slots, self._$contents(), $i);
     self._$lastIndex$(self._$lastIndex() + $slots);
     return $i;
    }, function () {
     var $newI = nil;
     $newI = ($i + self._$needSpaceAtStart$($slots)) - $slots;
     self._$contents().$replaceFrom$to$with$startingAt$((self._$startGap() + 1) - $slots, $newI - 1, self._$contents(), self._$startGap() + 1);
     self._$startGap$(self._$startGap() - $slots);
     return $newI;
    });
   };
   this.$needSpaceAtEnd$ = function ($slots) {
    var self = this;
    if ($slots.$$greater(self._$endGap())) {
     self._$contents$(self._$contents().$copyWithSize$(self._$contents().$size() + $slots.$max$(self._$size())));
    } else {
     nil;
    };
    return self;
   };
   this.$needSpaceAtStart$ = function ($nslots) {
    var self = this;
    return $nslots.$$greater(self._$startGap()).$ifTrue$ifFalse$(function () {
     return self._$makeSpaceAtStart$($nslots);
    }, function () {
     return 0;
    });
   };
   this.$postCopy = function () {
    var self = this;
    self.$super$Collections$AddableList$slot._$postCopy.call(self);
    self._$contents$(self._$contents().$copyWithSize$(self._$contents().$size().$max$(self._$lastIndex())));
    return self;
   };
   this.$init$contents$ = function (v) {
    this.$contents$slot = v;
    return this;
   };
   this.$contents = function () {
    return this.$contents$slot;
   };
   this.$contents$ = function (v) {
    this.$contents$slot = v;
    return this;
   };
   this.$init$startGap$ = function (v) {
    this.$startGap$slot = v;
    return this;
   };
   this.$startGap = function () {
    return this.$startGap$slot;
   };
   this.$startGap$ = function (v) {
    this.$startGap$slot = v;
    return this;
   };
   this.$init$lastIndex$ = function (v) {
    this.$lastIndex$slot = v;
    return this;
   };
   this.$lastIndex = function () {
    return this.$lastIndex$slot;
   };
   this.$lastIndex$ = function (v) {
    this.$lastIndex$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`AddableList";
     this._$superInit$Collections$AddableList = $.$superInit$Collections$AddableList;
     this.$superInit$Collections$AddableList = dnuCatcher("$superInit$Collections$AddableList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
     this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
     this.$remove$at$ = this._$remove$at$ = $.$remove$at$;
     this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
     this.$removeAll = this._$removeAll = $.$removeAll;
     this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
     this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
     this.$removeEvery$ = this._$removeEvery$ = $.$removeEvery$;
     this.$removeEvery$startingAt$ = this._$removeEvery$startingAt$ = $.$removeEvery$startingAt$;
     this.$removeFirst = this._$removeFirst = $.$removeFirst;
     this.$removeLast = this._$removeLast = $.$removeLast;
     this.$size = this._$size = $.$size;
     this.$size$ = this._$size$ = $.$size$;
     this.$include$ = this._$include$ = $.$include$;
     this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
     this.$remove$ = this._$remove$ = $.$remove$;
     this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this._$makeSpaceAtStart$ = $.$makeSpaceAtStart$;
     this.$makeSpaceAtStart$ = dnuCatcher("$makeSpaceAtStart$");
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$initCapacity$ = this._$initCapacity$ = $.$initCapacity$;
     this.$do$ = this._$do$ = $.$do$;
     this._$endGap = $.$endGap;
     this.$endGap = dnuCatcher("$endGap");
     this._$firstIndex = $.$firstIndex;
     this.$firstIndex = dnuCatcher("$firstIndex");
     this._$internalIndexIsValid$ = $.$internalIndexIsValid$;
     this.$internalIndexIsValid$ = dnuCatcher("$internalIndexIsValid$");
     this._$internalRangeCheck$ = $.$internalRangeCheck$;
     this.$internalRangeCheck$ = dnuCatcher("$internalRangeCheck$");
     this._$makeSpace$beforeIndex$ = $.$makeSpace$beforeIndex$;
     this.$makeSpace$beforeIndex$ = dnuCatcher("$makeSpace$beforeIndex$");
     this._$needSpaceAtEnd$ = $.$needSpaceAtEnd$;
     this.$needSpaceAtEnd$ = dnuCatcher("$needSpaceAtEnd$");
     this._$needSpaceAtStart$ = $.$needSpaceAtStart$;
     this.$needSpaceAtStart$ = dnuCatcher("$needSpaceAtStart$");
     this.$postCopy = this._$postCopy = $.$postCopy;
     this._$init$contents$ = $.$init$contents$;
     this.$init$contents$ = dnuCatcher("$init$contents$");
     this._$contents = $.$contents;
     this.$contents = dnuCatcher("$contents");
     this._$contents$ = $.$contents$;
     this.$contents$ = dnuCatcher("$contents$");
     this._$init$startGap$ = $.$init$startGap$;
     this.$init$startGap$ = dnuCatcher("$init$startGap$");
     this._$startGap = $.$startGap;
     this.$startGap = dnuCatcher("$startGap");
     this._$startGap$ = $.$startGap$;
     this.$startGap$ = dnuCatcher("$startGap$");
     this._$init$lastIndex$ = $.$init$lastIndex$;
     this.$init$lastIndex$ = dnuCatcher("$init$lastIndex$");
     this._$lastIndex = $.$lastIndex;
     this.$lastIndex = dnuCatcher("$lastIndex");
     this._$lastIndex$ = $.$lastIndex$;
     this.$lastIndex$ = dnuCatcher("$lastIndex$");
     this.$enclosingObjects$Collections$AddableList = enclosingObjects;
     this.$super$Collections$AddableList$slot = runtimeSuperclass;
     this["Collections`AddableList"] = function () {
      superBasicNew.call(this);
      this.$contents$slot = nil;
      this.$startGap$slot = nil;
      this.$lastIndex$slot = nil;
     };
     this.basicNew = this["Collections`AddableList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`AddableList";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("defaultCapacity", false, 495),
     new MM("new:", false, 496),
     new MM("with:", false, 497),
     new MM("withAll:", false, 498)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 5;
    };
    this.$new$ = function ($capacity) {
     var self = this;
     return self._$new().$initCapacity$($capacity);
    };
    this.$with$ = function ($val1) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`AddableList";
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new$ = this._$new$ = $.$new$;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$AddableList = enclosingObjects;
      this.$super$Collections$AddableList = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Association = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`Association";
   this.name = "Collections`Association";
   this.header = 499;
   this.slots = [
    new SM("key", true, false),
    new SM("value", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`Association", true, 500),
    new MM("instance`initializer", true, 501),
    new MM("copy", false, 502),
    new MM("=", false, 503),
    new MM("hash", false, 504),
    new MM("printOn:", false, 505),
    new MM("init`key:", true, 0),
    new MM("key", true, 0),
    new MM("key:", true, 0),
    new MM("init`value:", true, 0),
    new MM("value", true, 0),
    new MM("value:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Association = function ($k, $v) {
    var self = this;
    self.$super$Collections$Association$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($k, $v) {
    var self = this;
    self._$superInit$Collections$Association($k, $v);
    self._$init$key$($k);
    self._$init$value$($v);
    return self;
   };
   this.$copy = function () {
    var self = this;
    return self._$class().$key$value$(self._$key(), self._$value());
   };
   this.$$equal = function ($other) {
    var self = this;
    return self._$key().$$equal($other.$key()) && self._$value().$$equal($other.$value());
   };
   this.$hash = function () {
    var self = this;
    return self._$key().$hash().$bitXor$(self._$value().$hash());
   };
   this.$printOn$ = function ($strm) {
    var self = this;
    self._$key().$printOn$($strm);
    $strm.$nextPutAll$(" -> ");
    self._$value().$printOn$($strm);
    return self;
   };
   this.$init$key$ = function (v) {
    this.$key$slot = v;
    return this;
   };
   this.$key = function () {
    return this.$key$slot;
   };
   this.$key$ = function (v) {
    this.$key$slot = v;
    return this;
   };
   this.$init$value$ = function (v) {
    this.$value$slot = v;
    return this;
   };
   this.$value = function () {
    return this.$value$slot;
   };
   this.$value$ = function (v) {
    this.$value$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Association";
     this._$superInit$Collections$Association = $.$superInit$Collections$Association;
     this.$superInit$Collections$Association = dnuCatcher("$superInit$Collections$Association");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$copy = this._$copy = $.$copy;
     this.$$equal = this._$$equal = $.$$equal;
     this.$hash = this._$hash = $.$hash;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$init$key$ = this._$init$key$ = $.$init$key$;
     this.$key = this._$key = $.$key;
     this.$key$ = this._$key$ = $.$key$;
     this.$init$value$ = this._$init$value$ = $.$init$value$;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$enclosingObjects$Collections$Association = enclosingObjects;
     this.$super$Collections$Association$slot = runtimeSuperclass;
     this["Collections`Association"] = function () {
      superBasicNew.call(this);
      this.$key$slot = nil;
      this.$value$slot = nil;
     };
     this.basicNew = this["Collections`Association"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`Association";
    this.slots = [];
    this.methods = [
     new MM("key:value:", true, 0),
     new MM("new", false, 506)
    ];
    this.nestedClasses = [];
    this.$key$value$ = function ($k, $v) {
     return (new this.nonMeta.basicNew()).$instance$initializer($k, $v);
    };
    this.$new = function () {
     var self = this;
     self._$warnObsolete();
     return self._$key$value$(nil, nil);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Association";
      this.$key$value$ = this._$key$value$ = $.$key$value$;
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$Association = enclosingObjects;
      this.$super$Collections$Association = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Bag = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`Bag";
   this.name = "Collections`Bag";
   this.header = 507;
   this.slots = [new SM("contents_private", true, false)];
   this.methods = [
    new MM("superInit`Collections`Bag", true, 508),
    new MM("instance`initializer", true, 509),
    new MM("occurrencesOf:", false, 510),
    new MM("size", false, 511),
    new MM("add:", false, 512),
    new MM("add:withOccurrences:", false, 513),
    new MM("addAll:", false, 514),
    new MM("include:", false, 515),
    new MM("include:ifNew:", false, 516),
    new MM("includeAll:", false, 517),
    new MM("remove:", false, 518),
    new MM("remove:ifAbsent:", false, 519),
    new MM("remove:withOccurrences:ifAbsent:", false, 520),
    new MM("contents:", false, 521),
    new MM("isKindOfBag", false, 522),
    new MM("removeAll:", false, 523),
    new MM("removeAllSuchThat:", false, 524),
    new MM("removeEvery:", false, 525),
    new MM("asBag", false, 526),
    new MM("initCapacity:", false, 527),
    new MM("do:", false, 528),
    new MM("equalsBag:", false, 529),
    new MM("postCopy", false, 530),
    new MM("contents", false, 531),
    new MM("=", false, 532),
    new MM("includes:", false, 533),
    new MM("~=", false, 534),
    new MM("init`contents_private:", true, 0),
    new MM("contents_private", true, 0),
    new MM("contents_private:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Bag = function ($capacity) {
    var self = this;
    self.$super$Collections$Bag$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($capacity) {
    var self = this;
    self._$superInit$Collections$Bag($capacity);
    $1.$init$contents_private$(self, self.$enclosingObjects$Collections$Bag[0]._$MutableHashedMap().$new$($capacity));
    return self;
   };
   this.$occurrencesOf$ = function ($o) {
    var self = this;
    return self._$contents().$at$ifAbsent$($o, function () {
     return 0;
    });
   };
   this.$size = function () {
    var self = this;
    return self._$contents().$inject$into$(0, function ($tot, $occurrences) {
     return $tot + $occurrences;
    });
   };
   this.$add$ = function ($el) {
    var self = this;
    return self._$add$withOccurrences$($el, 1);
   };
   this.$add$withOccurrences$ = function ($el, $oc) {
    var self = this;
    self._$contents().$at$put$($el, $oc + self._$occurrencesOf$($el));
    return $el;
   };
   this.$addAll$ = function ($els) {
    var self = this;
    return $els.$do$(function ($el) {
     return self._$add$($el);
    });
   };
   this.$include$ = function ($el) {
    var self = this;
    var $ocs = nil;
    $ocs = self._$occurrencesOf$($el);
    if (!($ocs > 0)) {
     self._$contents().$at$put$($el, 1);
    } else {
     nil;
    };
    return $el;
   };
   this.$include$ifNew$ = function ($el, $blk) {
    var self = this;
    var $isnew = nil;
    $isnew = self._$includes$($el);
    self._$include$($el);
    if ($isnew) {
     $blk.$value();
    } else {
     nil;
    };
    return $el;
   };
   this.$includeAll$ = function ($els) {
    var self = this;
    return $els.$do$(function ($el) {
     return self._$include$($el);
    });
   };
   this.$remove$ = function ($el) {
    var self = this;
    return self._$remove$ifAbsent$($el, function () {
     return self._$error$("Element not found");
    });
   };
   this.$remove$ifAbsent$ = function ($el, $f) {
    var self = this;
    return self._$remove$withOccurrences$ifAbsent$($el, 1, $f);
   };
   this.$remove$withOccurrences$ifAbsent$ = function ($el, $ocs, $f) {
    var self = this;
    var $curOcs = nil;
    $curOcs = self._$occurrencesOf$($el);
    return $ocs.$$greater($curOcs).$ifTrue$ifFalse$(function () {
     return $f.$value();
    }, function () {
     if ($curOcs.$$equal($ocs)) {
      self._$contents().$removeKey$($el);
     } else {
      self._$contents().$at$put$($el, $curOcs - $ocs);
     };
     return $el;
    });
   };
   this.$contents$ = function ($c) {
    var self = this;
    $1.$contents_private$(self, $c);
    return self;
   };
   this.$isKindOfBag = function () {
    var self = this;
    return true;
   };
   this.$removeAll$ = function ($els) {
    var self = this;
    $els.$do$(function ($el) {
     return self._$remove$($el);
    });
    return $els;
   };
   this.$removeAllSuchThat$ = function ($test) {
    var self = this;
    self._$copy().$do$(function ($el) {
     return $test.$value$($el).$ifTrue$(function () {
      return self._$remove$($el);
     });
    });
    return self;
   };
   this.$removeEvery$ = function ($el) {
    var self = this;
    self._$contents().$removeKey$ifAbsent$($el, function () {
     return nil;
    });
    return $el;
   };
   this.$asBag = function () {
    var self = this;
    return self;
   };
   this.$initCapacity$ = function ($cap) {
    var self = this;
    self._$contents$(self.$enclosingObjects$Collections$Bag[0]._$MutableHashedMap().$new$($cap));
    return self;
   };
   this.$do$ = function ($f) {
    var self = this;
    self._$contents().$keysAndValuesDo$(function ($el, $occurrences) {
     return $occurrences.$timesRepeat$(function () {
      return $f.$value$($el);
     });
    });
    return self;
   };
   this.$equalsBag$ = function ($other) {
    var self = this;
    var NLR = new Object();
    try {
     if (!self._$contents().$size().$$equal($other.$contents().$size())) {
      return false;
     } else {
      nil;
     };
     self._$contents().$keysAndValuesDo$(function ($el, $occurrences) {
      return $other.$contents().$at$ifAbsent$($el, function () {
       return 0;
      }).$$equal($occurrences).$ifFalse$(function () {
       {
        NLR.value = false;
        throw NLR;
       };
      });
     });
     return true;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$postCopy = function () {
    var self = this;
    self.$super$Collections$Bag$slot._$postCopy.call(self);
    self._$contents$(self._$contents().$copy());
    return self;
   };
   this.$contents = function () {
    var self = this;
    return $1.$contents_private(self);
   };
   this.$$equal = function ($other) {
    var self = this;
    var NLR = new Object();
    try {
     return (self === $other) || self._$equalsBag$(self.$enclosingObjects$Collections$Bag[0]._$Bag().$coerce$else$($other, function () {
      {
       NLR.value = false;
       throw NLR;
      };
     }));
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includes$ = function ($el) {
    var self = this;
    return self._$contents().$includesKey$($el);
   };
   this.$$tilde$equal = function ($other) {
    var self = this;
    return self._$$equal($other).$not();
   };
   this.$init$contents_private$ = function (self, v) {
    self.$contents_private$slot = v;
    return self;
   };
   this.$contents_private = function (self) {
    return self.$contents_private$slot;
   };
   this.$contents_private$ = function (self, v) {
    self.$contents_private$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Bag";
     this._$superInit$Collections$Bag = $.$superInit$Collections$Bag;
     this.$superInit$Collections$Bag = dnuCatcher("$superInit$Collections$Bag");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$occurrencesOf$ = $.$occurrencesOf$;
     this.$occurrencesOf$ = dnuCatcher("$occurrencesOf$");
     this.$size = this._$size = $.$size;
     this.$add$ = this._$add$ = $.$add$;
     this._$add$withOccurrences$ = $.$add$withOccurrences$;
     this.$add$withOccurrences$ = dnuCatcher("$add$withOccurrences$");
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$include$ = this._$include$ = $.$include$;
     this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
     this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
     this.$remove$ = this._$remove$ = $.$remove$;
     this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
     this._$remove$withOccurrences$ifAbsent$ = $.$remove$withOccurrences$ifAbsent$;
     this.$remove$withOccurrences$ifAbsent$ = dnuCatcher("$remove$withOccurrences$ifAbsent$");
     this._$contents$ = $.$contents$;
     this.$contents$ = dnuCatcher("$contents$");
     this.$isKindOfBag = this._$isKindOfBag = $.$isKindOfBag;
     this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
     this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this._$removeEvery$ = $.$removeEvery$;
     this.$removeEvery$ = dnuCatcher("$removeEvery$");
     this._$asBag = $.$asBag;
     this.$asBag = dnuCatcher("$asBag");
     this._$initCapacity$ = $.$initCapacity$;
     this.$initCapacity$ = dnuCatcher("$initCapacity$");
     this.$do$ = this._$do$ = $.$do$;
     this._$equalsBag$ = $.$equalsBag$;
     this.$equalsBag$ = dnuCatcher("$equalsBag$");
     this._$postCopy = $.$postCopy;
     this.$postCopy = dnuCatcher("$postCopy");
     this._$contents = $.$contents;
     this.$contents = dnuCatcher("$contents");
     this.$$equal = this._$$equal = $.$$equal;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$$tilde$equal = this._$$tilde$equal = $.$$tilde$equal;
     this.$enclosingObjects$Collections$Bag = enclosingObjects;
     this.$super$Collections$Bag$slot = runtimeSuperclass;
     this["Collections`Bag"] = function () {
      superBasicNew.call(this);
      this.$contents_private$slot = nil;
     };
     this.basicNew = this["Collections`Bag"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`Bag";
    this.slots = [];
    this.methods = [
     new MM("new:", true, 0),
     new MM("defaultCapacity", false, 535),
     new MM("with:with:", false, 536),
     new MM("with:with:with:", false, 537),
     new MM("coerce:else:", false, 538),
     new MM("new", false, 539),
     new MM("with:", false, 540),
     new MM("withAll:", false, 541)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($capacity) {
     return (new this.nonMeta.basicNew()).$instance$initializer($capacity);
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 8;
    };
    this.$with$with$ = function ($el1, $el2) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($el2);
      return cascadeReceiver.$yourself();
     })(self._$with$($el1));
    };
    this.$with$with$with$ = function ($el1, $el2, $el3) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($el3);
      return cascadeReceiver.$yourself();
     })(self._$with$with$($el1, $el2));
    };
    this.$coerce$else$ = function ($o, $fail) {
     var self = this;
     return ($o.$$tilde$equal(nil) && $o.$isKindOfBag()).$ifTrue$ifFalse$(function () {
      return $o;
     }, function () {
      return $fail.$value();
     });
    };
    this.$new = function () {
     var self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$with$ = function ($val1) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Bag";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$with$with$ = this._$with$with$ = $.$with$with$;
      this.$with$with$with$ = this._$with$with$with$ = $.$with$with$with$;
      this.$coerce$else$ = this._$coerce$else$ = $.$coerce$else$;
      this.$new = this._$new = $.$new;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$Bag = enclosingObjects;
      this.$super$Collections$Bag = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Collection = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`Collection";
   this.name = "Collections`Collection";
   this.header = 542;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`Collection", true, 543),
    new MM("instance`initializer", true, 544),
    new MM("asCollection", false, 545),
    new MM("copy", false, 546),
    new MM("postCopy", false, 547),
    new MM("value", false, 548),
    new MM("hash", false, 549),
    new MM("occurrencesOf:", false, 550),
    new MM("size", false, 551),
    new MM("species", false, 552),
    new MM("allSatisfy:", false, 553),
    new MM("anySatisfy:", false, 554),
    new MM("do:separatedBy:", false, 555),
    new MM("isCollection", false, 556),
    new MM("isKindOfCollection", false, 557),
    new MM("noneSatisfy:", false, 558),
    new MM("union:", false, 559),
    new MM("asArray", false, 560),
    new MM("asBag", false, 561),
    new MM("asMutableArrayList", false, 562),
    new MM("asSet", false, 563),
    new MM("asSortedList", false, 564),
    new MM("asSortedList:", false, 565),
    new MM("collect:", false, 566),
    new MM("detect:", false, 567),
    new MM("detect:ifNone:", false, 568),
    new MM("do:", false, 569),
    new MM("inject:into:", false, 570),
    new MM("intersection:", false, 571),
    new MM("reduce:", false, 572),
    new MM("reduce:ifEmpty:", false, 573),
    new MM("reject:", false, 574),
    new MM("select:", false, 575),
    new MM("printOn:", false, 576),
    new MM("collectUsingAdd:", false, 577),
    new MM("maxPrintElements", false, 578),
    new MM("newForCollectUsingAdd:", false, 579),
    new MM("printElementsDo:", false, 580),
    new MM("hasSameElementsAs:", false, 581),
    new MM("includes:", false, 582),
    new MM("isEmpty", false, 583)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Collection = function () {
    var self = this;
    self.$super$Collections$Collection$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Collections$Collection();
    return self;
   };
   this.$asCollection = function () {
    var self = this;
    return self;
   };
   this.$copy = function () {
    var self = this;
    "BOGUS";
    return self._$class().$withAll$(self);
   };
   this.$postCopy = function () {
    var self = this;
    "BOGUS";
    return self;
   };
   this.$value = function () {
    var self = this;
    "BOGUS";
    return self;
   };
   this.$hash = function () {
    var self = this;
    var NLR = new Object();
    try {
     var $count = nil;
     $count = 0;
     return self._$inject$into$(0, function ($previousHash, $element) {
      var $newHash = nil;
      $newHash = $previousHash.$bitXor$($element.$hash());
      $count = $count + 1;
      if ($count > 2) {
       {
        NLR.value = $newHash;
        throw NLR;
       };
      } else {
       nil;
      };
      return $newHash;
     });
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$occurrencesOf$ = function ($o) {
    var self = this;
    var $c = nil;
    "BOGUS";
    $c = 0;
    self._$do$(function ($e) {
     return $e.$$equal($o).$ifTrue$(function () {
      return $c = $c + 1;
     });
    });
    return $c;
   };
   this.$size = function () {
    var self = this;
    var $count = nil;
    $count = 0;
    self._$do$(function ($element) {
     return $count = $count + 1;
    });
    return $count;
   };
   this.$species = function () {
    var self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$Set();
   };
   this.$allSatisfy$ = function ($predicate) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $predicate.$value$($each).$ifFalse$(function () {
       {
        NLR.value = false;
        throw NLR;
       };
      });
     });
     return true;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$anySatisfy$ = function ($predicate) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $predicate.$value$($each).$ifTrue$(function () {
       {
        NLR.value = true;
        throw NLR;
       };
      });
     });
     return false;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$do$separatedBy$ = function ($action, $betweenAction) {
    var self = this;
    var $firstTime = nil;
    $firstTime = true;
    $firstTime = true;
    self._$do$(function ($element) {
     if ($firstTime) {
      $firstTime = false;
     } else {
      $betweenAction.$value();
     };
     return $action.$value$($element);
    });
    return self;
   };
   this.$isCollection = function () {
    var self = this;
    return true;
   };
   this.$isKindOfCollection = function () {
    var self = this;
    return true;
   };
   this.$noneSatisfy$ = function ($predicate) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $predicate.$value$($each).$ifTrue$(function () {
       {
        NLR.value = false;
        throw NLR;
       };
      });
     });
     return true;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$union$ = function ($other) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$addAll$($other);
     return cascadeReceiver.$yourself();
    })(self._$asSet());
   };
   this.$asArray = function () {
    var self = this;
    var $array = nil;
    var $index = nil;
    $array = self._$Array().$new$(self._$size());
    $index = 1;
    self._$do$(function ($element) {
     $array.$at$put$($index, $element);
     return $index = $index + 1;
    });
    return $array;
   };
   this.$asBag = function () {
    var self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$Bag().$withAll$(self);
   };
   this.$asMutableArrayList = function () {
    var self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$MutableArrayList().$withAll$(self);
   };
   this.$asSet = function () {
    var self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$Set().$withAll$(self);
   };
   this.$asSortedList = function () {
    var self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$SortedList().$withAll$(self);
   };
   this.$asSortedList$ = function ($sortPredicate) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$addAll$(self);
     return cascadeReceiver.$yourself();
    })(self.$enclosingObjects$Collections$Collection[0]._$SortedList().$new$sortBlock$(self._$size(), $sortPredicate));
   };
   this.$collect$ = function ($map) {
    var self = this;
    return self._$collectUsingAdd$($map);
   };
   this.$detect$ = function ($predicate) {
    var self = this;
    return self._$detect$ifNone$($predicate, function () {
     return self._$Error().$signal$("No matching element detected");
    });
   };
   this.$detect$ifNone$ = function ($predicate, $fail) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($element) {
      return $predicate.$value$($element).$ifTrue$(function () {
       {
        NLR.value = $element;
        throw NLR;
       };
      });
     });
     return $fail.$value();
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$do$ = function ($action) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$inject$into$ = function ($initialValue, $foldBlock) {
    var self = this;
    var $runningValue = nil;
    $runningValue = $initialValue;
    self._$do$(function ($element) {
     return $runningValue = $foldBlock.$value$value$($runningValue, $element);
    });
    return $runningValue;
   };
   this.$intersection$ = function ($other) {
    var self = this;
    return self._$select$(function ($each) {
     return $other.$includes$($each);
    });
   };
   this.$reduce$ = function ($reduceFn) {
    var self = this;
    return self._$reduce$ifEmpty$($reduceFn, function () {
     return self._$Error().$signal$("Cannot reduce an empty collection");
    });
   };
   this.$reduce$ifEmpty$ = function ($reduceFn, $onEmpty) {
    var self = this;
    var $current = nil;
    self._$do$(function ($element) {
     var $rel = nil;
     $rel = $element;
     return $current.$isNil().$ifTrue$ifFalse$(function () {
      return $current = $rel;
     }, function () {
      return $current = $reduceFn.$value$value$($current, $rel);
     });
    });
    return $current.$isNil().$ifFalse$ifTrue$(function () {
     return $current;
    }, function () {
     return $onEmpty.$value();
    });
   };
   this.$reject$ = function ($predicate) {
    var self = this;
    return self._$select$(function ($e) {
     return $predicate.$value$($e).$not();
    });
   };
   this.$select$ = function ($predicate) {
    var self = this;
    var $result = nil;
    $result = self._$newForCollectUsingAdd$(self._$size());
    self._$do$(function ($element) {
     return $predicate.$value$($element).$ifTrue$(function () {
      return $result.$add$($element);
     });
    });
    return $result;
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    var NLR = new Object();
    try {
     var $count = nil;
     var $first = nil;
     (function (cascadeReceiver) {
      cascadeReceiver.$nextPutAll$(self._$class().$mixin().$simpleName());
      return cascadeReceiver.$nextPut$("(");
     })($stream);
     $count = 0;
     $first = true;
     self._$printElementsDo$(function ($element) {
      if ($first) {
       $first = false;
      } else {
       $stream.$space();
      };
      $element.$printOn$($stream);
      $count = $count + 1;
      return $count.$$greater$equal(self._$maxPrintElements()).$ifTrue$(function () {
       (function (cascadeReceiver) {
        cascadeReceiver.$nextPut$("<");
        cascadeReceiver.$print$(self._$size() - $count);
        return cascadeReceiver.$nextPutAll$(" more elements>)");
       })($stream);
       {
        NLR.value = self;
        throw NLR;
       };
      });
     });
     $stream.$nextPut$(")");
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$collectUsingAdd$ = function ($map) {
    var self = this;
    var $c = nil;
    $c = self._$newForCollectUsingAdd$(self._$size());
    self._$do$(function ($e) {
     return $c.$add$($map.$value$($e));
    });
    return $c;
   };
   this.$maxPrintElements = function () {
    var self = this;
    return 100;
   };
   this.$newForCollectUsingAdd$ = function ($size) {
    var self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$MutableArrayList().$new$($size);
   };
   this.$printElementsDo$ = function ($f) {
    var self = this;
    self._$do$($f);
    return self;
   };
   this.$hasSameElementsAs$ = function ($other) {
    var self = this;
    "BOGUS";
    "ACCESSBOGUS";
    return self._$size().$$equal($other.$size()) && self._$asBag().$$equal($other.$asBag());
   };
   this.$includes$ = function ($o) {
    var self = this;
    var NLR = new Object();
    try {
     self._$do$(function ($element) {
      return $element.$$equal($o).$ifTrue$(function () {
       {
        NLR.value = true;
        throw NLR;
       };
      });
     });
     return false;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$isEmpty = function () {
    var self = this;
    return 0 === self._$size();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Collection";
     this._$superInit$Collections$Collection = $.$superInit$Collections$Collection;
     this.$superInit$Collections$Collection = dnuCatcher("$superInit$Collections$Collection");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$asCollection = this._$asCollection = $.$asCollection;
     this.$copy = this._$copy = $.$copy;
     this.$postCopy = this._$postCopy = $.$postCopy;
     this.$value = this._$value = $.$value;
     this.$hash = this._$hash = $.$hash;
     this._$occurrencesOf$ = $.$occurrencesOf$;
     this.$occurrencesOf$ = dnuCatcher("$occurrencesOf$");
     this.$size = this._$size = $.$size;
     this.$species = this._$species = $.$species;
     this.$allSatisfy$ = this._$allSatisfy$ = $.$allSatisfy$;
     this.$anySatisfy$ = this._$anySatisfy$ = $.$anySatisfy$;
     this.$do$separatedBy$ = this._$do$separatedBy$ = $.$do$separatedBy$;
     this.$isCollection = this._$isCollection = $.$isCollection;
     this.$isKindOfCollection = this._$isKindOfCollection = $.$isKindOfCollection;
     this.$noneSatisfy$ = this._$noneSatisfy$ = $.$noneSatisfy$;
     this.$union$ = this._$union$ = $.$union$;
     this.$asArray = this._$asArray = $.$asArray;
     this.$asBag = this._$asBag = $.$asBag;
     this.$asMutableArrayList = this._$asMutableArrayList = $.$asMutableArrayList;
     this.$asSet = this._$asSet = $.$asSet;
     this.$asSortedList = this._$asSortedList = $.$asSortedList;
     this.$asSortedList$ = this._$asSortedList$ = $.$asSortedList$;
     this.$collect$ = this._$collect$ = $.$collect$;
     this.$detect$ = this._$detect$ = $.$detect$;
     this.$detect$ifNone$ = this._$detect$ifNone$ = $.$detect$ifNone$;
     this.$do$ = this._$do$ = $.$do$;
     this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
     this.$intersection$ = this._$intersection$ = $.$intersection$;
     this.$reduce$ = this._$reduce$ = $.$reduce$;
     this.$reduce$ifEmpty$ = this._$reduce$ifEmpty$ = $.$reduce$ifEmpty$;
     this.$reject$ = this._$reject$ = $.$reject$;
     this.$select$ = this._$select$ = $.$select$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$collectUsingAdd$ = $.$collectUsingAdd$;
     this.$collectUsingAdd$ = dnuCatcher("$collectUsingAdd$");
     this._$maxPrintElements = $.$maxPrintElements;
     this.$maxPrintElements = dnuCatcher("$maxPrintElements");
     this._$newForCollectUsingAdd$ = $.$newForCollectUsingAdd$;
     this.$newForCollectUsingAdd$ = dnuCatcher("$newForCollectUsingAdd$");
     this._$printElementsDo$ = $.$printElementsDo$;
     this.$printElementsDo$ = dnuCatcher("$printElementsDo$");
     this.$hasSameElementsAs$ = this._$hasSameElementsAs$ = $.$hasSameElementsAs$;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$isEmpty = this._$isEmpty = $.$isEmpty;
     this.$enclosingObjects$Collections$Collection = enclosingObjects;
     this.$super$Collections$Collection$slot = runtimeSuperclass;
     this["Collections`Collection"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`Collection"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`Collection";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Collection";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$Collection = enclosingObjects;
      this.$super$Collections$Collection = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$HashedCollection = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`HashedCollection";
   this.name = "Collections`HashedCollection";
   this.header = 584;
   this.slots = [
    new SM("table_0", true, false),
    new SM("size_0", true, false),
    new SM("deleted", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`HashedCollection", true, 585),
    new MM("instance`initializer", true, 586),
    new MM("at:", false, 587),
    new MM("at:ifAbsent:", false, 588),
    new MM("indexOf:", false, 589),
    new MM("indexOf:ifAbsent:", false, 590),
    new MM("keyAtValue:", false, 591),
    new MM("keyAtValue:ifAbsent:", false, 592),
    new MM("size", false, 593),
    new MM("table", false, 594),
    new MM("firstTableSize", false, 595),
    new MM("checkValidity", false, 596),
    new MM("add:", false, 597),
    new MM("addAll:", false, 598),
    new MM("include:", false, 599),
    new MM("include:ifNew:", false, 600),
    new MM("includeAll:", false, 601),
    new MM("do:", false, 602),
    new MM("keysDo:", false, 603),
    new MM("setTable:", false, 604),
    new MM("size:", false, 605),
    new MM("table:", false, 606),
    new MM("advanceAmount", false, 607),
    new MM("indexOf:tableMask:", false, 608),
    new MM("minTableSize", false, 609),
    new MM("minTableSizeForCapacity:", false, 610),
    new MM("newTableWithSize:", false, 611),
    new MM("occupied", false, 612),
    new MM("tableSizeForCapacity:", false, 613),
    new MM("initCapacity:", false, 614),
    new MM("markDeleted:", false, 615),
    new MM("postCopy", false, 616),
    new MM("printElementsDo:", false, 617),
    new MM("buildValForKey:element:", false, 618),
    new MM("elementFor:", false, 619),
    new MM("elementForCopy:", false, 620),
    new MM("hashFor:", false, 621),
    new MM("key:matches:", false, 622),
    new MM("keyFor:", false, 623),
    new MM("objToIncludeFor:withExisting:", false, 624),
    new MM("tableAt:put:inDeletedSlot:", false, 625),
    new MM("tableAt:put:inEmptySlot:", false, 626),
    new MM("tableAt:put:inMatchingSlot:value:", false, 627),
    new MM("tableAt:put:inUnusedSlot:", false, 628),
    new MM("atIndex:inTable:occupiedSlotDo:emptySlotDo:deletedSlotDo:", false, 629),
    new MM("contentsDo:", false, 630),
    new MM("createFirstTable", false, 631),
    new MM("growIfNeeded", false, 632),
    new MM("growTable", false, 633),
    new MM("lookup:inTable:matchingSlotDo:emptySlotDo:deletedSlotsDo:mismatchingSlotsDo:", false, 634),
    new MM("lookup:matchingSlotDo:emptySlotDo:deletedSlotsDo:", false, 635),
    new MM("tableAt:put:ifNew:", false, 636),
    new MM("valAt:ifAbsent:", false, 637),
    new MM("remove:", false, 638),
    new MM("remove:ifAbsent:", false, 639),
    new MM("removeAll:", false, 640),
    new MM("removeAllSuchThat:", false, 641),
    new MM("removeAt:", false, 642),
    new MM("removeAt:ifAbsent:", false, 643),
    new MM("removeEvery:", false, 644),
    new MM("removeKey:", false, 645),
    new MM("removeKey:ifAbsent:", false, 646),
    new MM("includesIndex:", false, 647),
    new MM("includesKey:", false, 648),
    new MM("init`table_0:", true, 0),
    new MM("table_0", true, 0),
    new MM("table_0:", true, 0),
    new MM("init`size_0:", true, 0),
    new MM("size_0", true, 0),
    new MM("size_0:", true, 0),
    new MM("init`deleted:", true, 0),
    new MM("deleted", true, 0),
    new MM("deleted:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$HashedCollection = function ($cap) {
    var self = this;
    self.$super$Collections$HashedCollection$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    var self = this;
    self._$superInit$Collections$HashedCollection($cap);
    self._$initCapacity$($cap);
    return self;
   };
   this.$at$ = function ($key) {
    var self = this;
    return self._$at$ifAbsent$($key, function () {
     return self._$Error().$signal$("key not found");
    });
   };
   this.$at$ifAbsent$ = function ($key, $f) {
    var self = this;
    var NLR = new Object();
    try {
     return self._$elementFor$(self._$valAt$ifAbsent$($key, function () {
      {
       NLR.value = $f.$value();
       throw NLR;
      };
     }));
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$indexOf$ = function ($el) {
    var self = this;
    return self._$indexOf$ifAbsent$($el, function () {
     return self._$error$("Element not found");
    });
   };
   this.$indexOf$ifAbsent$ = function ($el, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     self._$contentsDo$(function ($v) {
      return self._$elementFor$($v).$$equal($el).$ifTrue$(function () {
       {
        NLR.value = self._$keyFor$($v);
        throw NLR;
       };
      });
     });
     return $blk.$value();
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$keyAtValue$ = function ($v) {
    var self = this;
    return self._$indexOf$($v);
   };
   this.$keyAtValue$ifAbsent$ = function ($v, $blk) {
    var self = this;
    return self._$indexOf$ifAbsent$($v, $blk);
   };
   this.$size = function () {
    var self = this;
    return self._$size_0();
   };
   this.$table = function () {
    var self = this;
    return self._$table_0();
   };
   this.$firstTableSize = function () {
    var self = this;
    return 8;
   };
   this.$checkValidity = function () {
    var self = this;
    var $c = nil;
    $c = 0;
    self._$contentsDo$(function ($val) {
     self._$assert$message$(function () {
      return self._$at$(self._$keyFor$($val)).$$equal(self._$elementFor$($val));
     }, "");
     return $c = $c + 1;
    });
    self._$assert$message$(function () {
     return $c.$$equal(self._$size());
    }, "");
    return self;
   };
   this.$add$ = function ($val) {
    var self = this;
    return self._$include$($val);
   };
   this.$addAll$ = function ($c) {
    var self = this;
    $c.$do$(function ($e) {
     return self._$add$($e);
    });
    return $c;
   };
   this.$include$ = function ($val) {
    var self = this;
    return self._$include$ifNew$($val, function () {
     return nil;
    });
   };
   this.$include$ifNew$ = function ($val, $ifNew) {
    var self = this;
    return self._$tableAt$put$ifNew$(self._$keyFor$($val), self._$elementFor$($val), $ifNew);
   };
   this.$includeAll$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$include$($el);
    });
    return $c;
   };
   this.$do$ = function ($f) {
    var self = this;
    self._$contentsDo$(function ($val) {
     return $f.$value$(self._$elementFor$($val));
    });
    return self;
   };
   this.$keysDo$ = function ($f) {
    var self = this;
    self._$contentsDo$(function ($val) {
     return $f.$value$(self._$keyFor$($val));
    });
    return self;
   };
   this.$setTable$ = function ($t) {
    var self = this;
    self._$table_0$($t);
    return self;
   };
   this.$size$ = function ($s) {
    var self = this;
    self._$size_0$($s);
    return self;
   };
   this.$table$ = function ($t) {
    var self = this;
    self._$setTable$($t);
    self._$assert$message$(function () {
     return self._$deleted().$$equal(0);
    }, "");
    return self;
   };
   this.$advanceAmount = function () {
    var self = this;
    return 99990;
   };
   this.$indexOf$tableMask$ = function ($key, $mask) {
    var self = this;
    return self._$hashFor$($key).$bitAnd$($mask) + 1;
   };
   this.$minTableSize = function () {
    var self = this;
    return 4;
   };
   this.$minTableSizeForCapacity$ = function ($cap) {
    var self = this;
    return $cap + $cap;
   };
   this.$newTableWithSize$ = function ($tableSize) {
    var self = this;
    return self._$Array().$new$($tableSize);
   };
   this.$occupied = function () {
    var self = this;
    return self._$size() + self._$deleted();
   };
   this.$tableSizeForCapacity$ = function ($cap) {
    var self = this;
    var $min = nil;
    var $tsize = nil;
    $min = self._$minTableSizeForCapacity$($cap);
    $tsize = self._$minTableSize();
    {
     nil;
     for (; $tsize.$$less($min); ) {
      $tsize = $tsize + $tsize;
     };
    };
    return $tsize;
   };
   this.$initCapacity$ = function ($cap) {
    var self = this;
    self._$size$(0);
    self._$deleted$(0);
    if ($cap > 0) {
     self._$table$(self._$newTableWithSize$(self._$tableSizeForCapacity$($cap)));
    } else {
     nil;
    };
    return self;
   };
   this.$markDeleted$ = function ($index) {
    var self = this;
    var $tbl = nil;
    $tbl = self._$table();
    $tbl.$at$put$($index, $tbl);
    self._$deleted$(self._$deleted() + 1);
    return self;
   };
   this.$postCopy = function () {
    var self = this;
    var $tbl = nil;
    var $newtbl = nil;
    self.$super$Collections$HashedCollection$slot._$postCopy.call(self);
    $tbl = self._$table();
    if ($tbl === nil) {
     return self;
    } else {
     nil;
    };
    $newtbl = self._$newTableWithSize$($tbl.$size());
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = $tbl.$size();
     for (; $$limit.$$greater$equal($index); ) {
      self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($index, $tbl, function ($val) {
       return $newtbl.$at$put$($index, self._$elementForCopy$($val));
      }, function () {
       return nil;
      }, function () {
       return $newtbl.$at$put$($index, $newtbl);
      });
      $index = (1).$$plus($index);
     };
    };
    self._$setTable$($newtbl);
    return self;
   };
   this.$printElementsDo$ = function ($f) {
    var self = this;
    self._$contentsDo$($f);
    return self;
   };
   this.$buildValForKey$element$ = function ($k, $el) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$elementFor$ = function ($val) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$elementForCopy$ = function ($el) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$hashFor$ = function ($key) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$key$matches$ = function ($key1, $key2) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$keyFor$ = function ($val) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$objToIncludeFor$withExisting$ = function ($new, $other) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$tableAt$put$inDeletedSlot$ = function ($key, $el, $index) {
    var self = this;
    var $val = nil;
    $val = self._$tableAt$put$inUnusedSlot$($key, $el, $index);
    self._$deleted$(self._$deleted() - 1);
    return $val;
   };
   this.$tableAt$put$inEmptySlot$ = function ($key, $el, $index) {
    var self = this;
    var $val = nil;
    $val = self._$tableAt$put$inUnusedSlot$($key, $el, $index);
    self._$growIfNeeded();
    return $val;
   };
   this.$tableAt$put$inMatchingSlot$value$ = function ($key, $el, $index, $val) {
    var self = this;
    var $newVal = nil;
    $newVal = self._$objToIncludeFor$withExisting$(self._$buildValForKey$element$($key, $el), $val);
    self._$table().$at$put$($index, $newVal);
    return $newVal;
   };
   this.$tableAt$put$inUnusedSlot$ = function ($key, $el, $index) {
    var self = this;
    var $newVal = nil;
    $newVal = self._$buildValForKey$element$($key, $el);
    self._$table().$at$put$($index, $newVal);
    self._$size$(self._$size() + 1);
    return $newVal;
   };
   this.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = function ($i, $tbl, $occupied, $empty, $deleted) {
    var self = this;
    var $el = nil;
    $el = $tbl.$at$($i);
    if ($el === nil) {
     return $empty.$value();
    } else {
     nil;
    };
    if ($el === $tbl) {
     return $deleted.$value();
    } else {
     nil;
    };
    return $occupied.$value$($el);
   };
   this.$contentsDo$ = function ($f) {
    var self = this;
    var $tbl = nil;
    "ACCESSBOGUS";
    $tbl = self._$table();
    if ($tbl === nil) {
     return self;
    } else {
     nil;
    };
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = $tbl.$size();
     for (; $$limit.$$greater$equal($index); ) {
      self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($index, $tbl, function ($val) {
       return $f.$value$($val);
      }, function () {
       return nil;
      }, function () {
       return nil;
      });
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$createFirstTable = function () {
    var self = this;
    self._$table$(self._$newTableWithSize$(self._$firstTableSize()));
    return self;
   };
   this.$growIfNeeded = function () {
    var self = this;
    if (self._$minTableSizeForCapacity$(self._$occupied()).$$greater(self._$table().$size())) {
     self._$growTable();
    } else {
     nil;
    };
    return self;
   };
   this.$growTable = function () {
    var self = this;
    var $new = nil;
    $new = self._$newTableWithSize$(self._$table().$size() + self._$table().$size());
    self._$contentsDo$(function ($a_value) {
     return self._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$(self._$keyFor$($a_value), $new, function ($index, $val) {
      return self._$shouldNotHappen();
     }, function ($index) {
      return $new.$at$put$($index, $a_value);
     }, function ($index) {
      return self._$shouldNotHappen();
     }, function ($index) {
      return nil;
     });
    });
    self._$deleted$(0);
    self._$table$($new);
    return self;
   };
   this.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = function ($key, $tbl, $matching, $empty, $marked, $mismatch) {
    var self = this;
    var NLR = new Object();
    try {
     var $i = nil;
     var $mask = nil;
     $mask = $tbl.$size() - 1;
     $i = self._$indexOf$tableMask$($key, $mask);
     {
      nil;
      self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($i, $tbl, function ($val) {
       return self._$key$matches$($key, self._$keyFor$($val)).$ifTrue$ifFalse$(function () {
        {
         NLR.value = $matching.$value$value$($i, $val);
         throw NLR;
        };
       }, function () {
        return $mismatch.$value$($i);
       });
      }, function () {
       {
        NLR.value = $empty.$value$($i);
        throw NLR;
       };
      }, function () {
       return $marked.$value$($i);
      });
      $i = ($i + self._$advanceAmount()).$bitAnd$($mask) + 1;
      for (; true; ) {
       nil;
       self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($i, $tbl, function ($val) {
        return self._$key$matches$($key, self._$keyFor$($val)).$ifTrue$ifFalse$(function () {
         {
          NLR.value = $matching.$value$value$($i, $val);
          throw NLR;
         };
        }, function () {
         return $mismatch.$value$($i);
        });
       }, function () {
        {
         NLR.value = $empty.$value$($i);
         throw NLR;
        };
       }, function () {
        return $marked.$value$($i);
       });
       $i = ($i + self._$advanceAmount()).$bitAnd$($mask) + 1;
      };
     };
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = function ($key, $matching, $empty, $marked) {
    var self = this;
    return self._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$($key, self._$table(), $matching, $empty, $marked, function ($index) {
     return nil;
    });
   };
   this.$tableAt$put$ifNew$ = function ($key, $el, $onNew) {
    var self = this;
    var $reusableSlot = nil;
    if (self._$table() === nil) {
     self._$createFirstTable();
    } else {
     nil;
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $val) {
     return self._$tableAt$put$inMatchingSlot$value$($key, $el, $index, $val);
    }, function ($index) {
     var $newVal = nil;
     if ($reusableSlot === nil) {
      $newVal = self._$tableAt$put$inEmptySlot$($key, $el, $index);
     } else {
      $newVal = self._$tableAt$put$inDeletedSlot$($key, $el, $reusableSlot);
     };
     $onNew.$value();
     return $newVal;
    }, function ($index) {
     return ($reusableSlot === nil).$ifTrue$(function () {
      return $reusableSlot = $index;
     });
    });
   };
   this.$valAt$ifAbsent$ = function ($key, $f) {
    var self = this;
    if (self._$table() === nil) {
     return $f.$value();
    } else {
     nil;
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $val) {
     return $val;
    }, function ($index) {
     return $f.$value();
    }, function ($index) {
     return nil;
    });
   };
   this.$remove$ = function ($val) {
    var self = this;
    return self._$remove$ifAbsent$($val, function () {
     return self._$error$("value not in collection");
    });
   };
   this.$remove$ifAbsent$ = function ($val, $f) {
    var self = this;
    self._$removeKey$ifAbsent$(self._$keyFor$($val), $f);
    return $val;
   };
   this.$removeAll$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$remove$($el);
    });
    return $c;
   };
   this.$removeAllSuchThat$ = function ($test) {
    var self = this;
    self._$copy().$contentsDo$(function ($el) {
     return $test.$value$($el).$ifTrue$(function () {
      return self._$remove$($el);
     });
    });
    return self;
   };
   this.$removeAt$ = function ($k) {
    var self = this;
    return self._$removeKey$($k);
   };
   this.$removeAt$ifAbsent$ = function ($k, $f) {
    var self = this;
    return self._$removeKey$ifAbsent$($k, $f);
   };
   this.$removeEvery$ = function ($val) {
    var self = this;
    self._$remove$ifAbsent$($val, function () {
     return nil;
    });
    return $val;
   };
   this.$removeKey$ = function ($key) {
    var self = this;
    return self._$removeKey$ifAbsent$($key, function () {
     return self._$error$("key not found");
    });
   };
   this.$removeKey$ifAbsent$ = function ($key, $f) {
    var self = this;
    if (self._$table() === nil) {
     return $f.$value();
    } else {
     nil;
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $val) {
     self._$markDeleted$($index);
     self._$size$(self._$size() - 1);
     return self._$elementFor$($val);
    }, function ($index) {
     return $f.$value();
    }, function ($index) {
     return nil;
    });
   };
   this.$includesIndex$ = function ($k) {
    var self = this;
    var NLR = new Object();
    try {
     self._$valAt$ifAbsent$($k, function () {
      {
       NLR.value = false;
       throw NLR;
      };
     });
     return true;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includesKey$ = function ($k) {
    var self = this;
    return self._$includesIndex$($k);
   };
   this.$init$table_0$ = function (v) {
    this.$table_0$slot = v;
    return this;
   };
   this.$table_0 = function () {
    return this.$table_0$slot;
   };
   this.$table_0$ = function (v) {
    this.$table_0$slot = v;
    return this;
   };
   this.$init$size_0$ = function (v) {
    this.$size_0$slot = v;
    return this;
   };
   this.$size_0 = function () {
    return this.$size_0$slot;
   };
   this.$size_0$ = function (v) {
    this.$size_0$slot = v;
    return this;
   };
   this.$init$deleted$ = function (v) {
    this.$deleted$slot = v;
    return this;
   };
   this.$deleted = function () {
    return this.$deleted$slot;
   };
   this.$deleted$ = function (v) {
    this.$deleted$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`HashedCollection";
     this._$superInit$Collections$HashedCollection = $.$superInit$Collections$HashedCollection;
     this.$superInit$Collections$HashedCollection = dnuCatcher("$superInit$Collections$HashedCollection");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
     this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
     this.$keyAtValue$ = this._$keyAtValue$ = $.$keyAtValue$;
     this.$keyAtValue$ifAbsent$ = this._$keyAtValue$ifAbsent$ = $.$keyAtValue$ifAbsent$;
     this.$size = this._$size = $.$size;
     this._$table = $.$table;
     this.$table = dnuCatcher("$table");
     this._$firstTableSize = $.$firstTableSize;
     this.$firstTableSize = dnuCatcher("$firstTableSize");
     this._$checkValidity = $.$checkValidity;
     this.$checkValidity = dnuCatcher("$checkValidity");
     this.$add$ = this._$add$ = $.$add$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$include$ = this._$include$ = $.$include$;
     this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
     this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
     this.$do$ = this._$do$ = $.$do$;
     this.$keysDo$ = this._$keysDo$ = $.$keysDo$;
     this._$setTable$ = $.$setTable$;
     this.$setTable$ = dnuCatcher("$setTable$");
     this._$size$ = $.$size$;
     this.$size$ = dnuCatcher("$size$");
     this._$table$ = $.$table$;
     this.$table$ = dnuCatcher("$table$");
     this._$advanceAmount = $.$advanceAmount;
     this.$advanceAmount = dnuCatcher("$advanceAmount");
     this._$indexOf$tableMask$ = $.$indexOf$tableMask$;
     this.$indexOf$tableMask$ = dnuCatcher("$indexOf$tableMask$");
     this._$minTableSize = $.$minTableSize;
     this.$minTableSize = dnuCatcher("$minTableSize");
     this._$minTableSizeForCapacity$ = $.$minTableSizeForCapacity$;
     this.$minTableSizeForCapacity$ = dnuCatcher("$minTableSizeForCapacity$");
     this._$newTableWithSize$ = $.$newTableWithSize$;
     this.$newTableWithSize$ = dnuCatcher("$newTableWithSize$");
     this._$occupied = $.$occupied;
     this.$occupied = dnuCatcher("$occupied");
     this._$tableSizeForCapacity$ = $.$tableSizeForCapacity$;
     this.$tableSizeForCapacity$ = dnuCatcher("$tableSizeForCapacity$");
     this._$initCapacity$ = $.$initCapacity$;
     this.$initCapacity$ = dnuCatcher("$initCapacity$");
     this._$markDeleted$ = $.$markDeleted$;
     this.$markDeleted$ = dnuCatcher("$markDeleted$");
     this._$postCopy = $.$postCopy;
     this.$postCopy = dnuCatcher("$postCopy");
     this._$printElementsDo$ = $.$printElementsDo$;
     this.$printElementsDo$ = dnuCatcher("$printElementsDo$");
     this._$buildValForKey$element$ = $.$buildValForKey$element$;
     this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
     this._$elementFor$ = $.$elementFor$;
     this.$elementFor$ = dnuCatcher("$elementFor$");
     this._$elementForCopy$ = $.$elementForCopy$;
     this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this._$keyFor$ = $.$keyFor$;
     this.$keyFor$ = dnuCatcher("$keyFor$");
     this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
     this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
     this._$tableAt$put$inDeletedSlot$ = $.$tableAt$put$inDeletedSlot$;
     this.$tableAt$put$inDeletedSlot$ = dnuCatcher("$tableAt$put$inDeletedSlot$");
     this._$tableAt$put$inEmptySlot$ = $.$tableAt$put$inEmptySlot$;
     this.$tableAt$put$inEmptySlot$ = dnuCatcher("$tableAt$put$inEmptySlot$");
     this._$tableAt$put$inMatchingSlot$value$ = $.$tableAt$put$inMatchingSlot$value$;
     this.$tableAt$put$inMatchingSlot$value$ = dnuCatcher("$tableAt$put$inMatchingSlot$value$");
     this._$tableAt$put$inUnusedSlot$ = $.$tableAt$put$inUnusedSlot$;
     this.$tableAt$put$inUnusedSlot$ = dnuCatcher("$tableAt$put$inUnusedSlot$");
     this._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = $.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$;
     this.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = dnuCatcher("$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$");
     this.$contentsDo$ = this._$contentsDo$ = $.$contentsDo$;
     this._$createFirstTable = $.$createFirstTable;
     this.$createFirstTable = dnuCatcher("$createFirstTable");
     this._$growIfNeeded = $.$growIfNeeded;
     this.$growIfNeeded = dnuCatcher("$growIfNeeded");
     this._$growTable = $.$growTable;
     this.$growTable = dnuCatcher("$growTable");
     this._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = $.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$;
     this.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = dnuCatcher("$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$");
     this._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = $.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$;
     this.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = dnuCatcher("$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$");
     this._$tableAt$put$ifNew$ = $.$tableAt$put$ifNew$;
     this.$tableAt$put$ifNew$ = dnuCatcher("$tableAt$put$ifNew$");
     this._$valAt$ifAbsent$ = $.$valAt$ifAbsent$;
     this.$valAt$ifAbsent$ = dnuCatcher("$valAt$ifAbsent$");
     this.$remove$ = this._$remove$ = $.$remove$;
     this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
     this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
     this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
     this.$removeAt$ifAbsent$ = this._$removeAt$ifAbsent$ = $.$removeAt$ifAbsent$;
     this.$removeEvery$ = this._$removeEvery$ = $.$removeEvery$;
     this.$removeKey$ = this._$removeKey$ = $.$removeKey$;
     this.$removeKey$ifAbsent$ = this._$removeKey$ifAbsent$ = $.$removeKey$ifAbsent$;
     this.$includesIndex$ = this._$includesIndex$ = $.$includesIndex$;
     this.$includesKey$ = this._$includesKey$ = $.$includesKey$;
     this._$init$table_0$ = $.$init$table_0$;
     this.$init$table_0$ = dnuCatcher("$init$table_0$");
     this._$table_0 = $.$table_0;
     this.$table_0 = dnuCatcher("$table_0");
     this._$table_0$ = $.$table_0$;
     this.$table_0$ = dnuCatcher("$table_0$");
     this._$init$size_0$ = $.$init$size_0$;
     this.$init$size_0$ = dnuCatcher("$init$size_0$");
     this._$size_0 = $.$size_0;
     this.$size_0 = dnuCatcher("$size_0");
     this._$size_0$ = $.$size_0$;
     this.$size_0$ = dnuCatcher("$size_0$");
     this._$init$deleted$ = $.$init$deleted$;
     this.$init$deleted$ = dnuCatcher("$init$deleted$");
     this._$deleted = $.$deleted;
     this.$deleted = dnuCatcher("$deleted");
     this._$deleted$ = $.$deleted$;
     this.$deleted$ = dnuCatcher("$deleted$");
     this.$enclosingObjects$Collections$HashedCollection = enclosingObjects;
     this.$super$Collections$HashedCollection$slot = runtimeSuperclass;
     this["Collections`HashedCollection"] = function () {
      superBasicNew.call(this);
      this.$table_0$slot = nil;
      this.$size_0$slot = nil;
      this.$deleted$slot = nil;
     };
     this.basicNew = this["Collections`HashedCollection"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`HashedCollection";
    this.slots = [];
    this.methods = [
     new MM("new:", true, 0),
     new MM("defaultCapacity", false, 649)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cap);
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 0;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`HashedCollection";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$enclosingObjects$Collections$HashedCollection = enclosingObjects;
      this.$super$Collections$HashedCollection = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$IdentityMutableHashedMap = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`IdentityMutableHashedMap";
   this.name = "Collections`IdentityMutableHashedMap";
   this.header = 650;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`IdentityMutableHashedMap", true, 651),
    new MM("instance`initializer", true, 652),
    new MM("hashFor:", false, 653),
    new MM("key:matches:", false, 654)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$IdentityMutableHashedMap = function ($cap) {
    var self = this;
    self.$super$Collections$IdentityMutableHashedMap$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    var self = this;
    self._$superInit$Collections$IdentityMutableHashedMap($cap);
    return self;
   };
   this.$hashFor$ = function ($key) {
    var self = this;
    return $key.$identityHash();
   };
   this.$key$matches$ = function ($k, $another) {
    var self = this;
    return $k === $another;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`IdentityMutableHashedMap";
     this._$superInit$Collections$IdentityMutableHashedMap = $.$superInit$Collections$IdentityMutableHashedMap;
     this.$superInit$Collections$IdentityMutableHashedMap = dnuCatcher("$superInit$Collections$IdentityMutableHashedMap");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this.$enclosingObjects$Collections$IdentityMutableHashedMap = enclosingObjects;
     this.$super$Collections$IdentityMutableHashedMap$slot = runtimeSuperclass;
     this["Collections`IdentityMutableHashedMap"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`IdentityMutableHashedMap"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`IdentityMutableHashedMap";
    this.slots = [];
    this.methods = [
     new MM("new:", true, 0),
     new MM("new", false, 655),
     new MM("defaultCapacity", false, 656)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cap);
    };
    this.$new = function () {
     var self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 0;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`IdentityMutableHashedMap";
      this.$new$ = this._$new$ = $.$new$;
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$enclosingObjects$Collections$IdentityMutableHashedMap = enclosingObjects;
      this.$super$Collections$IdentityMutableHashedMap = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$IdentitySet = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`IdentitySet";
   this.name = "Collections`IdentitySet";
   this.header = 657;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`IdentitySet", true, 658),
    new MM("instance`initializer", true, 659),
    new MM("hashFor:", false, 660),
    new MM("key:matches:", false, 661)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$IdentitySet = function ($cap) {
    var self = this;
    self.$super$Collections$IdentitySet$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    var self = this;
    self._$superInit$Collections$IdentitySet($cap);
    return self;
   };
   this.$hashFor$ = function ($key) {
    var self = this;
    return $key.$identityHash();
   };
   this.$key$matches$ = function ($k, $another) {
    var self = this;
    return $k === $another;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`IdentitySet";
     this._$superInit$Collections$IdentitySet = $.$superInit$Collections$IdentitySet;
     this.$superInit$Collections$IdentitySet = dnuCatcher("$superInit$Collections$IdentitySet");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this.$enclosingObjects$Collections$IdentitySet = enclosingObjects;
     this.$super$Collections$IdentitySet$slot = runtimeSuperclass;
     this["Collections`IdentitySet"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`IdentitySet"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`IdentitySet";
    this.slots = [];
    this.methods = [
     new MM("new:", true, 0),
     new MM("defaultCapacity", false, 662),
     new MM("new", false, 663),
     new MM("withAll:", false, 664)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cap);
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 0;
    };
    this.$new = function () {
     var self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$includeAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`IdentitySet";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$IdentitySet = enclosingObjects;
      this.$super$Collections$IdentitySet = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Interval = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`Interval";
   this.name = "Collections`Interval";
   this.header = 665;
   this.slots = [
    new SM("start", false, false),
    new SM("stop", false, false),
    new SM("increment", false, false)
   ];
   this.methods = [
    new MM("superInit`Collections`Interval", true, 666),
    new MM("instance`initializer", true, 667),
    new MM("at:", false, 668),
    new MM("do:", false, 669),
    new MM("size", false, 670),
    new MM("copyWithSize:", false, 671),
    new MM("init`start:", true, 0),
    new MM("start", true, 0),
    new MM("init`stop:", true, 0),
    new MM("stop", true, 0),
    new MM("init`increment:", true, 0),
    new MM("increment", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Interval = function ($p_start, $p_stop, $p_step) {
    var self = this;
    self.$super$Collections$Interval$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p_start, $p_stop, $p_step) {
    var self = this;
    self._$superInit$Collections$Interval($p_start, $p_stop, $p_step);
    self._$init$start$($p_start);
    self._$init$stop$($p_stop);
    self._$init$increment$($p_step);
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    if (!(self._$start() - self._$stop()).$sign().$$equal(self._$increment().$sign())) {
     var $value = nil;
     $value = self._$start() + (self._$increment() * ($index - 1));
     if (self._$increment() >= 0) {
      if ($value.$between$and$(self._$start(), self._$stop())) {
       return $value;
      } else {
       nil;
      };
     } else {
      if ($value.$between$and$(self._$stop(), self._$start())) {
       return $value;
      } else {
       nil;
      };
     };
    } else {
     nil;
    };
    self._$Error().$signal$("Index out-of-range");
    return self;
   };
   this.$do$ = function ($action) {
    var self = this;
    var $value = nil;
    var $incr = nil;
    var $stp = nil;
    $value = self._$start();
    $incr = self._$increment();
    $stp = self._$stop();
    if ($incr >= 0) {
     {
      nil;
      for (; $value.$$less$equal($stp); ) {
       $action.$value$($value);
       $value = $value + $incr;
      };
     };
    } else {
     {
      nil;
      for (; $value.$$greater$equal($stp); ) {
       $action.$value$($value);
       $value = $value + $incr;
      };
     };
    };
    return self;
   };
   this.$size = function () {
    var self = this;
    return ((self._$stop() - self._$start()).$$over$over(self._$increment()) + 1).$max$(0);
   };
   this.$copyWithSize$ = function ($s) {
    var self = this;
    self._$unimplemented();
    return self;
   };
   this.$init$start$ = function (v) {
    this.$start$slot = v;
    return this;
   };
   this.$start = function () {
    return this.$start$slot;
   };
   this.$init$stop$ = function (v) {
    this.$stop$slot = v;
    return this;
   };
   this.$stop = function () {
    return this.$stop$slot;
   };
   this.$init$increment$ = function (v) {
    this.$increment$slot = v;
    return this;
   };
   this.$increment = function () {
    return this.$increment$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Interval";
     this._$superInit$Collections$Interval = $.$superInit$Collections$Interval;
     this.$superInit$Collections$Interval = dnuCatcher("$superInit$Collections$Interval");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this.$do$ = this._$do$ = $.$do$;
     this.$size = this._$size = $.$size;
     this._$copyWithSize$ = $.$copyWithSize$;
     this.$copyWithSize$ = dnuCatcher("$copyWithSize$");
     this.$init$start$ = this._$init$start$ = $.$init$start$;
     this.$start = this._$start = $.$start;
     this.$init$stop$ = this._$init$stop$ = $.$init$stop$;
     this.$stop = this._$stop = $.$stop;
     this.$init$increment$ = this._$init$increment$ = $.$init$increment$;
     this.$increment = this._$increment = $.$increment;
     this.$enclosingObjects$Collections$Interval = enclosingObjects;
     this.$super$Collections$Interval$slot = runtimeSuperclass;
     this["Collections`Interval"] = function () {
      superBasicNew.call(this);
      this.$start$slot = nil;
      this.$stop$slot = nil;
      this.$increment$slot = nil;
     };
     this.basicNew = this["Collections`Interval"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`Interval";
    this.slots = [];
    this.methods = [
     new MM("from:to:by:", true, 0),
     new MM("from:to:", false, 672)
    ];
    this.nestedClasses = [];
    this.$from$to$by$ = function ($p_start, $p_stop, $p_step) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p_start, $p_stop, $p_step);
    };
    this.$from$to$ = function ($start, $stop) {
     var self = this;
     return self._$from$to$by$($start, $stop, 1);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Interval";
      this.$from$to$by$ = this._$from$to$by$ = $.$from$to$by$;
      this.$from$to$ = this._$from$to$ = $.$from$to$;
      this.$enclosingObjects$Collections$Interval = enclosingObjects;
      this.$super$Collections$Interval = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$List = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`List";
   this.name = "Collections`List";
   this.header = 673;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`List", true, 674),
    new MM("instance`initializer", true, 675),
    new MM("at:", false, 676),
    new MM("at:ifAbsent:", false, 677),
    new MM("collection:matchesElementsAt:", false, 678),
    new MM("findFirst:", false, 679),
    new MM("findLast:", false, 680),
    new MM("first", false, 681),
    new MM("hash", false, 682),
    new MM("indexOf:", false, 683),
    new MM("indexOf:ifAbsent:", false, 684),
    new MM("indexOfSubCollection:startingAt:", false, 685),
    new MM("indexOfSubCollection:startingAt:ifAbsent:", false, 686),
    new MM("indicesOfSubCollection:", false, 687),
    new MM("indicesOfSubCollection:startingAt:", false, 688),
    new MM("last", false, 689),
    new MM("size", false, 690),
    new MM("species", false, 691),
    new MM(",", false, 692),
    new MM("allButFirst", false, 693),
    new MM("allButLast", false, 694),
    new MM("isKindOfList", false, 695),
    new MM("isSequenceable", false, 696),
    new MM("copyFrom:to:", false, 697),
    new MM("copyReplaceAll:with:", false, 698),
    new MM("copyReplaceFrom:to:with:", false, 699),
    new MM("copyWith:", false, 700),
    new MM("copyWithSize:", false, 701),
    new MM("copyWithout:", false, 702),
    new MM("reverse", false, 703),
    new MM("collect:", false, 704),
    new MM("do:", false, 705),
    new MM("doWithIndex:", false, 706),
    new MM("keysAndValuesDo:", false, 707),
    new MM("reverseDo:", false, 708),
    new MM("with:do:", false, 709),
    new MM("collectUsingAtPut:", false, 710),
    new MM("hashAt:", false, 711),
    new MM("newForCollectUsingAtPut:", false, 712),
    new MM("newCopyOfSize:thatCanAlsoHoldElementsOf:", false, 713),
    new MM("readStream", false, 714),
    new MM("hasSameElementsAndOrderAs:", false, 715),
    new MM("includesIndex:", false, 716),
    new MM("isSortedBy:", false, 717),
    new MM("binarySearchFor:between:and:toCompare:", false, 718),
    new MM("binarySearchFor:toCompare:", false, 719)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$List = function () {
    var self = this;
    self.$super$Collections$List$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Collections$List();
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$at$ifAbsent$ = function ($index, $fail) {
    var self = this;
    return $index.$between$and$(1, self._$size()).$ifTrue$ifFalse$(function () {
     return self._$at$($index);
    }, function () {
     return $fail.$value();
    });
   };
   this.$collection$matchesElementsAt$ = function ($cltn, $index) {
    var self = this;
    var $offset = nil;
    $offset = $index - 1;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $cltn.$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (!$cltn.$at$($i).$$equal(self._$at$($i + $offset))) {
       return false;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return true;
   };
   this.$findFirst$ = function ($predicate) {
    var self = this;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if ($predicate.$value$(self._$at$($i))) {
       return $i;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return 0;
   };
   this.$findLast$ = function ($predicate) {
    var self = this;
    {
     var $i = nil;
     nil;
     $i = self._$size();
     for (; (1).$$less$equal($i); ) {
      if ($predicate.$value$(self._$at$($i))) {
       return $i;
      } else {
       nil;
      };
      $i = (-1).$$plus($i);
     };
    };
    return 0;
   };
   this.$first = function () {
    var self = this;
    return self._$at$(1);
   };
   this.$hash = function () {
    var self = this;
    var $sz = nil;
    var $val = nil;
    $sz = self._$size();
    if ($sz < 2) {
     return $sz.$$equal(1).$ifTrue$ifFalse$(function () {
      return self._$hashAt$(1);
     }, function () {
      return 1;
     });
    } else {
     nil;
    };
    $val = self._$hashAt$(1);
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$(2).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz - 1).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz.$bitShift$(-1) + 1).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$($sz.$bitXor$($val));
    $val = $val.$bitAnd$(1048575);
    return $val;
   };
   this.$indexOf$ = function ($element) {
    var self = this;
    return self._$indexOf$ifAbsent$($element, function () {
     return 0;
    });
   };
   this.$indexOf$ifAbsent$ = function ($element, $f) {
    var self = this;
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      if (self._$at$($index).$$equal($element)) {
       return $index;
      } else {
       nil;
      };
      $index = (1).$$plus($index);
     };
    };
    return $f.$value();
   };
   this.$indexOfSubCollection$startingAt$ = function ($sub, $index) {
    var self = this;
    return self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $index, function () {
     return self._$error$("subcollection not found");
    });
   };
   this.$indexOfSubCollection$startingAt$ifAbsent$ = function ($sub, $index, $f) {
    var self = this;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = $index;
     $$limit = (self._$size() - $sub.$size()) + 1;
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$collection$matchesElementsAt$($sub, $i)) {
       return $i;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return $f.$value();
   };
   this.$indicesOfSubCollection$ = function ($sub) {
    var self = this;
    return self._$indicesOfSubCollection$startingAt$($sub, 1);
   };
   this.$indicesOfSubCollection$startingAt$ = function ($sub, $index) {
    var self = this;
    var $indices = nil;
    var $subSize = nil;
    var $current = nil;
    $indices = self.$enclosingObjects$Collections$List[0]._$MutableArrayList().$new();
    $subSize = $sub.$size();
    $current = $index;
    {
     nil;
     $current = self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $current, function () {
      return 0;
     });
     for (; !$current.$$equal(0); ) {
      $indices.$addLast$($current);
      $current = $current + $subSize;
      $current = self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $current, function () {
       return 0;
      });
     };
    };
    return $indices;
   };
   this.$last = function () {
    var self = this;
    return self._$at$(self._$size());
   };
   this.$size = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$species = function () {
    var self = this;
    return self._$Array();
   };
   this.$$comma = function ($other) {
    var self = this;
    return self._$copyReplaceFrom$to$with$(self._$size() + 1, self._$size(), $other);
   };
   this.$allButFirst = function () {
    var self = this;
    return self._$copyFrom$to$(2, self._$size());
   };
   this.$allButLast = function () {
    var self = this;
    return self._$copyFrom$to$(1, self._$size() - 1);
   };
   this.$isKindOfList = function () {
    var self = this;
    return true;
   };
   this.$isSequenceable = function () {
    var self = this;
    return true;
   };
   this.$copyFrom$to$ = function ($start, $stop) {
    var self = this;
    var $cp = nil;
    var $safeme = nil;
    $safeme = self;
    $cp = self._$newCopyOfSize$thatCanAlsoHoldElementsOf$(($stop - $start) + 1, $safeme);
    $cp.$replaceFrom$to$with$startingAt$(1, $cp.$size(), $safeme, $start);
    return $cp;
   };
   this.$copyReplaceAll$with$ = function ($oldSub, $newSub) {
    var self = this;
    var $spots = nil;
    var $subDelta = nil;
    var $copy = nil;
    var $current = nil;
    var $offset = nil;
    var $newSubSize = nil;
    var $oldSubSize = nil;
    var $safeself = nil;
    $newSubSize = $newSub.$size();
    $oldSubSize = $oldSub.$size();
    $subDelta = $newSub.$size() - $oldSubSize;
    $spots = self._$indicesOfSubCollection$($oldSub);
    $safeself = self;
    if ($spots.$size().$$equal(0)) {
     $copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size(), $newSub);
     $copy.$replaceFrom$to$with$(1, self._$size(), $safeself);
     return $copy;
    } else {
     nil;
    };
    $copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size() + ($spots.$size() * $subDelta), $newSub);
    $current = 1;
    $offset = 0;
    $spots.$do$(function ($spot) {
     var $offspot = nil;
     $offspot = $spot + $offset;
     $copy.$replaceFrom$to$with$startingAt$($current + $offset, $offspot - 1, $safeself, $current);
     $copy.$replaceFrom$to$with$($offspot, ($offspot + $newSubSize) - 1, $newSub);
     $current = $spot + $oldSubSize;
     return $offset = $offset + $subDelta;
    });
    $copy.$replaceFrom$to$with$startingAt$($current + $offset, $copy.$size(), $safeself, $current);
    return $copy;
   };
   this.$copyReplaceFrom$to$with$ = function ($start, $stop, $other) {
    var self = this;
    var $copy = nil;
    var $sizeChange = nil;
    var $sz = nil;
    var $afterNew = nil;
    var $safeself = nil;
    $safeself = self;
    $sizeChange = $other.$size() - (($stop - $start) + 1);
    $sz = self._$size();
    $copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$($sz + $sizeChange, $other);
    $afterNew = $start + $other.$size();
    $copy.$replaceFrom$to$with$startingAt$(1, $start - 1, $safeself, 1);
    $copy.$replaceFrom$to$with$($start, $afterNew - 1, $other);
    $copy.$replaceFrom$to$with$startingAt$($afterNew, $copy.$size(), self, $stop + 1);
    return $copy;
   };
   this.$copyWith$ = function ($element) {
    var self = this;
    return self._$$comma([$element]);
   };
   this.$copyWithSize$ = function ($s) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$copyWithout$ = function ($el) {
    var self = this;
    var $safeself = nil;
    $safeself = self;
    return $safeself.$copyReplaceAll$with$(self._$Array().$with$($el), []);
   };
   this.$reverse = function () {
    var self = this;
    var $copy = nil;
    "BOGUS";
    $copy = self._$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size(), self);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      var $el = nil;
      $el = self._$at$($i);
      $copy.$at$put$((self._$size() + 1) - $i, $el);
      $i = (1).$$plus($i);
     };
    };
    return $copy;
   };
   this.$collect$ = function ($map) {
    var self = this;
    return self._$collectUsingAtPut$($map);
   };
   this.$do$ = function ($f) {
    var self = this;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $f.$value$(self._$at$($i));
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$doWithIndex$ = function ($f) {
    var self = this;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $f.$value$value$(self._$at$($i), $i);
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$keysAndValuesDo$ = function ($action) {
    var self = this;
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $action.$value$value$($index, self._$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$reverseDo$ = function ($action) {
    var self = this;
    {
     var $index = nil;
     nil;
     $index = self._$size();
     for (; (1).$$less$equal($index); ) {
      $action.$value$(self._$at$($index));
      $index = (-1).$$plus($index);
     };
    };
    return self;
   };
   this.$with$do$ = function ($other, $action) {
    var self = this;
    self._$assert$message$(function () {
     return self._$size().$$equal($other.$size());
    }, "Cannot jointly interate collections of different size");
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $action.$value$value$(self._$at$($index), $other.$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$collectUsingAtPut$ = function ($map) {
    var self = this;
    var $c = nil;
    $c = self._$newForCollectUsingAtPut$(self._$size());
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $c.$at$put$($i, $map.$value$(self._$at$($i)));
      $i = (1).$$plus($i);
     };
    };
    return $c;
   };
   this.$hashAt$ = function ($index) {
    var self = this;
    return self._$at$($index).$hash();
   };
   this.$newForCollectUsingAtPut$ = function ($size) {
    var self = this;
    return self._$Array().$new$($size);
   };
   this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = function ($size, $other) {
    var self = this;
    return self._$Array().$new$($size);
   };
   this.$readStream = function () {
    var self = this;
    return $0.$ListReadStream(self.$enclosingObjects$Collections$List[0]).$on$(self);
   };
   this.$hasSameElementsAndOrderAs$ = function ($other) {
    var self = this;
    "ACCESSBOGUS";
    if (!self._$size().$$equal($other.$size())) {
     return false;
    } else {
     nil;
    };
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (!self._$at$($i).$$equal($other.$at$($i))) {
       return false;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return true;
   };
   this.$includesIndex$ = function ($index) {
    var self = this;
    return $index.$between$and$(1, self._$size());
   };
   this.$isSortedBy$ = function ($compare) {
    var self = this;
    var $last = nil;
    if (self._$size() < 2) {
     return true;
    } else {
     nil;
    };
    $last = self._$at$(1);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 2;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (!$compare.$value$value$($last, self._$at$($i))) {
       return false;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return true;
   };
   this.$binarySearchFor$between$and$toCompare$ = function ($el, $start, $end, $compare) {
    var self = this;
    var $low = nil;
    var $high = nil;
    $low = $start;
    $high = $end;
    {
     nil;
     for (; $low.$$less$equal($high); ) {
      var $mid = nil;
      $mid = ($low + $high).$$over$over(2);
      if ($compare.$value$value$(self._$at$($mid), $el)) {
       $low = $mid + 1;
      } else {
       $high = $mid - 1;
      };
     };
    };
    return $low;
   };
   this.$binarySearchFor$toCompare$ = function ($el, $compare) {
    var self = this;
    "BOGUS";
    return self._$binarySearchFor$between$and$toCompare$($el, 1, self._$size(), $compare);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`List";
     this._$superInit$Collections$List = $.$superInit$Collections$List;
     this.$superInit$Collections$List = dnuCatcher("$superInit$Collections$List");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this._$collection$matchesElementsAt$ = $.$collection$matchesElementsAt$;
     this.$collection$matchesElementsAt$ = dnuCatcher("$collection$matchesElementsAt$");
     this.$findFirst$ = this._$findFirst$ = $.$findFirst$;
     this.$findLast$ = this._$findLast$ = $.$findLast$;
     this.$first = this._$first = $.$first;
     this.$hash = this._$hash = $.$hash;
     this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
     this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
     this._$indexOfSubCollection$startingAt$ = $.$indexOfSubCollection$startingAt$;
     this.$indexOfSubCollection$startingAt$ = dnuCatcher("$indexOfSubCollection$startingAt$");
     this._$indexOfSubCollection$startingAt$ifAbsent$ = $.$indexOfSubCollection$startingAt$ifAbsent$;
     this.$indexOfSubCollection$startingAt$ifAbsent$ = dnuCatcher("$indexOfSubCollection$startingAt$ifAbsent$");
     this._$indicesOfSubCollection$ = $.$indicesOfSubCollection$;
     this.$indicesOfSubCollection$ = dnuCatcher("$indicesOfSubCollection$");
     this._$indicesOfSubCollection$startingAt$ = $.$indicesOfSubCollection$startingAt$;
     this.$indicesOfSubCollection$startingAt$ = dnuCatcher("$indicesOfSubCollection$startingAt$");
     this.$last = this._$last = $.$last;
     this.$size = this._$size = $.$size;
     this.$species = this._$species = $.$species;
     this.$$comma = this._$$comma = $.$$comma;
     this.$allButFirst = this._$allButFirst = $.$allButFirst;
     this.$allButLast = this._$allButLast = $.$allButLast;
     this.$isKindOfList = this._$isKindOfList = $.$isKindOfList;
     this.$isSequenceable = this._$isSequenceable = $.$isSequenceable;
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$copyReplaceAll$with$ = this._$copyReplaceAll$with$ = $.$copyReplaceAll$with$;
     this._$copyReplaceFrom$to$with$ = $.$copyReplaceFrom$to$with$;
     this.$copyReplaceFrom$to$with$ = dnuCatcher("$copyReplaceFrom$to$with$");
     this.$copyWith$ = this._$copyWith$ = $.$copyWith$;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$copyWithout$ = this._$copyWithout$ = $.$copyWithout$;
     this.$reverse = this._$reverse = $.$reverse;
     this.$collect$ = this._$collect$ = $.$collect$;
     this.$do$ = this._$do$ = $.$do$;
     this.$doWithIndex$ = this._$doWithIndex$ = $.$doWithIndex$;
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this.$reverseDo$ = this._$reverseDo$ = $.$reverseDo$;
     this.$with$do$ = this._$with$do$ = $.$with$do$;
     this._$collectUsingAtPut$ = $.$collectUsingAtPut$;
     this.$collectUsingAtPut$ = dnuCatcher("$collectUsingAtPut$");
     this._$hashAt$ = $.$hashAt$;
     this.$hashAt$ = dnuCatcher("$hashAt$");
     this._$newForCollectUsingAtPut$ = $.$newForCollectUsingAtPut$;
     this.$newForCollectUsingAtPut$ = dnuCatcher("$newForCollectUsingAtPut$");
     this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = this._$newCopyOfSize$thatCanAlsoHoldElementsOf$ = $.$newCopyOfSize$thatCanAlsoHoldElementsOf$;
     this.$readStream = this._$readStream = $.$readStream;
     this.$hasSameElementsAndOrderAs$ = this._$hasSameElementsAndOrderAs$ = $.$hasSameElementsAndOrderAs$;
     this._$includesIndex$ = $.$includesIndex$;
     this.$includesIndex$ = dnuCatcher("$includesIndex$");
     this._$isSortedBy$ = $.$isSortedBy$;
     this.$isSortedBy$ = dnuCatcher("$isSortedBy$");
     this._$binarySearchFor$between$and$toCompare$ = $.$binarySearchFor$between$and$toCompare$;
     this.$binarySearchFor$between$and$toCompare$ = dnuCatcher("$binarySearchFor$between$and$toCompare$");
     this.$binarySearchFor$toCompare$ = this._$binarySearchFor$toCompare$ = $.$binarySearchFor$toCompare$;
     this.$enclosingObjects$Collections$List = enclosingObjects;
     this.$super$Collections$List$slot = runtimeSuperclass;
     this["Collections`List"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`List"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`List";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`List";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$List = enclosingObjects;
      this.$super$Collections$List = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$MutableArrayList = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`MutableArrayList";
   this.name = "Collections`MutableArrayList";
   this.header = 720;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`MutableArrayList", true, 721),
    new MM("instance`initializer", true, 722),
    new MM("add:", false, 723),
    new MM("add:after:", false, 724),
    new MM("add:afterIndex:", false, 725),
    new MM("add:before:", false, 726),
    new MM("add:beforeIndex:", false, 727),
    new MM("addAllFirst:", false, 728),
    new MM("addAllLast:", false, 729),
    new MM("addFirst:", false, 730),
    new MM("addLast:", false, 731),
    new MM("at:put:", false, 732),
    new MM("asMutableArrayList", false, 733),
    new MM("copyWithSize:", false, 734),
    new MM("collect:", false, 735),
    new MM("replaceFrom:to:with:startingAt:", false, 736),
    new MM("newCopyOfSize:thatCanAlsoHoldElementsOf:", false, 737)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$MutableArrayList = function () {
    var self = this;
    self.$super$Collections$MutableArrayList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Collections$MutableArrayList();
    return self;
   };
   this.$add$ = function ($e) {
    var self = this;
    return self._$addLast$($e);
   };
   this.$add$after$ = function ($el, $existing) {
    var self = this;
    var $index = nil;
    $index = self._$indexOf$($existing);
    if (!$index.$$equal(self._$size())) {
     $index = self._$makeSpace$beforeIndex$(1, ($index + self._$startGap()) + 1);
    } else {
     self._$needSpaceAtEnd$(1);
     $index = ($index + self._$startGap()) + 1;
    };
    return self._$contents().$at$put$($index, $el);
   };
   this.$add$afterIndex$ = function ($el, $i) {
    var self = this;
    return self._$add$beforeIndex$($el, $i + 1);
   };
   this.$add$before$ = function ($el, $existing) {
    var self = this;
    var $index = nil;
    $index = self._$indexOf$($existing);
    $index = self._$makeSpace$beforeIndex$(1, $index + self._$startGap());
    return self._$contents().$at$put$($index, $el);
   };
   this.$add$beforeIndex$ = function ($el, $i) {
    var self = this;
    var $index = nil;
    if (!$i.$$greater(self._$size())) {
     $index = self._$makeSpace$beforeIndex$(1, $i + self._$startGap());
    } else {
     self._$needSpaceAtEnd$(1);
     $index = $i + self._$startGap();
    };
    return self._$contents().$at$put$($index, $el);
   };
   this.$addAllFirst$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$addFirst$($el);
    });
    return $c;
   };
   this.$addAllLast$ = function ($c) {
    var self = this;
    $c.$do$(function ($el) {
     return self._$addLast$($el);
    });
    return $c;
   };
   this.$addFirst$ = function ($e) {
    var self = this;
    self._$needSpaceAtStart$(1);
    self._$contents().$at$put$(self._$startGap(), $e);
    self._$startGap$(self._$startGap() - 1);
    return $e;
   };
   this.$addLast$ = function ($e) {
    var self = this;
    self._$needSpaceAtEnd$(1);
    self._$lastIndex$(self._$lastIndex() + 1);
    self._$contents().$at$put$(self._$lastIndex(), $e);
    return $e;
   };
   this.$at$put$ = function ($i, $el) {
    var self = this;
    var $adjusted = nil;
    $adjusted = $i + self._$startGap();
    if (!((0 < $i) && $adjusted.$$less$equal(self._$lastIndex()))) {
     self._$error$("invalid index");
    } else {
     nil;
    };
    return self._$contents().$at$put$($adjusted, $el);
   };
   this.$asMutableArrayList = function () {
    var self = this;
    return self;
   };
   this.$copyWithSize$ = function ($s) {
    var self = this;
    var $oldLastIndex = nil;
    var $safeself = nil;
    var $copy = nil;
    $safeself = self;
    $oldLastIndex = self._$lastIndex();
    self._$lastIndex$($s + self._$startGap());
    $copy = $safeself.$copy();
    self._$lastIndex$($oldLastIndex);
    return $copy;
   };
   this.$collect$ = function ($map) {
    var self = this;
    return self._$collectUsingAdd$($map).$asMutableArrayList();
   };
   this.$replaceFrom$to$with$startingAt$ = function ($start, $stop, $other, $repStart) {
    var self = this;
    var $otheri = nil;
    if (!(($start >= 1) && $stop.$$less$equal(self._$size()))) {
     self._$error$("range out of bounds");
    } else {
     nil;
    };
    self._$contents().$replaceFrom$to$with$startingAt$($start + self._$startGap(), $stop + self._$startGap(), $other, $repStart);
    return self;
   };
   this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = function ($size, $other) {
    var self = this;
    return self.$enclosingObjects$Collections$MutableArrayList[0]._$MutableArrayList().$new$($size).$size$($size);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`MutableArrayList";
     this._$superInit$Collections$MutableArrayList = $.$superInit$Collections$MutableArrayList;
     this.$superInit$Collections$MutableArrayList = dnuCatcher("$superInit$Collections$MutableArrayList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$add$after$ = this._$add$after$ = $.$add$after$;
     this.$add$afterIndex$ = this._$add$afterIndex$ = $.$add$afterIndex$;
     this.$add$before$ = this._$add$before$ = $.$add$before$;
     this.$add$beforeIndex$ = this._$add$beforeIndex$ = $.$add$beforeIndex$;
     this.$addAllFirst$ = this._$addAllFirst$ = $.$addAllFirst$;
     this.$addAllLast$ = this._$addAllLast$ = $.$addAllLast$;
     this.$addFirst$ = this._$addFirst$ = $.$addFirst$;
     this.$addLast$ = this._$addLast$ = $.$addLast$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$asMutableArrayList = this._$asMutableArrayList = $.$asMutableArrayList;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$collect$ = this._$collect$ = $.$collect$;
     this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
     this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = this._$newCopyOfSize$thatCanAlsoHoldElementsOf$ = $.$newCopyOfSize$thatCanAlsoHoldElementsOf$;
     this.$enclosingObjects$Collections$MutableArrayList = enclosingObjects;
     this.$super$Collections$MutableArrayList$slot = runtimeSuperclass;
     this["Collections`MutableArrayList"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`MutableArrayList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`MutableArrayList";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("defaultCapacity", false, 738),
     new MM("new:", false, 739),
     new MM("with:", false, 740),
     new MM("withAll:", false, 741)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 5;
    };
    this.$new$ = function ($capacity) {
     var self = this;
     return self._$new().$initCapacity$($capacity);
    };
    this.$with$ = function ($val1) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`MutableArrayList";
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new$ = this._$new$ = $.$new$;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$MutableArrayList = enclosingObjects;
      this.$super$Collections$MutableArrayList = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$MutableHashedMap = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`MutableHashedMap";
   this.name = "Collections`MutableHashedMap";
   this.header = 742;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`MutableHashedMap", true, 743),
    new MM("instance`initializer", true, 744),
    new MM("keys", false, 745),
    new MM("values", false, 746),
    new MM("at:put:", false, 747),
    new MM("at:put:ifNew:", false, 748),
    new MM("at:ifAbsentPut:", false, 749),
    new MM("isDictionary", false, 750),
    new MM("associationAt:", false, 751),
    new MM("associationAt:ifAbsent:", false, 752),
    new MM("associations", false, 753),
    new MM("associationsDo:", false, 754),
    new MM("includesAssociation:", false, 755),
    new MM("at:ifPresent:ifAbsentPut:", false, 756),
    new MM("keysAndValuesDo:", false, 757),
    new MM("tableAt:put:inMatchingSlot:value:", false, 758),
    new MM("buildValForKey:element:", false, 759),
    new MM("elementFor:", false, 760),
    new MM("elementForCopy:", false, 761),
    new MM("hashFor:", false, 762),
    new MM("key:matches:", false, 763),
    new MM("keyFor:", false, 764),
    new MM("objToIncludeFor:withExisting:", false, 765),
    new MM("=", false, 766)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$MutableHashedMap = function ($cap) {
    var self = this;
    self.$super$Collections$MutableHashedMap$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    var self = this;
    self._$superInit$Collections$MutableHashedMap($cap);
    return self;
   };
   this.$keys = function () {
    var self = this;
    var $s = nil;
    $s = self.$enclosingObjects$Collections$MutableHashedMap[0]._$Set().$new$(self._$size());
    self._$keysDo$(function ($key) {
     return $s.$include$($key);
    });
    return $s;
   };
   this.$values = function () {
    var self = this;
    return self._$inject$into$(self.$enclosingObjects$Collections$MutableHashedMap[0]._$MutableArrayList().$new$(self._$size()), function ($oc, $el) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($el);
      return cascadeReceiver.$yourself();
     })($oc);
    });
   };
   this.$at$put$ = function ($key, $el) {
    var self = this;
    return self._$at$put$ifNew$($key, $el, function () {
     return nil;
    });
   };
   this.$at$put$ifNew$ = function ($key, $el, $blk) {
    var self = this;
    "BOGUS";
    self._$tableAt$put$ifNew$($key, $el, $blk);
    return $el;
   };
   this.$at$ifAbsentPut$ = function ($key, $ablk) {
    var self = this;
    return self._$at$ifPresent$ifAbsentPut$($key, function ($e) {
     return $e;
    }, $ablk);
   };
   this.$isDictionary = function () {
    var self = this;
    return true;
   };
   this.$associationAt$ = function ($key) {
    var self = this;
    return self._$associationAt$ifAbsent$($key, function () {
     return self._$error$("key not found");
    });
   };
   this.$associationAt$ifAbsent$ = function ($key, $failBlock) {
    var self = this;
    return self._$valAt$ifAbsent$($key, $failBlock);
   };
   this.$associations = function () {
    var self = this;
    var $oc = nil;
    $oc = self.$enclosingObjects$Collections$MutableHashedMap[0]._$MutableArrayList().$new$(self._$size());
    self._$associationsDo$(function ($assoc) {
     return $oc.$add$($assoc);
    });
    return $oc;
   };
   this.$associationsDo$ = function ($f) {
    var self = this;
    self._$contentsDo$(function ($assoc) {
     return $f.$value$($assoc);
    });
    return self;
   };
   this.$includesAssociation$ = function ($assoc) {
    var self = this;
    var NLR = new Object();
    try {
     return self._$at$ifAbsent$($assoc.$key(), function () {
      {
       NLR.value = false;
       throw NLR;
      };
     }).$$equal($assoc.$value());
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$at$ifPresent$ifAbsentPut$ = function ($key, $pblk, $ablk) {
    var self = this;
    var $reusableSlot = nil;
    "BOGUS";
    if (self._$table() === nil) {
     self._$createFirstTable();
    } else {
     nil;
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $assoc) {
     var $el = nil;
     $el = $assoc.$value();
     $pblk.$value$($el);
     return $el;
    }, function ($index) {
     var $newEl = nil;
     $newEl = $ablk.$value();
     if ($reusableSlot === nil) {
      self._$tableAt$put$inEmptySlot$($key, $newEl, $index);
     } else {
      self._$tableAt$put$inDeletedSlot$($key, $newEl, $reusableSlot);
     };
     return $newEl;
    }, function ($index) {
     return ($reusableSlot === nil).$ifTrue$(function () {
      return $reusableSlot = $index;
     });
    });
   };
   this.$keysAndValuesDo$ = function ($action) {
    var self = this;
    self._$contentsDo$(function ($assoc) {
     return $action.$value$value$($assoc.$key(), $assoc.$value());
    });
    return self;
   };
   this.$tableAt$put$inMatchingSlot$value$ = function ($key, $el, $index, $val) {
    var self = this;
    $val.$value$($el);
    return $val;
   };
   this.$buildValForKey$element$ = function ($k, $el) {
    var self = this;
    return self.$enclosingObjects$Collections$MutableHashedMap[0]._$Association().$key$value$($k, $el);
   };
   this.$elementFor$ = function ($assoc) {
    var self = this;
    return $assoc.$value();
   };
   this.$elementForCopy$ = function ($el) {
    var self = this;
    return $el.$copy();
   };
   this.$hashFor$ = function ($key) {
    var self = this;
    return $key.$hash();
   };
   this.$key$matches$ = function ($k, $another) {
    var self = this;
    return $k.$$equal($another);
   };
   this.$keyFor$ = function ($assoc) {
    var self = this;
    return $assoc.$key();
   };
   this.$objToIncludeFor$withExisting$ = function ($newAssoc, $assoc) {
    var self = this;
    $assoc.$value$($newAssoc.$value());
    return $assoc;
   };
   this.$$equal = function ($other) {
    var self = this;
    return self.$super$Collections$MutableHashedMap$slot._$$equal.call(self, $other) && ((self === $other) || self._$keys().$$equal($other.$keys()));
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`MutableHashedMap";
     this._$superInit$Collections$MutableHashedMap = $.$superInit$Collections$MutableHashedMap;
     this.$superInit$Collections$MutableHashedMap = dnuCatcher("$superInit$Collections$MutableHashedMap");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$keys = this._$keys = $.$keys;
     this.$values = this._$values = $.$values;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$at$put$ifNew$ = $.$at$put$ifNew$;
     this.$at$put$ifNew$ = dnuCatcher("$at$put$ifNew$");
     this.$at$ifAbsentPut$ = this._$at$ifAbsentPut$ = $.$at$ifAbsentPut$;
     this.$isDictionary = this._$isDictionary = $.$isDictionary;
     this._$associationAt$ = $.$associationAt$;
     this.$associationAt$ = dnuCatcher("$associationAt$");
     this._$associationAt$ifAbsent$ = $.$associationAt$ifAbsent$;
     this.$associationAt$ifAbsent$ = dnuCatcher("$associationAt$ifAbsent$");
     this._$associations = $.$associations;
     this.$associations = dnuCatcher("$associations");
     this._$associationsDo$ = $.$associationsDo$;
     this.$associationsDo$ = dnuCatcher("$associationsDo$");
     this.$includesAssociation$ = this._$includesAssociation$ = $.$includesAssociation$;
     this.$at$ifPresent$ifAbsentPut$ = this._$at$ifPresent$ifAbsentPut$ = $.$at$ifPresent$ifAbsentPut$;
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this._$tableAt$put$inMatchingSlot$value$ = $.$tableAt$put$inMatchingSlot$value$;
     this.$tableAt$put$inMatchingSlot$value$ = dnuCatcher("$tableAt$put$inMatchingSlot$value$");
     this._$buildValForKey$element$ = $.$buildValForKey$element$;
     this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
     this._$elementFor$ = $.$elementFor$;
     this.$elementFor$ = dnuCatcher("$elementFor$");
     this._$elementForCopy$ = $.$elementForCopy$;
     this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this._$keyFor$ = $.$keyFor$;
     this.$keyFor$ = dnuCatcher("$keyFor$");
     this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
     this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
     this.$$equal = this._$$equal = $.$$equal;
     this.$enclosingObjects$Collections$MutableHashedMap = enclosingObjects;
     this.$super$Collections$MutableHashedMap$slot = runtimeSuperclass;
     this["Collections`MutableHashedMap"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`MutableHashedMap"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`MutableHashedMap";
    this.slots = [];
    this.methods = [
     new MM("new:", true, 0),
     new MM("defaultCapacity", false, 767),
     new MM("new", false, 768),
     new MM("with:", false, 769),
     new MM("withAll:", false, 770)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cap);
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 0;
    };
    this.$new = function () {
     var self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$with$ = function ($val1) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$include$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$includeAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`MutableHashedMap";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$MutableHashedMap = enclosingObjects;
      this.$super$Collections$MutableHashedMap = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$MutableList = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`MutableList";
   this.name = "Collections`MutableList";
   this.header = 771;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`MutableList", true, 772),
    new MM("instance`initializer", true, 773),
    new MM("at:put:", false, 774),
    new MM("defaultMedianOf:and:and:", false, 775),
    new MM("medianOf:and:and:using:", false, 776),
    new MM("swap:with:", false, 777),
    new MM("replaceFrom:to:with:", false, 778),
    new MM("replaceFrom:to:with:startingAt:", false, 779),
    new MM("readWriteStream", false, 780),
    new MM("writeStream", false, 781),
    new MM("defaultSort:to:", false, 782),
    new MM("sort:to:using:", false, 783),
    new MM("sortUsing:", false, 784)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$MutableList = function () {
    var self = this;
    self.$super$Collections$MutableList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Collections$MutableList();
    return self;
   };
   this.$at$put$ = function ($index, $el) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$defaultMedianOf$and$and$ = function ($a, $b, $c) {
    var self = this;
    var $atA = nil;
    var $atB = nil;
    var $atC = nil;
    $atA = self._$at$($a);
    $atB = self._$at$($b);
    $atC = self._$at$($c);
    return $atB.$$less$equal($atA).$ifFalse$ifTrue$(function () {
     return $atC.$$less$equal($atB).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $atC.$$less$equal($atA).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    }, function () {
     return $atB.$$less$equal($atC).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $atA.$$less$equal($atC).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    });
   };
   this.$medianOf$and$and$using$ = function ($a, $b, $c, $compare) {
    var self = this;
    var $atA = nil;
    var $atB = nil;
    var $atC = nil;
    $atA = self._$at$($a);
    $atB = self._$at$($b);
    $atC = self._$at$($c);
    return $compare.$value$value$($atB, $atA).$ifFalse$ifTrue$(function () {
     return $compare.$value$value$($atC, $atB).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $compare.$value$value$($atC, $atA).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    }, function () {
     return $compare.$value$value$($atB, $atC).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $compare.$value$value$($atA, $atC).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    });
   };
   this.$swap$with$ = function ($i, $j) {
    var self = this;
    var $t = nil;
    $t = self._$at$($i);
    self._$at$put$($i, self._$at$($j));
    self._$at$put$($j, $t);
    return self;
   };
   this.$replaceFrom$to$with$ = function ($start, $stop, $other) {
    var self = this;
    return self._$replaceFrom$to$with$startingAt$($start, $stop, $other, 1);
   };
   this.$replaceFrom$to$with$startingAt$ = function ($start, $stop, $other, $repStart) {
    var self = this;
    var $otheri = nil;
    if (!$repStart.$$less($start)) {
     $otheri = $repStart;
     {
      var $$limit = nil;
      var $i = nil;
      nil;
      $i = $start;
      $$limit = $stop;
      for (; $$limit.$$greater$equal($i); ) {
       self._$at$put$($i, $other.$at$($otheri));
       $otheri = $otheri + 1;
       $i = (1).$$plus($i);
      };
     };
    } else {
     $otheri = $repStart + ($stop - $start);
     {
      var $$limit = nil;
      var $i = nil;
      nil;
      $i = $stop;
      $$limit = $start;
      for (; $$limit.$$less$equal($i); ) {
       self._$at$put$($i, $other.$at$($otheri));
       $otheri = $otheri - 1;
       $i = (-1).$$plus($i);
      };
     };
    };
    return self;
   };
   this.$readWriteStream = function () {
    var self = this;
    return $0.$ListReadWriteStream(self.$enclosingObjects$Collections$MutableList[0]).$on$(self);
   };
   this.$writeStream = function () {
    var self = this;
    return self._$readWriteStream();
   };
   this.$defaultSort$to$ = function ($l, $r) {
    var self = this;
    var $i = nil;
    var $j = nil;
    var $x = nil;
    var $m = nil;
    var $n = nil;
    $i = $l;
    $j = $r;
    $n = ($r - $l) + 1;
    if ($n === 0) {
     return self;
    } else {
     nil;
    };
    $m = ($l + $r).$$over$over(2);
    if ($n > 7) {
     var $pl = nil;
     var $pn = nil;
     var $s = nil;
     $pl = $l;
     $pn = $r;
     if ($n > 40) {
      $s = $n.$$over$over(8);
      $pl = self._$defaultMedianOf$and$and$($pl, $pl + $s, ($pl + $s) + $s);
      $m = self._$defaultMedianOf$and$and$($m - $s, $m, $m + $s);
      $pn = self._$defaultMedianOf$and$and$(($pn - $s) - $s, $pn - $s, $pn);
     } else {
      nil;
     };
     $m = self._$defaultMedianOf$and$and$($pl, $m, $pn);
    } else {
     nil;
    };
    $x = self._$at$($m);
    {
     nil;
     for (; $i.$$less$equal($j); ) {
      var $ati = nil;
      var $atj = nil;
      {
       nil;
       for (; !$x.$$less$equal($ati = self._$at$($i)); ) {
        $i = $i + 1;
       };
      };
      {
       nil;
       for (; !($atj = self._$at$($j)).$$less$equal($x); ) {
        $j = $j - 1;
       };
      };
      if ($i.$$less$equal($j)) {
       self._$at$put$($i, $atj);
       self._$at$put$($j, $ati);
       $i = $i + 1;
       $j = $j - 1;
      } else {
       nil;
      };
     };
    };
    if ($l.$$less($j)) {
     self._$defaultSort$to$($l, $j);
    } else {
     nil;
    };
    if ($i.$$less($r)) {
     self._$defaultSort$to$($i, $r);
    } else {
     nil;
    };
    return self;
   };
   this.$sort$to$using$ = function ($l, $r, $compare) {
    var self = this;
    var $i = nil;
    var $j = nil;
    var $x = nil;
    var $m = nil;
    var $n = nil;
    $i = $l;
    $j = $r;
    $n = ($r - $l) + 1;
    if ($n === 0) {
     return self;
    } else {
     nil;
    };
    $m = ($l + $r).$$over$over(2);
    if ($n > 7) {
     var $pl = nil;
     var $pn = nil;
     var $s = nil;
     $pl = $l;
     $pn = $r;
     if ($n > 40) {
      $s = $n.$$over$over(8);
      $pl = self._$medianOf$and$and$using$($pl, $pl + $s, ($pl + $s) + $s, $compare);
      $m = self._$medianOf$and$and$using$($m - $s, $m, $m + $s, $compare);
      $pn = self._$medianOf$and$and$using$(($pn - $s) - $s, $pn - $s, $pn, $compare);
     } else {
      nil;
     };
     $m = self._$medianOf$and$and$using$($pl, $m, $pn, $compare);
    } else {
     nil;
    };
    $x = self._$at$($m);
    {
     nil;
     for (; $i.$$less$equal($j); ) {
      var $ati = nil;
      var $atj = nil;
      {
       nil;
       for (; !$compare.$value$value$($x, $ati = self._$at$($i)); ) {
        $i = $i + 1;
       };
      };
      {
       nil;
       for (; !$compare.$value$value$($atj = self._$at$($j), $x); ) {
        $j = $j - 1;
       };
      };
      if ($i.$$less$equal($j)) {
       self._$at$put$($i, $atj);
       self._$at$put$($j, $ati);
       $i = $i + 1;
       $j = $j - 1;
      } else {
       nil;
      };
     };
    };
    if ($l.$$less($j)) {
     self._$sort$to$using$($l, $j, $compare);
    } else {
     nil;
    };
    if ($i.$$less($r)) {
     self._$sort$to$using$($i, $r, $compare);
    } else {
     nil;
    };
    return self;
   };
   this.$sortUsing$ = function ($compare) {
    var self = this;
    self._$sort$to$using$(1, self._$size(), $compare);
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`MutableList";
     this._$superInit$Collections$MutableList = $.$superInit$Collections$MutableList;
     this.$superInit$Collections$MutableList = dnuCatcher("$superInit$Collections$MutableList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$defaultMedianOf$and$and$ = $.$defaultMedianOf$and$and$;
     this.$defaultMedianOf$and$and$ = dnuCatcher("$defaultMedianOf$and$and$");
     this._$medianOf$and$and$using$ = $.$medianOf$and$and$using$;
     this.$medianOf$and$and$using$ = dnuCatcher("$medianOf$and$and$using$");
     this._$swap$with$ = $.$swap$with$;
     this.$swap$with$ = dnuCatcher("$swap$with$");
     this.$replaceFrom$to$with$ = this._$replaceFrom$to$with$ = $.$replaceFrom$to$with$;
     this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
     this._$readWriteStream = $.$readWriteStream;
     this.$readWriteStream = dnuCatcher("$readWriteStream");
     this._$writeStream = $.$writeStream;
     this.$writeStream = dnuCatcher("$writeStream");
     this._$defaultSort$to$ = $.$defaultSort$to$;
     this.$defaultSort$to$ = dnuCatcher("$defaultSort$to$");
     this._$sort$to$using$ = $.$sort$to$using$;
     this.$sort$to$using$ = dnuCatcher("$sort$to$using$");
     this.$sortUsing$ = this._$sortUsing$ = $.$sortUsing$;
     this.$enclosingObjects$Collections$MutableList = enclosingObjects;
     this.$super$Collections$MutableList$slot = runtimeSuperclass;
     this["Collections`MutableList"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`MutableList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`MutableList";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`MutableList";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$MutableList = enclosingObjects;
      this.$super$Collections$MutableList = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Set = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`Set";
   this.name = "Collections`Set";
   this.header = 785;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`Set", true, 786),
    new MM("instance`initializer", true, 787),
    new MM("isKindOfSet", false, 788),
    new MM("asSet", false, 789),
    new MM("buildValForKey:element:", false, 790),
    new MM("elementFor:", false, 791),
    new MM("elementForCopy:", false, 792),
    new MM("hashFor:", false, 793),
    new MM("key:matches:", false, 794),
    new MM("keyFor:", false, 795),
    new MM("objToIncludeFor:withExisting:", false, 796),
    new MM("hasSameElementsAs:", false, 797),
    new MM("includes:", false, 798)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Set = function ($cap) {
    var self = this;
    self.$super$Collections$Set$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    var self = this;
    self._$superInit$Collections$Set($cap);
    return self;
   };
   this.$isKindOfSet = function () {
    var self = this;
    return true;
   };
   this.$asSet = function () {
    var self = this;
    return self;
   };
   this.$buildValForKey$element$ = function ($key, $el) {
    var self = this;
    return $el;
   };
   this.$elementFor$ = function ($el) {
    var self = this;
    return $el;
   };
   this.$elementForCopy$ = function ($el) {
    var self = this;
    return $el;
   };
   this.$hashFor$ = function ($key) {
    var self = this;
    return $key.$hash();
   };
   this.$key$matches$ = function ($k, $another) {
    var self = this;
    return $k.$$equal($another);
   };
   this.$keyFor$ = function ($e) {
    var self = this;
    return $e;
   };
   this.$objToIncludeFor$withExisting$ = function ($new, $other) {
    var self = this;
    return $new;
   };
   this.$hasSameElementsAs$ = function ($other) {
    var self = this;
    var NLR = new Object();
    try {
     var $otherSet = nil;
     if (!self._$size().$$equal($other.$size())) {
      return false;
     } else {
      nil;
     };
     $otherSet = $other.$asSet();
     if (!self._$size().$$equal($otherSet.$size())) {
      return false;
     } else {
      nil;
     };
     self._$do$(function ($el) {
      return $otherSet.$includes$($el).$ifFalse$(function () {
       {
        NLR.value = false;
        throw NLR;
       };
      });
     });
     return true;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includes$ = function ($o) {
    var self = this;
    return self._$includesKey$($o);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Set";
     this._$superInit$Collections$Set = $.$superInit$Collections$Set;
     this.$superInit$Collections$Set = dnuCatcher("$superInit$Collections$Set");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfSet = this._$isKindOfSet = $.$isKindOfSet;
     this.$asSet = this._$asSet = $.$asSet;
     this._$buildValForKey$element$ = $.$buildValForKey$element$;
     this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
     this._$elementFor$ = $.$elementFor$;
     this.$elementFor$ = dnuCatcher("$elementFor$");
     this._$elementForCopy$ = $.$elementForCopy$;
     this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this._$keyFor$ = $.$keyFor$;
     this.$keyFor$ = dnuCatcher("$keyFor$");
     this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
     this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
     this.$hasSameElementsAs$ = this._$hasSameElementsAs$ = $.$hasSameElementsAs$;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$enclosingObjects$Collections$Set = enclosingObjects;
     this.$super$Collections$Set$slot = runtimeSuperclass;
     this["Collections`Set"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`Set"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`Set";
    this.slots = [];
    this.methods = [
     new MM("new:", true, 0),
     new MM("defaultCapacity", false, 799),
     new MM("new", false, 800),
     new MM("with:", false, 801),
     new MM("withAll:", false, 802)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cap);
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 0;
    };
    this.$new = function () {
     var self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$with$ = function ($val1) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$include$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$includeAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Set";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$Set = enclosingObjects;
      this.$super$Collections$Set = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$SortedList = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Collections`SortedList";
   this.name = "Collections`SortedList";
   this.header = 803;
   this.slots = [
    new SM("usesDefaultSortBlock_private", true, false),
    new SM("sortBlock_private", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`SortedList", true, 804),
    new MM("instance`initializer", true, 805),
    new MM("add:", false, 806),
    new MM("addAll:", false, 807),
    new MM("sortBlock", false, 808),
    new MM("sortBlock:", false, 809),
    new MM("usesDefaultSortBlock", false, 810),
    new MM("asSortedList", false, 811),
    new MM("initCapacity:", false, 812),
    new MM("indexFor:", false, 813),
    new MM("sort", false, 814),
    new MM("isSorted", false, 815),
    new MM("init`usesDefaultSortBlock_private:", true, 0),
    new MM("usesDefaultSortBlock_private", true, 0),
    new MM("usesDefaultSortBlock_private:", true, 0),
    new MM("init`sortBlock_private:", true, 0),
    new MM("sortBlock_private", true, 0),
    new MM("sortBlock_private:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$SortedList = function () {
    var self = this;
    self.$super$Collections$SortedList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Collections$SortedList();
    self._$initCapacity$(self._$class().$defaultCapacity());
    $1.$sortBlock_private$(self, self.$enclosingObjects$Collections$SortedList[0]._$SortedList().$defaultSortBlock());
    $1.$usesDefaultSortBlock_private$(self, true);
    return self;
   };
   this.$add$ = function ($el) {
    var self = this;
    var $index = nil;
    $index = self._$indexFor$($el);
    if (!$index.$$greater(self._$contents().$size())) {
     $index = self._$makeSpace$beforeIndex$(1, $index);
    } else {
     self._$needSpaceAtEnd$(1);
     self._$lastIndex$(self._$lastIndex() + 1);
    };
    return self._$contents().$at$put$($index, $el);
   };
   this.$addAll$ = function ($els) {
    var self = this;
    if ($els.$size().$$greater(self._$size().$$over$over(8))) {
     self._$needSpaceAtEnd$($els.$size());
     $els.$do$(function ($el) {
      self._$lastIndex$(self._$lastIndex() + 1);
      return self._$contents().$at$put$(self._$lastIndex(), $el);
     });
     self._$sort();
    } else {
     $els.$do$(function ($el) {
      return self._$add$($el);
     });
    };
    return $els;
   };
   this.$sortBlock = function () {
    var self = this;
    return $1.$sortBlock_private(self);
   };
   this.$sortBlock$ = function ($sortBy) {
    var self = this;
    $1.$sortBlock_private$(self, $sortBy);
    $1.$usesDefaultSortBlock_private$(self, false);
    if (!self._$isEmpty()) {
     self._$sort();
    } else {
     nil;
    };
    return self;
   };
   this.$usesDefaultSortBlock = function () {
    var self = this;
    return $1.$usesDefaultSortBlock_private(self);
   };
   this.$asSortedList = function () {
    var self = this;
    return self;
   };
   this.$initCapacity$ = function ($cap) {
    var self = this;
    self.$super$Collections$SortedList$slot._$initCapacity$.call(self, $cap);
    return self;
   };
   this.$indexFor$ = function ($el) {
    var self = this;
    return self._$contents().$binarySearchFor$between$and$toCompare$($el, self._$startGap() + 1, self._$lastIndex(), self._$sortBlock());
   };
   this.$sort = function () {
    var self = this;
    if (self._$usesDefaultSortBlock()) {
     self._$contents().$defaultSort$to$(self._$startGap() + 1, self._$lastIndex());
    } else {
     self._$contents().$sort$to$using$(self._$startGap() + 1, self._$lastIndex(), self._$sortBlock());
    };
    return self;
   };
   this.$isSorted = function () {
    var self = this;
    return self._$isSortedBy$(self._$sortBlock());
   };
   this.$init$usesDefaultSortBlock_private$ = function (self, v) {
    self.$usesDefaultSortBlock_private$slot = v;
    return self;
   };
   this.$usesDefaultSortBlock_private = function (self) {
    return self.$usesDefaultSortBlock_private$slot;
   };
   this.$usesDefaultSortBlock_private$ = function (self, v) {
    self.$usesDefaultSortBlock_private$slot = v;
    return self;
   };
   this.$init$sortBlock_private$ = function (self, v) {
    self.$sortBlock_private$slot = v;
    return self;
   };
   this.$sortBlock_private = function (self) {
    return self.$sortBlock_private$slot;
   };
   this.$sortBlock_private$ = function (self, v) {
    self.$sortBlock_private$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`SortedList";
     this._$superInit$Collections$SortedList = $.$superInit$Collections$SortedList;
     this.$superInit$Collections$SortedList = dnuCatcher("$superInit$Collections$SortedList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$sortBlock = this._$sortBlock = $.$sortBlock;
     this.$sortBlock$ = this._$sortBlock$ = $.$sortBlock$;
     this.$usesDefaultSortBlock = this._$usesDefaultSortBlock = $.$usesDefaultSortBlock;
     this.$asSortedList = this._$asSortedList = $.$asSortedList;
     this.$initCapacity$ = this._$initCapacity$ = $.$initCapacity$;
     this._$indexFor$ = $.$indexFor$;
     this.$indexFor$ = dnuCatcher("$indexFor$");
     this.$sort = this._$sort = $.$sort;
     this.$isSorted = this._$isSorted = $.$isSorted;
     this.$enclosingObjects$Collections$SortedList = enclosingObjects;
     this.$super$Collections$SortedList$slot = runtimeSuperclass;
     this["Collections`SortedList"] = function () {
      superBasicNew.call(this);
      this.$usesDefaultSortBlock_private$slot = nil;
      this.$sortBlock_private$slot = nil;
     };
     this.basicNew = this["Collections`SortedList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Collections`SortedList";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("defaultCapacity", false, 816),
     new MM("defaultSortBlock", false, 817),
     new MM("new:", false, 818),
     new MM("new:sortBlock:", false, 819),
     new MM("sortBlock:", false, 820),
     new MM("with:", false, 821),
     new MM("withAll:", false, 822)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$defaultCapacity = function () {
     var self = this;
     return 5;
    };
    this.$defaultSortBlock = function () {
     var self = this;
     return function ($el1, $el2) {
      return $el1.$$less$equal($el2);
     };
    };
    this.$new$ = function ($capacity) {
     var self = this;
     return self._$new().$initCapacity$($capacity);
    };
    this.$new$sortBlock$ = function ($capacity, $sort) {
     var self = this;
     return self._$new$($capacity).$sortBlock$($sort);
    };
    this.$sortBlock$ = function ($sort) {
     var self = this;
     return self._$new$sortBlock$(self._$defaultCapacity(), $sort);
    };
    this.$with$ = function ($val1) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`SortedList";
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$defaultSortBlock = this._$defaultSortBlock = $.$defaultSortBlock;
      this.$new$ = this._$new$ = $.$new$;
      this.$new$sortBlock$ = this._$new$sortBlock$ = $.$new$sortBlock$;
      this.$sortBlock$ = this._$sortBlock$ = $.$sortBlock$;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$SortedList = enclosingObjects;
      this.$super$Collections$SortedList = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$AddableList.enclosingMixin = this;
  this.$Collections$Association.enclosingMixin = this;
  this.$Collections$Bag.enclosingMixin = this;
  this.$Collections$Collection.enclosingMixin = this;
  this.$Collections$HashedCollection.enclosingMixin = this;
  this.$Collections$IdentityMutableHashedMap.enclosingMixin = this;
  this.$Collections$IdentitySet.enclosingMixin = this;
  this.$Collections$Interval.enclosingMixin = this;
  this.$Collections$List.enclosingMixin = this;
  this.$Collections$MutableArrayList.enclosingMixin = this;
  this.$Collections$MutableHashedMap.enclosingMixin = this;
  this.$Collections$MutableList.enclosingMixin = this;
  this.$Collections$Set.enclosingMixin = this;
  this.$Collections$SortedList.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Collections";
    this._$superInit$Collections = $.$superInit$Collections;
    this.$superInit$Collections = dnuCatcher("$superInit$Collections");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$AddableList = $.$AddableList;
    this.$AddableList = dnuCatcher("$AddableList");
    this.$Association = this._$Association = $.$Association;
    this.$Bag = this._$Bag = $.$Bag;
    this.$Collection = this._$Collection = $.$Collection;
    this._$HashedCollection = $.$HashedCollection;
    this.$HashedCollection = dnuCatcher("$HashedCollection");
    this._$IdentityMutableHashedMap = $.$IdentityMutableHashedMap;
    this.$IdentityMutableHashedMap = dnuCatcher("$IdentityMutableHashedMap");
    this.$IdentitySet = this._$IdentitySet = $.$IdentitySet;
    this.$Interval = this._$Interval = $.$Interval;
    this._$List = $.$List;
    this.$List = dnuCatcher("$List");
    this.$MutableArrayList = this._$MutableArrayList = $.$MutableArrayList;
    this._$MutableHashedMap = $.$MutableHashedMap;
    this.$MutableHashedMap = dnuCatcher("$MutableHashedMap");
    this._$MutableList = $.$MutableList;
    this.$MutableList = dnuCatcher("$MutableList");
    this.$Set = this._$Set = $.$Set;
    this.$SortedList = this._$SortedList = $.$SortedList;
    this.$init$OrderedCollection$ = this._$init$OrderedCollection$ = $.$init$OrderedCollection$;
    this.$OrderedCollection = this._$OrderedCollection = $.$OrderedCollection;
    this.$init$Dictionary$ = this._$init$Dictionary$ = $.$init$Dictionary$;
    this.$Dictionary = this._$Dictionary = $.$Dictionary;
    this.$init$IdentityDictionary$ = this._$init$IdentityDictionary$ = $.$init$IdentityDictionary$;
    this.$IdentityDictionary = this._$IdentityDictionary = $.$IdentityDictionary;
    this.$init$SortedCollection$ = this._$init$SortedCollection$ = $.$init$SortedCollection$;
    this.$SortedCollection = this._$SortedCollection = $.$SortedCollection;
    this.$init$WeakArray$ = this._$init$WeakArray$ = $.$init$WeakArray$;
    this.$WeakArray = this._$WeakArray = $.$WeakArray;
    this.$init$Collections$AddableList$ = this._$init$Collections$AddableList$ = $.$init$Collections$AddableList$;
    this.$Collections$AddableList = this._$Collections$AddableList = $.$Collections$AddableList;
    this.$Collections$AddableList$ = this._$Collections$AddableList$ = $.$Collections$AddableList$;
    this.$init$Collections$Association$ = this._$init$Collections$Association$ = $.$init$Collections$Association$;
    this.$Collections$Association = this._$Collections$Association = $.$Collections$Association;
    this.$Collections$Association$ = this._$Collections$Association$ = $.$Collections$Association$;
    this.$init$Collections$Bag$ = this._$init$Collections$Bag$ = $.$init$Collections$Bag$;
    this.$Collections$Bag = this._$Collections$Bag = $.$Collections$Bag;
    this.$Collections$Bag$ = this._$Collections$Bag$ = $.$Collections$Bag$;
    this.$init$Collections$Collection$ = this._$init$Collections$Collection$ = $.$init$Collections$Collection$;
    this.$Collections$Collection = this._$Collections$Collection = $.$Collections$Collection;
    this.$Collections$Collection$ = this._$Collections$Collection$ = $.$Collections$Collection$;
    this.$init$Collections$HashedCollection$ = this._$init$Collections$HashedCollection$ = $.$init$Collections$HashedCollection$;
    this.$Collections$HashedCollection = this._$Collections$HashedCollection = $.$Collections$HashedCollection;
    this.$Collections$HashedCollection$ = this._$Collections$HashedCollection$ = $.$Collections$HashedCollection$;
    this.$init$Collections$IdentityMutableHashedMap$ = this._$init$Collections$IdentityMutableHashedMap$ = $.$init$Collections$IdentityMutableHashedMap$;
    this.$Collections$IdentityMutableHashedMap = this._$Collections$IdentityMutableHashedMap = $.$Collections$IdentityMutableHashedMap;
    this.$Collections$IdentityMutableHashedMap$ = this._$Collections$IdentityMutableHashedMap$ = $.$Collections$IdentityMutableHashedMap$;
    this.$init$Collections$IdentitySet$ = this._$init$Collections$IdentitySet$ = $.$init$Collections$IdentitySet$;
    this.$Collections$IdentitySet = this._$Collections$IdentitySet = $.$Collections$IdentitySet;
    this.$Collections$IdentitySet$ = this._$Collections$IdentitySet$ = $.$Collections$IdentitySet$;
    this.$init$Collections$Interval$ = this._$init$Collections$Interval$ = $.$init$Collections$Interval$;
    this.$Collections$Interval = this._$Collections$Interval = $.$Collections$Interval;
    this.$Collections$Interval$ = this._$Collections$Interval$ = $.$Collections$Interval$;
    this.$init$Collections$List$ = this._$init$Collections$List$ = $.$init$Collections$List$;
    this.$Collections$List = this._$Collections$List = $.$Collections$List;
    this.$Collections$List$ = this._$Collections$List$ = $.$Collections$List$;
    this.$init$Collections$MutableArrayList$ = this._$init$Collections$MutableArrayList$ = $.$init$Collections$MutableArrayList$;
    this.$Collections$MutableArrayList = this._$Collections$MutableArrayList = $.$Collections$MutableArrayList;
    this.$Collections$MutableArrayList$ = this._$Collections$MutableArrayList$ = $.$Collections$MutableArrayList$;
    this.$init$Collections$MutableHashedMap$ = this._$init$Collections$MutableHashedMap$ = $.$init$Collections$MutableHashedMap$;
    this.$Collections$MutableHashedMap = this._$Collections$MutableHashedMap = $.$Collections$MutableHashedMap;
    this.$Collections$MutableHashedMap$ = this._$Collections$MutableHashedMap$ = $.$Collections$MutableHashedMap$;
    this.$init$Collections$MutableList$ = this._$init$Collections$MutableList$ = $.$init$Collections$MutableList$;
    this.$Collections$MutableList = this._$Collections$MutableList = $.$Collections$MutableList;
    this.$Collections$MutableList$ = this._$Collections$MutableList$ = $.$Collections$MutableList$;
    this.$init$Collections$Set$ = this._$init$Collections$Set$ = $.$init$Collections$Set$;
    this.$Collections$Set = this._$Collections$Set = $.$Collections$Set;
    this.$Collections$Set$ = this._$Collections$Set$ = $.$Collections$Set$;
    this.$init$Collections$SortedList$ = this._$init$Collections$SortedList$ = $.$init$Collections$SortedList$;
    this.$Collections$SortedList = this._$Collections$SortedList = $.$Collections$SortedList;
    this.$Collections$SortedList$ = this._$Collections$SortedList$ = $.$Collections$SortedList$;
    this.$enclosingObjects$Collections = enclosingObjects;
    this.$super$Collections$slot = runtimeSuperclass;
    this.Collections = function () {
     superBasicNew.call(this);
     this.$MutableAddableList$slot = nil;
     this.$OrderedCollection$slot = nil;
     this.$Dictionary$slot = nil;
     this.$IdentityDictionary$slot = nil;
     this.$SortedCollection$slot = nil;
     this.$ListReadStream$slot = nil;
     this.$ListReadWriteStream$slot = nil;
     this.$WeakArray$slot = nil;
     this.$Collections$AddableList$slot = nil;
     this.$Collections$Association$slot = nil;
     this.$Collections$Bag$slot = nil;
     this.$Collections$Collection$slot = nil;
     this.$Collections$HashedCollection$slot = nil;
     this.$Collections$IdentityMutableHashedMap$slot = nil;
     this.$Collections$IdentitySet$slot = nil;
     this.$Collections$Interval$slot = nil;
     this.$Collections$List$slot = nil;
     this.$Collections$MutableArrayList$slot = nil;
     this.$Collections$MutableHashedMap$slot = nil;
     this.$Collections$MutableList$slot = nil;
     this.$Collections$Set$slot = nil;
     this.$Collections$SortedList$slot = nil;
    };
    this.basicNew = this.Collections;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for Collections";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Collections";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$Collections = enclosingObjects;
     this.$super$Collections = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$GraphicsForHTML5 = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for GraphicsForHTML5";
  this.name = "GraphicsForHTML5";
  this.header = 823;
  this.slots = [
   new SM("document", false, false),
   new SM("body", false, false),
   new SM("GraphicsForHTML5`Canvas", true, true),
   new SM("GraphicsForHTML5`Color", true, true),
   new SM("GraphicsForHTML5`Context", true, true),
   new SM("GraphicsForHTML5`Point", true, true),
   new SM("GraphicsForHTML5`Rectangle", true, true)
  ];
  this.methods = [
   new MM("superInit`GraphicsForHTML5", true, 824),
   new MM("instance`initializer", true, 825),
   new MM("openTestCanvas:", false, 826),
   new MM("Canvas", true, 0),
   new MM("Color", true, 0),
   new MM("Context", true, 0),
   new MM("Point", true, 0),
   new MM("Rectangle", true, 0),
   new MM("init`document:", true, 0),
   new MM("document", true, 0),
   new MM("init`body:", true, 0),
   new MM("body", true, 0),
   new MM("init`GraphicsForHTML5`Canvas:", true, 0),
   new MM("GraphicsForHTML5`Canvas", true, 0),
   new MM("GraphicsForHTML5`Canvas:", true, 0),
   new MM("init`GraphicsForHTML5`Color:", true, 0),
   new MM("GraphicsForHTML5`Color", true, 0),
   new MM("GraphicsForHTML5`Color:", true, 0),
   new MM("init`GraphicsForHTML5`Context:", true, 0),
   new MM("GraphicsForHTML5`Context", true, 0),
   new MM("GraphicsForHTML5`Context:", true, 0),
   new MM("init`GraphicsForHTML5`Point:", true, 0),
   new MM("GraphicsForHTML5`Point", true, 0),
   new MM("GraphicsForHTML5`Point:", true, 0),
   new MM("init`GraphicsForHTML5`Rectangle:", true, 0),
   new MM("GraphicsForHTML5`Rectangle", true, 0),
   new MM("GraphicsForHTML5`Rectangle:", true, 0)
  ];
  this.nestedClasses = [
   "GraphicsForHTML5`Canvas",
   "GraphicsForHTML5`Color",
   "GraphicsForHTML5`Context",
   "GraphicsForHTML5`Point",
   "GraphicsForHTML5`Rectangle"
  ];
  this.applications = [];
  this.$superInit$GraphicsForHTML5 = function ($p) {
   var self = this;
   self.$super$GraphicsForHTML5$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   var self = this;
   self._$superInit$GraphicsForHTML5($p);
   self._$init$document$($p.$aliens().$global().$at$("document"));
   self._$init$body$(self._$document().$at$("body"));
   return self;
  };
  this.$openTestCanvas$ = function ($extent) {
   var self = this;
   var $div = nil;
   var $canvas = nil;
   $canvas = self._$Canvas().$width$height$($extent.$x(), $extent.$y());
   $div = self._$document().$createElement$("div");
   (function (cascadeReceiver) {
    cascadeReceiver.$at$put$("borderStyle", "solid");
    cascadeReceiver.$at$put$("borderWidth", "20px");
    cascadeReceiver.$at$put$("borderRadius", "25px");
    cascadeReceiver.$at$put$("borderColor", "black");
    return cascadeReceiver.$at$put$("padding", "10px");
   })($div.$at$("style"));
   $div.$appendChild$($canvas.$alien());
   self._$body().$appendChild$($div);
   return $canvas;
  };
  this.$Canvas = function () {
   if (nil === this.$GraphicsForHTML5$Canvas$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    var mixin = $.$GraphicsForHTML5$Canvas;
    this.$GraphicsForHTML5$Canvas$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Canvas$slot;
  };
  this.$Color = function () {
   if (nil === this.$GraphicsForHTML5$Color$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    var mixin = $.$GraphicsForHTML5$Color;
    this.$GraphicsForHTML5$Color$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Color$slot;
  };
  this.$Context = function () {
   if (nil === this.$GraphicsForHTML5$Context$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    var mixin = $.$GraphicsForHTML5$Context;
    this.$GraphicsForHTML5$Context$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Context$slot;
  };
  this.$Point = function () {
   if (nil === this.$GraphicsForHTML5$Point$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    var mixin = $.$GraphicsForHTML5$Point;
    this.$GraphicsForHTML5$Point$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Point$slot;
  };
  this.$Rectangle = function () {
   if (nil === this.$GraphicsForHTML5$Rectangle$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    var mixin = $.$GraphicsForHTML5$Rectangle;
    this.$GraphicsForHTML5$Rectangle$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Rectangle$slot;
  };
  this.$init$document$ = function (v) {
   this.$document$slot = v;
   return this;
  };
  this.$document = function () {
   return this.$document$slot;
  };
  this.$init$body$ = function (v) {
   this.$body$slot = v;
   return this;
  };
  this.$body = function () {
   return this.$body$slot;
  };
  this.$init$GraphicsForHTML5$Canvas$ = function (v) {
   this.$GraphicsForHTML5$Canvas$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Canvas = function () {
   return this.$GraphicsForHTML5$Canvas$slot;
  };
  this.$GraphicsForHTML5$Canvas$ = function (v) {
   this.$GraphicsForHTML5$Canvas$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Color$ = function (v) {
   this.$GraphicsForHTML5$Color$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Color = function () {
   return this.$GraphicsForHTML5$Color$slot;
  };
  this.$GraphicsForHTML5$Color$ = function (v) {
   this.$GraphicsForHTML5$Color$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Context$ = function (v) {
   this.$GraphicsForHTML5$Context$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Context = function () {
   return this.$GraphicsForHTML5$Context$slot;
  };
  this.$GraphicsForHTML5$Context$ = function (v) {
   this.$GraphicsForHTML5$Context$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Point$ = function (v) {
   this.$GraphicsForHTML5$Point$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Point = function () {
   return this.$GraphicsForHTML5$Point$slot;
  };
  this.$GraphicsForHTML5$Point$ = function (v) {
   this.$GraphicsForHTML5$Point$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Rectangle$ = function (v) {
   this.$GraphicsForHTML5$Rectangle$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Rectangle = function () {
   return this.$GraphicsForHTML5$Rectangle$slot;
  };
  this.$GraphicsForHTML5$Rectangle$ = function (v) {
   this.$GraphicsForHTML5$Rectangle$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Canvas = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Canvas";
   this.name = "GraphicsForHTML5`Canvas";
   this.header = 827;
   this.slots = [new SM("alien", true, false)];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Canvas", true, 828),
    new MM("instance`initializer", true, 829),
    new MM("appendToBody", false, 830),
    new MM("context", false, 831),
    new MM("keyDownAction:", false, 832),
    new MM("mouseDownAction:", false, 833),
    new MM("mouseMovedAction:", false, 834),
    new MM("init`alien:", true, 0),
    new MM("alien", true, 0),
    new MM("alien:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Canvas = function ($w, $h) {
    var self = this;
    self.$super$GraphicsForHTML5$Canvas$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($w, $h) {
    var self = this;
    self._$superInit$GraphicsForHTML5$Canvas($w, $h);
    $1.$init$alien$(self, self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$document().$createElement$("canvas"));
    $1.$alien(self).$at$put$("width", $w);
    $1.$alien(self).$at$put$("height", $h);
    $1.$alien(self).$at$("style").$at$put$("position", "relative");
    return self;
   };
   this.$appendToBody = function () {
    var self = this;
    self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$body().$appendChild$($1.$alien(self));
    return self;
   };
   this.$context = function () {
    var self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Context().$on$($1.$alien(self).$getContext$("2d"));
   };
   this.$keyDownAction$ = function ($onKeyPressed) {
    var self = this;
    self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$body().$addEventListener$with$("keydown", function ($e) {
     return $onKeyPressed.$value$(self._$String().$fromCharCode$($e.$at$("keyCode")));
    });
    return self;
   };
   this.$mouseDownAction$ = function ($onMouseDown) {
    var self = this;
    $1.$alien(self).$addEventListener$with$("mousedown", function ($e) {
     return $onMouseDown.$value$(self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Point().$x$y$($e.$at$("offsetX"), $e.$at$("offsetY")));
    });
    return self;
   };
   this.$mouseMovedAction$ = function ($onMouseMoved) {
    var self = this;
    $1.$alien(self).$addEventListener$with$("mousemove", function ($e) {
     return $onMouseMoved.$value$(self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Point().$x$y$($e.$at$("offsetX"), $e.$at$("offsetY")));
    });
    return self;
   };
   this.$init$alien$ = function (self, v) {
    self.$alien$slot = v;
    return self;
   };
   this.$alien = function (self) {
    return self.$alien$slot;
   };
   this.$alien$ = function (self, v) {
    self.$alien$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Canvas";
     this._$superInit$GraphicsForHTML5$Canvas = $.$superInit$GraphicsForHTML5$Canvas;
     this.$superInit$GraphicsForHTML5$Canvas = dnuCatcher("$superInit$GraphicsForHTML5$Canvas");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$appendToBody = $.$appendToBody;
     this.$appendToBody = dnuCatcher("$appendToBody");
     this._$context = $.$context;
     this.$context = dnuCatcher("$context");
     this._$keyDownAction$ = $.$keyDownAction$;
     this.$keyDownAction$ = dnuCatcher("$keyDownAction$");
     this._$mouseDownAction$ = $.$mouseDownAction$;
     this.$mouseDownAction$ = dnuCatcher("$mouseDownAction$");
     this.$mouseMovedAction$ = this._$mouseMovedAction$ = $.$mouseMovedAction$;
     this.$enclosingObjects$GraphicsForHTML5$Canvas = enclosingObjects;
     this.$super$GraphicsForHTML5$Canvas$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Canvas"] = function () {
      superBasicNew.call(this);
      this.$alien$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Canvas"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Canvas";
    this.slots = [];
    this.methods = [new MM("width:height:", true, 0)];
    this.nestedClasses = [];
    this.$width$height$ = function ($w, $h) {
     return (new this.nonMeta.basicNew()).$instance$initializer($w, $h);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Canvas";
      this.$width$height$ = this._$width$height$ = $.$width$height$;
      this.$enclosingObjects$GraphicsForHTML5$Canvas = enclosingObjects;
      this.$super$GraphicsForHTML5$Canvas = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Color = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Color";
   this.name = "GraphicsForHTML5`Color";
   this.header = 835;
   this.slots = [
    new SM("red", false, false),
    new SM("green", false, false),
    new SM("blue", false, false),
    new SM("alpha", false, false)
   ];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Color", true, 836),
    new MM("instance`initializer", true, 837),
    new MM("applyToStyle:", false, 838),
    new MM("asCSSString", false, 839),
    new MM("init`red:", true, 0),
    new MM("red", true, 0),
    new MM("init`green:", true, 0),
    new MM("green", true, 0),
    new MM("init`blue:", true, 0),
    new MM("blue", true, 0),
    new MM("init`alpha:", true, 0),
    new MM("alpha", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Color = function ($r, $g, $b, $a) {
    var self = this;
    self.$super$GraphicsForHTML5$Color$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r, $g, $b, $a) {
    var self = this;
    self._$superInit$GraphicsForHTML5$Color($r, $g, $b, $a);
    self._$init$red$($r);
    self._$init$green$($g);
    self._$init$blue$($b);
    self._$init$alpha$($a);
    return self;
   };
   this.$applyToStyle$ = function ($style) {
    var self = this;
    $style.$setProperty$to$("background-color", self._$asCSSString());
    return self;
   };
   this.$asCSSString = function () {
    var self = this;
    return "rgba(".$$comma(self._$red().$printString()).$$comma(",").$$comma(self._$green().$printString()).$$comma(",").$$comma(self._$blue().$printString()).$$comma(",").$$comma(self._$alpha().$printString()).$$comma(")");
   };
   this.$init$red$ = function (v) {
    this.$red$slot = v;
    return this;
   };
   this.$red = function () {
    return this.$red$slot;
   };
   this.$init$green$ = function (v) {
    this.$green$slot = v;
    return this;
   };
   this.$green = function () {
    return this.$green$slot;
   };
   this.$init$blue$ = function (v) {
    this.$blue$slot = v;
    return this;
   };
   this.$blue = function () {
    return this.$blue$slot;
   };
   this.$init$alpha$ = function (v) {
    this.$alpha$slot = v;
    return this;
   };
   this.$alpha = function () {
    return this.$alpha$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Color";
     this._$superInit$GraphicsForHTML5$Color = $.$superInit$GraphicsForHTML5$Color;
     this.$superInit$GraphicsForHTML5$Color = dnuCatcher("$superInit$GraphicsForHTML5$Color");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyToStyle$ = this._$applyToStyle$ = $.$applyToStyle$;
     this.$asCSSString = this._$asCSSString = $.$asCSSString;
     this.$init$red$ = this._$init$red$ = $.$init$red$;
     this.$red = this._$red = $.$red;
     this.$init$green$ = this._$init$green$ = $.$init$green$;
     this.$green = this._$green = $.$green;
     this.$init$blue$ = this._$init$blue$ = $.$init$blue$;
     this.$blue = this._$blue = $.$blue;
     this.$init$alpha$ = this._$init$alpha$ = $.$init$alpha$;
     this.$alpha = this._$alpha = $.$alpha;
     this.$enclosingObjects$GraphicsForHTML5$Color = enclosingObjects;
     this.$super$GraphicsForHTML5$Color$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Color"] = function () {
      superBasicNew.call(this);
      this.$red$slot = nil;
      this.$green$slot = nil;
      this.$blue$slot = nil;
      this.$alpha$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Color"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Color";
    this.slots = [];
    this.methods = [
     new MM("scaledR:g:b:a:", true, 0),
     new MM("black", false, 840),
     new MM("gray:", false, 841),
     new MM("h:s:v:", false, 842),
     new MM("r:g:b:", false, 843),
     new MM("r:g:b:a:", false, 844),
     new MM("white", false, 845)
    ];
    this.nestedClasses = [];
    this.$scaledR$g$b$a$ = function ($r, $g, $b, $a) {
     return (new this.nonMeta.basicNew()).$instance$initializer($r, $g, $b, $a);
    };
    this.$black = function () {
     var self = this;
     return self._$scaledR$g$b$a$(0, 0, 0, 255);
    };
    this.$gray$ = function ($brightness) {
     var self = this;
     return self._$r$g$b$($brightness, $brightness, $brightness);
    };
    this.$h$s$v$ = function ($hue, $saturation, $brightness) {
     var self = this;
     var $s = nil;
     var $v = nil;
     var $hf = nil;
     var $i = nil;
     var $f = nil;
     var $p = nil;
     var $q = nil;
     var $t = nil;
     $s = $saturation.$asFloat().$max$(0).$min$(1);
     $v = $brightness.$asFloat().$max$(0).$min$(1);
     if ($s.$$equal(0)) {
      return self._$r$g$b$($v, $v, $v);
     } else {
      nil;
     };
     $hf = $hue.$asFloat();
     if (($hf < 0) || ($hf >= 360)) {
      $hf = $hf.$$back$back(360);
     } else {
      nil;
     };
     $hf = $hf / 60;
     $i = $hf.$asInteger();
     $f = $hf - $i;
     $p = (1 - $s) * $v;
     $q = (1 - ($s * $f)) * $v;
     $t = (1 - ($s * (1 - $f))) * $v;
     if ((0).$$equal($i)) {
      return self._$r$g$b$($v, $t, $p);
     } else {
      nil;
     };
     if ((1).$$equal($i)) {
      return self._$r$g$b$($q, $v, $p);
     } else {
      nil;
     };
     if ((2).$$equal($i)) {
      return self._$r$g$b$($p, $v, $t);
     } else {
      nil;
     };
     if ((3).$$equal($i)) {
      return self._$r$g$b$($p, $q, $v);
     } else {
      nil;
     };
     if ((4).$$equal($i)) {
      return self._$r$g$b$($t, $p, $v);
     } else {
      nil;
     };
     if ((5).$$equal($i)) {
      return self._$r$g$b$($v, $p, $q);
     } else {
      nil;
     };
     self._$Error().$signal$("implementation error");
     return self;
    };
    this.$r$g$b$ = function ($r, $g, $b) {
     var self = this;
     return self._$scaledR$g$b$a$(($r * 255).$floor(), ($g * 255).$floor(), ($b * 255).$floor(), 255);
    };
    this.$r$g$b$a$ = function ($r, $g, $b, $a) {
     var self = this;
     return self._$scaledR$g$b$a$(($r * 255).$floor(), ($g * 255).$floor(), ($b * 255).$floor(), $a);
    };
    this.$white = function () {
     var self = this;
     return self._$scaledR$g$b$a$(255, 255, 255, 255);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Color";
      this.$scaledR$g$b$a$ = this._$scaledR$g$b$a$ = $.$scaledR$g$b$a$;
      this.$black = this._$black = $.$black;
      this.$gray$ = this._$gray$ = $.$gray$;
      this.$h$s$v$ = this._$h$s$v$ = $.$h$s$v$;
      this.$r$g$b$ = this._$r$g$b$ = $.$r$g$b$;
      this.$r$g$b$a$ = this._$r$g$b$a$ = $.$r$g$b$a$;
      this.$white = this._$white = $.$white;
      this.$enclosingObjects$GraphicsForHTML5$Color = enclosingObjects;
      this.$super$GraphicsForHTML5$Color = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Context = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Context";
   this.name = "GraphicsForHTML5`Context";
   this.header = 846;
   this.slots = [new SM("alien", false, false)];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Context", true, 847),
    new MM("instance`initializer", true, 848),
    new MM("arcAt:radius:from:to:", false, 849),
    new MM("beginPath", false, 850),
    new MM("fill", false, 851),
    new MM("fillStyle:", false, 852),
    new MM("fillText:at:", false, 853),
    new MM("lineTo:", false, 854),
    new MM("moveTo:", false, 855),
    new MM("rectangle:", false, 856),
    new MM("stroke", false, 857),
    new MM("strokeStyle:", false, 858),
    new MM("init`alien:", true, 0),
    new MM("alien", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Context = function ($a) {
    var self = this;
    self.$super$GraphicsForHTML5$Context$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($a) {
    var self = this;
    self._$superInit$GraphicsForHTML5$Context($a);
    self._$init$alien$($a);
    return self;
   };
   this.$arcAt$radius$from$to$ = function ($center, $radius, $startAngle, $stopAngle) {
    var self = this;
    self._$alien().$arc$with$with$with$with$($center.$x(), $center.$y(), $radius, $startAngle, $stopAngle);
    return self;
   };
   this.$beginPath = function () {
    var self = this;
    self._$alien().$beginPath();
    return self;
   };
   this.$fill = function () {
    var self = this;
    self._$alien().$fill();
    return self;
   };
   this.$fillStyle$ = function ($c) {
    var self = this;
    self._$alien().$at$put$("fillStyle", $c.$asCSSString());
    return self;
   };
   this.$fillText$at$ = function ($string, $p) {
    var self = this;
    self._$alien().$fillText$with$with$($string, $p.$x(), $p.$y());
    return self;
   };
   this.$lineTo$ = function ($p) {
    var self = this;
    self._$alien().$lineTo$with$($p.$x(), $p.$y());
    return self;
   };
   this.$moveTo$ = function ($p) {
    var self = this;
    self._$alien().$moveTo$with$($p.$x(), $p.$y());
    return self;
   };
   this.$rectangle$ = function ($r) {
    var self = this;
    self._$alien().$rect$with$with$with$($r.$origin().$x(), $r.$origin().$y(), $r.$extent().$x(), $r.$extent().$y());
    return self;
   };
   this.$stroke = function () {
    var self = this;
    self._$alien().$stroke();
    return self;
   };
   this.$strokeStyle$ = function ($c) {
    var self = this;
    self._$alien().$at$put$("strokeStyle", $c.$asCSSString());
    return self;
   };
   this.$init$alien$ = function (v) {
    this.$alien$slot = v;
    return this;
   };
   this.$alien = function () {
    return this.$alien$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Context";
     this._$superInit$GraphicsForHTML5$Context = $.$superInit$GraphicsForHTML5$Context;
     this.$superInit$GraphicsForHTML5$Context = dnuCatcher("$superInit$GraphicsForHTML5$Context");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$arcAt$radius$from$to$ = this._$arcAt$radius$from$to$ = $.$arcAt$radius$from$to$;
     this.$beginPath = this._$beginPath = $.$beginPath;
     this.$fill = this._$fill = $.$fill;
     this.$fillStyle$ = this._$fillStyle$ = $.$fillStyle$;
     this.$fillText$at$ = this._$fillText$at$ = $.$fillText$at$;
     this.$lineTo$ = this._$lineTo$ = $.$lineTo$;
     this.$moveTo$ = this._$moveTo$ = $.$moveTo$;
     this.$rectangle$ = this._$rectangle$ = $.$rectangle$;
     this.$stroke = this._$stroke = $.$stroke;
     this.$strokeStyle$ = this._$strokeStyle$ = $.$strokeStyle$;
     this._$init$alien$ = $.$init$alien$;
     this.$init$alien$ = dnuCatcher("$init$alien$");
     this._$alien = $.$alien;
     this.$alien = dnuCatcher("$alien");
     this.$enclosingObjects$GraphicsForHTML5$Context = enclosingObjects;
     this.$super$GraphicsForHTML5$Context$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Context"] = function () {
      superBasicNew.call(this);
      this.$alien$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Context"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Context";
    this.slots = [];
    this.methods = [new MM("on:", true, 0)];
    this.nestedClasses = [];
    this.$on$ = function ($a) {
     return (new this.nonMeta.basicNew()).$instance$initializer($a);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Context";
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$GraphicsForHTML5$Context = enclosingObjects;
      this.$super$GraphicsForHTML5$Context = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Point = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Point";
   this.name = "GraphicsForHTML5`Point";
   this.header = 859;
   this.slots = [
    new SM("x", false, false),
    new SM("y", false, false)
   ];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Point", true, 860),
    new MM("instance`initializer", true, 861),
    new MM("=", false, 862),
    new MM("corner:", false, 863),
    new MM("extent:", false, 864),
    new MM("hash", false, 865),
    new MM("isPoint", false, 866),
    new MM("printString", false, 867),
    new MM("r", false, 868),
    new MM("theta", false, 869),
    new MM("init`x:", true, 0),
    new MM("x", true, 0),
    new MM("init`y:", true, 0),
    new MM("y", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Point = function ($xCoord, $yCoord) {
    var self = this;
    self.$super$GraphicsForHTML5$Point$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($xCoord, $yCoord) {
    var self = this;
    self._$superInit$GraphicsForHTML5$Point($xCoord, $yCoord);
    self._$init$x$($xCoord);
    self._$init$y$($yCoord);
    return self;
   };
   this.$$equal = function ($other) {
    var self = this;
    return $other.$isPoint() && (self._$x().$$equal($other.$x()) && self._$y().$$equal($other.$y()));
   };
   this.$corner$ = function ($corner) {
    var self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Point[0]._$Rectangle().$origin$corner$(self, $corner);
   };
   this.$extent$ = function ($extent) {
    var self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Point[0]._$Rectangle().$origin$extent$(self, $extent);
   };
   this.$hash = function () {
    var self = this;
    return self._$x().$hash().$bitXor$(self._$y().$hash());
   };
   this.$isPoint = function () {
    var self = this;
    return true;
   };
   this.$printString = function () {
    var self = this;
    return self._$x().$printString().$$comma(" @ ").$$comma(self._$y().$printString());
   };
   this.$r = function () {
    var self = this;
    return ((self._$x() * self._$x()) + (self._$y() * self._$y())).$sqrt();
   };
   this.$theta = function () {
    var self = this;
    self._$Error().$signal$("Unimplemented");
    return self;
   };
   this.$init$x$ = function (v) {
    this.$x$slot = v;
    return this;
   };
   this.$x = function () {
    return this.$x$slot;
   };
   this.$init$y$ = function (v) {
    this.$y$slot = v;
    return this;
   };
   this.$y = function () {
    return this.$y$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Point";
     this._$superInit$GraphicsForHTML5$Point = $.$superInit$GraphicsForHTML5$Point;
     this.$superInit$GraphicsForHTML5$Point = dnuCatcher("$superInit$GraphicsForHTML5$Point");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$corner$ = this._$corner$ = $.$corner$;
     this.$extent$ = this._$extent$ = $.$extent$;
     this.$hash = this._$hash = $.$hash;
     this.$isPoint = this._$isPoint = $.$isPoint;
     this.$printString = this._$printString = $.$printString;
     this.$r = this._$r = $.$r;
     this.$theta = this._$theta = $.$theta;
     this.$init$x$ = this._$init$x$ = $.$init$x$;
     this.$x = this._$x = $.$x;
     this.$init$y$ = this._$init$y$ = $.$init$y$;
     this.$y = this._$y = $.$y;
     this.$enclosingObjects$GraphicsForHTML5$Point = enclosingObjects;
     this.$super$GraphicsForHTML5$Point$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Point"] = function () {
      superBasicNew.call(this);
      this.$x$slot = nil;
      this.$y$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Point"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Point";
    this.slots = [];
    this.methods = [
     new MM("x:y:", true, 0),
     new MM("r:theta:", false, 870),
     new MM("zero", false, 871)
    ];
    this.nestedClasses = [];
    this.$x$y$ = function ($xCoord, $yCoord) {
     return (new this.nonMeta.basicNew()).$instance$initializer($xCoord, $yCoord);
    };
    this.$r$theta$ = function ($r, $theta) {
     var self = this;
     return self._$x$y$($r * $theta.$cos(), $r * $theta.$sin());
    };
    this.$zero = function () {
     var self = this;
     return self._$x$y$(0, 0);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Point";
      this.$x$y$ = this._$x$y$ = $.$x$y$;
      this.$r$theta$ = this._$r$theta$ = $.$r$theta$;
      this.$zero = this._$zero = $.$zero;
      this.$enclosingObjects$GraphicsForHTML5$Point = enclosingObjects;
      this.$super$GraphicsForHTML5$Point = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Rectangle = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Rectangle";
   this.name = "GraphicsForHTML5`Rectangle";
   this.header = 872;
   this.slots = [
    new SM("origin", false, false),
    new SM("corner", false, false)
   ];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Rectangle", true, 873),
    new MM("instance`initializer", true, 874),
    new MM("=", false, 875),
    new MM("center", false, 876),
    new MM("containsPoint:", false, 877),
    new MM("extent", false, 878),
    new MM("hash", false, 879),
    new MM("insetBy:", false, 880),
    new MM("isRectangle", false, 881),
    new MM("printString", false, 882),
    new MM("init`origin:", true, 0),
    new MM("origin", true, 0),
    new MM("init`corner:", true, 0),
    new MM("corner", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Rectangle = function ($o, $c) {
    var self = this;
    self.$super$GraphicsForHTML5$Rectangle$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o, $c) {
    var self = this;
    self._$superInit$GraphicsForHTML5$Rectangle($o, $c);
    self._$init$origin$($o);
    self._$init$corner$($c);
    return self;
   };
   this.$$equal = function ($other) {
    var self = this;
    return $other.$isRectangle() && (self._$origin().$$equal($other.$origin()) && self._$corner().$$equal($other.$corner()));
   };
   this.$center = function () {
    var self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$origin().$x() + ((self._$corner().$x() - self._$origin().$x()) / 2), self._$origin().$y() + ((self._$corner().$y() - self._$origin().$y()) / 2));
   };
   this.$containsPoint$ = function ($p) {
    var self = this;
    return ((self._$origin().$x().$$less$equal($p.$x()) && self._$origin().$y().$$less$equal($p.$y())) && self._$corner().$x().$$greater$equal($p.$x())) && self._$corner().$y().$$greater$equal($p.$y());
   };
   this.$extent = function () {
    var self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$corner().$x() - self._$origin().$x(), self._$corner().$y() - self._$origin().$y());
   };
   this.$hash = function () {
    var self = this;
    return self._$origin().$hash().$bitXor$(self._$corner().$hash());
   };
   this.$insetBy$ = function ($delta) {
    var self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Rectangle().$origin$corner$(self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$origin().$x() + $delta.$x(), self._$origin().$y() + $delta.$y()), self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$corner().$x() - $delta.$x(), self._$corner().$y() - $delta.$y()));
   };
   this.$isRectangle = function () {
    var self = this;
    return true;
   };
   this.$printString = function () {
    var self = this;
    return "Rectangle origin: ".$$comma(self._$origin().$printString()).$$comma(" corner: ").$$comma(self._$corner().$printString());
   };
   this.$init$origin$ = function (v) {
    this.$origin$slot = v;
    return this;
   };
   this.$origin = function () {
    return this.$origin$slot;
   };
   this.$init$corner$ = function (v) {
    this.$corner$slot = v;
    return this;
   };
   this.$corner = function () {
    return this.$corner$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Rectangle";
     this._$superInit$GraphicsForHTML5$Rectangle = $.$superInit$GraphicsForHTML5$Rectangle;
     this.$superInit$GraphicsForHTML5$Rectangle = dnuCatcher("$superInit$GraphicsForHTML5$Rectangle");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$center = this._$center = $.$center;
     this.$containsPoint$ = this._$containsPoint$ = $.$containsPoint$;
     this.$extent = this._$extent = $.$extent;
     this.$hash = this._$hash = $.$hash;
     this.$insetBy$ = this._$insetBy$ = $.$insetBy$;
     this.$isRectangle = this._$isRectangle = $.$isRectangle;
     this.$printString = this._$printString = $.$printString;
     this.$init$origin$ = this._$init$origin$ = $.$init$origin$;
     this.$origin = this._$origin = $.$origin;
     this.$init$corner$ = this._$init$corner$ = $.$init$corner$;
     this.$corner = this._$corner = $.$corner;
     this.$enclosingObjects$GraphicsForHTML5$Rectangle = enclosingObjects;
     this.$super$GraphicsForHTML5$Rectangle$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Rectangle"] = function () {
      superBasicNew.call(this);
      this.$origin$slot = nil;
      this.$corner$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Rectangle"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Rectangle";
    this.slots = [];
    this.methods = [
     new MM("origin:corner:", true, 0),
     new MM("origin:extent:", false, 883)
    ];
    this.nestedClasses = [];
    this.$origin$corner$ = function ($o, $c) {
     return (new this.nonMeta.basicNew()).$instance$initializer($o, $c);
    };
    this.$origin$extent$ = function ($o, $e) {
     var self = this;
     return self._$origin$corner$($o, self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$($o.$x() + $e.$x(), $o.$y() + $e.$y()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Rectangle";
      this.$origin$corner$ = this._$origin$corner$ = $.$origin$corner$;
      this.$origin$extent$ = this._$origin$extent$ = $.$origin$extent$;
      this.$enclosingObjects$GraphicsForHTML5$Rectangle = enclosingObjects;
      this.$super$GraphicsForHTML5$Rectangle = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Canvas.enclosingMixin = this;
  this.$GraphicsForHTML5$Color.enclosingMixin = this;
  this.$GraphicsForHTML5$Context.enclosingMixin = this;
  this.$GraphicsForHTML5$Point.enclosingMixin = this;
  this.$GraphicsForHTML5$Rectangle.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for GraphicsForHTML5";
    this._$superInit$GraphicsForHTML5 = $.$superInit$GraphicsForHTML5;
    this.$superInit$GraphicsForHTML5 = dnuCatcher("$superInit$GraphicsForHTML5");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$openTestCanvas$ = $.$openTestCanvas$;
    this.$openTestCanvas$ = dnuCatcher("$openTestCanvas$");
    this._$Canvas = $.$Canvas;
    this.$Canvas = dnuCatcher("$Canvas");
    this.$Color = this._$Color = $.$Color;
    this.$Context = this._$Context = $.$Context;
    this.$Point = this._$Point = $.$Point;
    this._$Rectangle = $.$Rectangle;
    this.$Rectangle = dnuCatcher("$Rectangle");
    this._$init$document$ = $.$init$document$;
    this.$init$document$ = dnuCatcher("$init$document$");
    this._$document = $.$document;
    this.$document = dnuCatcher("$document");
    this._$init$body$ = $.$init$body$;
    this.$init$body$ = dnuCatcher("$init$body$");
    this._$body = $.$body;
    this.$body = dnuCatcher("$body");
    this.$init$GraphicsForHTML5$Canvas$ = this._$init$GraphicsForHTML5$Canvas$ = $.$init$GraphicsForHTML5$Canvas$;
    this.$GraphicsForHTML5$Canvas = this._$GraphicsForHTML5$Canvas = $.$GraphicsForHTML5$Canvas;
    this.$GraphicsForHTML5$Canvas$ = this._$GraphicsForHTML5$Canvas$ = $.$GraphicsForHTML5$Canvas$;
    this.$init$GraphicsForHTML5$Color$ = this._$init$GraphicsForHTML5$Color$ = $.$init$GraphicsForHTML5$Color$;
    this.$GraphicsForHTML5$Color = this._$GraphicsForHTML5$Color = $.$GraphicsForHTML5$Color;
    this.$GraphicsForHTML5$Color$ = this._$GraphicsForHTML5$Color$ = $.$GraphicsForHTML5$Color$;
    this.$init$GraphicsForHTML5$Context$ = this._$init$GraphicsForHTML5$Context$ = $.$init$GraphicsForHTML5$Context$;
    this.$GraphicsForHTML5$Context = this._$GraphicsForHTML5$Context = $.$GraphicsForHTML5$Context;
    this.$GraphicsForHTML5$Context$ = this._$GraphicsForHTML5$Context$ = $.$GraphicsForHTML5$Context$;
    this.$init$GraphicsForHTML5$Point$ = this._$init$GraphicsForHTML5$Point$ = $.$init$GraphicsForHTML5$Point$;
    this.$GraphicsForHTML5$Point = this._$GraphicsForHTML5$Point = $.$GraphicsForHTML5$Point;
    this.$GraphicsForHTML5$Point$ = this._$GraphicsForHTML5$Point$ = $.$GraphicsForHTML5$Point$;
    this.$init$GraphicsForHTML5$Rectangle$ = this._$init$GraphicsForHTML5$Rectangle$ = $.$init$GraphicsForHTML5$Rectangle$;
    this.$GraphicsForHTML5$Rectangle = this._$GraphicsForHTML5$Rectangle = $.$GraphicsForHTML5$Rectangle;
    this.$GraphicsForHTML5$Rectangle$ = this._$GraphicsForHTML5$Rectangle$ = $.$GraphicsForHTML5$Rectangle$;
    this.$enclosingObjects$GraphicsForHTML5 = enclosingObjects;
    this.$super$GraphicsForHTML5$slot = runtimeSuperclass;
    this.GraphicsForHTML5 = function () {
     superBasicNew.call(this);
     this.$document$slot = nil;
     this.$body$slot = nil;
     this.$GraphicsForHTML5$Canvas$slot = nil;
     this.$GraphicsForHTML5$Color$slot = nil;
     this.$GraphicsForHTML5$Context$slot = nil;
     this.$GraphicsForHTML5$Point$slot = nil;
     this.$GraphicsForHTML5$Rectangle$slot = nil;
    };
    this.basicNew = this.GraphicsForHTML5;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for GraphicsForHTML5";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for GraphicsForHTML5";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$GraphicsForHTML5 = enclosingObjects;
     this.$super$GraphicsForHTML5 = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$HopscotchForHTML5 = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for HopscotchForHTML5";
  this.name = "HopscotchForHTML5";
  this.header = 884;
  this.slots = [
   new SM("Color", false, false),
   new SM("Context", false, false),
   new SM("Timer", false, false),
   new SM("List", false, false),
   new SM("Map", false, false),
   new SM("window", false, false),
   new SM("document", false, false),
   new SM("body", false, false),
   new SM("history", false, false),
   new SM("sharedNavigationHistory", true, false),
   new SM("embeddedWindowMap", false, false),
   new SM("sharedBackButtonListener", true, false),
   new SM("currentHopscotchWindow", true, false),
   new SM("accept16px", false, false),
   new SM("cancel16px", false, false),
   new SM("disclosureClosedImage", false, false),
   new SM("disclosureTransitionImage", false, false),
   new SM("disclosureOpenImage", false, false),
   new SM("deferredContentQueue", false, false),
   new SM("core", false, false),
   new SM("fragments", false, false),
   new SM("HopscotchForHTML5`BlankFragment", true, true),
   new SM("HopscotchForHTML5`ButtonFragment", true, true),
   new SM("HopscotchForHTML5`CanvasFragment", true, true),
   new SM("HopscotchForHTML5`ColumnComposer", true, true),
   new SM("HopscotchForHTML5`Composer", true, true),
   new SM("HopscotchForHTML5`DeferredContentComposer", true, true),
   new SM("HopscotchForHTML5`EmbeddedHopscotchWindow", true, true),
   new SM("HopscotchForHTML5`Fragment", true, true),
   new SM("HopscotchForHTML5`Gradient", true, true),
   new SM("HopscotchForHTML5`HolderComposer", true, true),
   new SM("HopscotchForHTML5`HopscotchShell", true, true),
   new SM("HopscotchForHTML5`HopscotchWindow", true, true),
   new SM("HopscotchForHTML5`HyperlinkFragment", true, true),
   new SM("HopscotchForHTML5`HyperlinkImageFragment", true, true),
   new SM("HopscotchForHTML5`LeafFragment", true, true),
   new SM("HopscotchForHTML5`LocalNavigationHistory", true, true),
   new SM("HopscotchForHTML5`NavigationHistory", true, true),
   new SM("HopscotchForHTML5`PaddedFrameComposer", true, true),
   new SM("HopscotchForHTML5`Presenter", true, true),
   new SM("HopscotchForHTML5`RowComposer", true, true),
   new SM("HopscotchForHTML5`SequenceComposer", true, true),
   new SM("HopscotchForHTML5`StaticImageFragment", true, true),
   new SM("HopscotchForHTML5`StaticLabelFragment", true, true),
   new SM("HopscotchForHTML5`Subject", true, true),
   new SM("HopscotchForHTML5`TextDisplayFragment", true, true),
   new SM("HopscotchForHTML5`TextEditorFragment", true, true),
   new SM("HopscotchForHTML5`ToggleComposer", true, true)
  ];
  this.methods = [
   new MM("superInit`HopscotchForHTML5", true, 885),
   new MM("instance`initializer", true, 886),
   new MM("deferAction:", false, 887),
   new MM("nextDeferredAction", false, 888),
   new MM("nextFrameDo:", false, 889),
   new MM("sharedNavigator", false, 890),
   new MM("BlankFragment", true, 0),
   new MM("ButtonFragment", true, 0),
   new MM("CanvasFragment", true, 0),
   new MM("ColumnComposer", true, 0),
   new MM("Composer", true, 0),
   new MM("DeferredContentComposer", true, 0),
   new MM("EmbeddedHopscotchWindow", true, 0),
   new MM("Fragment", true, 0),
   new MM("Gradient", true, 0),
   new MM("HolderComposer", true, 0),
   new MM("HopscotchShell", true, 0),
   new MM("HopscotchWindow", true, 0),
   new MM("HyperlinkFragment", true, 0),
   new MM("HyperlinkImageFragment", true, 0),
   new MM("LeafFragment", true, 0),
   new MM("LocalNavigationHistory", true, 0),
   new MM("NavigationHistory", true, 0),
   new MM("PaddedFrameComposer", true, 0),
   new MM("Presenter", true, 0),
   new MM("RowComposer", true, 0),
   new MM("SequenceComposer", true, 0),
   new MM("StaticImageFragment", true, 0),
   new MM("StaticLabelFragment", true, 0),
   new MM("Subject", true, 0),
   new MM("TextDisplayFragment", true, 0),
   new MM("TextEditorFragment", true, 0),
   new MM("ToggleComposer", true, 0),
   new MM("init`Color:", true, 0),
   new MM("Color", true, 0),
   new MM("init`Context:", true, 0),
   new MM("Context", true, 0),
   new MM("init`Timer:", true, 0),
   new MM("Timer", true, 0),
   new MM("init`List:", true, 0),
   new MM("List", true, 0),
   new MM("init`Map:", true, 0),
   new MM("Map", true, 0),
   new MM("init`window:", true, 0),
   new MM("window", true, 0),
   new MM("init`document:", true, 0),
   new MM("document", true, 0),
   new MM("init`body:", true, 0),
   new MM("body", true, 0),
   new MM("init`history:", true, 0),
   new MM("history", true, 0),
   new MM("init`sharedNavigationHistory:", true, 0),
   new MM("sharedNavigationHistory", true, 0),
   new MM("sharedNavigationHistory:", true, 0),
   new MM("init`embeddedWindowMap:", true, 0),
   new MM("embeddedWindowMap", true, 0),
   new MM("init`sharedBackButtonListener:", true, 0),
   new MM("sharedBackButtonListener", true, 0),
   new MM("sharedBackButtonListener:", true, 0),
   new MM("init`currentHopscotchWindow:", true, 0),
   new MM("currentHopscotchWindow", true, 0),
   new MM("currentHopscotchWindow:", true, 0),
   new MM("init`accept16px:", true, 0),
   new MM("accept16px", true, 0),
   new MM("init`cancel16px:", true, 0),
   new MM("cancel16px", true, 0),
   new MM("init`disclosureClosedImage:", true, 0),
   new MM("disclosureClosedImage", true, 0),
   new MM("init`disclosureTransitionImage:", true, 0),
   new MM("disclosureTransitionImage", true, 0),
   new MM("init`disclosureOpenImage:", true, 0),
   new MM("disclosureOpenImage", true, 0),
   new MM("init`deferredContentQueue:", true, 0),
   new MM("deferredContentQueue", true, 0),
   new MM("init`core:", true, 0),
   new MM("core", true, 0),
   new MM("init`fragments:", true, 0),
   new MM("fragments", true, 0),
   new MM("init`HopscotchForHTML5`BlankFragment:", true, 0),
   new MM("HopscotchForHTML5`BlankFragment", true, 0),
   new MM("HopscotchForHTML5`BlankFragment:", true, 0),
   new MM("init`HopscotchForHTML5`ButtonFragment:", true, 0),
   new MM("HopscotchForHTML5`ButtonFragment", true, 0),
   new MM("HopscotchForHTML5`ButtonFragment:", true, 0),
   new MM("init`HopscotchForHTML5`CanvasFragment:", true, 0),
   new MM("HopscotchForHTML5`CanvasFragment", true, 0),
   new MM("HopscotchForHTML5`CanvasFragment:", true, 0),
   new MM("init`HopscotchForHTML5`ColumnComposer:", true, 0),
   new MM("HopscotchForHTML5`ColumnComposer", true, 0),
   new MM("HopscotchForHTML5`ColumnComposer:", true, 0),
   new MM("init`HopscotchForHTML5`Composer:", true, 0),
   new MM("HopscotchForHTML5`Composer", true, 0),
   new MM("HopscotchForHTML5`Composer:", true, 0),
   new MM("init`HopscotchForHTML5`DeferredContentComposer:", true, 0),
   new MM("HopscotchForHTML5`DeferredContentComposer", true, 0),
   new MM("HopscotchForHTML5`DeferredContentComposer:", true, 0),
   new MM("init`HopscotchForHTML5`EmbeddedHopscotchWindow:", true, 0),
   new MM("HopscotchForHTML5`EmbeddedHopscotchWindow", true, 0),
   new MM("HopscotchForHTML5`EmbeddedHopscotchWindow:", true, 0),
   new MM("init`HopscotchForHTML5`Fragment:", true, 0),
   new MM("HopscotchForHTML5`Fragment", true, 0),
   new MM("HopscotchForHTML5`Fragment:", true, 0),
   new MM("init`HopscotchForHTML5`Gradient:", true, 0),
   new MM("HopscotchForHTML5`Gradient", true, 0),
   new MM("HopscotchForHTML5`Gradient:", true, 0),
   new MM("init`HopscotchForHTML5`HolderComposer:", true, 0),
   new MM("HopscotchForHTML5`HolderComposer", true, 0),
   new MM("HopscotchForHTML5`HolderComposer:", true, 0),
   new MM("init`HopscotchForHTML5`HopscotchShell:", true, 0),
   new MM("HopscotchForHTML5`HopscotchShell", true, 0),
   new MM("HopscotchForHTML5`HopscotchShell:", true, 0),
   new MM("init`HopscotchForHTML5`HopscotchWindow:", true, 0),
   new MM("HopscotchForHTML5`HopscotchWindow", true, 0),
   new MM("HopscotchForHTML5`HopscotchWindow:", true, 0),
   new MM("init`HopscotchForHTML5`HyperlinkFragment:", true, 0),
   new MM("HopscotchForHTML5`HyperlinkFragment", true, 0),
   new MM("HopscotchForHTML5`HyperlinkFragment:", true, 0),
   new MM("init`HopscotchForHTML5`HyperlinkImageFragment:", true, 0),
   new MM("HopscotchForHTML5`HyperlinkImageFragment", true, 0),
   new MM("HopscotchForHTML5`HyperlinkImageFragment:", true, 0),
   new MM("init`HopscotchForHTML5`LeafFragment:", true, 0),
   new MM("HopscotchForHTML5`LeafFragment", true, 0),
   new MM("HopscotchForHTML5`LeafFragment:", true, 0),
   new MM("init`HopscotchForHTML5`LocalNavigationHistory:", true, 0),
   new MM("HopscotchForHTML5`LocalNavigationHistory", true, 0),
   new MM("HopscotchForHTML5`LocalNavigationHistory:", true, 0),
   new MM("init`HopscotchForHTML5`NavigationHistory:", true, 0),
   new MM("HopscotchForHTML5`NavigationHistory", true, 0),
   new MM("HopscotchForHTML5`NavigationHistory:", true, 0),
   new MM("init`HopscotchForHTML5`PaddedFrameComposer:", true, 0),
   new MM("HopscotchForHTML5`PaddedFrameComposer", true, 0),
   new MM("HopscotchForHTML5`PaddedFrameComposer:", true, 0),
   new MM("init`HopscotchForHTML5`Presenter:", true, 0),
   new MM("HopscotchForHTML5`Presenter", true, 0),
   new MM("HopscotchForHTML5`Presenter:", true, 0),
   new MM("init`HopscotchForHTML5`RowComposer:", true, 0),
   new MM("HopscotchForHTML5`RowComposer", true, 0),
   new MM("HopscotchForHTML5`RowComposer:", true, 0),
   new MM("init`HopscotchForHTML5`SequenceComposer:", true, 0),
   new MM("HopscotchForHTML5`SequenceComposer", true, 0),
   new MM("HopscotchForHTML5`SequenceComposer:", true, 0),
   new MM("init`HopscotchForHTML5`StaticImageFragment:", true, 0),
   new MM("HopscotchForHTML5`StaticImageFragment", true, 0),
   new MM("HopscotchForHTML5`StaticImageFragment:", true, 0),
   new MM("init`HopscotchForHTML5`StaticLabelFragment:", true, 0),
   new MM("HopscotchForHTML5`StaticLabelFragment", true, 0),
   new MM("HopscotchForHTML5`StaticLabelFragment:", true, 0),
   new MM("init`HopscotchForHTML5`Subject:", true, 0),
   new MM("HopscotchForHTML5`Subject", true, 0),
   new MM("HopscotchForHTML5`Subject:", true, 0),
   new MM("init`HopscotchForHTML5`TextDisplayFragment:", true, 0),
   new MM("HopscotchForHTML5`TextDisplayFragment", true, 0),
   new MM("HopscotchForHTML5`TextDisplayFragment:", true, 0),
   new MM("init`HopscotchForHTML5`TextEditorFragment:", true, 0),
   new MM("HopscotchForHTML5`TextEditorFragment", true, 0),
   new MM("HopscotchForHTML5`TextEditorFragment:", true, 0),
   new MM("init`HopscotchForHTML5`ToggleComposer:", true, 0),
   new MM("HopscotchForHTML5`ToggleComposer", true, 0),
   new MM("HopscotchForHTML5`ToggleComposer:", true, 0)
  ];
  this.nestedClasses = [
   "HopscotchForHTML5`BlankFragment",
   "HopscotchForHTML5`ButtonFragment",
   "HopscotchForHTML5`CanvasFragment",
   "HopscotchForHTML5`ColumnComposer",
   "HopscotchForHTML5`Composer",
   "HopscotchForHTML5`DeferredContentComposer",
   "HopscotchForHTML5`EmbeddedHopscotchWindow",
   "HopscotchForHTML5`Fragment",
   "HopscotchForHTML5`Gradient",
   "HopscotchForHTML5`HolderComposer",
   "HopscotchForHTML5`HopscotchShell",
   "HopscotchForHTML5`HopscotchWindow",
   "HopscotchForHTML5`HyperlinkFragment",
   "HopscotchForHTML5`HyperlinkImageFragment",
   "HopscotchForHTML5`LeafFragment",
   "HopscotchForHTML5`LocalNavigationHistory",
   "HopscotchForHTML5`NavigationHistory",
   "HopscotchForHTML5`PaddedFrameComposer",
   "HopscotchForHTML5`Presenter",
   "HopscotchForHTML5`RowComposer",
   "HopscotchForHTML5`SequenceComposer",
   "HopscotchForHTML5`StaticImageFragment",
   "HopscotchForHTML5`StaticLabelFragment",
   "HopscotchForHTML5`Subject",
   "HopscotchForHTML5`TextDisplayFragment",
   "HopscotchForHTML5`TextEditorFragment",
   "HopscotchForHTML5`ToggleComposer"
  ];
  this.applications = [];
  this.$superInit$HopscotchForHTML5 = function ($p) {
   var self = this;
   self.$super$HopscotchForHTML5$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   var self = this;
   self._$superInit$HopscotchForHTML5($p);
   $0.$init$Color$(self, $p.$graphics().$Color());
   $0.$init$Context$(self, $p.$graphics().$Context());
   $0.$init$Timer$(self, $p.$actors().$Timer());
   $0.$init$List$(self, $p.$collections().$OrderedCollection());
   $0.$init$Map$(self, $p.$collections().$Dictionary());
   $0.$init$window$(self, $p.$aliens().$global());
   $0.$init$document$(self, $0.$window(self).$at$("document"));
   $0.$init$body$(self, $0.$document(self).$at$("body"));
   $0.$init$history$(self, $0.$window(self).$at$("history"));
   self._$init$embeddedWindowMap$($0.$Map(self).$new());
   $0.$init$accept16px$(self, $p.$namespace().$accept16px());
   $0.$init$cancel16px$(self, $p.$namespace().$cancel16px());
   $0.$init$disclosureClosedImage$(self, $p.$namespace().$disclosureClosedImage());
   $0.$init$disclosureTransitionImage$(self, $p.$namespace().$disclosureTransitionImage());
   $0.$init$disclosureOpenImage$(self, $p.$namespace().$disclosureOpenImage());
   $0.$init$deferredContentQueue$(self, $0.$List(self).$new());
   self._$init$core$(self);
   self._$init$fragments$(self);
   return self;
  };
  this.$deferAction$ = function ($action) {
   var self = this;
   $0.$deferredContentQueue(self).$add$($action);
   if ($0.$deferredContentQueue(self).$size().$$equal(1)) {
    self._$nextFrameDo$(function () {
     return self._$nextDeferredAction();
    });
   } else {
    nil;
   };
   return self;
  };
  this.$nextDeferredAction = function () {
   var self = this;
   var $action = nil;
   $action = $0.$deferredContentQueue(self).$removeFirst();
   if ($0.$deferredContentQueue(self).$size() > 0) {
    self._$nextFrameDo$(function () {
     return self._$nextDeferredAction();
    });
   } else {
    nil;
   };
   $action.$value();
   return self;
  };
  this.$nextFrameDo$ = function ($action) {
   var self = this;
   if ($0.$window(self).$at$("requestAnimationFrame").$isUndefined()) {
    $0.$Timer(self).$after$do$(200, $action);
   } else {
    $0.$window(self).$requestAnimationFrame$(function () {
     return $0.$window(self).$requestAnimationFrame$(function () {
      return $0.$window(self).$requestAnimationFrame$($action);
     });
    });
   };
   return self;
  };
  this.$sharedNavigator = function () {
   var self = this;
   self._$sharedNavigationHistory().$ifNil$(function () {
    return (function ($setter_arg) {
     self._$sharedNavigationHistory$($setter_arg);
     return $setter_arg;
    }).$value$(self._$NavigationHistory().$new());
   });
   return self._$sharedNavigationHistory();
  };
  this.$BlankFragment = function () {
   if (nil === this.$HopscotchForHTML5$BlankFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$BlankFragment;
    this.$HopscotchForHTML5$BlankFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$BlankFragment$slot;
  };
  this.$ButtonFragment = function () {
   if (nil === this.$HopscotchForHTML5$ButtonFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$ButtonFragment;
    this.$HopscotchForHTML5$ButtonFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ButtonFragment$slot;
  };
  this.$CanvasFragment = function () {
   if (nil === this.$HopscotchForHTML5$CanvasFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$CanvasFragment;
    this.$HopscotchForHTML5$CanvasFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$CanvasFragment$slot;
  };
  this.$ColumnComposer = function () {
   if (nil === this.$HopscotchForHTML5$ColumnComposer$slot) {
    var self = this;
    var superclass = self._$SequenceComposer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$ColumnComposer;
    this.$HopscotchForHTML5$ColumnComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ColumnComposer$slot;
  };
  this.$Composer = function () {
   if (nil === this.$HopscotchForHTML5$Composer$slot) {
    var self = this;
    var superclass = self._$Fragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$Composer;
    this.$HopscotchForHTML5$Composer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Composer$slot;
  };
  this.$DeferredContentComposer = function () {
   if (nil === this.$HopscotchForHTML5$DeferredContentComposer$slot) {
    var self = this;
    var superclass = self._$Composer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$DeferredContentComposer;
    this.$HopscotchForHTML5$DeferredContentComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$DeferredContentComposer$slot;
  };
  this.$EmbeddedHopscotchWindow = function () {
   if (nil === this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot) {
    var self = this;
    var superclass = self._$HopscotchShell();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$EmbeddedHopscotchWindow;
    this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot;
  };
  this.$Fragment = function () {
   if (nil === this.$HopscotchForHTML5$Fragment$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$Fragment;
    this.$HopscotchForHTML5$Fragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Fragment$slot;
  };
  this.$Gradient = function () {
   if (nil === this.$HopscotchForHTML5$Gradient$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$Gradient;
    this.$HopscotchForHTML5$Gradient$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Gradient$slot;
  };
  this.$HolderComposer = function () {
   if (nil === this.$HopscotchForHTML5$HolderComposer$slot) {
    var self = this;
    var superclass = self._$Composer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$HolderComposer;
    this.$HopscotchForHTML5$HolderComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HolderComposer$slot;
  };
  this.$HopscotchShell = function () {
   if (nil === this.$HopscotchForHTML5$HopscotchShell$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$HopscotchShell;
    this.$HopscotchForHTML5$HopscotchShell$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HopscotchShell$slot;
  };
  this.$HopscotchWindow = function () {
   if (nil === this.$HopscotchForHTML5$HopscotchWindow$slot) {
    var self = this;
    var superclass = self._$HopscotchShell();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$HopscotchWindow;
    this.$HopscotchForHTML5$HopscotchWindow$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HopscotchWindow$slot;
  };
  this.$HyperlinkFragment = function () {
   if (nil === this.$HopscotchForHTML5$HyperlinkFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$HyperlinkFragment;
    this.$HopscotchForHTML5$HyperlinkFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HyperlinkFragment$slot;
  };
  this.$HyperlinkImageFragment = function () {
   if (nil === this.$HopscotchForHTML5$HyperlinkImageFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$HyperlinkImageFragment;
    this.$HopscotchForHTML5$HyperlinkImageFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HyperlinkImageFragment$slot;
  };
  this.$LeafFragment = function () {
   if (nil === this.$HopscotchForHTML5$LeafFragment$slot) {
    var self = this;
    var superclass = self._$Fragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$LeafFragment;
    this.$HopscotchForHTML5$LeafFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$LeafFragment$slot;
  };
  this.$LocalNavigationHistory = function () {
   if (nil === this.$HopscotchForHTML5$LocalNavigationHistory$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$LocalNavigationHistory;
    this.$HopscotchForHTML5$LocalNavigationHistory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$LocalNavigationHistory$slot;
  };
  this.$NavigationHistory = function () {
   if (nil === this.$HopscotchForHTML5$NavigationHistory$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$NavigationHistory;
    this.$HopscotchForHTML5$NavigationHistory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$NavigationHistory$slot;
  };
  this.$PaddedFrameComposer = function () {
   if (nil === this.$HopscotchForHTML5$PaddedFrameComposer$slot) {
    var self = this;
    var superclass = self._$Composer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$PaddedFrameComposer;
    this.$HopscotchForHTML5$PaddedFrameComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$PaddedFrameComposer$slot;
  };
  this.$Presenter = function () {
   if (nil === this.$HopscotchForHTML5$Presenter$slot) {
    var self = this;
    var superclass = self._$Fragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$Presenter;
    this.$HopscotchForHTML5$Presenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Presenter$slot;
  };
  this.$RowComposer = function () {
   if (nil === this.$HopscotchForHTML5$RowComposer$slot) {
    var self = this;
    var superclass = self._$SequenceComposer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$RowComposer;
    this.$HopscotchForHTML5$RowComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$RowComposer$slot;
  };
  this.$SequenceComposer = function () {
   if (nil === this.$HopscotchForHTML5$SequenceComposer$slot) {
    var self = this;
    var superclass = self._$Composer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$SequenceComposer;
    this.$HopscotchForHTML5$SequenceComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$SequenceComposer$slot;
  };
  this.$StaticImageFragment = function () {
   if (nil === this.$HopscotchForHTML5$StaticImageFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$StaticImageFragment;
    this.$HopscotchForHTML5$StaticImageFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$StaticImageFragment$slot;
  };
  this.$StaticLabelFragment = function () {
   if (nil === this.$HopscotchForHTML5$StaticLabelFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$StaticLabelFragment;
    this.$HopscotchForHTML5$StaticLabelFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$StaticLabelFragment$slot;
  };
  this.$Subject = function () {
   if (nil === this.$HopscotchForHTML5$Subject$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$Subject;
    this.$HopscotchForHTML5$Subject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Subject$slot;
  };
  this.$TextDisplayFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextDisplayFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$TextDisplayFragment;
    this.$HopscotchForHTML5$TextDisplayFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextDisplayFragment$slot;
  };
  this.$TextEditorFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextEditorFragment$slot) {
    var self = this;
    var superclass = self._$LeafFragment();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$TextEditorFragment;
    this.$HopscotchForHTML5$TextEditorFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextEditorFragment$slot;
  };
  this.$ToggleComposer = function () {
   if (nil === this.$HopscotchForHTML5$ToggleComposer$slot) {
    var self = this;
    var superclass = self._$Composer();
    var enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    var mixin = $.$HopscotchForHTML5$ToggleComposer;
    this.$HopscotchForHTML5$ToggleComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ToggleComposer$slot;
  };
  this.$init$Color$ = function (self, v) {
   self.$Color$slot = v;
   return self;
  };
  this.$Color = function (self) {
   return self.$Color$slot;
  };
  this.$init$Context$ = function (self, v) {
   self.$Context$slot = v;
   return self;
  };
  this.$Context = function (self) {
   return self.$Context$slot;
  };
  this.$init$Timer$ = function (self, v) {
   self.$Timer$slot = v;
   return self;
  };
  this.$Timer = function (self) {
   return self.$Timer$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$Map$ = function (self, v) {
   self.$Map$slot = v;
   return self;
  };
  this.$Map = function (self) {
   return self.$Map$slot;
  };
  this.$init$window$ = function (self, v) {
   self.$window$slot = v;
   return self;
  };
  this.$window = function (self) {
   return self.$window$slot;
  };
  this.$init$document$ = function (self, v) {
   self.$document$slot = v;
   return self;
  };
  this.$document = function (self) {
   return self.$document$slot;
  };
  this.$init$body$ = function (self, v) {
   self.$body$slot = v;
   return self;
  };
  this.$body = function (self) {
   return self.$body$slot;
  };
  this.$init$history$ = function (self, v) {
   self.$history$slot = v;
   return self;
  };
  this.$history = function (self) {
   return self.$history$slot;
  };
  this.$init$sharedNavigationHistory$ = function (v) {
   this.$sharedNavigationHistory$slot = v;
   return this;
  };
  this.$sharedNavigationHistory = function () {
   return this.$sharedNavigationHistory$slot;
  };
  this.$sharedNavigationHistory$ = function (v) {
   this.$sharedNavigationHistory$slot = v;
   return this;
  };
  this.$init$embeddedWindowMap$ = function (v) {
   this.$embeddedWindowMap$slot = v;
   return this;
  };
  this.$embeddedWindowMap = function () {
   return this.$embeddedWindowMap$slot;
  };
  this.$init$sharedBackButtonListener$ = function (v) {
   this.$sharedBackButtonListener$slot = v;
   return this;
  };
  this.$sharedBackButtonListener = function () {
   return this.$sharedBackButtonListener$slot;
  };
  this.$sharedBackButtonListener$ = function (v) {
   this.$sharedBackButtonListener$slot = v;
   return this;
  };
  this.$init$currentHopscotchWindow$ = function (v) {
   this.$currentHopscotchWindow$slot = v;
   return this;
  };
  this.$currentHopscotchWindow = function () {
   return this.$currentHopscotchWindow$slot;
  };
  this.$currentHopscotchWindow$ = function (v) {
   this.$currentHopscotchWindow$slot = v;
   return this;
  };
  this.$init$accept16px$ = function (self, v) {
   self.$accept16px$slot = v;
   return self;
  };
  this.$accept16px = function (self) {
   return self.$accept16px$slot;
  };
  this.$init$cancel16px$ = function (self, v) {
   self.$cancel16px$slot = v;
   return self;
  };
  this.$cancel16px = function (self) {
   return self.$cancel16px$slot;
  };
  this.$init$disclosureClosedImage$ = function (self, v) {
   self.$disclosureClosedImage$slot = v;
   return self;
  };
  this.$disclosureClosedImage = function (self) {
   return self.$disclosureClosedImage$slot;
  };
  this.$init$disclosureTransitionImage$ = function (self, v) {
   self.$disclosureTransitionImage$slot = v;
   return self;
  };
  this.$disclosureTransitionImage = function (self) {
   return self.$disclosureTransitionImage$slot;
  };
  this.$init$disclosureOpenImage$ = function (self, v) {
   self.$disclosureOpenImage$slot = v;
   return self;
  };
  this.$disclosureOpenImage = function (self) {
   return self.$disclosureOpenImage$slot;
  };
  this.$init$deferredContentQueue$ = function (self, v) {
   self.$deferredContentQueue$slot = v;
   return self;
  };
  this.$deferredContentQueue = function (self) {
   return self.$deferredContentQueue$slot;
  };
  this.$init$core$ = function (v) {
   this.$core$slot = v;
   return this;
  };
  this.$core = function () {
   return this.$core$slot;
  };
  this.$init$fragments$ = function (v) {
   this.$fragments$slot = v;
   return this;
  };
  this.$fragments = function () {
   return this.$fragments$slot;
  };
  this.$init$HopscotchForHTML5$BlankFragment$ = function (v) {
   this.$HopscotchForHTML5$BlankFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$BlankFragment = function () {
   return this.$HopscotchForHTML5$BlankFragment$slot;
  };
  this.$HopscotchForHTML5$BlankFragment$ = function (v) {
   this.$HopscotchForHTML5$BlankFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ButtonFragment$ = function (v) {
   this.$HopscotchForHTML5$ButtonFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ButtonFragment = function () {
   return this.$HopscotchForHTML5$ButtonFragment$slot;
  };
  this.$HopscotchForHTML5$ButtonFragment$ = function (v) {
   this.$HopscotchForHTML5$ButtonFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$CanvasFragment$ = function (v) {
   this.$HopscotchForHTML5$CanvasFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$CanvasFragment = function () {
   return this.$HopscotchForHTML5$CanvasFragment$slot;
  };
  this.$HopscotchForHTML5$CanvasFragment$ = function (v) {
   this.$HopscotchForHTML5$CanvasFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ColumnComposer$ = function (v) {
   this.$HopscotchForHTML5$ColumnComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ColumnComposer = function () {
   return this.$HopscotchForHTML5$ColumnComposer$slot;
  };
  this.$HopscotchForHTML5$ColumnComposer$ = function (v) {
   this.$HopscotchForHTML5$ColumnComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Composer$ = function (v) {
   this.$HopscotchForHTML5$Composer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Composer = function () {
   return this.$HopscotchForHTML5$Composer$slot;
  };
  this.$HopscotchForHTML5$Composer$ = function (v) {
   this.$HopscotchForHTML5$Composer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$DeferredContentComposer$ = function (v) {
   this.$HopscotchForHTML5$DeferredContentComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$DeferredContentComposer = function () {
   return this.$HopscotchForHTML5$DeferredContentComposer$slot;
  };
  this.$HopscotchForHTML5$DeferredContentComposer$ = function (v) {
   this.$HopscotchForHTML5$DeferredContentComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$EmbeddedHopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow = function () {
   return this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot;
  };
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Fragment$ = function (v) {
   this.$HopscotchForHTML5$Fragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Fragment = function () {
   return this.$HopscotchForHTML5$Fragment$slot;
  };
  this.$HopscotchForHTML5$Fragment$ = function (v) {
   this.$HopscotchForHTML5$Fragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Gradient$ = function (v) {
   this.$HopscotchForHTML5$Gradient$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Gradient = function () {
   return this.$HopscotchForHTML5$Gradient$slot;
  };
  this.$HopscotchForHTML5$Gradient$ = function (v) {
   this.$HopscotchForHTML5$Gradient$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HolderComposer$ = function (v) {
   this.$HopscotchForHTML5$HolderComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HolderComposer = function () {
   return this.$HopscotchForHTML5$HolderComposer$slot;
  };
  this.$HopscotchForHTML5$HolderComposer$ = function (v) {
   this.$HopscotchForHTML5$HolderComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HopscotchShell$ = function (v) {
   this.$HopscotchForHTML5$HopscotchShell$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HopscotchShell = function () {
   return this.$HopscotchForHTML5$HopscotchShell$slot;
  };
  this.$HopscotchForHTML5$HopscotchShell$ = function (v) {
   this.$HopscotchForHTML5$HopscotchShell$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$HopscotchWindow$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HopscotchWindow = function () {
   return this.$HopscotchForHTML5$HopscotchWindow$slot;
  };
  this.$HopscotchForHTML5$HopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$HopscotchWindow$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HyperlinkFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HyperlinkFragment = function () {
   return this.$HopscotchForHTML5$HyperlinkFragment$slot;
  };
  this.$HopscotchForHTML5$HyperlinkFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HyperlinkImageFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkImageFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HyperlinkImageFragment = function () {
   return this.$HopscotchForHTML5$HyperlinkImageFragment$slot;
  };
  this.$HopscotchForHTML5$HyperlinkImageFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkImageFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$LeafFragment$ = function (v) {
   this.$HopscotchForHTML5$LeafFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$LeafFragment = function () {
   return this.$HopscotchForHTML5$LeafFragment$slot;
  };
  this.$HopscotchForHTML5$LeafFragment$ = function (v) {
   this.$HopscotchForHTML5$LeafFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$LocalNavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$LocalNavigationHistory$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$LocalNavigationHistory = function () {
   return this.$HopscotchForHTML5$LocalNavigationHistory$slot;
  };
  this.$HopscotchForHTML5$LocalNavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$LocalNavigationHistory$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$NavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$NavigationHistory$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$NavigationHistory = function () {
   return this.$HopscotchForHTML5$NavigationHistory$slot;
  };
  this.$HopscotchForHTML5$NavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$NavigationHistory$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$PaddedFrameComposer$ = function (v) {
   this.$HopscotchForHTML5$PaddedFrameComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$PaddedFrameComposer = function () {
   return this.$HopscotchForHTML5$PaddedFrameComposer$slot;
  };
  this.$HopscotchForHTML5$PaddedFrameComposer$ = function (v) {
   this.$HopscotchForHTML5$PaddedFrameComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Presenter$ = function (v) {
   this.$HopscotchForHTML5$Presenter$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Presenter = function () {
   return this.$HopscotchForHTML5$Presenter$slot;
  };
  this.$HopscotchForHTML5$Presenter$ = function (v) {
   this.$HopscotchForHTML5$Presenter$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$RowComposer$ = function (v) {
   this.$HopscotchForHTML5$RowComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$RowComposer = function () {
   return this.$HopscotchForHTML5$RowComposer$slot;
  };
  this.$HopscotchForHTML5$RowComposer$ = function (v) {
   this.$HopscotchForHTML5$RowComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$SequenceComposer$ = function (v) {
   this.$HopscotchForHTML5$SequenceComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$SequenceComposer = function () {
   return this.$HopscotchForHTML5$SequenceComposer$slot;
  };
  this.$HopscotchForHTML5$SequenceComposer$ = function (v) {
   this.$HopscotchForHTML5$SequenceComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$StaticImageFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticImageFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$StaticImageFragment = function () {
   return this.$HopscotchForHTML5$StaticImageFragment$slot;
  };
  this.$HopscotchForHTML5$StaticImageFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticImageFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$StaticLabelFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticLabelFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$StaticLabelFragment = function () {
   return this.$HopscotchForHTML5$StaticLabelFragment$slot;
  };
  this.$HopscotchForHTML5$StaticLabelFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticLabelFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Subject$ = function (v) {
   this.$HopscotchForHTML5$Subject$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Subject = function () {
   return this.$HopscotchForHTML5$Subject$slot;
  };
  this.$HopscotchForHTML5$Subject$ = function (v) {
   this.$HopscotchForHTML5$Subject$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextDisplayFragment$ = function (v) {
   this.$HopscotchForHTML5$TextDisplayFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextDisplayFragment = function () {
   return this.$HopscotchForHTML5$TextDisplayFragment$slot;
  };
  this.$HopscotchForHTML5$TextDisplayFragment$ = function (v) {
   this.$HopscotchForHTML5$TextDisplayFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextEditorFragment$ = function (v) {
   this.$HopscotchForHTML5$TextEditorFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextEditorFragment = function () {
   return this.$HopscotchForHTML5$TextEditorFragment$slot;
  };
  this.$HopscotchForHTML5$TextEditorFragment$ = function (v) {
   this.$HopscotchForHTML5$TextEditorFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ToggleComposer$ = function (v) {
   this.$HopscotchForHTML5$ToggleComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ToggleComposer = function () {
   return this.$HopscotchForHTML5$ToggleComposer$slot;
  };
  this.$HopscotchForHTML5$ToggleComposer$ = function (v) {
   this.$HopscotchForHTML5$ToggleComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$BlankFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`BlankFragment";
   this.name = "HopscotchForHTML5`BlankFragment";
   this.header = 891;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`BlankFragment", true, 892),
    new MM("instance`initializer", true, 893),
    new MM("createVisual", false, 894)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$BlankFragment = function () {
    var self = this;
    self.$super$HopscotchForHTML5$BlankFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$BlankFragment();
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    return $0.$document(self.$enclosingObjects$HopscotchForHTML5$BlankFragment[0]).$createElement$("div");
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`BlankFragment";
     this._$superInit$HopscotchForHTML5$BlankFragment = $.$superInit$HopscotchForHTML5$BlankFragment;
     this.$superInit$HopscotchForHTML5$BlankFragment = dnuCatcher("$superInit$HopscotchForHTML5$BlankFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$enclosingObjects$HopscotchForHTML5$BlankFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$BlankFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`BlankFragment"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`BlankFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`BlankFragment";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`BlankFragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$BlankFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$BlankFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ButtonFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ButtonFragment";
   this.name = "HopscotchForHTML5`ButtonFragment";
   this.header = 895;
   this.slots = [
    new SM("label", false, false),
    new SM("action", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ButtonFragment", true, 896),
    new MM("instance`initializer", true, 897),
    new MM("createVisual", false, 898),
    new MM("init`label:", true, 0),
    new MM("label", true, 0),
    new MM("init`action:", true, 0),
    new MM("action", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ButtonFragment = function ($l, $a) {
    var self = this;
    self.$super$HopscotchForHTML5$ButtonFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($l, $a) {
    var self = this;
    self._$superInit$HopscotchForHTML5$ButtonFragment($l, $a);
    self._$init$label$($l);
    self._$init$action$($a);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$appendChild$($0.$document(self.$enclosingObjects$HopscotchForHTML5$ButtonFragment[0]).$createTextNode$(self._$label()));
     cascadeReceiver.$at$put$("onclick", function () {
      self._$action().$value();
      return false;
     });
     return cascadeReceiver.$yourself();
    })($0.$document(self.$enclosingObjects$HopscotchForHTML5$ButtonFragment[0]).$createElement$("button"));
   };
   this.$init$label$ = function (v) {
    this.$label$slot = v;
    return this;
   };
   this.$label = function () {
    return this.$label$slot;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ButtonFragment";
     this._$superInit$HopscotchForHTML5$ButtonFragment = $.$superInit$HopscotchForHTML5$ButtonFragment;
     this.$superInit$HopscotchForHTML5$ButtonFragment = dnuCatcher("$superInit$HopscotchForHTML5$ButtonFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$label$ = $.$init$label$;
     this.$init$label$ = dnuCatcher("$init$label$");
     this._$label = $.$label;
     this.$label = dnuCatcher("$label");
     this._$init$action$ = $.$init$action$;
     this.$init$action$ = dnuCatcher("$init$action$");
     this._$action = $.$action;
     this.$action = dnuCatcher("$action");
     this.$enclosingObjects$HopscotchForHTML5$ButtonFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$ButtonFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ButtonFragment"] = function () {
      superBasicNew.call(this);
      this.$label$slot = nil;
      this.$action$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ButtonFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ButtonFragment";
    this.slots = [];
    this.methods = [new MM("label:action:", true, 0)];
    this.nestedClasses = [];
    this.$label$action$ = function ($l, $a) {
     return (new this.nonMeta.basicNew()).$instance$initializer($l, $a);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ButtonFragment";
      this.$label$action$ = this._$label$action$ = $.$label$action$;
      this.$enclosingObjects$HopscotchForHTML5$ButtonFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$ButtonFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$CanvasFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`CanvasFragment";
   this.name = "HopscotchForHTML5`CanvasFragment";
   this.header = 899;
   this.slots = [new SM("alien", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`CanvasFragment", true, 900),
    new MM("instance`initializer", true, 901),
    new MM("context", false, 902),
    new MM("createVisual", false, 903),
    new MM("keyDownAction:", false, 904),
    new MM("mouseDownAction:", false, 905),
    new MM("mouseMovedAction:", false, 906),
    new MM("init`alien:", true, 0),
    new MM("alien", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$CanvasFragment = function ($e) {
    var self = this;
    self.$super$HopscotchForHTML5$CanvasFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($e) {
    var self = this;
    self._$superInit$HopscotchForHTML5$CanvasFragment($e);
    $1.$init$alien$(self, $0.$document(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$createElement$("canvas"));
    $1.$alien(self).$at$put$("width", $e.$x());
    $1.$alien(self).$at$put$("height", $e.$y());
    $1.$alien(self).$at$("style").$at$put$("position", "relative");
    return self;
   };
   this.$context = function () {
    var self = this;
    return $0.$Context(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$on$($1.$alien(self).$getContext$("2d"));
   };
   this.$createVisual = function () {
    var self = this;
    return $1.$alien(self);
   };
   this.$keyDownAction$ = function ($onKeyPressed) {
    var self = this;
    $0.$body(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$addEventListener$with$("keydown", function ($e) {
     return $onKeyPressed.$value$(self._$String().$fromCharCode$($e.$at$("keyCode")));
    });
    return self;
   };
   this.$mouseDownAction$ = function ($onMouseDown) {
    var self = this;
    $1.$alien(self).$addEventListener$with$("mousedown", function ($e) {
     return $onMouseDown.$value$($e.$at$("offsetX").$$at($e.$at$("offsetY")));
    });
    return self;
   };
   this.$mouseMovedAction$ = function ($onMouseMoved) {
    var self = this;
    $1.$alien(self).$addEventListener$with$("mousemove", function ($e) {
     return $onMouseMoved.$value$($e.$at$("offsetX").$$at($e.$at$("offsetY")));
    });
    return self;
   };
   this.$init$alien$ = function (self, v) {
    self.$alien$slot = v;
    return self;
   };
   this.$alien = function (self) {
    return self.$alien$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`CanvasFragment";
     this._$superInit$HopscotchForHTML5$CanvasFragment = $.$superInit$HopscotchForHTML5$CanvasFragment;
     this.$superInit$HopscotchForHTML5$CanvasFragment = dnuCatcher("$superInit$HopscotchForHTML5$CanvasFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$context = this._$context = $.$context;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$keyDownAction$ = this._$keyDownAction$ = $.$keyDownAction$;
     this.$mouseDownAction$ = this._$mouseDownAction$ = $.$mouseDownAction$;
     this.$mouseMovedAction$ = this._$mouseMovedAction$ = $.$mouseMovedAction$;
     this.$enclosingObjects$HopscotchForHTML5$CanvasFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$CanvasFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`CanvasFragment"] = function () {
      superBasicNew.call(this);
      this.$alien$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`CanvasFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`CanvasFragment";
    this.slots = [];
    this.methods = [new MM("withExtent:", true, 0)];
    this.nestedClasses = [];
    this.$withExtent$ = function ($e) {
     return (new this.nonMeta.basicNew()).$instance$initializer($e);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`CanvasFragment";
      this.$withExtent$ = this._$withExtent$ = $.$withExtent$;
      this.$enclosingObjects$HopscotchForHTML5$CanvasFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$CanvasFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ColumnComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ColumnComposer";
   this.name = "HopscotchForHTML5`ColumnComposer";
   this.header = 907;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ColumnComposer", true, 908),
    new MM("instance`initializer", true, 909),
    new MM("flexDirection", false, 910)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ColumnComposer = function ($fragments) {
    var self = this;
    self.$super$HopscotchForHTML5$ColumnComposer$slot._$instance$initializer.call(self, $fragments);
    return self;
   };
   this.$instance$initializer = function ($fragments) {
    var self = this;
    self._$superInit$HopscotchForHTML5$ColumnComposer($fragments);
    return self;
   };
   this.$flexDirection = function () {
    var self = this;
    return "column";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ColumnComposer";
     this._$superInit$HopscotchForHTML5$ColumnComposer = $.$superInit$HopscotchForHTML5$ColumnComposer;
     this.$superInit$HopscotchForHTML5$ColumnComposer = dnuCatcher("$superInit$HopscotchForHTML5$ColumnComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$flexDirection = $.$flexDirection;
     this.$flexDirection = dnuCatcher("$flexDirection");
     this.$enclosingObjects$HopscotchForHTML5$ColumnComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$ColumnComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ColumnComposer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`ColumnComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ColumnComposer";
    this.slots = [];
    this.methods = [new MM("definitions:", true, 0)];
    this.nestedClasses = [];
    this.$definitions$ = function ($fragments) {
     return (new this.nonMeta.basicNew()).$instance$initializer($fragments);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ColumnComposer";
      this.$definitions$ = this._$definitions$ = $.$definitions$;
      this.$enclosingObjects$HopscotchForHTML5$ColumnComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$ColumnComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Composer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Composer";
   this.name = "HopscotchForHTML5`Composer";
   this.header = 911;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Composer", true, 912),
    new MM("instance`initializer", true, 913)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Composer = function () {
    var self = this;
    self.$super$HopscotchForHTML5$Composer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$Composer();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Composer";
     this._$superInit$HopscotchForHTML5$Composer = $.$superInit$HopscotchForHTML5$Composer;
     this.$superInit$HopscotchForHTML5$Composer = dnuCatcher("$superInit$HopscotchForHTML5$Composer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enclosingObjects$HopscotchForHTML5$Composer = enclosingObjects;
     this.$super$HopscotchForHTML5$Composer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Composer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`Composer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Composer";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Composer";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$Composer = enclosingObjects;
      this.$super$HopscotchForHTML5$Composer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$DeferredContentComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`DeferredContentComposer";
   this.name = "HopscotchForHTML5`DeferredContentComposer";
   this.header = 914;
   this.slots = [
    new SM("initialContent", false, false),
    new SM("contentSource", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`DeferredContentComposer", true, 915),
    new MM("instance`initializer", true, 916),
    new MM("createVisual", false, 917),
    new MM("init`initialContent:", true, 0),
    new MM("initialContent", true, 0),
    new MM("init`contentSource:", true, 0),
    new MM("contentSource", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$DeferredContentComposer = function ($ic, $cs) {
    var self = this;
    self.$super$HopscotchForHTML5$DeferredContentComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ic, $cs) {
    var self = this;
    self._$superInit$HopscotchForHTML5$DeferredContentComposer($ic, $cs);
    self._$init$initialContent$($ic);
    self._$init$contentSource$($cs);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $div = nil;
    var $initialVisual = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer[0]).$createElement$("div");
    $initialVisual = self._$initialContent().$visual();
    $div.$appendChild$($initialVisual);
    self.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer[0]._$deferAction$(function () {
     var $deferredFragment = nil;
     $deferredFragment = self._$contentSource().$value();
     $deferredFragment.$parent$(self);
     return $div.$replaceChild$with$($deferredFragment.$visual(), $initialVisual);
    });
    return $div;
   };
   this.$init$initialContent$ = function (v) {
    this.$initialContent$slot = v;
    return this;
   };
   this.$initialContent = function () {
    return this.$initialContent$slot;
   };
   this.$init$contentSource$ = function (v) {
    this.$contentSource$slot = v;
    return this;
   };
   this.$contentSource = function () {
    return this.$contentSource$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`DeferredContentComposer";
     this._$superInit$HopscotchForHTML5$DeferredContentComposer = $.$superInit$HopscotchForHTML5$DeferredContentComposer;
     this.$superInit$HopscotchForHTML5$DeferredContentComposer = dnuCatcher("$superInit$HopscotchForHTML5$DeferredContentComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$initialContent$ = $.$init$initialContent$;
     this.$init$initialContent$ = dnuCatcher("$init$initialContent$");
     this._$initialContent = $.$initialContent;
     this.$initialContent = dnuCatcher("$initialContent");
     this._$init$contentSource$ = $.$init$contentSource$;
     this.$init$contentSource$ = dnuCatcher("$init$contentSource$");
     this._$contentSource = $.$contentSource;
     this.$contentSource = dnuCatcher("$contentSource");
     this.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$DeferredContentComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`DeferredContentComposer"] = function () {
      superBasicNew.call(this);
      this.$initialContent$slot = nil;
      this.$contentSource$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`DeferredContentComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`DeferredContentComposer";
    this.slots = [];
    this.methods = [new MM("initialContent:contentSource:", true, 0)];
    this.nestedClasses = [];
    this.$initialContent$contentSource$ = function ($ic, $cs) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ic, $cs);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`DeferredContentComposer";
      this.$initialContent$contentSource$ = this._$initialContent$contentSource$ = $.$initialContent$contentSource$;
      this.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$DeferredContentComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`EmbeddedHopscotchWindow";
   this.name = "HopscotchForHTML5`EmbeddedHopscotchWindow";
   this.header = 918;
   this.slots = [new SM("localNavigator", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`EmbeddedHopscotchWindow", true, 919),
    new MM("instance`initializer", true, 920),
    new MM("displayPresenter:", false, 921),
    new MM("enterPresenter:", false, 922),
    new MM("enterSubject:fromSnippet:", false, 923),
    new MM("goBack", false, 924),
    new MM("listenForBackButton", false, 925),
    new MM("navigationHistory", false, 926),
    new MM("init`localNavigator:", true, 0),
    new MM("localNavigator", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow = function ($container, $s) {
    var self = this;
    self.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($container, $s) {
    var self = this;
    self._$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow($container, $s);
    self._$init$localNavigator$(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$LocalNavigationHistory().$new());
    $container.$appendChild$(self._$contentHolder());
    self._$enterSubject$($s);
    return self;
   };
   this.$displayPresenter$ = function ($p) {
    var self = this;
    self.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot._$displayPresenter$.call(self, $p);
    $0.$document(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]).$at$put$("title", $p.$title());
    return self;
   };
   this.$enterPresenter$ = function ($p) {
    var self = this;
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$currentHopscotchWindow$(self);
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$embeddedWindowMap().$at$ifAbsentPut$($p, function () {
     return self;
    });
    self._$localNavigator().$visit$($p);
    self.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot._$enterPresenter$.call(self, $p);
    return self;
   };
   this.$enterSubject$fromSnippet$ = function ($s, $snippet) {
    var self = this;
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$embeddedWindowMap().$at$ifAbsentPut$($snippet.$presenter(), function () {
     return self;
    });
    self._$enterSubject$($s);
    return self;
   };
   this.$goBack = function () {
    var self = this;
    self._$localNavigator().$goBack();
    self._$displayPresenter$(self._$localNavigator().$current());
    return self;
   };
   this.$listenForBackButton = function () {
    var self = this;
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedBackButtonListener().$ifNil$(function () {
     self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedBackButtonListener$(function ($e) {
      var $p = nil;
      var $priorWindow = nil;
      $p = self._$navigator().$presenterFor$($e.$at$("state"));
      $priorWindow = self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$embeddedWindowMap().$at$($p);
      self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$currentHopscotchWindow().$goBack();
      return (function ($setter_arg) {
       self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$currentHopscotchWindow$($setter_arg);
       return $setter_arg;
      }).$value$($priorWindow);
     });
     return $0.$window(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]).$at$put$("onpopstate", self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedBackButtonListener());
    });
    return self;
   };
   this.$navigationHistory = function () {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedNavigator();
   };
   this.$init$localNavigator$ = function (v) {
    this.$localNavigator$slot = v;
    return this;
   };
   this.$localNavigator = function () {
    return this.$localNavigator$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`EmbeddedHopscotchWindow";
     this._$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow = $.$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow;
     this.$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow = dnuCatcher("$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
     this.$enterPresenter$ = this._$enterPresenter$ = $.$enterPresenter$;
     this.$enterSubject$fromSnippet$ = this._$enterSubject$fromSnippet$ = $.$enterSubject$fromSnippet$;
     this.$goBack = this._$goBack = $.$goBack;
     this._$listenForBackButton = $.$listenForBackButton;
     this.$listenForBackButton = dnuCatcher("$listenForBackButton");
     this._$navigationHistory = $.$navigationHistory;
     this.$navigationHistory = dnuCatcher("$navigationHistory");
     this._$init$localNavigator$ = $.$init$localNavigator$;
     this.$init$localNavigator$ = dnuCatcher("$init$localNavigator$");
     this._$localNavigator = $.$localNavigator;
     this.$localNavigator = dnuCatcher("$localNavigator");
     this.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow = enclosingObjects;
     this.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = runtimeSuperclass;
     this["HopscotchForHTML5`EmbeddedHopscotchWindow"] = function () {
      superBasicNew.call(this);
      this.$localNavigator$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`EmbeddedHopscotchWindow"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`EmbeddedHopscotchWindow";
    this.slots = [];
    this.methods = [
     new MM("into:openSubject:", true, 0),
     new MM("openSubject:", false, 927)
    ];
    this.nestedClasses = [];
    this.$into$openSubject$ = function ($container, $s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($container, $s);
    };
    this.$openSubject$ = function ($s) {
     var self = this;
     return self._$into$openSubject$($0.$body(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]), $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`EmbeddedHopscotchWindow";
      this.$into$openSubject$ = this._$into$openSubject$ = $.$into$openSubject$;
      this.$openSubject$ = this._$openSubject$ = $.$openSubject$;
      this.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow = enclosingObjects;
      this.$super$HopscotchForHTML5$EmbeddedHopscotchWindow = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Fragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Fragment";
   this.name = "HopscotchForHTML5`Fragment";
   this.header = 928;
   this.slots = [
    new SM("visualX", true, false),
    new SM("parent", true, false),
    new SM("size", true, false),
    new SM("expansibility", true, false),
    new SM("compressibility", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Fragment", true, 929),
    new MM("instance`initializer", true, 930),
    new MM("createVisual", false, 931),
    new MM("elasticity:", false, 932),
    new MM("hasVisual", false, 933),
    new MM("shell", false, 934),
    new MM("visual", false, 935),
    new MM("width:elasticity:", false, 936),
    new MM("init`visualX:", true, 0),
    new MM("visualX", true, 0),
    new MM("visualX:", true, 0),
    new MM("init`parent:", true, 0),
    new MM("parent", true, 0),
    new MM("parent:", true, 0),
    new MM("init`size:", true, 0),
    new MM("size", true, 0),
    new MM("size:", true, 0),
    new MM("init`expansibility:", true, 0),
    new MM("expansibility", true, 0),
    new MM("expansibility:", true, 0),
    new MM("init`compressibility:", true, 0),
    new MM("compressibility", true, 0),
    new MM("compressibility:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Fragment = function () {
    var self = this;
    self.$super$HopscotchForHTML5$Fragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$Fragment();
    self._$init$size$(nil);
    self._$init$expansibility$(0);
    self._$init$compressibility$(0);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$elasticity$ = function ($x) {
    var self = this;
    self._$expansibility$($x);
    self._$compressibility$($x);
    return self;
   };
   this.$hasVisual = function () {
    var self = this;
    return self._$visualX().$isNil().$not();
   };
   this.$shell = function () {
    var self = this;
    return self._$parent().$isNil().$ifTrue$ifFalse$(function () {
     return self._$Error().$signal$("hierarchy not installed in a shell");
    }, function () {
     return self._$parent().$shell();
    });
   };
   this.$visual = function () {
    var self = this;
    if (self._$visualX().$isNil()) {
     self._$visualX$(self._$createVisual());
    } else {
     nil;
    };
    return self._$visualX();
   };
   this.$width$elasticity$ = function ($w, $e) {
    var self = this;
    self._$size$($w);
    self._$expansibility$($e);
    self._$compressibility$($e);
    return self;
   };
   this.$init$visualX$ = function (v) {
    this.$visualX$slot = v;
    return this;
   };
   this.$visualX = function () {
    return this.$visualX$slot;
   };
   this.$visualX$ = function (v) {
    this.$visualX$slot = v;
    return this;
   };
   this.$init$parent$ = function (v) {
    this.$parent$slot = v;
    return this;
   };
   this.$parent = function () {
    return this.$parent$slot;
   };
   this.$parent$ = function (v) {
    this.$parent$slot = v;
    return this;
   };
   this.$init$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.$size = function () {
    return this.$size$slot;
   };
   this.$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.$init$expansibility$ = function (v) {
    this.$expansibility$slot = v;
    return this;
   };
   this.$expansibility = function () {
    return this.$expansibility$slot;
   };
   this.$expansibility$ = function (v) {
    this.$expansibility$slot = v;
    return this;
   };
   this.$init$compressibility$ = function (v) {
    this.$compressibility$slot = v;
    return this;
   };
   this.$compressibility = function () {
    return this.$compressibility$slot;
   };
   this.$compressibility$ = function (v) {
    this.$compressibility$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Fragment";
     this._$superInit$HopscotchForHTML5$Fragment = $.$superInit$HopscotchForHTML5$Fragment;
     this.$superInit$HopscotchForHTML5$Fragment = dnuCatcher("$superInit$HopscotchForHTML5$Fragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$elasticity$ = this._$elasticity$ = $.$elasticity$;
     this.$hasVisual = this._$hasVisual = $.$hasVisual;
     this._$shell = $.$shell;
     this.$shell = dnuCatcher("$shell");
     this.$visual = this._$visual = $.$visual;
     this.$width$elasticity$ = this._$width$elasticity$ = $.$width$elasticity$;
     this._$init$visualX$ = $.$init$visualX$;
     this.$init$visualX$ = dnuCatcher("$init$visualX$");
     this._$visualX = $.$visualX;
     this.$visualX = dnuCatcher("$visualX");
     this._$visualX$ = $.$visualX$;
     this.$visualX$ = dnuCatcher("$visualX$");
     this.$init$parent$ = this._$init$parent$ = $.$init$parent$;
     this.$parent = this._$parent = $.$parent;
     this.$parent$ = this._$parent$ = $.$parent$;
     this.$init$size$ = this._$init$size$ = $.$init$size$;
     this.$size = this._$size = $.$size;
     this.$size$ = this._$size$ = $.$size$;
     this.$init$expansibility$ = this._$init$expansibility$ = $.$init$expansibility$;
     this.$expansibility = this._$expansibility = $.$expansibility;
     this.$expansibility$ = this._$expansibility$ = $.$expansibility$;
     this.$init$compressibility$ = this._$init$compressibility$ = $.$init$compressibility$;
     this.$compressibility = this._$compressibility = $.$compressibility;
     this.$compressibility$ = this._$compressibility$ = $.$compressibility$;
     this.$enclosingObjects$HopscotchForHTML5$Fragment = enclosingObjects;
     this.$super$HopscotchForHTML5$Fragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Fragment"] = function () {
      superBasicNew.call(this);
      this.$visualX$slot = nil;
      this.$parent$slot = nil;
      this.$size$slot = nil;
      this.$expansibility$slot = nil;
      this.$compressibility$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Fragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Fragment";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Fragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$Fragment = enclosingObjects;
      this.$super$HopscotchForHTML5$Fragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Gradient = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Gradient";
   this.name = "HopscotchForHTML5`Gradient";
   this.header = 937;
   this.slots = [
    new SM("topColor", false, false),
    new SM("bottomColor", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Gradient", true, 938),
    new MM("instance`initializer", true, 939),
    new MM("applyToStyle:", false, 940),
    new MM("init`topColor:", true, 0),
    new MM("topColor", true, 0),
    new MM("init`bottomColor:", true, 0),
    new MM("bottomColor", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Gradient = function ($a, $b) {
    var self = this;
    self.$super$HopscotchForHTML5$Gradient$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($a, $b) {
    var self = this;
    self._$superInit$HopscotchForHTML5$Gradient($a, $b);
    self._$init$topColor$($a);
    self._$init$bottomColor$($b);
    return self;
   };
   this.$applyToStyle$ = function ($style) {
    var self = this;
    var $value = nil;
    $value = "(top,".$$comma(self._$topColor().$asCSSString()).$$comma(",").$$comma(self._$bottomColor().$asCSSString()).$$comma(")");
    $style.$setProperty$to$("background-image", "-webkit-linear-gradient".$$comma($value));
    $style.$setProperty$to$("background-image", "-moz-linear-gradient".$$comma($value));
    return self;
   };
   this.$init$topColor$ = function (v) {
    this.$topColor$slot = v;
    return this;
   };
   this.$topColor = function () {
    return this.$topColor$slot;
   };
   this.$init$bottomColor$ = function (v) {
    this.$bottomColor$slot = v;
    return this;
   };
   this.$bottomColor = function () {
    return this.$bottomColor$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Gradient";
     this._$superInit$HopscotchForHTML5$Gradient = $.$superInit$HopscotchForHTML5$Gradient;
     this.$superInit$HopscotchForHTML5$Gradient = dnuCatcher("$superInit$HopscotchForHTML5$Gradient");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyToStyle$ = this._$applyToStyle$ = $.$applyToStyle$;
     this._$init$topColor$ = $.$init$topColor$;
     this.$init$topColor$ = dnuCatcher("$init$topColor$");
     this._$topColor = $.$topColor;
     this.$topColor = dnuCatcher("$topColor");
     this._$init$bottomColor$ = $.$init$bottomColor$;
     this.$init$bottomColor$ = dnuCatcher("$init$bottomColor$");
     this._$bottomColor = $.$bottomColor;
     this.$bottomColor = dnuCatcher("$bottomColor");
     this.$enclosingObjects$HopscotchForHTML5$Gradient = enclosingObjects;
     this.$super$HopscotchForHTML5$Gradient$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Gradient"] = function () {
      superBasicNew.call(this);
      this.$topColor$slot = nil;
      this.$bottomColor$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Gradient"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Gradient";
    this.slots = [];
    this.methods = [new MM("from:to:", true, 0)];
    this.nestedClasses = [];
    this.$from$to$ = function ($a, $b) {
     return (new this.nonMeta.basicNew()).$instance$initializer($a, $b);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Gradient";
      this.$from$to$ = this._$from$to$ = $.$from$to$;
      this.$enclosingObjects$HopscotchForHTML5$Gradient = enclosingObjects;
      this.$super$HopscotchForHTML5$Gradient = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HolderComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HolderComposer";
   this.name = "HopscotchForHTML5`HolderComposer";
   this.header = 941;
   this.slots = [
    new SM("contentSource", true, false),
    new SM("actualContent", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HolderComposer", true, 942),
    new MM("instance`initializer", true, 943),
    new MM("content", false, 944),
    new MM("content:", false, 945),
    new MM("createVisual", false, 946),
    new MM("refresh", false, 947),
    new MM("init`contentSource:", true, 0),
    new MM("contentSource", true, 0),
    new MM("contentSource:", true, 0),
    new MM("init`actualContent:", true, 0),
    new MM("actualContent", true, 0),
    new MM("actualContent:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HolderComposer = function ($definition) {
    var self = this;
    self.$super$HopscotchForHTML5$HolderComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($definition) {
    var self = this;
    self._$superInit$HopscotchForHTML5$HolderComposer($definition);
    self._$init$contentSource$($definition);
    return self;
   };
   this.$content = function () {
    var self = this;
    if (self._$actualContent().$isNil()) {
     self._$actualContent$(self._$contentSource().$value());
     self._$actualContent().$parent$(self);
    } else {
     nil;
    };
    return self._$actualContent();
   };
   this.$content$ = function ($fragment) {
    var self = this;
    $fragment.$parent$(self);
    if (self._$hasVisual()) {
     var $oldContent = nil;
     var $newContent = nil;
     $oldContent = self._$actualContent();
     $newContent = (function ($setter_arg) {
      self._$actualContent$($setter_arg);
      return $setter_arg;
     }).$value$($fragment);
     self._$visual().$replaceChild$with$($newContent.$visual(), $oldContent.$visual());
    } else {
     self._$actualContent$($fragment);
    };
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$HolderComposer[0]).$createElement$("div");
    $div.$appendChild$(self._$content().$visual());
    return $div;
   };
   this.$refresh = function () {
    var self = this;
    if (self._$contentSource().$isBlock() && self._$hasVisual()) {
     var $oldContent = nil;
     var $newContent = nil;
     $oldContent = self._$actualContent();
     self._$actualContent$(nil);
     $newContent = self._$content();
     self._$visual().$replaceChild$with$($newContent.$visual(), $oldContent.$visual());
    } else {
     self._$actualContent().$refresh();
    };
    return self;
   };
   this.$init$contentSource$ = function (v) {
    this.$contentSource$slot = v;
    return this;
   };
   this.$contentSource = function () {
    return this.$contentSource$slot;
   };
   this.$contentSource$ = function (v) {
    this.$contentSource$slot = v;
    return this;
   };
   this.$init$actualContent$ = function (v) {
    this.$actualContent$slot = v;
    return this;
   };
   this.$actualContent = function () {
    return this.$actualContent$slot;
   };
   this.$actualContent$ = function (v) {
    this.$actualContent$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HolderComposer";
     this._$superInit$HopscotchForHTML5$HolderComposer = $.$superInit$HopscotchForHTML5$HolderComposer;
     this.$superInit$HopscotchForHTML5$HolderComposer = dnuCatcher("$superInit$HopscotchForHTML5$HolderComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$content = this._$content = $.$content;
     this.$content$ = this._$content$ = $.$content$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$refresh = this._$refresh = $.$refresh;
     this._$init$contentSource$ = $.$init$contentSource$;
     this.$init$contentSource$ = dnuCatcher("$init$contentSource$");
     this._$contentSource = $.$contentSource;
     this.$contentSource = dnuCatcher("$contentSource");
     this._$contentSource$ = $.$contentSource$;
     this.$contentSource$ = dnuCatcher("$contentSource$");
     this._$init$actualContent$ = $.$init$actualContent$;
     this.$init$actualContent$ = dnuCatcher("$init$actualContent$");
     this._$actualContent = $.$actualContent;
     this.$actualContent = dnuCatcher("$actualContent");
     this._$actualContent$ = $.$actualContent$;
     this.$actualContent$ = dnuCatcher("$actualContent$");
     this.$enclosingObjects$HopscotchForHTML5$HolderComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$HolderComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HolderComposer"] = function () {
      superBasicNew.call(this);
      this.$contentSource$slot = nil;
      this.$actualContent$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HolderComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HolderComposer";
    this.slots = [];
    this.methods = [new MM("withContent:", true, 0)];
    this.nestedClasses = [];
    this.$withContent$ = function ($definition) {
     return (new this.nonMeta.basicNew()).$instance$initializer($definition);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HolderComposer";
      this.$withContent$ = this._$withContent$ = $.$withContent$;
      this.$enclosingObjects$HopscotchForHTML5$HolderComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$HolderComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HopscotchShell = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HopscotchShell";
   this.name = "HopscotchForHTML5`HopscotchShell";
   this.header = 948;
   this.slots = [
    new SM("navigator", false, false),
    new SM("currentPresenterX", true, false),
    new SM("contentHolder", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HopscotchShell", true, 949),
    new MM("instance`initializer", true, 950),
    new MM("displayPresenter:", false, 951),
    new MM("enterPresenter:", false, 952),
    new MM("enterSubject:", false, 953),
    new MM("listenForBackButton", false, 954),
    new MM("navigationHistory", false, 955),
    new MM("shell", false, 956),
    new MM("userBack:", false, 957),
    new MM("init`navigator:", true, 0),
    new MM("navigator", true, 0),
    new MM("init`currentPresenterX:", true, 0),
    new MM("currentPresenterX", true, 0),
    new MM("currentPresenterX:", true, 0),
    new MM("init`contentHolder:", true, 0),
    new MM("contentHolder", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HopscotchShell = function () {
    var self = this;
    self.$super$HopscotchForHTML5$HopscotchShell$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$HopscotchShell();
    self._$init$navigator$(self._$navigationHistory());
    self._$init$contentHolder$($0.$document(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$createElement$("div"));
    self._$listenForBackButton();
    return self;
   };
   this.$displayPresenter$ = function ($p) {
    var self = this;
    $p.$parent$(self);
    if (self._$contentHolder().$hasChildNodes()) {
     self._$contentHolder().$replaceChild$from$($p.$visual(), self._$contentHolder().$at$("firstChild"));
    } else {
     self._$contentHolder().$appendChild$($p.$visual());
    };
    return self;
   };
   this.$enterPresenter$ = function ($p) {
    var self = this;
    if (!$0.$document(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$at$("location").$at$("protocol").$$equal("file:")) {
     $0.$history(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$pushState$title$(self._$navigator().$idFor$($p), $p.$title());
    } else {
     nil;
    };
    self._$displayPresenter$($p);
    return self;
   };
   this.$enterSubject$ = function ($s) {
    var self = this;
    self._$enterPresenter$($s.$presenter());
    return self;
   };
   this.$listenForBackButton = function () {
    var self = this;
    $0.$window(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$at$put$("onpopstate", function ($e) {
     return self._$userBack$($e);
    });
    return self;
   };
   this.$navigationHistory = function () {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]._$NavigationHistory().$new();
   };
   this.$shell = function () {
    var self = this;
    return self;
   };
   this.$userBack$ = function ($e) {
    var self = this;
    var $p = nil;
    $p = self._$navigator().$presenterFor$($e.$at$("state"));
    self._$displayPresenter$($p);
    return self;
   };
   this.$init$navigator$ = function (v) {
    this.$navigator$slot = v;
    return this;
   };
   this.$navigator = function () {
    return this.$navigator$slot;
   };
   this.$init$currentPresenterX$ = function (v) {
    this.$currentPresenterX$slot = v;
    return this;
   };
   this.$currentPresenterX = function () {
    return this.$currentPresenterX$slot;
   };
   this.$currentPresenterX$ = function (v) {
    this.$currentPresenterX$slot = v;
    return this;
   };
   this.$init$contentHolder$ = function (v) {
    this.$contentHolder$slot = v;
    return this;
   };
   this.$contentHolder = function () {
    return this.$contentHolder$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HopscotchShell";
     this._$superInit$HopscotchForHTML5$HopscotchShell = $.$superInit$HopscotchForHTML5$HopscotchShell;
     this.$superInit$HopscotchForHTML5$HopscotchShell = dnuCatcher("$superInit$HopscotchForHTML5$HopscotchShell");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
     this.$enterPresenter$ = this._$enterPresenter$ = $.$enterPresenter$;
     this.$enterSubject$ = this._$enterSubject$ = $.$enterSubject$;
     this._$listenForBackButton = $.$listenForBackButton;
     this.$listenForBackButton = dnuCatcher("$listenForBackButton");
     this._$navigationHistory = $.$navigationHistory;
     this.$navigationHistory = dnuCatcher("$navigationHistory");
     this.$shell = this._$shell = $.$shell;
     this._$userBack$ = $.$userBack$;
     this.$userBack$ = dnuCatcher("$userBack$");
     this._$init$navigator$ = $.$init$navigator$;
     this.$init$navigator$ = dnuCatcher("$init$navigator$");
     this._$navigator = $.$navigator;
     this.$navigator = dnuCatcher("$navigator");
     this._$init$currentPresenterX$ = $.$init$currentPresenterX$;
     this.$init$currentPresenterX$ = dnuCatcher("$init$currentPresenterX$");
     this._$currentPresenterX = $.$currentPresenterX;
     this.$currentPresenterX = dnuCatcher("$currentPresenterX");
     this._$currentPresenterX$ = $.$currentPresenterX$;
     this.$currentPresenterX$ = dnuCatcher("$currentPresenterX$");
     this._$init$contentHolder$ = $.$init$contentHolder$;
     this.$init$contentHolder$ = dnuCatcher("$init$contentHolder$");
     this._$contentHolder = $.$contentHolder;
     this.$contentHolder = dnuCatcher("$contentHolder");
     this.$enclosingObjects$HopscotchForHTML5$HopscotchShell = enclosingObjects;
     this.$super$HopscotchForHTML5$HopscotchShell$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HopscotchShell"] = function () {
      superBasicNew.call(this);
      this.$navigator$slot = nil;
      this.$currentPresenterX$slot = nil;
      this.$contentHolder$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HopscotchShell"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HopscotchShell";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HopscotchShell";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$HopscotchShell = enclosingObjects;
      this.$super$HopscotchForHTML5$HopscotchShell = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HopscotchWindow = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HopscotchWindow";
   this.name = "HopscotchForHTML5`HopscotchWindow";
   this.header = 958;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HopscotchWindow", true, 959),
    new MM("instance`initializer", true, 960),
    new MM("displayPresenter:", false, 961)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HopscotchWindow = function ($container, $s) {
    var self = this;
    self.$super$HopscotchForHTML5$HopscotchWindow$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($container, $s) {
    var self = this;
    self._$superInit$HopscotchForHTML5$HopscotchWindow($container, $s);
    $container.$appendChild$(self._$contentHolder());
    self._$enterSubject$($s);
    return self;
   };
   this.$displayPresenter$ = function ($p) {
    var self = this;
    self.$super$HopscotchForHTML5$HopscotchWindow$slot._$displayPresenter$.call(self, $p);
    $0.$document(self.$enclosingObjects$HopscotchForHTML5$HopscotchWindow[0]).$at$put$("title", $p.$title());
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HopscotchWindow";
     this._$superInit$HopscotchForHTML5$HopscotchWindow = $.$superInit$HopscotchForHTML5$HopscotchWindow;
     this.$superInit$HopscotchForHTML5$HopscotchWindow = dnuCatcher("$superInit$HopscotchForHTML5$HopscotchWindow");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
     this.$enclosingObjects$HopscotchForHTML5$HopscotchWindow = enclosingObjects;
     this.$super$HopscotchForHTML5$HopscotchWindow$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HopscotchWindow"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`HopscotchWindow"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HopscotchWindow";
    this.slots = [];
    this.methods = [
     new MM("into:openSubject:", true, 0),
     new MM("openSubject:", false, 962)
    ];
    this.nestedClasses = [];
    this.$into$openSubject$ = function ($container, $s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($container, $s);
    };
    this.$openSubject$ = function ($s) {
     var self = this;
     return self._$into$openSubject$($0.$body(self.$enclosingObjects$HopscotchForHTML5$HopscotchWindow[0]), $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HopscotchWindow";
      this.$into$openSubject$ = this._$into$openSubject$ = $.$into$openSubject$;
      this.$openSubject$ = this._$openSubject$ = $.$openSubject$;
      this.$enclosingObjects$HopscotchForHTML5$HopscotchWindow = enclosingObjects;
      this.$super$HopscotchForHTML5$HopscotchWindow = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HyperlinkFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HyperlinkFragment";
   this.name = "HopscotchForHTML5`HyperlinkFragment";
   this.header = 963;
   this.slots = [
    new SM("label", false, false),
    new SM("action", false, false),
    new SM("color", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HyperlinkFragment", true, 964),
    new MM("instance`initializer", true, 965),
    new MM("createVisual", false, 966),
    new MM("init`label:", true, 0),
    new MM("label", true, 0),
    new MM("init`action:", true, 0),
    new MM("action", true, 0),
    new MM("init`color:", true, 0),
    new MM("color", true, 0),
    new MM("color:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HyperlinkFragment = function ($l, $a) {
    var self = this;
    self.$super$HopscotchForHTML5$HyperlinkFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($l, $a) {
    var self = this;
    self._$superInit$HopscotchForHTML5$HyperlinkFragment($l, $a);
    self._$init$label$($l);
    self._$init$action$($a);
    self._$init$color$($0.$Color(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$r$g$b$(0, 0, 1));
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $anchor = nil;
    $anchor = $0.$document(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$createElement$("a");
    $anchor.$at$put$("href", "#");
    $anchor.$appendChild$($0.$document(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$createTextNode$(self._$label()));
    $anchor.$at$put$("onclick", function () {
     self._$action().$value();
     return false;
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("textDecoration", "none");
     cascadeReceiver.$at$put$("overflow", "hidden");
     return cascadeReceiver.$setProperty$to$("white-space", "nowrap");
    })($anchor.$at$("style"));
    if (!self._$color().$isNil()) {
     $anchor.$at$("style").$setProperty$to$("color", self._$color().$asCSSString());
    } else {
     nil;
    };
    return $anchor;
   };
   this.$init$label$ = function (v) {
    this.$label$slot = v;
    return this;
   };
   this.$label = function () {
    return this.$label$slot;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HyperlinkFragment";
     this._$superInit$HopscotchForHTML5$HyperlinkFragment = $.$superInit$HopscotchForHTML5$HyperlinkFragment;
     this.$superInit$HopscotchForHTML5$HyperlinkFragment = dnuCatcher("$superInit$HopscotchForHTML5$HyperlinkFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$label$ = $.$init$label$;
     this.$init$label$ = dnuCatcher("$init$label$");
     this._$label = $.$label;
     this.$label = dnuCatcher("$label");
     this._$init$action$ = $.$init$action$;
     this.$init$action$ = dnuCatcher("$init$action$");
     this._$action = $.$action;
     this.$action = dnuCatcher("$action");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$HyperlinkFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HyperlinkFragment"] = function () {
      superBasicNew.call(this);
      this.$label$slot = nil;
      this.$action$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HyperlinkFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HyperlinkFragment";
    this.slots = [];
    this.methods = [new MM("label:action:", true, 0)];
    this.nestedClasses = [];
    this.$label$action$ = function ($l, $a) {
     return (new this.nonMeta.basicNew()).$instance$initializer($l, $a);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HyperlinkFragment";
      this.$label$action$ = this._$label$action$ = $.$label$action$;
      this.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$HyperlinkFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HyperlinkImageFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HyperlinkImageFragment";
   this.name = "HopscotchForHTML5`HyperlinkImageFragment";
   this.header = 967;
   this.slots = [
    new SM("image", false, false),
    new SM("action", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HyperlinkImageFragment", true, 968),
    new MM("instance`initializer", true, 969),
    new MM("createVisual", false, 970),
    new MM("init`image:", true, 0),
    new MM("image", true, 0),
    new MM("init`action:", true, 0),
    new MM("action", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HyperlinkImageFragment = function ($i, $a) {
    var self = this;
    self.$super$HopscotchForHTML5$HyperlinkImageFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($i, $a) {
    var self = this;
    self._$superInit$HopscotchForHTML5$HyperlinkImageFragment($i, $a);
    self._$init$image$($i);
    self._$init$action$($a);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $img = nil;
    $img = self._$image().$cloneNode$(false);
    $img.$at$put$("onclick", function () {
     self._$action().$value();
     return false;
    });
    return $img;
   };
   this.$init$image$ = function (v) {
    this.$image$slot = v;
    return this;
   };
   this.$image = function () {
    return this.$image$slot;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HyperlinkImageFragment";
     this._$superInit$HopscotchForHTML5$HyperlinkImageFragment = $.$superInit$HopscotchForHTML5$HyperlinkImageFragment;
     this.$superInit$HopscotchForHTML5$HyperlinkImageFragment = dnuCatcher("$superInit$HopscotchForHTML5$HyperlinkImageFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$image$ = $.$init$image$;
     this.$init$image$ = dnuCatcher("$init$image$");
     this._$image = $.$image;
     this.$image = dnuCatcher("$image");
     this._$init$action$ = $.$init$action$;
     this.$init$action$ = dnuCatcher("$init$action$");
     this._$action = $.$action;
     this.$action = dnuCatcher("$action");
     this.$enclosingObjects$HopscotchForHTML5$HyperlinkImageFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$HyperlinkImageFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HyperlinkImageFragment"] = function () {
      superBasicNew.call(this);
      this.$image$slot = nil;
      this.$action$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HyperlinkImageFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HyperlinkImageFragment";
    this.slots = [];
    this.methods = [new MM("image:action:", true, 0)];
    this.nestedClasses = [];
    this.$image$action$ = function ($i, $a) {
     return (new this.nonMeta.basicNew()).$instance$initializer($i, $a);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HyperlinkImageFragment";
      this.$image$action$ = this._$image$action$ = $.$image$action$;
      this.$enclosingObjects$HopscotchForHTML5$HyperlinkImageFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$HyperlinkImageFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$LeafFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`LeafFragment";
   this.name = "HopscotchForHTML5`LeafFragment";
   this.header = 971;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`LeafFragment", true, 972),
    new MM("instance`initializer", true, 973)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$LeafFragment = function () {
    var self = this;
    self.$super$HopscotchForHTML5$LeafFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$LeafFragment();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`LeafFragment";
     this._$superInit$HopscotchForHTML5$LeafFragment = $.$superInit$HopscotchForHTML5$LeafFragment;
     this.$superInit$HopscotchForHTML5$LeafFragment = dnuCatcher("$superInit$HopscotchForHTML5$LeafFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enclosingObjects$HopscotchForHTML5$LeafFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$LeafFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`LeafFragment"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`LeafFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`LeafFragment";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`LeafFragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$LeafFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$LeafFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$LocalNavigationHistory = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`LocalNavigationHistory";
   this.name = "HopscotchForHTML5`LocalNavigationHistory";
   this.header = 974;
   this.slots = [
    new SM("currentVisitSlot", true, false),
    new SM("allVisits", true, false),
    new SM("past", true, false),
    new SM("future", true, false),
    new SM("transientTestBlock", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`LocalNavigationHistory", true, 975),
    new MM("instance`initializer", true, 976),
    new MM("current", false, 977),
    new MM("do:", false, 978),
    new MM("equalVisitOr:", false, 979),
    new MM("erase", false, 980),
    new MM("eraseEntry:", false, 981),
    new MM("eraseFuture", false, 982),
    new MM("erasePast", false, 983),
    new MM("goBack", false, 984),
    new MM("goForward", false, 985),
    new MM("goToFutureItem:", false, 986),
    new MM("goToPastItem:", false, 987),
    new MM("includesVisit:", false, 988),
    new MM("isEmpty", false, 989),
    new MM("isFutureEmpty", false, 990),
    new MM("isPastEmpty", false, 991),
    new MM("isTransient:", false, 992),
    new MM("next", false, 993),
    new MM("previous", false, 994),
    new MM("replace:with:", false, 995),
    new MM("replaceCurrentWith:", false, 996),
    new MM("visit:", false, 997),
    new MM("init`currentVisitSlot:", true, 0),
    new MM("currentVisitSlot", true, 0),
    new MM("currentVisitSlot:", true, 0),
    new MM("init`allVisits:", true, 0),
    new MM("allVisits", true, 0),
    new MM("allVisits:", true, 0),
    new MM("init`past:", true, 0),
    new MM("past", true, 0),
    new MM("past:", true, 0),
    new MM("init`future:", true, 0),
    new MM("future", true, 0),
    new MM("future:", true, 0),
    new MM("init`transientTestBlock:", true, 0),
    new MM("transientTestBlock", true, 0),
    new MM("transientTestBlock:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$LocalNavigationHistory = function () {
    var self = this;
    self.$super$HopscotchForHTML5$LocalNavigationHistory$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$LocalNavigationHistory();
    self._$init$transientTestBlock$(function ($element) {
     return false;
    });
    self._$erase();
    return self;
   };
   this.$current = function () {
    var self = this;
    return self._$currentVisitSlot();
   };
   this.$do$ = function ($aBlock) {
    var self = this;
    if (self._$isTransient$(self._$currentVisitSlot())) {
     $aBlock.$value$(self._$currentVisitSlot());
    } else {
     nil;
    };
    self._$allVisits().$do$($aBlock);
    return self;
   };
   this.$equalVisitOr$ = function ($anObject) {
    var self = this;
    return self._$allVisits().$detect$ifNone$(function ($some) {
     return $some.$$equal($anObject);
    }, function () {
     return $anObject;
    });
   };
   this.$erase = function () {
    var self = this;
    self._$currentVisitSlot$(nil);
    self._$allVisits$($0.$List(self.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory[0]).$new());
    self._$erasePast();
    self._$eraseFuture();
    return self;
   };
   this.$eraseEntry$ = function ($anObject) {
    var self = this;
    self._$allVisits().$remove$($anObject);
    self._$past().$remove$ifAbsent$($anObject, function () {
     return nil;
    });
    self._$future().$remove$ifAbsent$($anObject, function () {
     return nil;
    });
    return self;
   };
   this.$eraseFuture = function () {
    var self = this;
    self._$future$($0.$List(self.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory[0]).$new());
    return self;
   };
   this.$erasePast = function () {
    var self = this;
    self._$past$($0.$List(self.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory[0]).$new());
    return self;
   };
   this.$goBack = function () {
    var self = this;
    if (!self._$isPastEmpty()) {
     if (!self._$isTransient$(self._$currentVisitSlot())) {
      self._$future().$addFirst$(self._$currentVisitSlot());
     } else {
      nil;
     };
     self._$currentVisitSlot$(self._$past().$removeLast());
    } else {
     nil;
    };
    return self;
   };
   this.$goForward = function () {
    var self = this;
    if (!self._$isFutureEmpty()) {
     if (!self._$isTransient$(self._$currentVisitSlot())) {
      self._$past().$addLast$(self._$currentVisitSlot());
     } else {
      nil;
     };
     self._$currentVisitSlot$(self._$future().$removeFirst());
    } else {
     nil;
    };
    return self;
   };
   this.$goToFutureItem$ = function ($anObject) {
    var self = this;
    {
     nil;
     for (; !(self._$currentVisitSlot().$$equal($anObject) || self._$isFutureEmpty()); ) {
      self._$goForward();
     };
    };
    return self;
   };
   this.$goToPastItem$ = function ($anObject) {
    var self = this;
    {
     nil;
     for (; !(self._$currentVisitSlot().$$equal($anObject) || self._$isPastEmpty()); ) {
      self._$goBack();
     };
    };
    return self;
   };
   this.$includesVisit$ = function ($anObject) {
    var self = this;
    return self._$allVisits().$includes$($anObject);
   };
   this.$isEmpty = function () {
    var self = this;
    return self._$allVisits().$isEmpty();
   };
   this.$isFutureEmpty = function () {
    var self = this;
    return self._$future().$isEmpty();
   };
   this.$isPastEmpty = function () {
    var self = this;
    return self._$past().$isEmpty();
   };
   this.$isTransient$ = function ($anObject) {
    var self = this;
    return self._$transientTestBlock().$value$($anObject);
   };
   this.$next = function () {
    var self = this;
    return self._$future().$first();
   };
   this.$previous = function () {
    var self = this;
    return self._$past().$last();
   };
   this.$replace$with$ = function ($anObject, $replacement) {
    var self = this;
    self._$allVisits().$remove$ifAbsent$($anObject, function () {
     return nil;
    });
    if (!self._$isTransient$($replacement)) {
     self._$allVisits().$add$($replacement);
    } else {
     nil;
    };
    if (self._$currentVisitSlot().$$equal($anObject)) {
     self._$currentVisitSlot$($replacement);
    } else {
     nil;
    };
    self._$past().$keysAndValuesDo$(function ($index, $each) {
     return $each.$$equal($anObject).$ifTrue$(function () {
      return self._$past().$at$put$($index, $replacement);
     });
    });
    self._$future().$keysAndValuesDo$(function ($index, $each) {
     return $each.$$equal($anObject).$ifTrue$(function () {
      return self._$future().$at$put$($index, $replacement);
     });
    });
    return self;
   };
   this.$replaceCurrentWith$ = function ($anObject) {
    var self = this;
    self._$replace$with$(self._$currentVisitSlot(), $anObject);
    return self;
   };
   this.$visit$ = function ($anObject) {
    var self = this;
    if (self._$currentVisitSlot().$$equal($anObject)) {
     return self;
    } else {
     nil;
    };
    if (self._$currentVisitSlot().$notNil() && self._$isTransient$(self._$currentVisitSlot()).$not()) {
     self._$past().$addLast$(self._$currentVisitSlot());
    } else {
     nil;
    };
    self._$currentVisitSlot$($anObject);
    if (!self._$isTransient$($anObject)) {
     (function (cascadeReceiver) {
      cascadeReceiver.$remove$ifAbsent$($anObject, function () {
       return nil;
      });
      return cascadeReceiver.$add$($anObject);
     })(self._$allVisits());
    } else {
     nil;
    };
    if (self._$future().$isEmpty().$not()) {
     if (self._$future().$first().$$equal(self._$currentVisitSlot())) {
      self._$future().$removeFirst();
     } else {
      self._$eraseFuture();
     };
    } else {
     nil;
    };
    return self;
   };
   this.$init$currentVisitSlot$ = function (v) {
    this.$currentVisitSlot$slot = v;
    return this;
   };
   this.$currentVisitSlot = function () {
    return this.$currentVisitSlot$slot;
   };
   this.$currentVisitSlot$ = function (v) {
    this.$currentVisitSlot$slot = v;
    return this;
   };
   this.$init$allVisits$ = function (v) {
    this.$allVisits$slot = v;
    return this;
   };
   this.$allVisits = function () {
    return this.$allVisits$slot;
   };
   this.$allVisits$ = function (v) {
    this.$allVisits$slot = v;
    return this;
   };
   this.$init$past$ = function (v) {
    this.$past$slot = v;
    return this;
   };
   this.$past = function () {
    return this.$past$slot;
   };
   this.$past$ = function (v) {
    this.$past$slot = v;
    return this;
   };
   this.$init$future$ = function (v) {
    this.$future$slot = v;
    return this;
   };
   this.$future = function () {
    return this.$future$slot;
   };
   this.$future$ = function (v) {
    this.$future$slot = v;
    return this;
   };
   this.$init$transientTestBlock$ = function (v) {
    this.$transientTestBlock$slot = v;
    return this;
   };
   this.$transientTestBlock = function () {
    return this.$transientTestBlock$slot;
   };
   this.$transientTestBlock$ = function (v) {
    this.$transientTestBlock$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`LocalNavigationHistory";
     this._$superInit$HopscotchForHTML5$LocalNavigationHistory = $.$superInit$HopscotchForHTML5$LocalNavigationHistory;
     this.$superInit$HopscotchForHTML5$LocalNavigationHistory = dnuCatcher("$superInit$HopscotchForHTML5$LocalNavigationHistory");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$current = this._$current = $.$current;
     this.$do$ = this._$do$ = $.$do$;
     this.$equalVisitOr$ = this._$equalVisitOr$ = $.$equalVisitOr$;
     this.$erase = this._$erase = $.$erase;
     this.$eraseEntry$ = this._$eraseEntry$ = $.$eraseEntry$;
     this._$eraseFuture = $.$eraseFuture;
     this.$eraseFuture = dnuCatcher("$eraseFuture");
     this._$erasePast = $.$erasePast;
     this.$erasePast = dnuCatcher("$erasePast");
     this.$goBack = this._$goBack = $.$goBack;
     this.$goForward = this._$goForward = $.$goForward;
     this.$goToFutureItem$ = this._$goToFutureItem$ = $.$goToFutureItem$;
     this.$goToPastItem$ = this._$goToPastItem$ = $.$goToPastItem$;
     this._$includesVisit$ = $.$includesVisit$;
     this.$includesVisit$ = dnuCatcher("$includesVisit$");
     this._$isEmpty = $.$isEmpty;
     this.$isEmpty = dnuCatcher("$isEmpty");
     this.$isFutureEmpty = this._$isFutureEmpty = $.$isFutureEmpty;
     this.$isPastEmpty = this._$isPastEmpty = $.$isPastEmpty;
     this._$isTransient$ = $.$isTransient$;
     this.$isTransient$ = dnuCatcher("$isTransient$");
     this._$next = $.$next;
     this.$next = dnuCatcher("$next");
     this._$previous = $.$previous;
     this.$previous = dnuCatcher("$previous");
     this._$replace$with$ = $.$replace$with$;
     this.$replace$with$ = dnuCatcher("$replace$with$");
     this.$replaceCurrentWith$ = this._$replaceCurrentWith$ = $.$replaceCurrentWith$;
     this.$visit$ = this._$visit$ = $.$visit$;
     this._$init$currentVisitSlot$ = $.$init$currentVisitSlot$;
     this.$init$currentVisitSlot$ = dnuCatcher("$init$currentVisitSlot$");
     this._$currentVisitSlot = $.$currentVisitSlot;
     this.$currentVisitSlot = dnuCatcher("$currentVisitSlot");
     this._$currentVisitSlot$ = $.$currentVisitSlot$;
     this.$currentVisitSlot$ = dnuCatcher("$currentVisitSlot$");
     this.$init$allVisits$ = this._$init$allVisits$ = $.$init$allVisits$;
     this.$allVisits = this._$allVisits = $.$allVisits;
     this.$allVisits$ = this._$allVisits$ = $.$allVisits$;
     this.$init$past$ = this._$init$past$ = $.$init$past$;
     this.$past = this._$past = $.$past;
     this.$past$ = this._$past$ = $.$past$;
     this.$init$future$ = this._$init$future$ = $.$init$future$;
     this.$future = this._$future = $.$future;
     this.$future$ = this._$future$ = $.$future$;
     this.$init$transientTestBlock$ = this._$init$transientTestBlock$ = $.$init$transientTestBlock$;
     this.$transientTestBlock = this._$transientTestBlock = $.$transientTestBlock;
     this.$transientTestBlock$ = this._$transientTestBlock$ = $.$transientTestBlock$;
     this.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory = enclosingObjects;
     this.$super$HopscotchForHTML5$LocalNavigationHistory$slot = runtimeSuperclass;
     this["HopscotchForHTML5`LocalNavigationHistory"] = function () {
      superBasicNew.call(this);
      this.$currentVisitSlot$slot = nil;
      this.$allVisits$slot = nil;
      this.$past$slot = nil;
      this.$future$slot = nil;
      this.$transientTestBlock$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`LocalNavigationHistory"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`LocalNavigationHistory";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`LocalNavigationHistory";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory = enclosingObjects;
      this.$super$HopscotchForHTML5$LocalNavigationHistory = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$NavigationHistory = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`NavigationHistory";
   this.name = "HopscotchForHTML5`NavigationHistory";
   this.header = 998;
   this.slots = [
    new SM("nextId", true, false),
    new SM("ids", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`NavigationHistory", true, 999),
    new MM("instance`initializer", true, 1000),
    new MM("idFor:", false, 1001),
    new MM("presenterFor:", false, 1002),
    new MM("init`nextId:", true, 0),
    new MM("nextId", true, 0),
    new MM("nextId:", true, 0),
    new MM("init`ids:", true, 0),
    new MM("ids", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$NavigationHistory = function () {
    var self = this;
    self.$super$HopscotchForHTML5$NavigationHistory$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$NavigationHistory();
    self._$init$nextId$(1);
    self._$init$ids$($0.$Map(self.$enclosingObjects$HopscotchForHTML5$NavigationHistory[0]).$new());
    return self;
   };
   this.$idFor$ = function ($x) {
    var self = this;
    return self._$ids().$at$ifAbsentPut$($x, function () {
     return (function ($setter_arg) {
      self._$nextId$($setter_arg);
      return $setter_arg;
     }).$value$(self._$nextId() + 1);
    });
   };
   this.$presenterFor$ = function ($x) {
    var self = this;
    return self._$ids().$keyAtValue$($x);
   };
   this.$init$nextId$ = function (v) {
    this.$nextId$slot = v;
    return this;
   };
   this.$nextId = function () {
    return this.$nextId$slot;
   };
   this.$nextId$ = function (v) {
    this.$nextId$slot = v;
    return this;
   };
   this.$init$ids$ = function (v) {
    this.$ids$slot = v;
    return this;
   };
   this.$ids = function () {
    return this.$ids$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`NavigationHistory";
     this._$superInit$HopscotchForHTML5$NavigationHistory = $.$superInit$HopscotchForHTML5$NavigationHistory;
     this.$superInit$HopscotchForHTML5$NavigationHistory = dnuCatcher("$superInit$HopscotchForHTML5$NavigationHistory");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$idFor$ = this._$idFor$ = $.$idFor$;
     this.$presenterFor$ = this._$presenterFor$ = $.$presenterFor$;
     this._$init$nextId$ = $.$init$nextId$;
     this.$init$nextId$ = dnuCatcher("$init$nextId$");
     this._$nextId = $.$nextId;
     this.$nextId = dnuCatcher("$nextId");
     this._$nextId$ = $.$nextId$;
     this.$nextId$ = dnuCatcher("$nextId$");
     this._$init$ids$ = $.$init$ids$;
     this.$init$ids$ = dnuCatcher("$init$ids$");
     this._$ids = $.$ids;
     this.$ids = dnuCatcher("$ids");
     this.$enclosingObjects$HopscotchForHTML5$NavigationHistory = enclosingObjects;
     this.$super$HopscotchForHTML5$NavigationHistory$slot = runtimeSuperclass;
     this["HopscotchForHTML5`NavigationHistory"] = function () {
      superBasicNew.call(this);
      this.$nextId$slot = nil;
      this.$ids$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`NavigationHistory"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`NavigationHistory";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`NavigationHistory";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$NavigationHistory = enclosingObjects;
      this.$super$HopscotchForHTML5$NavigationHistory = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$PaddedFrameComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`PaddedFrameComposer";
   this.name = "HopscotchForHTML5`PaddedFrameComposer";
   this.header = 1003;
   this.slots = [
    new SM("content", false, false),
    new SM("offsets", false, false),
    new SM("color", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`PaddedFrameComposer", true, 1004),
    new MM("instance`initializer", true, 1005),
    new MM("createVisual", false, 1006),
    new MM("init`content:", true, 0),
    new MM("content", true, 0),
    new MM("init`offsets:", true, 0),
    new MM("offsets", true, 0),
    new MM("init`color:", true, 0),
    new MM("color", true, 0),
    new MM("color:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$PaddedFrameComposer = function ($c, $o) {
    var self = this;
    self.$super$HopscotchForHTML5$PaddedFrameComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($c, $o) {
    var self = this;
    self._$superInit$HopscotchForHTML5$PaddedFrameComposer($c, $o);
    self._$init$content$($c);
    self._$init$offsets$($o);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("paddingLeft", self._$offsets().$at$(1).$printString().$$comma("px"));
     cascadeReceiver.$at$put$("paddingTop", self._$offsets().$at$(2).$printString().$$comma("px"));
     cascadeReceiver.$at$put$("paddingRight", self._$offsets().$at$(3).$printString().$$comma("px"));
     return cascadeReceiver.$at$put$("paddingBottom", self._$offsets().$at$(4).$printString().$$comma("px"));
    })($div.$at$("style"));
    if (!self._$color().$isNil()) {
     self._$color().$applyToStyle$($div.$at$("style"));
    } else {
     nil;
    };
    self._$content().$parent$(self);
    $div.$appendChild$(self._$content().$visual());
    return $div;
   };
   this.$init$content$ = function (v) {
    this.$content$slot = v;
    return this;
   };
   this.$content = function () {
    return this.$content$slot;
   };
   this.$init$offsets$ = function (v) {
    this.$offsets$slot = v;
    return this;
   };
   this.$offsets = function () {
    return this.$offsets$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`PaddedFrameComposer";
     this._$superInit$HopscotchForHTML5$PaddedFrameComposer = $.$superInit$HopscotchForHTML5$PaddedFrameComposer;
     this.$superInit$HopscotchForHTML5$PaddedFrameComposer = dnuCatcher("$superInit$HopscotchForHTML5$PaddedFrameComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$content$ = $.$init$content$;
     this.$init$content$ = dnuCatcher("$init$content$");
     this._$content = $.$content;
     this.$content = dnuCatcher("$content");
     this._$init$offsets$ = $.$init$offsets$;
     this.$init$offsets$ = dnuCatcher("$init$offsets$");
     this._$offsets = $.$offsets;
     this.$offsets = dnuCatcher("$offsets");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$PaddedFrameComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`PaddedFrameComposer"] = function () {
      superBasicNew.call(this);
      this.$content$slot = nil;
      this.$offsets$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`PaddedFrameComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`PaddedFrameComposer";
    this.slots = [];
    this.methods = [new MM("content:offsets:", true, 0)];
    this.nestedClasses = [];
    this.$content$offsets$ = function ($c, $o) {
     return (new this.nonMeta.basicNew()).$instance$initializer($c, $o);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`PaddedFrameComposer";
      this.$content$offsets$ = this._$content$offsets$ = $.$content$offsets$;
      this.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$PaddedFrameComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Presenter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Presenter";
   this.name = "HopscotchForHTML5`Presenter";
   this.header = 1007;
   this.slots = [new SM("subject", true, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Presenter", true, 1008),
    new MM("instance`initializer", true, 1009),
    new MM("linkImage:action:", false, 1010),
    new MM("alert:", false, 1011),
    new MM("blank:", false, 1012),
    new MM("button:action:", false, 1013),
    new MM("canvas:", false, 1014),
    new MM("collapsed:expanded:", false, 1015),
    new MM("collapsed:expanded:initiallyExpanded:", false, 1016),
    new MM("column:", false, 1017),
    new MM("createVisual", false, 1018),
    new MM("deferred:", false, 1019),
    new MM("definition", false, 1020),
    new MM("enterSubject:", false, 1021),
    new MM("enterSubject:fromSnippet:", false, 1022),
    new MM("expanded:collapsed:", false, 1023),
    new MM("filler", false, 1024),
    new MM("holder:", false, 1025),
    new MM("image:", false, 1026),
    new MM("initially:deferred:", false, 1027),
    new MM("label:", false, 1028),
    new MM("link:action:", false, 1029),
    new MM("mediumBlank", false, 1030),
    new MM("nothing", false, 1031),
    new MM("padded:with:", false, 1032),
    new MM("row:", false, 1033),
    new MM("textDisplay:", false, 1034),
    new MM("textField:onAccept:", false, 1035),
    new MM("title", false, 1036),
    new MM("init`subject:", true, 0),
    new MM("subject", true, 0),
    new MM("subject:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Presenter = function ($aSubject) {
    var self = this;
    self.$super$HopscotchForHTML5$Presenter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($aSubject) {
    var self = this;
    self._$superInit$HopscotchForHTML5$Presenter($aSubject);
    self._$init$subject$($aSubject);
    return self;
   };
   this.$linkImage$action$ = function ($image, $block) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HyperlinkImageFragment().$image$action$($image, $block);
   };
   this.$alert$ = function ($text) {
    var self = this;
    $0.$window(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]).$alert$($text);
    return self;
   };
   this.$blank$ = function ($size) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new().$size$($size);
   };
   this.$button$action$ = function ($label, $block) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ButtonFragment().$label$action$($label, $block);
   };
   this.$canvas$ = function ($extent) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$CanvasFragment().$withExtent$($extent);
   };
   this.$collapsed$expanded$ = function ($collapsed, $expanded) {
    var self = this;
    return self._$collapsed$expanded$initiallyExpanded$($collapsed, $expanded, false);
   };
   this.$collapsed$expanded$initiallyExpanded$ = function ($collapsed, $expanded, $flag) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ToggleComposer().$collapsedDefinition$expandedDefinition$initiallyExpanded$($collapsed, $expanded, $flag);
   };
   this.$column$ = function ($definitions) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ColumnComposer().$definitions$($definitions);
   };
   this.$createVisual = function () {
    var self = this;
    var $substance = nil;
    $substance = self._$definition();
    $substance.$parent$(self);
    return $substance.$visual();
   };
   this.$deferred$ = function ($contentSource) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DeferredContentComposer().$initialContent$contentSource$(self._$nothing(), $contentSource);
   };
   this.$definition = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$enterSubject$ = function ($s) {
    var self = this;
    return self._$shell().$enterSubject$($s);
   };
   this.$enterSubject$fromSnippet$ = function ($s, $snippet) {
    var self = this;
    return self._$shell().$enterSubject$fromSnippet$($s, $snippet);
   };
   this.$expanded$collapsed$ = function ($expanded, $collapsed) {
    var self = this;
    return self._$collapsed$expanded$initiallyExpanded$($collapsed, $expanded, true);
   };
   this.$filler = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$expansibility$(1);
     return cascadeReceiver.$compressibility$(1);
    })(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new());
   };
   this.$holder$ = function ($definition) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HolderComposer().$withContent$($definition);
   };
   this.$image$ = function ($image) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$StaticImageFragment().$image$($image);
   };
   this.$initially$deferred$ = function ($initialContent, $contentSource) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DeferredContentComposer().$initialContent$contentSource$($initialContent, $contentSource);
   };
   this.$label$ = function ($label) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$StaticLabelFragment().$text$($label);
   };
   this.$link$action$ = function ($label, $block) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HyperlinkFragment().$label$action$($label, $block);
   };
   this.$mediumBlank = function () {
    var self = this;
    return self._$blank$(10);
   };
   this.$nothing = function () {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new();
   };
   this.$padded$with$ = function ($definition, $offsets) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$PaddedFrameComposer().$content$offsets$($definition, $offsets);
   };
   this.$row$ = function ($definitions) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$RowComposer().$definitions$($definitions);
   };
   this.$textDisplay$ = function ($string) {
    var self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextDisplayFragment().$text$($string);
   };
   this.$textField$onAccept$ = function ($initialText, $blk) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$text$($initialText);
     return cascadeReceiver.$acceptResponse$($blk);
    })(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$fragments().$TextEditorFragment().$new());
   };
   this.$title = function () {
    var self = this;
    return self._$subject().$title();
   };
   this.$init$subject$ = function (v) {
    this.$subject$slot = v;
    return this;
   };
   this.$subject = function () {
    return this.$subject$slot;
   };
   this.$subject$ = function (v) {
    this.$subject$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Presenter";
     this._$superInit$HopscotchForHTML5$Presenter = $.$superInit$HopscotchForHTML5$Presenter;
     this.$superInit$HopscotchForHTML5$Presenter = dnuCatcher("$superInit$HopscotchForHTML5$Presenter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$linkImage$action$ = $.$linkImage$action$;
     this.$linkImage$action$ = dnuCatcher("$linkImage$action$");
     this._$alert$ = $.$alert$;
     this.$alert$ = dnuCatcher("$alert$");
     this._$blank$ = $.$blank$;
     this.$blank$ = dnuCatcher("$blank$");
     this._$button$action$ = $.$button$action$;
     this.$button$action$ = dnuCatcher("$button$action$");
     this._$canvas$ = $.$canvas$;
     this.$canvas$ = dnuCatcher("$canvas$");
     this._$collapsed$expanded$ = $.$collapsed$expanded$;
     this.$collapsed$expanded$ = dnuCatcher("$collapsed$expanded$");
     this._$collapsed$expanded$initiallyExpanded$ = $.$collapsed$expanded$initiallyExpanded$;
     this.$collapsed$expanded$initiallyExpanded$ = dnuCatcher("$collapsed$expanded$initiallyExpanded$");
     this._$column$ = $.$column$;
     this.$column$ = dnuCatcher("$column$");
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$deferred$ = $.$deferred$;
     this.$deferred$ = dnuCatcher("$deferred$");
     this.$definition = this._$definition = $.$definition;
     this._$enterSubject$ = $.$enterSubject$;
     this.$enterSubject$ = dnuCatcher("$enterSubject$");
     this._$enterSubject$fromSnippet$ = $.$enterSubject$fromSnippet$;
     this.$enterSubject$fromSnippet$ = dnuCatcher("$enterSubject$fromSnippet$");
     this._$expanded$collapsed$ = $.$expanded$collapsed$;
     this.$expanded$collapsed$ = dnuCatcher("$expanded$collapsed$");
     this._$filler = $.$filler;
     this.$filler = dnuCatcher("$filler");
     this._$holder$ = $.$holder$;
     this.$holder$ = dnuCatcher("$holder$");
     this._$image$ = $.$image$;
     this.$image$ = dnuCatcher("$image$");
     this._$initially$deferred$ = $.$initially$deferred$;
     this.$initially$deferred$ = dnuCatcher("$initially$deferred$");
     this._$label$ = $.$label$;
     this.$label$ = dnuCatcher("$label$");
     this._$link$action$ = $.$link$action$;
     this.$link$action$ = dnuCatcher("$link$action$");
     this._$mediumBlank = $.$mediumBlank;
     this.$mediumBlank = dnuCatcher("$mediumBlank");
     this._$nothing = $.$nothing;
     this.$nothing = dnuCatcher("$nothing");
     this._$padded$with$ = $.$padded$with$;
     this.$padded$with$ = dnuCatcher("$padded$with$");
     this._$row$ = $.$row$;
     this.$row$ = dnuCatcher("$row$");
     this._$textDisplay$ = $.$textDisplay$;
     this.$textDisplay$ = dnuCatcher("$textDisplay$");
     this._$textField$onAccept$ = $.$textField$onAccept$;
     this.$textField$onAccept$ = dnuCatcher("$textField$onAccept$");
     this.$title = this._$title = $.$title;
     this._$init$subject$ = $.$init$subject$;
     this.$init$subject$ = dnuCatcher("$init$subject$");
     this._$subject = $.$subject;
     this.$subject = dnuCatcher("$subject");
     this._$subject$ = $.$subject$;
     this.$subject$ = dnuCatcher("$subject$");
     this.$enclosingObjects$HopscotchForHTML5$Presenter = enclosingObjects;
     this.$super$HopscotchForHTML5$Presenter$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Presenter"] = function () {
      superBasicNew.call(this);
      this.$subject$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Presenter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Presenter";
    this.slots = [];
    this.methods = [new MM("onSubject:", true, 0)];
    this.nestedClasses = [];
    this.$onSubject$ = function ($aSubject) {
     return (new this.nonMeta.basicNew()).$instance$initializer($aSubject);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Presenter";
      this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
      this.$enclosingObjects$HopscotchForHTML5$Presenter = enclosingObjects;
      this.$super$HopscotchForHTML5$Presenter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$RowComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`RowComposer";
   this.name = "HopscotchForHTML5`RowComposer";
   this.header = 1037;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`RowComposer", true, 1038),
    new MM("instance`initializer", true, 1039),
    new MM("flexDirection", false, 1040)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$RowComposer = function ($fragments) {
    var self = this;
    self.$super$HopscotchForHTML5$RowComposer$slot._$instance$initializer.call(self, $fragments);
    return self;
   };
   this.$instance$initializer = function ($fragments) {
    var self = this;
    self._$superInit$HopscotchForHTML5$RowComposer($fragments);
    return self;
   };
   this.$flexDirection = function () {
    var self = this;
    return "row";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`RowComposer";
     this._$superInit$HopscotchForHTML5$RowComposer = $.$superInit$HopscotchForHTML5$RowComposer;
     this.$superInit$HopscotchForHTML5$RowComposer = dnuCatcher("$superInit$HopscotchForHTML5$RowComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$flexDirection = $.$flexDirection;
     this.$flexDirection = dnuCatcher("$flexDirection");
     this.$enclosingObjects$HopscotchForHTML5$RowComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$RowComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`RowComposer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`RowComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`RowComposer";
    this.slots = [];
    this.methods = [new MM("definitions:", true, 0)];
    this.nestedClasses = [];
    this.$definitions$ = function ($fragments) {
     return (new this.nonMeta.basicNew()).$instance$initializer($fragments);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`RowComposer";
      this.$definitions$ = this._$definitions$ = $.$definitions$;
      this.$enclosingObjects$HopscotchForHTML5$RowComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$RowComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$SequenceComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`SequenceComposer";
   this.name = "HopscotchForHTML5`SequenceComposer";
   this.header = 1041;
   this.slots = [
    new SM("definitions", false, false),
    new SM("color", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`SequenceComposer", true, 1042),
    new MM("instance`initializer", true, 1043),
    new MM("createVisual", false, 1044),
    new MM("init`definitions:", true, 0),
    new MM("definitions", true, 0),
    new MM("init`color:", true, 0),
    new MM("color", true, 0),
    new MM("color:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$SequenceComposer = function ($fragments) {
    var self = this;
    self.$super$HopscotchForHTML5$SequenceComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($fragments) {
    var self = this;
    self._$superInit$HopscotchForHTML5$SequenceComposer($fragments);
    self._$init$definitions$($fragments);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $container = nil;
    $container = $0.$document(self.$enclosingObjects$HopscotchForHTML5$SequenceComposer[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("overflow", "hidden");
     cascadeReceiver.$at$put$("display", "-webkit-flex");
     cascadeReceiver.$at$put$("display", "flex");
     cascadeReceiver.$at$put$("-webkit-flex-direction", self._$flexDirection());
     return cascadeReceiver.$setProperty$to$("flex-direction", self._$flexDirection());
    })($container.$at$("style"));
    if (!self._$color().$isNil()) {
     self._$color().$applyToStyle$($container.$at$("style"));
    } else {
     nil;
    };
    self._$definitions().$do$(function ($fragment) {
     var $cell = nil;
     $fragment.$parent$(self);
     $cell = $0.$document(self.$enclosingObjects$HopscotchForHTML5$SequenceComposer[0]).$createElement$("div");
     $cell.$appendChild$($fragment.$visual());
     (function (cascadeReceiver) {
      cascadeReceiver.$at$put$("-webkit-flex-grow", $fragment.$expansibility());
      cascadeReceiver.$setProperty$to$("flex-grow", $fragment.$expansibility());
      cascadeReceiver.$at$put$("-webkit-flex-shrink", $fragment.$compressibility());
      return cascadeReceiver.$setProperty$to$("flex-shrink", $fragment.$compressibility());
     })($cell.$at$("style"));
     if (!$fragment.$size().$isNil()) {
      (function (cascadeReceiver) {
       cascadeReceiver.$at$put$("flexBasis", $fragment.$size().$printString().$$comma("px"));
       return cascadeReceiver.$at$put$("-webkit-flex-basis", $fragment.$size().$printString().$$comma("px"));
      })($cell.$at$("style"));
     } else {
      nil;
     };
     return $container.$appendChild$($cell);
    });
    return $container;
   };
   this.$init$definitions$ = function (v) {
    this.$definitions$slot = v;
    return this;
   };
   this.$definitions = function () {
    return this.$definitions$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`SequenceComposer";
     this._$superInit$HopscotchForHTML5$SequenceComposer = $.$superInit$HopscotchForHTML5$SequenceComposer;
     this.$superInit$HopscotchForHTML5$SequenceComposer = dnuCatcher("$superInit$HopscotchForHTML5$SequenceComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$definitions$ = $.$init$definitions$;
     this.$init$definitions$ = dnuCatcher("$init$definitions$");
     this._$definitions = $.$definitions;
     this.$definitions = dnuCatcher("$definitions");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$SequenceComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$SequenceComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`SequenceComposer"] = function () {
      superBasicNew.call(this);
      this.$definitions$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`SequenceComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`SequenceComposer";
    this.slots = [];
    this.methods = [new MM("definitions:", true, 0)];
    this.nestedClasses = [];
    this.$definitions$ = function ($fragments) {
     return (new this.nonMeta.basicNew()).$instance$initializer($fragments);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`SequenceComposer";
      this.$definitions$ = this._$definitions$ = $.$definitions$;
      this.$enclosingObjects$HopscotchForHTML5$SequenceComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$SequenceComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$StaticImageFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`StaticImageFragment";
   this.name = "HopscotchForHTML5`StaticImageFragment";
   this.header = 1045;
   this.slots = [new SM("image", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`StaticImageFragment", true, 1046),
    new MM("instance`initializer", true, 1047),
    new MM("createVisual", false, 1048),
    new MM("init`image:", true, 0),
    new MM("image", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$StaticImageFragment = function ($i) {
    var self = this;
    self.$super$HopscotchForHTML5$StaticImageFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($i) {
    var self = this;
    self._$superInit$HopscotchForHTML5$StaticImageFragment($i);
    self._$init$image$($i);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    return self._$image().$cloneNode$(false);
   };
   this.$init$image$ = function (v) {
    this.$image$slot = v;
    return this;
   };
   this.$image = function () {
    return this.$image$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`StaticImageFragment";
     this._$superInit$HopscotchForHTML5$StaticImageFragment = $.$superInit$HopscotchForHTML5$StaticImageFragment;
     this.$superInit$HopscotchForHTML5$StaticImageFragment = dnuCatcher("$superInit$HopscotchForHTML5$StaticImageFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$image$ = $.$init$image$;
     this.$init$image$ = dnuCatcher("$init$image$");
     this._$image = $.$image;
     this.$image = dnuCatcher("$image");
     this.$enclosingObjects$HopscotchForHTML5$StaticImageFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$StaticImageFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`StaticImageFragment"] = function () {
      superBasicNew.call(this);
      this.$image$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`StaticImageFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`StaticImageFragment";
    this.slots = [];
    this.methods = [new MM("image:", true, 0)];
    this.nestedClasses = [];
    this.$image$ = function ($i) {
     return (new this.nonMeta.basicNew()).$instance$initializer($i);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`StaticImageFragment";
      this.$image$ = this._$image$ = $.$image$;
      this.$enclosingObjects$HopscotchForHTML5$StaticImageFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$StaticImageFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$StaticLabelFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`StaticLabelFragment";
   this.name = "HopscotchForHTML5`StaticLabelFragment";
   this.header = 1049;
   this.slots = [
    new SM("text", false, false),
    new SM("color", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`StaticLabelFragment", true, 1050),
    new MM("instance`initializer", true, 1051),
    new MM("createVisual", false, 1052),
    new MM("init`text:", true, 0),
    new MM("text", true, 0),
    new MM("init`color:", true, 0),
    new MM("color", true, 0),
    new MM("color:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$StaticLabelFragment = function ($t) {
    var self = this;
    self.$super$HopscotchForHTML5$StaticLabelFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($t) {
    var self = this;
    self._$superInit$HopscotchForHTML5$StaticLabelFragment($t);
    self._$init$text$($t);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("overflow", "hidden");
     return cascadeReceiver.$setProperty$to$("white-space", "pre");
    })($div.$at$("style"));
    $div.$at$put$("textContent", self._$text());
    if (!self._$color().$isNil()) {
     $div.$at$("style").$setProperty$to$("color", self._$color().$asCSSString());
    } else {
     nil;
    };
    return $div;
   };
   this.$init$text$ = function (v) {
    this.$text$slot = v;
    return this;
   };
   this.$text = function () {
    return this.$text$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`StaticLabelFragment";
     this._$superInit$HopscotchForHTML5$StaticLabelFragment = $.$superInit$HopscotchForHTML5$StaticLabelFragment;
     this.$superInit$HopscotchForHTML5$StaticLabelFragment = dnuCatcher("$superInit$HopscotchForHTML5$StaticLabelFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$text$ = $.$init$text$;
     this.$init$text$ = dnuCatcher("$init$text$");
     this._$text = $.$text;
     this.$text = dnuCatcher("$text");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$StaticLabelFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`StaticLabelFragment"] = function () {
      superBasicNew.call(this);
      this.$text$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`StaticLabelFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`StaticLabelFragment";
    this.slots = [];
    this.methods = [new MM("text:", true, 0)];
    this.nestedClasses = [];
    this.$text$ = function ($t) {
     return (new this.nonMeta.basicNew()).$instance$initializer($t);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`StaticLabelFragment";
      this.$text$ = this._$text$ = $.$text$;
      this.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$StaticLabelFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Subject = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Subject";
   this.name = "HopscotchForHTML5`Subject";
   this.header = 1053;
   this.slots = [
    new SM("model", true, false),
    new SM("presenterX", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Subject", true, 1054),
    new MM("instance`initializer", true, 1055),
    new MM("createPresenter", false, 1056),
    new MM("presenter", false, 1057),
    new MM("title", false, 1058),
    new MM("init`model:", true, 0),
    new MM("model", true, 0),
    new MM("model:", true, 0),
    new MM("init`presenterX:", true, 0),
    new MM("presenterX", true, 0),
    new MM("presenterX:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Subject = function ($aModel) {
    var self = this;
    self.$super$HopscotchForHTML5$Subject$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($aModel) {
    var self = this;
    self._$superInit$HopscotchForHTML5$Subject($aModel);
    self._$init$model$($aModel);
    return self;
   };
   this.$createPresenter = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$presenter = function () {
    var self = this;
    if (self._$presenterX().$isNil()) {
     self._$presenterX$(self._$createPresenter());
    } else {
     nil;
    };
    return self._$presenterX();
   };
   this.$title = function () {
    var self = this;
    return self._$printString();
   };
   this.$init$model$ = function (v) {
    this.$model$slot = v;
    return this;
   };
   this.$model = function () {
    return this.$model$slot;
   };
   this.$model$ = function (v) {
    this.$model$slot = v;
    return this;
   };
   this.$init$presenterX$ = function (v) {
    this.$presenterX$slot = v;
    return this;
   };
   this.$presenterX = function () {
    return this.$presenterX$slot;
   };
   this.$presenterX$ = function (v) {
    this.$presenterX$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Subject";
     this._$superInit$HopscotchForHTML5$Subject = $.$superInit$HopscotchForHTML5$Subject;
     this.$superInit$HopscotchForHTML5$Subject = dnuCatcher("$superInit$HopscotchForHTML5$Subject");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$createPresenter = this._$createPresenter = $.$createPresenter;
     this.$presenter = this._$presenter = $.$presenter;
     this.$title = this._$title = $.$title;
     this._$init$model$ = $.$init$model$;
     this.$init$model$ = dnuCatcher("$init$model$");
     this._$model = $.$model;
     this.$model = dnuCatcher("$model");
     this._$model$ = $.$model$;
     this.$model$ = dnuCatcher("$model$");
     this._$init$presenterX$ = $.$init$presenterX$;
     this.$init$presenterX$ = dnuCatcher("$init$presenterX$");
     this._$presenterX = $.$presenterX;
     this.$presenterX = dnuCatcher("$presenterX");
     this._$presenterX$ = $.$presenterX$;
     this.$presenterX$ = dnuCatcher("$presenterX$");
     this.$enclosingObjects$HopscotchForHTML5$Subject = enclosingObjects;
     this.$super$HopscotchForHTML5$Subject$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Subject"] = function () {
      superBasicNew.call(this);
      this.$model$slot = nil;
      this.$presenterX$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Subject"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Subject";
    this.slots = [];
    this.methods = [new MM("onModel:", true, 0)];
    this.nestedClasses = [];
    this.$onModel$ = function ($aModel) {
     return (new this.nonMeta.basicNew()).$instance$initializer($aModel);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Subject";
      this.$onModel$ = this._$onModel$ = $.$onModel$;
      this.$enclosingObjects$HopscotchForHTML5$Subject = enclosingObjects;
      this.$super$HopscotchForHTML5$Subject = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextDisplayFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextDisplayFragment";
   this.name = "HopscotchForHTML5`TextDisplayFragment";
   this.header = 1059;
   this.slots = [new SM("textX", true, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextDisplayFragment", true, 1060),
    new MM("instance`initializer", true, 1061),
    new MM("createVisual", false, 1062),
    new MM("text", false, 1063),
    new MM("text:", false, 1064),
    new MM("init`textX:", true, 0),
    new MM("textX", true, 0),
    new MM("textX:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextDisplayFragment = function ($t) {
    var self = this;
    self.$super$HopscotchForHTML5$TextDisplayFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($t) {
    var self = this;
    self._$superInit$HopscotchForHTML5$TextDisplayFragment($t);
    self._$init$textX$($t);
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment[0]).$createElement$("div");
    $div.$at$("style").$setProperty$to$("white-space", "pre-wrap");
    $div.$at$put$("textContent", self._$textX());
    return $div;
   };
   this.$text = function () {
    var self = this;
    return self._$textX();
   };
   this.$text$ = function ($newText) {
    var self = this;
    self._$textX$($newText);
    if (self._$hasVisual()) {
     self._$visual().$at$put$("textContent", self._$textX());
    } else {
     nil;
    };
    return self;
   };
   this.$init$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$textX = function () {
    return this.$textX$slot;
   };
   this.$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextDisplayFragment";
     this._$superInit$HopscotchForHTML5$TextDisplayFragment = $.$superInit$HopscotchForHTML5$TextDisplayFragment;
     this.$superInit$HopscotchForHTML5$TextDisplayFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextDisplayFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$text = this._$text = $.$text;
     this.$text$ = this._$text$ = $.$text$;
     this._$init$textX$ = $.$init$textX$;
     this.$init$textX$ = dnuCatcher("$init$textX$");
     this._$textX = $.$textX;
     this.$textX = dnuCatcher("$textX");
     this._$textX$ = $.$textX$;
     this.$textX$ = dnuCatcher("$textX$");
     this.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextDisplayFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextDisplayFragment"] = function () {
      superBasicNew.call(this);
      this.$textX$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`TextDisplayFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextDisplayFragment";
    this.slots = [];
    this.methods = [new MM("text:", true, 0)];
    this.nestedClasses = [];
    this.$text$ = function ($t) {
     return (new this.nonMeta.basicNew()).$instance$initializer($t);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextDisplayFragment";
      this.$text$ = this._$text$ = $.$text$;
      this.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextDisplayFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextEditorFragment = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextEditorFragment";
   this.name = "HopscotchForHTML5`TextEditorFragment";
   this.header = 1065;
   this.slots = [
    new SM("textX", true, false),
    new SM("counterfactualBarX", true, false),
    new SM("editorX", true, false),
    new SM("textBeingAccepted", true, false),
    new SM("isInEditState", true, false),
    new SM("changeResponse", true, false),
    new SM("acceptResponse", true, false),
    new SM("cancelResponse", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextEditorFragment", true, 1066),
    new MM("instance`initializer", true, 1067),
    new MM("controlBarColor", false, 1068),
    new MM("createVisual", false, 1069),
    new MM("defaultAcceptResponse", false, 1070),
    new MM("defaultCancelResponse", false, 1071),
    new MM("defaultChangeResponse", false, 1072),
    new MM("enterEditState", false, 1073),
    new MM("leaveEditState", false, 1074),
    new MM("respondToAccept", false, 1075),
    new MM("respondToCancel", false, 1076),
    new MM("respondToChange", false, 1077),
    new MM("setVisualText:", false, 1078),
    new MM("text", false, 1079),
    new MM("text:", false, 1080),
    new MM("init`textX:", true, 0),
    new MM("textX", true, 0),
    new MM("textX:", true, 0),
    new MM("init`counterfactualBarX:", true, 0),
    new MM("counterfactualBarX", true, 0),
    new MM("counterfactualBarX:", true, 0),
    new MM("init`editorX:", true, 0),
    new MM("editorX", true, 0),
    new MM("editorX:", true, 0),
    new MM("init`textBeingAccepted:", true, 0),
    new MM("textBeingAccepted", true, 0),
    new MM("textBeingAccepted:", true, 0),
    new MM("init`isInEditState:", true, 0),
    new MM("isInEditState", true, 0),
    new MM("isInEditState:", true, 0),
    new MM("init`changeResponse:", true, 0),
    new MM("changeResponse", true, 0),
    new MM("changeResponse:", true, 0),
    new MM("init`acceptResponse:", true, 0),
    new MM("acceptResponse", true, 0),
    new MM("acceptResponse:", true, 0),
    new MM("init`cancelResponse:", true, 0),
    new MM("cancelResponse", true, 0),
    new MM("cancelResponse:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextEditorFragment = function () {
    var self = this;
    self.$super$HopscotchForHTML5$TextEditorFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$HopscotchForHTML5$TextEditorFragment();
    self._$init$textX$("");
    self._$init$isInEditState$(false);
    return self;
   };
   this.$controlBarColor = function () {
    var self = this;
    return $0.$Color(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$r$g$b$((19/20), (99/125), (19/40));
   };
   this.$createVisual = function () {
    var self = this;
    var $frame = nil;
    var $editorWrapper = nil;
    var $accept = nil;
    var $cancel = nil;
    $frame = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("display", "-webkit-flex");
     return cascadeReceiver.$at$put$("display", "flex");
    })($frame.$at$("style"));
    self._$editorX$($0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("div"));
    self._$editorX().$at$put$("contentEditable", "true");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("borderStyle", "solid");
     cascadeReceiver.$at$put$("borderWidth", "1px");
     cascadeReceiver.$at$put$("borderColor", "gray");
     cascadeReceiver.$setProperty$to$("background-color", "white");
     cascadeReceiver.$at$put$("flex", 1);
     cascadeReceiver.$at$put$("-webkit-flex", 1);
     cascadeReceiver.$at$put$("-moz-flex", 1);
     cascadeReceiver.$setProperty$to$("white-space", "pre-wrap");
     return cascadeReceiver.$at$put$("display", "block");
    })(self._$editorX().$at$("style"));
    self._$editorX().$at$put$("textContent", self._$textX());
    self._$editorX().$addEventListener$with$("input", function () {
     return self._$respondToChange();
    });
    self._$counterfactualBarX$($0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("span"));
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("backgroundColor", self._$controlBarColor().$asCSSString());
     cascadeReceiver.$at$put$("flex", "none");
     cascadeReceiver.$at$put$("-webkit-flex", "none");
     return cascadeReceiver.$at$put$("-moz-flex", "none");
    })(self._$counterfactualBarX().$at$("style"));
    $accept = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("img");
    $accept.$at$put$("src", $0.$accept16px(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$yourself().$at$("src"));
    $accept.$at$("style").$at$put$("margin", "3px");
    $accept.$at$put$("onclick", function () {
     return self._$respondToAccept();
    });
    $cancel = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("img");
    $cancel.$at$put$("src", $0.$cancel16px(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$yourself().$at$("src"));
    $cancel.$at$("style").$at$put$("margin", "3px");
    $cancel.$at$put$("onclick", function () {
     return self._$respondToCancel();
    });
    self._$counterfactualBarX().$appendChild$($accept);
    self._$counterfactualBarX().$appendChild$($cancel);
    $frame.$appendChild$(self._$editorX());
    return $frame;
   };
   this.$defaultAcceptResponse = function () {
    var self = this;
    self._$textX$(self._$textBeingAccepted());
    self._$leaveEditState();
    return self;
   };
   this.$defaultCancelResponse = function () {
    var self = this;
    self._$setVisualText$(self._$textX());
    self._$leaveEditState();
    return self;
   };
   this.$defaultChangeResponse = function () {
    var self = this;
    self._$enterEditState();
    return self;
   };
   this.$enterEditState = function () {
    var self = this;
    if (!self._$isInEditState()) {
     self._$visual().$appendChild$(self._$counterfactualBarX());
     self._$isInEditState$(true);
    } else {
     nil;
    };
    self._$visual().$scrollIntoView$(true);
    return self;
   };
   this.$leaveEditState = function () {
    var self = this;
    if (self._$isInEditState()) {
     self._$visualX().$removeChild$(self._$counterfactualBarX());
     self._$isInEditState$(false);
    } else {
     nil;
    };
    return self;
   };
   this.$respondToAccept = function () {
    var self = this;
    self._$textBeingAccepted$(self._$editorX().$at$("textContent"));
    self._$acceptResponse().$ifNil$ifNotNil$(function () {
     return self._$defaultAcceptResponse();
    }, function () {
     return self._$acceptResponse().$cull$(self);
    });
    return self;
   };
   this.$respondToCancel = function () {
    var self = this;
    self._$cancelResponse().$ifNil$ifNotNil$(function () {
     return self._$defaultCancelResponse();
    }, function () {
     return self._$cancelResponse().$cull$(self);
    });
    return self;
   };
   this.$respondToChange = function () {
    var self = this;
    self._$textBeingAccepted$(self._$editorX().$at$("textContent"));
    self._$changeResponse().$ifNil$ifNotNil$(function () {
     return self._$defaultChangeResponse();
    }, function () {
     return self._$changeResponse().$cull$(self);
    });
    return self;
   };
   this.$setVisualText$ = function ($aText) {
    var self = this;
    if (self._$hasVisual()) {
     self._$editorX().$at$put$("textContent", $aText);
    } else {
     nil;
    };
    return self;
   };
   this.$text = function () {
    var self = this;
    return self._$textX();
   };
   this.$text$ = function ($t) {
    var self = this;
    self._$textX$($t);
    self._$setVisualText$(self._$textX());
    return self;
   };
   this.$init$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$textX = function () {
    return this.$textX$slot;
   };
   this.$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$init$counterfactualBarX$ = function (v) {
    this.$counterfactualBarX$slot = v;
    return this;
   };
   this.$counterfactualBarX = function () {
    return this.$counterfactualBarX$slot;
   };
   this.$counterfactualBarX$ = function (v) {
    this.$counterfactualBarX$slot = v;
    return this;
   };
   this.$init$editorX$ = function (v) {
    this.$editorX$slot = v;
    return this;
   };
   this.$editorX = function () {
    return this.$editorX$slot;
   };
   this.$editorX$ = function (v) {
    this.$editorX$slot = v;
    return this;
   };
   this.$init$textBeingAccepted$ = function (v) {
    this.$textBeingAccepted$slot = v;
    return this;
   };
   this.$textBeingAccepted = function () {
    return this.$textBeingAccepted$slot;
   };
   this.$textBeingAccepted$ = function (v) {
    this.$textBeingAccepted$slot = v;
    return this;
   };
   this.$init$isInEditState$ = function (v) {
    this.$isInEditState$slot = v;
    return this;
   };
   this.$isInEditState = function () {
    return this.$isInEditState$slot;
   };
   this.$isInEditState$ = function (v) {
    this.$isInEditState$slot = v;
    return this;
   };
   this.$init$changeResponse$ = function (v) {
    this.$changeResponse$slot = v;
    return this;
   };
   this.$changeResponse = function () {
    return this.$changeResponse$slot;
   };
   this.$changeResponse$ = function (v) {
    this.$changeResponse$slot = v;
    return this;
   };
   this.$init$acceptResponse$ = function (v) {
    this.$acceptResponse$slot = v;
    return this;
   };
   this.$acceptResponse = function () {
    return this.$acceptResponse$slot;
   };
   this.$acceptResponse$ = function (v) {
    this.$acceptResponse$slot = v;
    return this;
   };
   this.$init$cancelResponse$ = function (v) {
    this.$cancelResponse$slot = v;
    return this;
   };
   this.$cancelResponse = function () {
    return this.$cancelResponse$slot;
   };
   this.$cancelResponse$ = function (v) {
    this.$cancelResponse$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextEditorFragment";
     this._$superInit$HopscotchForHTML5$TextEditorFragment = $.$superInit$HopscotchForHTML5$TextEditorFragment;
     this.$superInit$HopscotchForHTML5$TextEditorFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextEditorFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$controlBarColor = $.$controlBarColor;
     this.$controlBarColor = dnuCatcher("$controlBarColor");
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$defaultAcceptResponse = this._$defaultAcceptResponse = $.$defaultAcceptResponse;
     this._$defaultCancelResponse = $.$defaultCancelResponse;
     this.$defaultCancelResponse = dnuCatcher("$defaultCancelResponse");
     this._$defaultChangeResponse = $.$defaultChangeResponse;
     this.$defaultChangeResponse = dnuCatcher("$defaultChangeResponse");
     this._$enterEditState = $.$enterEditState;
     this.$enterEditState = dnuCatcher("$enterEditState");
     this.$leaveEditState = this._$leaveEditState = $.$leaveEditState;
     this._$respondToAccept = $.$respondToAccept;
     this.$respondToAccept = dnuCatcher("$respondToAccept");
     this._$respondToCancel = $.$respondToCancel;
     this.$respondToCancel = dnuCatcher("$respondToCancel");
     this._$respondToChange = $.$respondToChange;
     this.$respondToChange = dnuCatcher("$respondToChange");
     this._$setVisualText$ = $.$setVisualText$;
     this.$setVisualText$ = dnuCatcher("$setVisualText$");
     this.$text = this._$text = $.$text;
     this.$text$ = this._$text$ = $.$text$;
     this._$init$textX$ = $.$init$textX$;
     this.$init$textX$ = dnuCatcher("$init$textX$");
     this._$textX = $.$textX;
     this.$textX = dnuCatcher("$textX");
     this._$textX$ = $.$textX$;
     this.$textX$ = dnuCatcher("$textX$");
     this._$init$counterfactualBarX$ = $.$init$counterfactualBarX$;
     this.$init$counterfactualBarX$ = dnuCatcher("$init$counterfactualBarX$");
     this._$counterfactualBarX = $.$counterfactualBarX;
     this.$counterfactualBarX = dnuCatcher("$counterfactualBarX");
     this._$counterfactualBarX$ = $.$counterfactualBarX$;
     this.$counterfactualBarX$ = dnuCatcher("$counterfactualBarX$");
     this._$init$editorX$ = $.$init$editorX$;
     this.$init$editorX$ = dnuCatcher("$init$editorX$");
     this._$editorX = $.$editorX;
     this.$editorX = dnuCatcher("$editorX");
     this._$editorX$ = $.$editorX$;
     this.$editorX$ = dnuCatcher("$editorX$");
     this.$init$textBeingAccepted$ = this._$init$textBeingAccepted$ = $.$init$textBeingAccepted$;
     this.$textBeingAccepted = this._$textBeingAccepted = $.$textBeingAccepted;
     this.$textBeingAccepted$ = this._$textBeingAccepted$ = $.$textBeingAccepted$;
     this._$init$isInEditState$ = $.$init$isInEditState$;
     this.$init$isInEditState$ = dnuCatcher("$init$isInEditState$");
     this._$isInEditState = $.$isInEditState;
     this.$isInEditState = dnuCatcher("$isInEditState");
     this._$isInEditState$ = $.$isInEditState$;
     this.$isInEditState$ = dnuCatcher("$isInEditState$");
     this.$init$changeResponse$ = this._$init$changeResponse$ = $.$init$changeResponse$;
     this.$changeResponse = this._$changeResponse = $.$changeResponse;
     this.$changeResponse$ = this._$changeResponse$ = $.$changeResponse$;
     this.$init$acceptResponse$ = this._$init$acceptResponse$ = $.$init$acceptResponse$;
     this.$acceptResponse = this._$acceptResponse = $.$acceptResponse;
     this.$acceptResponse$ = this._$acceptResponse$ = $.$acceptResponse$;
     this.$init$cancelResponse$ = this._$init$cancelResponse$ = $.$init$cancelResponse$;
     this.$cancelResponse = this._$cancelResponse = $.$cancelResponse;
     this.$cancelResponse$ = this._$cancelResponse$ = $.$cancelResponse$;
     this.$enclosingObjects$HopscotchForHTML5$TextEditorFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextEditorFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextEditorFragment"] = function () {
      superBasicNew.call(this);
      this.$textX$slot = nil;
      this.$counterfactualBarX$slot = nil;
      this.$editorX$slot = nil;
      this.$textBeingAccepted$slot = nil;
      this.$isInEditState$slot = nil;
      this.$changeResponse$slot = nil;
      this.$acceptResponse$slot = nil;
      this.$cancelResponse$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`TextEditorFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextEditorFragment";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextEditorFragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$TextEditorFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextEditorFragment = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ToggleComposer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ToggleComposer";
   this.name = "HopscotchForHTML5`ToggleComposer";
   this.header = 1081;
   this.slots = [
    new SM("expandedDefinition", false, false),
    new SM("collapsedDefinition", false, false),
    new SM("isExpanded", true, false),
    new SM("expandedPresenter", true, false),
    new SM("collapsedPresenter", true, false),
    new SM("contentHolder", true, false),
    new SM("toggleWidget", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ToggleComposer", true, 1082),
    new MM("instance`initializer", true, 1083),
    new MM("collapse", false, 1084),
    new MM("createVisual", false, 1085),
    new MM("expand", false, 1086),
    new MM("installCollapsedPresenter", false, 1087),
    new MM("installContentVisual:", false, 1088),
    new MM("installExpandedPresenter", false, 1089),
    new MM("userToggle", false, 1090),
    new MM("init`expandedDefinition:", true, 0),
    new MM("expandedDefinition", true, 0),
    new MM("init`collapsedDefinition:", true, 0),
    new MM("collapsedDefinition", true, 0),
    new MM("init`isExpanded:", true, 0),
    new MM("isExpanded", true, 0),
    new MM("isExpanded:", true, 0),
    new MM("init`expandedPresenter:", true, 0),
    new MM("expandedPresenter", true, 0),
    new MM("expandedPresenter:", true, 0),
    new MM("init`collapsedPresenter:", true, 0),
    new MM("collapsedPresenter", true, 0),
    new MM("collapsedPresenter:", true, 0),
    new MM("init`contentHolder:", true, 0),
    new MM("contentHolder", true, 0),
    new MM("contentHolder:", true, 0),
    new MM("init`toggleWidget:", true, 0),
    new MM("toggleWidget", true, 0),
    new MM("toggleWidget:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ToggleComposer = function ($collapsed, $expanded, $flag) {
    var self = this;
    self.$super$HopscotchForHTML5$ToggleComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($collapsed, $expanded, $flag) {
    var self = this;
    self._$superInit$HopscotchForHTML5$ToggleComposer($collapsed, $expanded, $flag);
    self._$init$expandedDefinition$($expanded);
    self._$init$collapsedDefinition$($collapsed);
    self._$init$isExpanded$($flag);
    return self;
   };
   this.$collapse = function () {
    var self = this;
    self._$installCollapsedPresenter();
    return self;
   };
   this.$createVisual = function () {
    var self = this;
    var $toggleDiv = nil;
    var $div = nil;
    self._$contentHolder$($0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div"));
    $toggleDiv = $0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div");
    self._$toggleWidget$($0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("img"));
    self._$toggleWidget().$at$put$("onclick", function () {
     return self._$userToggle();
    });
    $toggleDiv.$appendChild$(self._$toggleWidget());
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("-webkit-flex-grow", 1);
     cascadeReceiver.$setProperty$to$("flex-grow", 1);
     cascadeReceiver.$at$put$("-webkit-flex-shrink", 1);
     return cascadeReceiver.$setProperty$to$("flex-shrink", 1);
    })(self._$contentHolder().$at$("style"));
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("-webkit-flex-grow", 0);
     cascadeReceiver.$setProperty$to$("flex-grow", 0);
     cascadeReceiver.$at$put$("-webkit-flex-shrink", 0);
     cascadeReceiver.$setProperty$to$("flex-shrink", 0);
     cascadeReceiver.$at$put$("paddingTop", "2px");
     return cascadeReceiver.$at$put$("paddingRight", "3px");
    })($toggleDiv.$at$("style"));
    self._$toggleWidget().$at$put$("align", "top");
    if (self._$isExpanded()) {
     self._$installExpandedPresenter();
    } else {
     self._$installCollapsedPresenter();
    };
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("display", "-webkit-flex");
     cascadeReceiver.$at$put$("display", "flex");
     cascadeReceiver.$at$put$("-webkit-flex-direction", "row");
     return cascadeReceiver.$setProperty$to$("flex-direction", "row");
    })($div.$at$("style"));
    $div.$appendChild$($toggleDiv);
    $div.$appendChild$(self._$contentHolder());
    return $div;
   };
   this.$expand = function () {
    var self = this;
    self._$installExpandedPresenter();
    return self;
   };
   this.$installCollapsedPresenter = function () {
    var self = this;
    if (self._$collapsedPresenter().$isNil()) {
     self._$collapsedPresenter$(self._$collapsedDefinition().$value());
     self._$collapsedPresenter().$parent$(self);
    } else {
     nil;
    };
    self._$installContentVisual$(self._$collapsedPresenter().$visual());
    self._$toggleWidget().$at$put$("src", $0.$disclosureClosedImage(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$at$("src"));
    return self;
   };
   this.$installContentVisual$ = function ($newVisual) {
    var self = this;
    if (self._$contentHolder().$hasChildNodes()) {
     var $oldVisual = nil;
     $oldVisual = self._$contentHolder().$at$("firstChild");
     self._$contentHolder().$replaceChild$with$($newVisual, $oldVisual);
    } else {
     self._$contentHolder().$appendChild$($newVisual);
    };
    return self;
   };
   this.$installExpandedPresenter = function () {
    var self = this;
    if (self._$expandedPresenter().$isNil()) {
     self._$expandedPresenter$(self._$expandedDefinition().$value());
     self._$expandedPresenter().$parent$(self);
    } else {
     nil;
    };
    self._$installContentVisual$(self._$expandedPresenter().$visual());
    self._$toggleWidget().$at$put$("src", $0.$disclosureOpenImage(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$at$("src"));
    return self;
   };
   this.$userToggle = function () {
    var self = this;
    self._$isExpanded$(self._$isExpanded().$not());
    if (self._$isExpanded()) {
     self._$installExpandedPresenter();
    } else {
     self._$installCollapsedPresenter();
    };
    return self;
   };
   this.$init$expandedDefinition$ = function (v) {
    this.$expandedDefinition$slot = v;
    return this;
   };
   this.$expandedDefinition = function () {
    return this.$expandedDefinition$slot;
   };
   this.$init$collapsedDefinition$ = function (v) {
    this.$collapsedDefinition$slot = v;
    return this;
   };
   this.$collapsedDefinition = function () {
    return this.$collapsedDefinition$slot;
   };
   this.$init$isExpanded$ = function (v) {
    this.$isExpanded$slot = v;
    return this;
   };
   this.$isExpanded = function () {
    return this.$isExpanded$slot;
   };
   this.$isExpanded$ = function (v) {
    this.$isExpanded$slot = v;
    return this;
   };
   this.$init$expandedPresenter$ = function (v) {
    this.$expandedPresenter$slot = v;
    return this;
   };
   this.$expandedPresenter = function () {
    return this.$expandedPresenter$slot;
   };
   this.$expandedPresenter$ = function (v) {
    this.$expandedPresenter$slot = v;
    return this;
   };
   this.$init$collapsedPresenter$ = function (v) {
    this.$collapsedPresenter$slot = v;
    return this;
   };
   this.$collapsedPresenter = function () {
    return this.$collapsedPresenter$slot;
   };
   this.$collapsedPresenter$ = function (v) {
    this.$collapsedPresenter$slot = v;
    return this;
   };
   this.$init$contentHolder$ = function (v) {
    this.$contentHolder$slot = v;
    return this;
   };
   this.$contentHolder = function () {
    return this.$contentHolder$slot;
   };
   this.$contentHolder$ = function (v) {
    this.$contentHolder$slot = v;
    return this;
   };
   this.$init$toggleWidget$ = function (v) {
    this.$toggleWidget$slot = v;
    return this;
   };
   this.$toggleWidget = function () {
    return this.$toggleWidget$slot;
   };
   this.$toggleWidget$ = function (v) {
    this.$toggleWidget$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ToggleComposer";
     this._$superInit$HopscotchForHTML5$ToggleComposer = $.$superInit$HopscotchForHTML5$ToggleComposer;
     this.$superInit$HopscotchForHTML5$ToggleComposer = dnuCatcher("$superInit$HopscotchForHTML5$ToggleComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$collapse = this._$collapse = $.$collapse;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$expand = this._$expand = $.$expand;
     this._$installCollapsedPresenter = $.$installCollapsedPresenter;
     this.$installCollapsedPresenter = dnuCatcher("$installCollapsedPresenter");
     this._$installContentVisual$ = $.$installContentVisual$;
     this.$installContentVisual$ = dnuCatcher("$installContentVisual$");
     this._$installExpandedPresenter = $.$installExpandedPresenter;
     this.$installExpandedPresenter = dnuCatcher("$installExpandedPresenter");
     this._$userToggle = $.$userToggle;
     this.$userToggle = dnuCatcher("$userToggle");
     this._$init$expandedDefinition$ = $.$init$expandedDefinition$;
     this.$init$expandedDefinition$ = dnuCatcher("$init$expandedDefinition$");
     this._$expandedDefinition = $.$expandedDefinition;
     this.$expandedDefinition = dnuCatcher("$expandedDefinition");
     this._$init$collapsedDefinition$ = $.$init$collapsedDefinition$;
     this.$init$collapsedDefinition$ = dnuCatcher("$init$collapsedDefinition$");
     this._$collapsedDefinition = $.$collapsedDefinition;
     this.$collapsedDefinition = dnuCatcher("$collapsedDefinition");
     this._$init$isExpanded$ = $.$init$isExpanded$;
     this.$init$isExpanded$ = dnuCatcher("$init$isExpanded$");
     this._$isExpanded = $.$isExpanded;
     this.$isExpanded = dnuCatcher("$isExpanded");
     this._$isExpanded$ = $.$isExpanded$;
     this.$isExpanded$ = dnuCatcher("$isExpanded$");
     this._$init$expandedPresenter$ = $.$init$expandedPresenter$;
     this.$init$expandedPresenter$ = dnuCatcher("$init$expandedPresenter$");
     this._$expandedPresenter = $.$expandedPresenter;
     this.$expandedPresenter = dnuCatcher("$expandedPresenter");
     this._$expandedPresenter$ = $.$expandedPresenter$;
     this.$expandedPresenter$ = dnuCatcher("$expandedPresenter$");
     this._$init$collapsedPresenter$ = $.$init$collapsedPresenter$;
     this.$init$collapsedPresenter$ = dnuCatcher("$init$collapsedPresenter$");
     this._$collapsedPresenter = $.$collapsedPresenter;
     this.$collapsedPresenter = dnuCatcher("$collapsedPresenter");
     this._$collapsedPresenter$ = $.$collapsedPresenter$;
     this.$collapsedPresenter$ = dnuCatcher("$collapsedPresenter$");
     this._$init$contentHolder$ = $.$init$contentHolder$;
     this.$init$contentHolder$ = dnuCatcher("$init$contentHolder$");
     this._$contentHolder = $.$contentHolder;
     this.$contentHolder = dnuCatcher("$contentHolder");
     this._$contentHolder$ = $.$contentHolder$;
     this.$contentHolder$ = dnuCatcher("$contentHolder$");
     this._$init$toggleWidget$ = $.$init$toggleWidget$;
     this.$init$toggleWidget$ = dnuCatcher("$init$toggleWidget$");
     this._$toggleWidget = $.$toggleWidget;
     this.$toggleWidget = dnuCatcher("$toggleWidget");
     this._$toggleWidget$ = $.$toggleWidget$;
     this.$toggleWidget$ = dnuCatcher("$toggleWidget$");
     this.$enclosingObjects$HopscotchForHTML5$ToggleComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$ToggleComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ToggleComposer"] = function () {
      superBasicNew.call(this);
      this.$expandedDefinition$slot = nil;
      this.$collapsedDefinition$slot = nil;
      this.$isExpanded$slot = nil;
      this.$expandedPresenter$slot = nil;
      this.$collapsedPresenter$slot = nil;
      this.$contentHolder$slot = nil;
      this.$toggleWidget$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ToggleComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ToggleComposer";
    this.slots = [];
    this.methods = [new MM("collapsedDefinition:expandedDefinition:initiallyExpanded:", true, 0)];
    this.nestedClasses = [];
    this.$collapsedDefinition$expandedDefinition$initiallyExpanded$ = function ($collapsed, $expanded, $flag) {
     return (new this.nonMeta.basicNew()).$instance$initializer($collapsed, $expanded, $flag);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ToggleComposer";
      this.$collapsedDefinition$expandedDefinition$initiallyExpanded$ = this._$collapsedDefinition$expandedDefinition$initiallyExpanded$ = $.$collapsedDefinition$expandedDefinition$initiallyExpanded$;
      this.$enclosingObjects$HopscotchForHTML5$ToggleComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$ToggleComposer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$BlankFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ButtonFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$CanvasFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ColumnComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$Composer.enclosingMixin = this;
  this.$HopscotchForHTML5$DeferredContentComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow.enclosingMixin = this;
  this.$HopscotchForHTML5$Fragment.enclosingMixin = this;
  this.$HopscotchForHTML5$Gradient.enclosingMixin = this;
  this.$HopscotchForHTML5$HolderComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$HopscotchShell.enclosingMixin = this;
  this.$HopscotchForHTML5$HopscotchWindow.enclosingMixin = this;
  this.$HopscotchForHTML5$HyperlinkFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$HyperlinkImageFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$LeafFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$LocalNavigationHistory.enclosingMixin = this;
  this.$HopscotchForHTML5$NavigationHistory.enclosingMixin = this;
  this.$HopscotchForHTML5$PaddedFrameComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$Presenter.enclosingMixin = this;
  this.$HopscotchForHTML5$RowComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$SequenceComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$StaticImageFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$StaticLabelFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$Subject.enclosingMixin = this;
  this.$HopscotchForHTML5$TextDisplayFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$TextEditorFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ToggleComposer.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for HopscotchForHTML5";
    this._$superInit$HopscotchForHTML5 = $.$superInit$HopscotchForHTML5;
    this.$superInit$HopscotchForHTML5 = dnuCatcher("$superInit$HopscotchForHTML5");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$deferAction$ = $.$deferAction$;
    this.$deferAction$ = dnuCatcher("$deferAction$");
    this._$nextDeferredAction = $.$nextDeferredAction;
    this.$nextDeferredAction = dnuCatcher("$nextDeferredAction");
    this._$nextFrameDo$ = $.$nextFrameDo$;
    this.$nextFrameDo$ = dnuCatcher("$nextFrameDo$");
    this._$sharedNavigator = $.$sharedNavigator;
    this.$sharedNavigator = dnuCatcher("$sharedNavigator");
    this._$BlankFragment = $.$BlankFragment;
    this.$BlankFragment = dnuCatcher("$BlankFragment");
    this._$ButtonFragment = $.$ButtonFragment;
    this.$ButtonFragment = dnuCatcher("$ButtonFragment");
    this._$CanvasFragment = $.$CanvasFragment;
    this.$CanvasFragment = dnuCatcher("$CanvasFragment");
    this._$ColumnComposer = $.$ColumnComposer;
    this.$ColumnComposer = dnuCatcher("$ColumnComposer");
    this._$Composer = $.$Composer;
    this.$Composer = dnuCatcher("$Composer");
    this._$DeferredContentComposer = $.$DeferredContentComposer;
    this.$DeferredContentComposer = dnuCatcher("$DeferredContentComposer");
    this.$EmbeddedHopscotchWindow = this._$EmbeddedHopscotchWindow = $.$EmbeddedHopscotchWindow;
    this._$Fragment = $.$Fragment;
    this.$Fragment = dnuCatcher("$Fragment");
    this.$Gradient = this._$Gradient = $.$Gradient;
    this._$HolderComposer = $.$HolderComposer;
    this.$HolderComposer = dnuCatcher("$HolderComposer");
    this._$HopscotchShell = $.$HopscotchShell;
    this.$HopscotchShell = dnuCatcher("$HopscotchShell");
    this.$HopscotchWindow = this._$HopscotchWindow = $.$HopscotchWindow;
    this._$HyperlinkFragment = $.$HyperlinkFragment;
    this.$HyperlinkFragment = dnuCatcher("$HyperlinkFragment");
    this._$HyperlinkImageFragment = $.$HyperlinkImageFragment;
    this.$HyperlinkImageFragment = dnuCatcher("$HyperlinkImageFragment");
    this._$LeafFragment = $.$LeafFragment;
    this.$LeafFragment = dnuCatcher("$LeafFragment");
    this._$LocalNavigationHistory = $.$LocalNavigationHistory;
    this.$LocalNavigationHistory = dnuCatcher("$LocalNavigationHistory");
    this._$NavigationHistory = $.$NavigationHistory;
    this.$NavigationHistory = dnuCatcher("$NavigationHistory");
    this._$PaddedFrameComposer = $.$PaddedFrameComposer;
    this.$PaddedFrameComposer = dnuCatcher("$PaddedFrameComposer");
    this.$Presenter = this._$Presenter = $.$Presenter;
    this._$RowComposer = $.$RowComposer;
    this.$RowComposer = dnuCatcher("$RowComposer");
    this._$SequenceComposer = $.$SequenceComposer;
    this.$SequenceComposer = dnuCatcher("$SequenceComposer");
    this._$StaticImageFragment = $.$StaticImageFragment;
    this.$StaticImageFragment = dnuCatcher("$StaticImageFragment");
    this._$StaticLabelFragment = $.$StaticLabelFragment;
    this.$StaticLabelFragment = dnuCatcher("$StaticLabelFragment");
    this.$Subject = this._$Subject = $.$Subject;
    this._$TextDisplayFragment = $.$TextDisplayFragment;
    this.$TextDisplayFragment = dnuCatcher("$TextDisplayFragment");
    this.$TextEditorFragment = this._$TextEditorFragment = $.$TextEditorFragment;
    this._$ToggleComposer = $.$ToggleComposer;
    this.$ToggleComposer = dnuCatcher("$ToggleComposer");
    this._$init$sharedNavigationHistory$ = $.$init$sharedNavigationHistory$;
    this.$init$sharedNavigationHistory$ = dnuCatcher("$init$sharedNavigationHistory$");
    this._$sharedNavigationHistory = $.$sharedNavigationHistory;
    this.$sharedNavigationHistory = dnuCatcher("$sharedNavigationHistory");
    this._$sharedNavigationHistory$ = $.$sharedNavigationHistory$;
    this.$sharedNavigationHistory$ = dnuCatcher("$sharedNavigationHistory$");
    this._$init$embeddedWindowMap$ = $.$init$embeddedWindowMap$;
    this.$init$embeddedWindowMap$ = dnuCatcher("$init$embeddedWindowMap$");
    this._$embeddedWindowMap = $.$embeddedWindowMap;
    this.$embeddedWindowMap = dnuCatcher("$embeddedWindowMap");
    this._$init$sharedBackButtonListener$ = $.$init$sharedBackButtonListener$;
    this.$init$sharedBackButtonListener$ = dnuCatcher("$init$sharedBackButtonListener$");
    this._$sharedBackButtonListener = $.$sharedBackButtonListener;
    this.$sharedBackButtonListener = dnuCatcher("$sharedBackButtonListener");
    this._$sharedBackButtonListener$ = $.$sharedBackButtonListener$;
    this.$sharedBackButtonListener$ = dnuCatcher("$sharedBackButtonListener$");
    this._$init$currentHopscotchWindow$ = $.$init$currentHopscotchWindow$;
    this.$init$currentHopscotchWindow$ = dnuCatcher("$init$currentHopscotchWindow$");
    this._$currentHopscotchWindow = $.$currentHopscotchWindow;
    this.$currentHopscotchWindow = dnuCatcher("$currentHopscotchWindow");
    this._$currentHopscotchWindow$ = $.$currentHopscotchWindow$;
    this.$currentHopscotchWindow$ = dnuCatcher("$currentHopscotchWindow$");
    this.$init$core$ = this._$init$core$ = $.$init$core$;
    this.$core = this._$core = $.$core;
    this.$init$fragments$ = this._$init$fragments$ = $.$init$fragments$;
    this.$fragments = this._$fragments = $.$fragments;
    this.$init$HopscotchForHTML5$BlankFragment$ = this._$init$HopscotchForHTML5$BlankFragment$ = $.$init$HopscotchForHTML5$BlankFragment$;
    this.$HopscotchForHTML5$BlankFragment = this._$HopscotchForHTML5$BlankFragment = $.$HopscotchForHTML5$BlankFragment;
    this.$HopscotchForHTML5$BlankFragment$ = this._$HopscotchForHTML5$BlankFragment$ = $.$HopscotchForHTML5$BlankFragment$;
    this.$init$HopscotchForHTML5$ButtonFragment$ = this._$init$HopscotchForHTML5$ButtonFragment$ = $.$init$HopscotchForHTML5$ButtonFragment$;
    this.$HopscotchForHTML5$ButtonFragment = this._$HopscotchForHTML5$ButtonFragment = $.$HopscotchForHTML5$ButtonFragment;
    this.$HopscotchForHTML5$ButtonFragment$ = this._$HopscotchForHTML5$ButtonFragment$ = $.$HopscotchForHTML5$ButtonFragment$;
    this.$init$HopscotchForHTML5$CanvasFragment$ = this._$init$HopscotchForHTML5$CanvasFragment$ = $.$init$HopscotchForHTML5$CanvasFragment$;
    this.$HopscotchForHTML5$CanvasFragment = this._$HopscotchForHTML5$CanvasFragment = $.$HopscotchForHTML5$CanvasFragment;
    this.$HopscotchForHTML5$CanvasFragment$ = this._$HopscotchForHTML5$CanvasFragment$ = $.$HopscotchForHTML5$CanvasFragment$;
    this.$init$HopscotchForHTML5$ColumnComposer$ = this._$init$HopscotchForHTML5$ColumnComposer$ = $.$init$HopscotchForHTML5$ColumnComposer$;
    this.$HopscotchForHTML5$ColumnComposer = this._$HopscotchForHTML5$ColumnComposer = $.$HopscotchForHTML5$ColumnComposer;
    this.$HopscotchForHTML5$ColumnComposer$ = this._$HopscotchForHTML5$ColumnComposer$ = $.$HopscotchForHTML5$ColumnComposer$;
    this.$init$HopscotchForHTML5$Composer$ = this._$init$HopscotchForHTML5$Composer$ = $.$init$HopscotchForHTML5$Composer$;
    this.$HopscotchForHTML5$Composer = this._$HopscotchForHTML5$Composer = $.$HopscotchForHTML5$Composer;
    this.$HopscotchForHTML5$Composer$ = this._$HopscotchForHTML5$Composer$ = $.$HopscotchForHTML5$Composer$;
    this.$init$HopscotchForHTML5$DeferredContentComposer$ = this._$init$HopscotchForHTML5$DeferredContentComposer$ = $.$init$HopscotchForHTML5$DeferredContentComposer$;
    this.$HopscotchForHTML5$DeferredContentComposer = this._$HopscotchForHTML5$DeferredContentComposer = $.$HopscotchForHTML5$DeferredContentComposer;
    this.$HopscotchForHTML5$DeferredContentComposer$ = this._$HopscotchForHTML5$DeferredContentComposer$ = $.$HopscotchForHTML5$DeferredContentComposer$;
    this.$init$HopscotchForHTML5$EmbeddedHopscotchWindow$ = this._$init$HopscotchForHTML5$EmbeddedHopscotchWindow$ = $.$init$HopscotchForHTML5$EmbeddedHopscotchWindow$;
    this.$HopscotchForHTML5$EmbeddedHopscotchWindow = this._$HopscotchForHTML5$EmbeddedHopscotchWindow = $.$HopscotchForHTML5$EmbeddedHopscotchWindow;
    this.$HopscotchForHTML5$EmbeddedHopscotchWindow$ = this._$HopscotchForHTML5$EmbeddedHopscotchWindow$ = $.$HopscotchForHTML5$EmbeddedHopscotchWindow$;
    this.$init$HopscotchForHTML5$Fragment$ = this._$init$HopscotchForHTML5$Fragment$ = $.$init$HopscotchForHTML5$Fragment$;
    this.$HopscotchForHTML5$Fragment = this._$HopscotchForHTML5$Fragment = $.$HopscotchForHTML5$Fragment;
    this.$HopscotchForHTML5$Fragment$ = this._$HopscotchForHTML5$Fragment$ = $.$HopscotchForHTML5$Fragment$;
    this.$init$HopscotchForHTML5$Gradient$ = this._$init$HopscotchForHTML5$Gradient$ = $.$init$HopscotchForHTML5$Gradient$;
    this.$HopscotchForHTML5$Gradient = this._$HopscotchForHTML5$Gradient = $.$HopscotchForHTML5$Gradient;
    this.$HopscotchForHTML5$Gradient$ = this._$HopscotchForHTML5$Gradient$ = $.$HopscotchForHTML5$Gradient$;
    this.$init$HopscotchForHTML5$HolderComposer$ = this._$init$HopscotchForHTML5$HolderComposer$ = $.$init$HopscotchForHTML5$HolderComposer$;
    this.$HopscotchForHTML5$HolderComposer = this._$HopscotchForHTML5$HolderComposer = $.$HopscotchForHTML5$HolderComposer;
    this.$HopscotchForHTML5$HolderComposer$ = this._$HopscotchForHTML5$HolderComposer$ = $.$HopscotchForHTML5$HolderComposer$;
    this.$init$HopscotchForHTML5$HopscotchShell$ = this._$init$HopscotchForHTML5$HopscotchShell$ = $.$init$HopscotchForHTML5$HopscotchShell$;
    this.$HopscotchForHTML5$HopscotchShell = this._$HopscotchForHTML5$HopscotchShell = $.$HopscotchForHTML5$HopscotchShell;
    this.$HopscotchForHTML5$HopscotchShell$ = this._$HopscotchForHTML5$HopscotchShell$ = $.$HopscotchForHTML5$HopscotchShell$;
    this.$init$HopscotchForHTML5$HopscotchWindow$ = this._$init$HopscotchForHTML5$HopscotchWindow$ = $.$init$HopscotchForHTML5$HopscotchWindow$;
    this.$HopscotchForHTML5$HopscotchWindow = this._$HopscotchForHTML5$HopscotchWindow = $.$HopscotchForHTML5$HopscotchWindow;
    this.$HopscotchForHTML5$HopscotchWindow$ = this._$HopscotchForHTML5$HopscotchWindow$ = $.$HopscotchForHTML5$HopscotchWindow$;
    this.$init$HopscotchForHTML5$HyperlinkFragment$ = this._$init$HopscotchForHTML5$HyperlinkFragment$ = $.$init$HopscotchForHTML5$HyperlinkFragment$;
    this.$HopscotchForHTML5$HyperlinkFragment = this._$HopscotchForHTML5$HyperlinkFragment = $.$HopscotchForHTML5$HyperlinkFragment;
    this.$HopscotchForHTML5$HyperlinkFragment$ = this._$HopscotchForHTML5$HyperlinkFragment$ = $.$HopscotchForHTML5$HyperlinkFragment$;
    this.$init$HopscotchForHTML5$HyperlinkImageFragment$ = this._$init$HopscotchForHTML5$HyperlinkImageFragment$ = $.$init$HopscotchForHTML5$HyperlinkImageFragment$;
    this.$HopscotchForHTML5$HyperlinkImageFragment = this._$HopscotchForHTML5$HyperlinkImageFragment = $.$HopscotchForHTML5$HyperlinkImageFragment;
    this.$HopscotchForHTML5$HyperlinkImageFragment$ = this._$HopscotchForHTML5$HyperlinkImageFragment$ = $.$HopscotchForHTML5$HyperlinkImageFragment$;
    this.$init$HopscotchForHTML5$LeafFragment$ = this._$init$HopscotchForHTML5$LeafFragment$ = $.$init$HopscotchForHTML5$LeafFragment$;
    this.$HopscotchForHTML5$LeafFragment = this._$HopscotchForHTML5$LeafFragment = $.$HopscotchForHTML5$LeafFragment;
    this.$HopscotchForHTML5$LeafFragment$ = this._$HopscotchForHTML5$LeafFragment$ = $.$HopscotchForHTML5$LeafFragment$;
    this.$init$HopscotchForHTML5$LocalNavigationHistory$ = this._$init$HopscotchForHTML5$LocalNavigationHistory$ = $.$init$HopscotchForHTML5$LocalNavigationHistory$;
    this.$HopscotchForHTML5$LocalNavigationHistory = this._$HopscotchForHTML5$LocalNavigationHistory = $.$HopscotchForHTML5$LocalNavigationHistory;
    this.$HopscotchForHTML5$LocalNavigationHistory$ = this._$HopscotchForHTML5$LocalNavigationHistory$ = $.$HopscotchForHTML5$LocalNavigationHistory$;
    this.$init$HopscotchForHTML5$NavigationHistory$ = this._$init$HopscotchForHTML5$NavigationHistory$ = $.$init$HopscotchForHTML5$NavigationHistory$;
    this.$HopscotchForHTML5$NavigationHistory = this._$HopscotchForHTML5$NavigationHistory = $.$HopscotchForHTML5$NavigationHistory;
    this.$HopscotchForHTML5$NavigationHistory$ = this._$HopscotchForHTML5$NavigationHistory$ = $.$HopscotchForHTML5$NavigationHistory$;
    this.$init$HopscotchForHTML5$PaddedFrameComposer$ = this._$init$HopscotchForHTML5$PaddedFrameComposer$ = $.$init$HopscotchForHTML5$PaddedFrameComposer$;
    this.$HopscotchForHTML5$PaddedFrameComposer = this._$HopscotchForHTML5$PaddedFrameComposer = $.$HopscotchForHTML5$PaddedFrameComposer;
    this.$HopscotchForHTML5$PaddedFrameComposer$ = this._$HopscotchForHTML5$PaddedFrameComposer$ = $.$HopscotchForHTML5$PaddedFrameComposer$;
    this.$init$HopscotchForHTML5$Presenter$ = this._$init$HopscotchForHTML5$Presenter$ = $.$init$HopscotchForHTML5$Presenter$;
    this.$HopscotchForHTML5$Presenter = this._$HopscotchForHTML5$Presenter = $.$HopscotchForHTML5$Presenter;
    this.$HopscotchForHTML5$Presenter$ = this._$HopscotchForHTML5$Presenter$ = $.$HopscotchForHTML5$Presenter$;
    this.$init$HopscotchForHTML5$RowComposer$ = this._$init$HopscotchForHTML5$RowComposer$ = $.$init$HopscotchForHTML5$RowComposer$;
    this.$HopscotchForHTML5$RowComposer = this._$HopscotchForHTML5$RowComposer = $.$HopscotchForHTML5$RowComposer;
    this.$HopscotchForHTML5$RowComposer$ = this._$HopscotchForHTML5$RowComposer$ = $.$HopscotchForHTML5$RowComposer$;
    this.$init$HopscotchForHTML5$SequenceComposer$ = this._$init$HopscotchForHTML5$SequenceComposer$ = $.$init$HopscotchForHTML5$SequenceComposer$;
    this.$HopscotchForHTML5$SequenceComposer = this._$HopscotchForHTML5$SequenceComposer = $.$HopscotchForHTML5$SequenceComposer;
    this.$HopscotchForHTML5$SequenceComposer$ = this._$HopscotchForHTML5$SequenceComposer$ = $.$HopscotchForHTML5$SequenceComposer$;
    this.$init$HopscotchForHTML5$StaticImageFragment$ = this._$init$HopscotchForHTML5$StaticImageFragment$ = $.$init$HopscotchForHTML5$StaticImageFragment$;
    this.$HopscotchForHTML5$StaticImageFragment = this._$HopscotchForHTML5$StaticImageFragment = $.$HopscotchForHTML5$StaticImageFragment;
    this.$HopscotchForHTML5$StaticImageFragment$ = this._$HopscotchForHTML5$StaticImageFragment$ = $.$HopscotchForHTML5$StaticImageFragment$;
    this.$init$HopscotchForHTML5$StaticLabelFragment$ = this._$init$HopscotchForHTML5$StaticLabelFragment$ = $.$init$HopscotchForHTML5$StaticLabelFragment$;
    this.$HopscotchForHTML5$StaticLabelFragment = this._$HopscotchForHTML5$StaticLabelFragment = $.$HopscotchForHTML5$StaticLabelFragment;
    this.$HopscotchForHTML5$StaticLabelFragment$ = this._$HopscotchForHTML5$StaticLabelFragment$ = $.$HopscotchForHTML5$StaticLabelFragment$;
    this.$init$HopscotchForHTML5$Subject$ = this._$init$HopscotchForHTML5$Subject$ = $.$init$HopscotchForHTML5$Subject$;
    this.$HopscotchForHTML5$Subject = this._$HopscotchForHTML5$Subject = $.$HopscotchForHTML5$Subject;
    this.$HopscotchForHTML5$Subject$ = this._$HopscotchForHTML5$Subject$ = $.$HopscotchForHTML5$Subject$;
    this.$init$HopscotchForHTML5$TextDisplayFragment$ = this._$init$HopscotchForHTML5$TextDisplayFragment$ = $.$init$HopscotchForHTML5$TextDisplayFragment$;
    this.$HopscotchForHTML5$TextDisplayFragment = this._$HopscotchForHTML5$TextDisplayFragment = $.$HopscotchForHTML5$TextDisplayFragment;
    this.$HopscotchForHTML5$TextDisplayFragment$ = this._$HopscotchForHTML5$TextDisplayFragment$ = $.$HopscotchForHTML5$TextDisplayFragment$;
    this.$init$HopscotchForHTML5$TextEditorFragment$ = this._$init$HopscotchForHTML5$TextEditorFragment$ = $.$init$HopscotchForHTML5$TextEditorFragment$;
    this.$HopscotchForHTML5$TextEditorFragment = this._$HopscotchForHTML5$TextEditorFragment = $.$HopscotchForHTML5$TextEditorFragment;
    this.$HopscotchForHTML5$TextEditorFragment$ = this._$HopscotchForHTML5$TextEditorFragment$ = $.$HopscotchForHTML5$TextEditorFragment$;
    this.$init$HopscotchForHTML5$ToggleComposer$ = this._$init$HopscotchForHTML5$ToggleComposer$ = $.$init$HopscotchForHTML5$ToggleComposer$;
    this.$HopscotchForHTML5$ToggleComposer = this._$HopscotchForHTML5$ToggleComposer = $.$HopscotchForHTML5$ToggleComposer;
    this.$HopscotchForHTML5$ToggleComposer$ = this._$HopscotchForHTML5$ToggleComposer$ = $.$HopscotchForHTML5$ToggleComposer$;
    this.$enclosingObjects$HopscotchForHTML5 = enclosingObjects;
    this.$super$HopscotchForHTML5$slot = runtimeSuperclass;
    this.HopscotchForHTML5 = function () {
     superBasicNew.call(this);
     this.$Color$slot = nil;
     this.$Context$slot = nil;
     this.$Timer$slot = nil;
     this.$List$slot = nil;
     this.$Map$slot = nil;
     this.$window$slot = nil;
     this.$document$slot = nil;
     this.$body$slot = nil;
     this.$history$slot = nil;
     this.$sharedNavigationHistory$slot = nil;
     this.$embeddedWindowMap$slot = nil;
     this.$sharedBackButtonListener$slot = nil;
     this.$currentHopscotchWindow$slot = nil;
     this.$accept16px$slot = nil;
     this.$cancel16px$slot = nil;
     this.$disclosureClosedImage$slot = nil;
     this.$disclosureTransitionImage$slot = nil;
     this.$disclosureOpenImage$slot = nil;
     this.$deferredContentQueue$slot = nil;
     this.$core$slot = nil;
     this.$fragments$slot = nil;
     this.$HopscotchForHTML5$BlankFragment$slot = nil;
     this.$HopscotchForHTML5$ButtonFragment$slot = nil;
     this.$HopscotchForHTML5$CanvasFragment$slot = nil;
     this.$HopscotchForHTML5$ColumnComposer$slot = nil;
     this.$HopscotchForHTML5$Composer$slot = nil;
     this.$HopscotchForHTML5$DeferredContentComposer$slot = nil;
     this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = nil;
     this.$HopscotchForHTML5$Fragment$slot = nil;
     this.$HopscotchForHTML5$Gradient$slot = nil;
     this.$HopscotchForHTML5$HolderComposer$slot = nil;
     this.$HopscotchForHTML5$HopscotchShell$slot = nil;
     this.$HopscotchForHTML5$HopscotchWindow$slot = nil;
     this.$HopscotchForHTML5$HyperlinkFragment$slot = nil;
     this.$HopscotchForHTML5$HyperlinkImageFragment$slot = nil;
     this.$HopscotchForHTML5$LeafFragment$slot = nil;
     this.$HopscotchForHTML5$LocalNavigationHistory$slot = nil;
     this.$HopscotchForHTML5$NavigationHistory$slot = nil;
     this.$HopscotchForHTML5$PaddedFrameComposer$slot = nil;
     this.$HopscotchForHTML5$Presenter$slot = nil;
     this.$HopscotchForHTML5$RowComposer$slot = nil;
     this.$HopscotchForHTML5$SequenceComposer$slot = nil;
     this.$HopscotchForHTML5$StaticImageFragment$slot = nil;
     this.$HopscotchForHTML5$StaticLabelFragment$slot = nil;
     this.$HopscotchForHTML5$Subject$slot = nil;
     this.$HopscotchForHTML5$TextDisplayFragment$slot = nil;
     this.$HopscotchForHTML5$TextEditorFragment$slot = nil;
     this.$HopscotchForHTML5$ToggleComposer$slot = nil;
    };
    this.basicNew = this.HopscotchForHTML5;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for HopscotchForHTML5";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for HopscotchForHTML5";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$HopscotchForHTML5 = enclosingObjects;
     this.$super$HopscotchForHTML5 = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$MirrorsForV8 = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for MirrorsForV8";
  this.name = "MirrorsForV8";
  this.header = 1091;
  this.slots = [
   new SM("List", false, false),
   new SM("Map", false, false),
   new SM("Mixin", false, false),
   new SM("CharacterReadStream", false, false),
   new SM("CharacterWriteStream", false, false),
   new SM("ImmutableMirrorGroup", false, false),
   new SM("vmmirror", false, false),
   new SM("parserLib", false, false),
   new SM("grammar", false, false),
   new SM("asts", false, false),
   new SM("parsing", false, false),
   new SM("generation", false, false),
   new SM("compilation", false, false),
   new SM("compiler", false, false),
   new SM("MirrorsForV8`ClassDeclarationBuilder", true, true),
   new SM("MirrorsForV8`ClassDeclarationMirror", true, true),
   new SM("MirrorsForV8`ClassHeaderMirror", true, true),
   new SM("MirrorsForV8`ClassMirror", true, true),
   new SM("MirrorsForV8`MethodBuilder", true, true),
   new SM("MirrorsForV8`MethodMirror", true, true),
   new SM("MirrorsForV8`MixinBuilder", true, true),
   new SM("MirrorsForV8`MixinMirror", true, true),
   new SM("MirrorsForV8`MutableMethodGroup", true, true),
   new SM("MirrorsForV8`MutableMirrorGroup", true, true),
   new SM("MirrorsForV8`MutableNestedClassGroup", true, true),
   new SM("MirrorsForV8`ObjectMirror", true, true),
   new SM("MirrorsForV8`SlotDeclarationMirror", true, true)
  ];
  this.methods = [
   new MM("superInit`MirrorsForV8", true, 1092),
   new MM("instance`initializer", true, 1093),
   new MM("classDeclIRFor:within:", false, 1094),
   new MM("sourceForMethod:ofMixin:", false, 1095),
   new MM("sourceIndexForMethod:ofMixin:", false, 1096),
   new MM("updateMixin:from:by:", false, 1097),
   new MM("ClassDeclarationBuilder", true, 0),
   new MM("ClassDeclarationMirror", true, 0),
   new MM("ClassHeaderMirror", true, 0),
   new MM("ClassMirror", true, 0),
   new MM("MethodBuilder", true, 0),
   new MM("MethodMirror", true, 0),
   new MM("MixinBuilder", true, 0),
   new MM("MixinMirror", true, 0),
   new MM("MutableMethodGroup", true, 0),
   new MM("MutableMirrorGroup", true, 0),
   new MM("MutableNestedClassGroup", true, 0),
   new MM("ObjectMirror", true, 0),
   new MM("SlotDeclarationMirror", true, 0),
   new MM("init`List:", true, 0),
   new MM("List", true, 0),
   new MM("init`Map:", true, 0),
   new MM("Map", true, 0),
   new MM("init`Mixin:", true, 0),
   new MM("Mixin", true, 0),
   new MM("init`CharacterReadStream:", true, 0),
   new MM("CharacterReadStream", true, 0),
   new MM("init`CharacterWriteStream:", true, 0),
   new MM("CharacterWriteStream", true, 0),
   new MM("init`ImmutableMirrorGroup:", true, 0),
   new MM("ImmutableMirrorGroup", true, 0),
   new MM("init`vmmirror:", true, 0),
   new MM("vmmirror", true, 0),
   new MM("init`parserLib:", true, 0),
   new MM("parserLib", true, 0),
   new MM("init`grammar:", true, 0),
   new MM("grammar", true, 0),
   new MM("init`asts:", true, 0),
   new MM("asts", true, 0),
   new MM("init`parsing:", true, 0),
   new MM("parsing", true, 0),
   new MM("init`generation:", true, 0),
   new MM("generation", true, 0),
   new MM("init`compilation:", true, 0),
   new MM("compilation", true, 0),
   new MM("init`compiler:", true, 0),
   new MM("compiler", true, 0),
   new MM("init`MirrorsForV8`ClassDeclarationBuilder:", true, 0),
   new MM("MirrorsForV8`ClassDeclarationBuilder", true, 0),
   new MM("MirrorsForV8`ClassDeclarationBuilder:", true, 0),
   new MM("init`MirrorsForV8`ClassDeclarationMirror:", true, 0),
   new MM("MirrorsForV8`ClassDeclarationMirror", true, 0),
   new MM("MirrorsForV8`ClassDeclarationMirror:", true, 0),
   new MM("init`MirrorsForV8`ClassHeaderMirror:", true, 0),
   new MM("MirrorsForV8`ClassHeaderMirror", true, 0),
   new MM("MirrorsForV8`ClassHeaderMirror:", true, 0),
   new MM("init`MirrorsForV8`ClassMirror:", true, 0),
   new MM("MirrorsForV8`ClassMirror", true, 0),
   new MM("MirrorsForV8`ClassMirror:", true, 0),
   new MM("init`MirrorsForV8`MethodBuilder:", true, 0),
   new MM("MirrorsForV8`MethodBuilder", true, 0),
   new MM("MirrorsForV8`MethodBuilder:", true, 0),
   new MM("init`MirrorsForV8`MethodMirror:", true, 0),
   new MM("MirrorsForV8`MethodMirror", true, 0),
   new MM("MirrorsForV8`MethodMirror:", true, 0),
   new MM("init`MirrorsForV8`MixinBuilder:", true, 0),
   new MM("MirrorsForV8`MixinBuilder", true, 0),
   new MM("MirrorsForV8`MixinBuilder:", true, 0),
   new MM("init`MirrorsForV8`MixinMirror:", true, 0),
   new MM("MirrorsForV8`MixinMirror", true, 0),
   new MM("MirrorsForV8`MixinMirror:", true, 0),
   new MM("init`MirrorsForV8`MutableMethodGroup:", true, 0),
   new MM("MirrorsForV8`MutableMethodGroup", true, 0),
   new MM("MirrorsForV8`MutableMethodGroup:", true, 0),
   new MM("init`MirrorsForV8`MutableMirrorGroup:", true, 0),
   new MM("MirrorsForV8`MutableMirrorGroup", true, 0),
   new MM("MirrorsForV8`MutableMirrorGroup:", true, 0),
   new MM("init`MirrorsForV8`MutableNestedClassGroup:", true, 0),
   new MM("MirrorsForV8`MutableNestedClassGroup", true, 0),
   new MM("MirrorsForV8`MutableNestedClassGroup:", true, 0),
   new MM("init`MirrorsForV8`ObjectMirror:", true, 0),
   new MM("MirrorsForV8`ObjectMirror", true, 0),
   new MM("MirrorsForV8`ObjectMirror:", true, 0),
   new MM("init`MirrorsForV8`SlotDeclarationMirror:", true, 0),
   new MM("MirrorsForV8`SlotDeclarationMirror", true, 0),
   new MM("MirrorsForV8`SlotDeclarationMirror:", true, 0)
  ];
  this.nestedClasses = [
   "MirrorsForV8`ClassDeclarationBuilder",
   "MirrorsForV8`ClassDeclarationMirror",
   "MirrorsForV8`ClassHeaderMirror",
   "MirrorsForV8`ClassMirror",
   "MirrorsForV8`MethodBuilder",
   "MirrorsForV8`MethodMirror",
   "MirrorsForV8`MixinBuilder",
   "MirrorsForV8`MixinMirror",
   "MirrorsForV8`MutableMethodGroup",
   "MirrorsForV8`MutableMirrorGroup",
   "MirrorsForV8`MutableNestedClassGroup",
   "MirrorsForV8`ObjectMirror",
   "MirrorsForV8`SlotDeclarationMirror"
  ];
  this.applications = [];
  this.$superInit$MirrorsForV8 = function ($p, $vmm) {
   var self = this;
   self.$super$MirrorsForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p, $vmm) {
   var self = this;
   self._$superInit$MirrorsForV8($p, $vmm);
   $0.$init$List$(self, $p.$collections().$OrderedCollection());
   $0.$init$Map$(self, $p.$collections().$Dictionary());
   $0.$init$Mixin$(self, $p.$kernel().$Mixin());
   $0.$init$CharacterReadStream$(self, $p.$streams().$CharacterReadStream());
   $0.$init$CharacterWriteStream$(self, $p.$streams().$CharacterReadWriteStream());
   $0.$init$ImmutableMirrorGroup$(self, $p.$namespace().$MirrorGroups().$usingLib$($p).$ImmutableMirrorGroup());
   $0.$init$vmmirror$(self, $vmm);
   $0.$init$parserLib$(self, self._$Future().$computing$(function () {
    return $p.$namespace().$CombinatorialParsing().$usingPlatform$($p);
   }));
   $0.$init$grammar$(self, self._$Future().$computing$(function () {
    return $p.$namespace().$NewspeakGrammar().$usingPlatform$parsers$($p, $0.$parserLib(self));
   }));
   $0.$init$asts$(self, self._$Future().$computing$(function () {
    return $p.$namespace().$NewspeakASTs().$usingLib$($p);
   }));
   $0.$init$parsing$(self, self._$Future().$computing$(function () {
    return $p.$namespace().$NewspeakParsing().$usingPlatform$grammar$asts$($p, $0.$grammar(self), $0.$asts(self));
   }));
   $0.$init$generation$(self, self._$Future().$computing$(function () {
    return $p.$namespace().$JavascriptGeneration().$usingPlatform$($p);
   }));
   $0.$init$compilation$(self, self._$Future().$computing$(function () {
    return $p.$namespace().$Compilation().$usingPlatform$parsing$generation$mirrors$($p, $0.$parsing(self), $0.$generation(self), nil);
   }));
   $0.$init$compiler$(self, self._$Future().$computing$(function () {
    return $0.$compilation(self).$Compiler().$new();
   }));
   return self;
  };
  this.$classDeclIRFor$within$ = function ($mixin, $enclosing) {
   var self = this;
   var $source = nil;
   $source = "Newspeak3 'Uncategorized' ".$$comma(self._$ClassDeclarationMirror().$reflecting$($mixin).$source());
   return $0.$compiler(self).$compileClassSource$within$($source, $enclosing);
  };
  this.$sourceForMethod$ofMixin$ = function ($methodName, $m) {
   var self = this;
   var $js = nil;
   var $sourceIndex = nil;
   $js = $0.$generation(self).$factory();
   $sourceIndex = self._$sourceIndexForMethod$ofMixin$($methodName, $m);
   return $js.$propertyOf$at$($js.$ident$("sources"), $sourceIndex);
  };
  this.$sourceIndexForMethod$ofMixin$ = function ($methodName, $m) {
   var self = this;
   var $js = nil;
   var $methodMetadata = nil;
   $js = $0.$generation(self).$factory();
   $methodMetadata = $js.$propertyOf$at$($m, $js.$literal$("methods")).$select$(function ($e) {
    return $js.$propertyOf$at$($e, "name").$$equal($methodName);
   });
   return $js.$propertyOf$at$($methodMetadata, "source");
  };
  this.$updateMixin$from$by$ = function ($oldMixin, $newRuntimeMixin, $classDeclIR) {
   var self = this;
   var $oldRuntimeMixin = nil;
   var $oldRuntimeMetamixin = nil;
   var $newRuntimeMetamixin = nil;
   var $applications = nil;
   $oldRuntimeMixin = $oldMixin.runtimeMixin;
   $oldRuntimeMetamixin = $oldRuntimeMixin.meta;
   $newRuntimeMetamixin = $newRuntimeMixin.meta;
   $applications = $oldRuntimeMixin.applications;
   $classDeclIR.$instanceSide().$methods().$do$(function ($ea) {
    var $jsName = nil;
    $jsName = $0.$compilation(self).$names().$manglePublic$($ea.$name());
    return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
   });
   [
    "name",
    "header",
    "slots",
    "methods",
    "nestedClasses"
   ].$do$(function ($jsName) {
    return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
   });
   $classDeclIR.$classSide().$methods().$do$(function ($ea) {
    var $jsName = nil;
    $jsName = $0.$compilation(self).$names().$manglePublic$($ea.$name());
    return $oldRuntimeMetamixin[$jsName] = $newRuntimeMetamixin[$jsName];
   });
   [
    "slots",
    "methods",
    "nestedClasses"
   ].$do$(function ($jsName) {
    return $oldRuntimeMetamixin[$jsName] = $newRuntimeMetamixin[$jsName];
   });
   $applications.$do$(function ($runtimeClass) {
    var $runtimeMetaclass = nil;
    $runtimeMetaclass = $runtimeClass.meta;
    $runtimeClass.$out();
    $classDeclIR.$instanceSide().$methods().$do$(function ($ea) {
     var $jsProName = nil;
     var $jsPubName = nil;
     $jsPubName = $0.$compilation(self).$names().$manglePublic$($ea.$name());
     $jsProName = $0.$compilation(self).$names().$mangleProtected$($ea.$name());
     if ($ea.$isProtected()) {
      $runtimeClass[$jsProName] = $newRuntimeMixin[$jsPubName];
      $runtimeClass[$jsPubName] = dnuCatcher($jsPubName);
     } else {
      nil;
     };
     return $ea.$isPublic().$ifTrue$(function () {
      $runtimeClass[$jsProName] = $newRuntimeMixin[$jsPubName];
      return $runtimeClass[$jsPubName] = $newRuntimeMixin[$jsPubName];
     });
    });
    return $classDeclIR.$classSide().$methods().$do$(function ($ea) {
     var $jsProName = nil;
     var $jsPubName = nil;
     $jsPubName = $0.$compilation(self).$names().$manglePublic$($ea.$name());
     $jsProName = $0.$compilation(self).$names().$mangleProtected$($ea.$name());
     if ($ea.$isProtected()) {
      $runtimeMetaclass[$jsProName] = $newRuntimeMetamixin[$jsPubName];
      $runtimeMetaclass[$jsPubName] = dnuCatcher($jsPubName);
     } else {
      nil;
     };
     return $ea.$isPublic().$ifTrue$(function () {
      $runtimeMetaclass[$jsProName] = $newRuntimeMetamixin[$jsPubName];
      return $runtimeMetaclass[$jsPubName] = $newRuntimeMetamixin[$jsPubName];
     });
    });
   });
   return self;
  };
  this.$ClassDeclarationBuilder = function () {
   if (nil === this.$MirrorsForV8$ClassDeclarationBuilder$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$ClassDeclarationBuilder;
    this.$MirrorsForV8$ClassDeclarationBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassDeclarationBuilder$slot;
  };
  this.$ClassDeclarationMirror = function () {
   if (nil === this.$MirrorsForV8$ClassDeclarationMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$ClassDeclarationMirror;
    this.$MirrorsForV8$ClassDeclarationMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassDeclarationMirror$slot;
  };
  this.$ClassHeaderMirror = function () {
   if (nil === this.$MirrorsForV8$ClassHeaderMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$ClassHeaderMirror;
    this.$MirrorsForV8$ClassHeaderMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassHeaderMirror$slot;
  };
  this.$ClassMirror = function () {
   if (nil === this.$MirrorsForV8$ClassMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$ClassMirror;
    this.$MirrorsForV8$ClassMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassMirror$slot;
  };
  this.$MethodBuilder = function () {
   if (nil === this.$MirrorsForV8$MethodBuilder$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MethodBuilder;
    this.$MirrorsForV8$MethodBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MethodBuilder$slot;
  };
  this.$MethodMirror = function () {
   if (nil === this.$MirrorsForV8$MethodMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MethodMirror;
    this.$MirrorsForV8$MethodMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MethodMirror$slot;
  };
  this.$MixinBuilder = function () {
   if (nil === this.$MirrorsForV8$MixinBuilder$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MixinBuilder;
    this.$MirrorsForV8$MixinBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MixinBuilder$slot;
  };
  this.$MixinMirror = function () {
   if (nil === this.$MirrorsForV8$MixinMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MixinMirror;
    this.$MirrorsForV8$MixinMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MixinMirror$slot;
  };
  this.$MutableMethodGroup = function () {
   if (nil === this.$MirrorsForV8$MutableMethodGroup$slot) {
    var self = this;
    var superclass = self._$MutableMirrorGroup();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MutableMethodGroup;
    this.$MirrorsForV8$MutableMethodGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MutableMethodGroup$slot;
  };
  this.$MutableMirrorGroup = function () {
   if (nil === this.$MirrorsForV8$MutableMirrorGroup$slot) {
    var self = this;
    var superclass = $0.$ImmutableMirrorGroup(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MutableMirrorGroup;
    this.$MirrorsForV8$MutableMirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MutableMirrorGroup$slot;
  };
  this.$MutableNestedClassGroup = function () {
   if (nil === this.$MirrorsForV8$MutableNestedClassGroup$slot) {
    var self = this;
    var superclass = self._$MutableMirrorGroup();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$MutableNestedClassGroup;
    this.$MirrorsForV8$MutableNestedClassGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MutableNestedClassGroup$slot;
  };
  this.$ObjectMirror = function () {
   if (nil === this.$MirrorsForV8$ObjectMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$ObjectMirror;
    this.$MirrorsForV8$ObjectMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ObjectMirror$slot;
  };
  this.$SlotDeclarationMirror = function () {
   if (nil === this.$MirrorsForV8$SlotDeclarationMirror$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    var mixin = $.$MirrorsForV8$SlotDeclarationMirror;
    this.$MirrorsForV8$SlotDeclarationMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$SlotDeclarationMirror$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$Map$ = function (self, v) {
   self.$Map$slot = v;
   return self;
  };
  this.$Map = function (self) {
   return self.$Map$slot;
  };
  this.$init$Mixin$ = function (self, v) {
   self.$Mixin$slot = v;
   return self;
  };
  this.$Mixin = function (self) {
   return self.$Mixin$slot;
  };
  this.$init$CharacterReadStream$ = function (self, v) {
   self.$CharacterReadStream$slot = v;
   return self;
  };
  this.$CharacterReadStream = function (self) {
   return self.$CharacterReadStream$slot;
  };
  this.$init$CharacterWriteStream$ = function (self, v) {
   self.$CharacterWriteStream$slot = v;
   return self;
  };
  this.$CharacterWriteStream = function (self) {
   return self.$CharacterWriteStream$slot;
  };
  this.$init$ImmutableMirrorGroup$ = function (self, v) {
   self.$ImmutableMirrorGroup$slot = v;
   return self;
  };
  this.$ImmutableMirrorGroup = function (self) {
   return self.$ImmutableMirrorGroup$slot;
  };
  this.$init$vmmirror$ = function (self, v) {
   self.$vmmirror$slot = v;
   return self;
  };
  this.$vmmirror = function (self) {
   return self.$vmmirror$slot;
  };
  this.$init$parserLib$ = function (self, v) {
   self.$parserLib$slot = v;
   return self;
  };
  this.$parserLib = function (self) {
   return self.$parserLib$slot;
  };
  this.$init$grammar$ = function (self, v) {
   self.$grammar$slot = v;
   return self;
  };
  this.$grammar = function (self) {
   return self.$grammar$slot;
  };
  this.$init$asts$ = function (self, v) {
   self.$asts$slot = v;
   return self;
  };
  this.$asts = function (self) {
   return self.$asts$slot;
  };
  this.$init$parsing$ = function (self, v) {
   self.$parsing$slot = v;
   return self;
  };
  this.$parsing = function (self) {
   return self.$parsing$slot;
  };
  this.$init$generation$ = function (self, v) {
   self.$generation$slot = v;
   return self;
  };
  this.$generation = function (self) {
   return self.$generation$slot;
  };
  this.$init$compilation$ = function (self, v) {
   self.$compilation$slot = v;
   return self;
  };
  this.$compilation = function (self) {
   return self.$compilation$slot;
  };
  this.$init$compiler$ = function (self, v) {
   self.$compiler$slot = v;
   return self;
  };
  this.$compiler = function (self) {
   return self.$compiler$slot;
  };
  this.$init$MirrorsForV8$ClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassDeclarationBuilder = function () {
   return this.$MirrorsForV8$ClassDeclarationBuilder$slot;
  };
  this.$MirrorsForV8$ClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassDeclarationMirror = function () {
   return this.$MirrorsForV8$ClassDeclarationMirror$slot;
  };
  this.$MirrorsForV8$ClassDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$ClassHeaderMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassHeaderMirror = function () {
   return this.$MirrorsForV8$ClassHeaderMirror$slot;
  };
  this.$MirrorsForV8$ClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$ClassHeaderMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassMirror$ = function (v) {
   this.$MirrorsForV8$ClassMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassMirror = function () {
   return this.$MirrorsForV8$ClassMirror$slot;
  };
  this.$MirrorsForV8$ClassMirror$ = function (v) {
   this.$MirrorsForV8$ClassMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MethodBuilder$ = function (v) {
   this.$MirrorsForV8$MethodBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$MethodBuilder = function () {
   return this.$MirrorsForV8$MethodBuilder$slot;
  };
  this.$MirrorsForV8$MethodBuilder$ = function (v) {
   this.$MirrorsForV8$MethodBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MethodMirror$ = function (v) {
   this.$MirrorsForV8$MethodMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$MethodMirror = function () {
   return this.$MirrorsForV8$MethodMirror$slot;
  };
  this.$MirrorsForV8$MethodMirror$ = function (v) {
   this.$MirrorsForV8$MethodMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MixinBuilder$ = function (v) {
   this.$MirrorsForV8$MixinBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$MixinBuilder = function () {
   return this.$MirrorsForV8$MixinBuilder$slot;
  };
  this.$MirrorsForV8$MixinBuilder$ = function (v) {
   this.$MirrorsForV8$MixinBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MixinMirror$ = function (v) {
   this.$MirrorsForV8$MixinMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$MixinMirror = function () {
   return this.$MirrorsForV8$MixinMirror$slot;
  };
  this.$MirrorsForV8$MixinMirror$ = function (v) {
   this.$MirrorsForV8$MixinMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MutableMethodGroup$ = function (v) {
   this.$MirrorsForV8$MutableMethodGroup$slot = v;
   return this;
  };
  this.$MirrorsForV8$MutableMethodGroup = function () {
   return this.$MirrorsForV8$MutableMethodGroup$slot;
  };
  this.$MirrorsForV8$MutableMethodGroup$ = function (v) {
   this.$MirrorsForV8$MutableMethodGroup$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MutableMirrorGroup$ = function (v) {
   this.$MirrorsForV8$MutableMirrorGroup$slot = v;
   return this;
  };
  this.$MirrorsForV8$MutableMirrorGroup = function () {
   return this.$MirrorsForV8$MutableMirrorGroup$slot;
  };
  this.$MirrorsForV8$MutableMirrorGroup$ = function (v) {
   this.$MirrorsForV8$MutableMirrorGroup$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MutableNestedClassGroup$ = function (v) {
   this.$MirrorsForV8$MutableNestedClassGroup$slot = v;
   return this;
  };
  this.$MirrorsForV8$MutableNestedClassGroup = function () {
   return this.$MirrorsForV8$MutableNestedClassGroup$slot;
  };
  this.$MirrorsForV8$MutableNestedClassGroup$ = function (v) {
   this.$MirrorsForV8$MutableNestedClassGroup$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ObjectMirror$ = function (v) {
   this.$MirrorsForV8$ObjectMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ObjectMirror = function () {
   return this.$MirrorsForV8$ObjectMirror$slot;
  };
  this.$MirrorsForV8$ObjectMirror$ = function (v) {
   this.$MirrorsForV8$ObjectMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$SlotDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$SlotDeclarationMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$SlotDeclarationMirror = function () {
   return this.$MirrorsForV8$SlotDeclarationMirror$slot;
  };
  this.$MirrorsForV8$SlotDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$SlotDeclarationMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassDeclarationBuilder = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassDeclarationBuilder";
   this.name = "MirrorsForV8`ClassDeclarationBuilder";
   this.header = 1098;
   this.slots = [
    new SM("prvtExistingMixin", true, false),
    new SM("prvtClassDeclIR", true, false),
    new SM("enclosingClass", false, false),
    new SM("instanceSide", false, false),
    new SM("classSide", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassDeclarationBuilder", true, 1099),
    new MM("instance`initializer", true, 1100),
    new MM("accessModifier", false, 1101),
    new MM("install", false, 1102),
    new MM("name", false, 1103),
    new MM("simpleName", false, 1104),
    new MM("updateMixinFrom:", false, 1105),
    new MM("init`prvtExistingMixin:", true, 0),
    new MM("prvtExistingMixin", true, 0),
    new MM("prvtExistingMixin:", true, 0),
    new MM("init`prvtClassDeclIR:", true, 0),
    new MM("prvtClassDeclIR", true, 0),
    new MM("prvtClassDeclIR:", true, 0),
    new MM("init`enclosingClass:", true, 0),
    new MM("enclosingClass", true, 0),
    new MM("init`instanceSide:", true, 0),
    new MM("instanceSide", true, 0),
    new MM("init`classSide:", true, 0),
    new MM("classSide", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassDeclarationBuilder = function ($ir, $m, $enclosing) {
    var self = this;
    self.$super$MirrorsForV8$ClassDeclarationBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ir, $m, $enclosing) {
    var self = this;
    self._$superInit$MirrorsForV8$ClassDeclarationBuilder($ir, $m, $enclosing);
    $1.$init$prvtExistingMixin$(self, $m);
    $1.$init$prvtClassDeclIR$(self, $ir);
    self._$init$enclosingClass$($enclosing);
    self._$init$instanceSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$MixinBuilder().$forClassDeclaration$ir$em$(self, $ir.$instanceSide(), $m));
    self._$init$classSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$MixinBuilder().$forClassDeclaration$ir$em$(self, $ir.$classSide(), $m));
    return self;
   };
   this.$accessModifier = function () {
    var self = this;
    return $1.$prvtClassDeclIR(self).$accessModifier();
   };
   this.$install = function () {
    var self = this;
    var $writer = nil;
    var $stream = nil;
    var $src = nil;
    var $runtimeMixin = nil;
    var $application = nil;
    $writer = $0.$generation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$Writer().$new();
    $stream = $0.$CharacterWriteStream(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$on$(self._$Array().$new$(100));
    $writer.$generateSourceFor$on$($1.$prvtClassDeclIR(self).$runtimeMixin(), $stream);
    $src = self._$String().$withAll$($stream.$contents());
    $src.$out();
    $runtimeMixin = eval($src);
    if ($1.$prvtExistingMixin(self).$isNil()) {
     $1.$prvtExistingMixin$(self, $0.$Mixin(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$fromRuntimeMixin$($runtimeMixin));
    } else {
     self._$updateMixinFrom$($runtimeMixin);
    };
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationMirror().$reflecting$($1.$prvtExistingMixin(self));
   };
   this.$name = function () {
    var self = this;
    return $1.$prvtClassDeclIR(self).$qualifiedName();
   };
   this.$simpleName = function () {
    var self = this;
    return $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$fullyQualifiedNameToSimple$($1.$prvtClassDeclIR(self).$qualifiedName());
   };
   this.$updateMixinFrom$ = function ($runtimeMixin) {
    var self = this;
    var $instanceMethodSourceIndices = nil;
    var $classMethodSourceIndices = nil;
    var $runtimeMetamixin = nil;
    var $existingMixin = nil;
    var $existingMetamixin = nil;
    var $newSourceIndex = nil;
    $instanceMethodSourceIndices = $0.$Map(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $classMethodSourceIndices = $0.$Map(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $runtimeMetamixin = $runtimeMixin.meta;
    $existingMixin = $1.$prvtExistingMixin(self).runtimeMixin;
    $existingMetamixin = $existingMixin.meta;
    $newSourceIndex = sources.length;
    $existingMixin.methods.$do$(function ($ea) {
     return $instanceMethodSourceIndices.$at$put$($ea.name, $ea.source);
    });
    $existingMetamixin.methods.$do$(function ($ea) {
     return $classMethodSourceIndices.$at$put$($ea.name, $ea.source);
    });
    $runtimeMixin.methods.$do$(function ($e) {
     var $selector = nil;
     $selector = $e.name;
     $instanceMethodSourceIndices.$at$ifAbsent$($selector, function () {
      return $instanceMethodSourceIndices.$at$put$($selector, $newSourceIndex);
     });
     return $newSourceIndex = $newSourceIndex + 1;
    });
    $runtimeMetamixin.methods.$do$(function ($e) {
     var $selector = nil;
     $selector = $e.name;
     $classMethodSourceIndices.$at$ifAbsent$($selector, function () {
      return $classMethodSourceIndices.$at$put$($selector, $newSourceIndex);
     });
     return $newSourceIndex = $newSourceIndex + 1;
    });
    self._$instanceSide().$methods().$do$(function ($m) {
     var $sourceIndex = nil;
     $sourceIndex = $instanceMethodSourceIndices.$at$($m.$name());
     return $m.$source().$$tilde$equal(nil).$ifTrue$(function () {
      return sources[$sourceIndex] = $m.$source();
     });
    });
    self._$classSide().$methods().$do$(function ($m) {
     var $sourceIndex = nil;
     $sourceIndex = $classMethodSourceIndices.$at$($m.$name());
     return $m.$source().$$tilde$equal(nil).$ifTrue$(function () {
      return sources[$sourceIndex] = $m.$source();
     });
    });
    $runtimeMixin.methods.$do$(function ($mm) {
     return $mm.source = $instanceMethodSourceIndices.$at$($mm.name);
    });
    $runtimeMetamixin.methods.$do$(function ($mm) {
     return $mm.source = $classMethodSourceIndices.$at$($mm.name);
    });
    self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$updateMixin$from$by$($1.$prvtExistingMixin(self), $runtimeMixin, $1.$prvtClassDeclIR(self));
    return self;
   };
   this.$init$prvtExistingMixin$ = function (self, v) {
    self.$prvtExistingMixin$slot = v;
    return self;
   };
   this.$prvtExistingMixin = function (self) {
    return self.$prvtExistingMixin$slot;
   };
   this.$prvtExistingMixin$ = function (self, v) {
    self.$prvtExistingMixin$slot = v;
    return self;
   };
   this.$init$prvtClassDeclIR$ = function (self, v) {
    self.$prvtClassDeclIR$slot = v;
    return self;
   };
   this.$prvtClassDeclIR = function (self) {
    return self.$prvtClassDeclIR$slot;
   };
   this.$prvtClassDeclIR$ = function (self, v) {
    self.$prvtClassDeclIR$slot = v;
    return self;
   };
   this.$init$enclosingClass$ = function (v) {
    this.$enclosingClass$slot = v;
    return this;
   };
   this.$enclosingClass = function () {
    return this.$enclosingClass$slot;
   };
   this.$init$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$instanceSide = function () {
    return this.$instanceSide$slot;
   };
   this.$init$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.$classSide = function () {
    return this.$classSide$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassDeclarationBuilder";
     this._$superInit$MirrorsForV8$ClassDeclarationBuilder = $.$superInit$MirrorsForV8$ClassDeclarationBuilder;
     this.$superInit$MirrorsForV8$ClassDeclarationBuilder = dnuCatcher("$superInit$MirrorsForV8$ClassDeclarationBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$install = this._$install = $.$install;
     this.$name = this._$name = $.$name;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this._$updateMixinFrom$ = $.$updateMixinFrom$;
     this.$updateMixinFrom$ = dnuCatcher("$updateMixinFrom$");
     this.$init$enclosingClass$ = this._$init$enclosingClass$ = $.$init$enclosingClass$;
     this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
     this.$init$instanceSide$ = this._$init$instanceSide$ = $.$init$instanceSide$;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$init$classSide$ = this._$init$classSide$ = $.$init$classSide$;
     this.$classSide = this._$classSide = $.$classSide;
     this.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder = enclosingObjects;
     this.$super$MirrorsForV8$ClassDeclarationBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassDeclarationBuilder"] = function () {
      superBasicNew.call(this);
      this.$prvtExistingMixin$slot = nil;
      this.$prvtClassDeclIR$slot = nil;
      this.$enclosingClass$slot = nil;
      this.$instanceSide$slot = nil;
      this.$classSide$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassDeclarationBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassDeclarationBuilder";
    this.slots = [];
    this.methods = [
     new MM("fromIR:forExistingMixin:within:", true, 0),
     new MM("fromSource:", false, 1106),
     new MM("fromUnitSource:", false, 1107),
     new MM("reflecting:", false, 1108)
    ];
    this.nestedClasses = [];
    this.$fromIR$forExistingMixin$within$ = function ($ir, $m, $enclosing) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ir, $m, $enclosing);
    };
    this.$fromSource$ = function ($src) {
     var self = this;
     return self._$fromUnitSource$("Newspeak3 'Uncategorized' ".$$comma($src));
    };
    this.$fromUnitSource$ = function ($src) {
     var self = this;
     return self._$fromIR$within$($0.$compiler(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$compileClassSource$($src), nil);
    };
    this.$reflecting$ = function ($mixin) {
     var self = this;
     var $m = nil;
     $m = self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationMirror().$reflecting$($mixin);
     if (!$m.$enclosingClass().$isNil()) {
      return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationBuilder().$reflecting$($m.$enclosingClass().$reflectee()).$instanceSide().$nestedClasses().$findMirrorNamed$($m.$simpleName());
     } else {
      nil;
     };
     return self._$fromIR$forExistingMixin$within$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$classDeclIRFor$within$($mixin, nil), $mixin, nil);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassDeclarationBuilder";
      this.$fromIR$forExistingMixin$within$ = this._$fromIR$forExistingMixin$within$ = $.$fromIR$forExistingMixin$within$;
      this.$fromSource$ = this._$fromSource$ = $.$fromSource$;
      this.$fromUnitSource$ = this._$fromUnitSource$ = $.$fromUnitSource$;
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder = enclosingObjects;
      this.$super$MirrorsForV8$ClassDeclarationBuilder = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassDeclarationMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassDeclarationMirror";
   this.name = "MirrorsForV8`ClassDeclarationMirror";
   this.header = 1109;
   this.slots = [
    new SM("reflectee", false, false),
    new SM("instanceSide", false, false),
    new SM("classSide", false, false),
    new SM("accessModifier", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassDeclarationMirror", true, 1110),
    new MM("instance`initializer", true, 1111),
    new MM("enclosingClass", false, 1112),
    new MM("header", false, 1113),
    new MM("name", false, 1114),
    new MM("simpleName", false, 1115),
    new MM("source", false, 1116),
    new MM("init`reflectee:", true, 0),
    new MM("reflectee", true, 0),
    new MM("init`instanceSide:", true, 0),
    new MM("instanceSide", true, 0),
    new MM("init`classSide:", true, 0),
    new MM("classSide", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassDeclarationMirror = function ($mixin) {
    var self = this;
    self.$super$MirrorsForV8$ClassDeclarationMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mixin) {
    var self = this;
    self._$superInit$MirrorsForV8$ClassDeclarationMirror($mixin);
    self._$init$reflectee$($mixin);
    self._$init$instanceSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$MixinMirror().$reflecting$($mixin));
    self._$init$classSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$MixinMirror().$reflecting$($0.$Mixin(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$fromRuntimeMixin$($mixin.runtimeMixin.meta)));
    self._$init$accessModifier$("public");
    return self;
   };
   this.$enclosingClass = function () {
    var self = this;
    var $enclosing = nil;
    $enclosing = self._$reflectee().runtimeMixin.enclosingMixin;
    if ($enclosing === undefined) {
     return nil;
    } else {
     nil;
    };
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassDeclarationMirror().$reflecting$($0.$Mixin(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$fromRuntimeMixin$($enclosing));
   };
   this.$header = function () {
    var self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassHeaderMirror().$reflecting$(self._$reflectee());
   };
   this.$name = function () {
    var self = this;
    return self._$reflectee().$name();
   };
   this.$simpleName = function () {
    var self = this;
    return self._$name().$splitBy$("`").$last();
   };
   this.$source = function () {
    var self = this;
    var $stream = nil;
    $stream = $0.$CharacterWriteStream(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$on$(self._$Array().$new$(100));
    $stream.$nextPutAll$(self._$header().$source());
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$(" ( ");
     return cascadeReceiver.$cr();
    })($stream);
    self._$instanceSide().$nestedClasses().$do$(function ($ea) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$nextPutAll$($ea.$source());
      return cascadeReceiver.$cr();
     })($stream);
    });
    $stream.$nextPutAll$(" 'Unclassified' ");
    self._$instanceSide().$methods().$do$(function ($ea) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$nextPutAll$($ea.$source());
      return cascadeReceiver.$cr();
     })($stream);
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$(" ) : ( ");
     return cascadeReceiver.$cr();
    })($stream);
    self._$classSide().$methods().$do$(function ($ea) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$nextPutAll$($ea.$source());
      return cascadeReceiver.$cr();
     })($stream);
    });
    $stream.$nextPutAll$(" )");
    return self._$String().$withAll$($stream.$contents());
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.$init$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$instanceSide = function () {
    return this.$instanceSide$slot;
   };
   this.$init$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.$classSide = function () {
    return this.$classSide$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassDeclarationMirror";
     this._$superInit$MirrorsForV8$ClassDeclarationMirror = $.$superInit$MirrorsForV8$ClassDeclarationMirror;
     this.$superInit$MirrorsForV8$ClassDeclarationMirror = dnuCatcher("$superInit$MirrorsForV8$ClassDeclarationMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
     this.$header = this._$header = $.$header;
     this.$name = this._$name = $.$name;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$source = this._$source = $.$source;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$init$instanceSide$ = this._$init$instanceSide$ = $.$init$instanceSide$;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$init$classSide$ = this._$init$classSide$ = $.$init$classSide$;
     this.$classSide = this._$classSide = $.$classSide;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror = enclosingObjects;
     this.$super$MirrorsForV8$ClassDeclarationMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassDeclarationMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
      this.$instanceSide$slot = nil;
      this.$classSide$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassDeclarationMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassDeclarationMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($mixin) {
     return (new this.nonMeta.basicNew()).$instance$initializer($mixin);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassDeclarationMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror = enclosingObjects;
      this.$super$MirrorsForV8$ClassDeclarationMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassHeaderMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassHeaderMirror";
   this.name = "MirrorsForV8`ClassHeaderMirror";
   this.header = 1117;
   this.slots = [new SM("reflectee", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassHeaderMirror", true, 1118),
    new MM("instance`initializer", true, 1119),
    new MM("source", false, 1120),
    new MM("init`reflectee:", true, 0),
    new MM("reflectee", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassHeaderMirror = function ($mixin) {
    var self = this;
    self.$super$MirrorsForV8$ClassHeaderMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mixin) {
    var self = this;
    self._$superInit$MirrorsForV8$ClassHeaderMirror($mixin);
    self._$init$reflectee$($mixin);
    return self;
   };
   this.$source = function () {
    var self = this;
    var $sourceIndex = nil;
    $sourceIndex = self._$reflectee().runtimeMixin.header;
    return sources[$sourceIndex];
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassHeaderMirror";
     this._$superInit$MirrorsForV8$ClassHeaderMirror = $.$superInit$MirrorsForV8$ClassHeaderMirror;
     this.$superInit$MirrorsForV8$ClassHeaderMirror = dnuCatcher("$superInit$MirrorsForV8$ClassHeaderMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$source = this._$source = $.$source;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$enclosingObjects$MirrorsForV8$ClassHeaderMirror = enclosingObjects;
     this.$super$MirrorsForV8$ClassHeaderMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassHeaderMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassHeaderMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassHeaderMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($mixin) {
     return (new this.nonMeta.basicNew()).$instance$initializer($mixin);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassHeaderMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassHeaderMirror = enclosingObjects;
      this.$super$MirrorsForV8$ClassHeaderMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassMirror";
   this.name = "MirrorsForV8`ClassMirror";
   this.header = 1121;
   this.slots = [new SM("reflectee", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassMirror", true, 1122),
    new MM("instance`initializer", true, 1123),
    new MM("allSuperclasses", false, 1124),
    new MM("computeMirrorGroup:", false, 1125),
    new MM("enclosingObject", false, 1126),
    new MM("methods", false, 1127),
    new MM("mixin", false, 1128),
    new MM("name", false, 1129),
    new MM("nestedClasses", false, 1130),
    new MM("simpleName", false, 1131),
    new MM("slots", false, 1132),
    new MM("superclass", false, 1133),
    new MM("init`reflectee:", true, 0),
    new MM("reflectee", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassMirror = function ($r) {
    var self = this;
    self.$super$MirrorsForV8$ClassMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r) {
    var self = this;
    self._$superInit$MirrorsForV8$ClassMirror($r);
    self._$init$reflectee$($r);
    return self;
   };
   this.$allSuperclasses = function () {
    var self = this;
    var $klass = nil;
    var $superclasses = nil;
    $superclasses = $0.$List(self.$enclosingObjects$MirrorsForV8$ClassMirror[0]).$new();
    $klass = self._$superclass();
    {
     nil;
     for (; !$klass.$isNil(); ) {
      $superclasses.$add$($klass);
      $klass = $klass.$superclass();
     };
    };
    return $superclasses;
   };
   this.$computeMirrorGroup$ = function (self, $mgAccessor) {
    var $mg = nil;
    $mg = $0.$List(self.$enclosingObjects$MirrorsForV8$ClassMirror[0]).$new();
    (function (cascadeReceiver) {
     cascadeReceiver.$add$(self);
     return cascadeReceiver.$yourself();
    })(self._$allSuperclasses().$reverse()).$do$(function ($klass) {
     return $mg.$addAll$($mgAccessor.$value$($klass.$mixin()));
    });
    return $mg;
   };
   this.$enclosingObject = function () {
    var self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$ObjectMirror().$reflecting$(self._$reflectee().$enclosingObject());
   };
   this.$methods = function () {
    var self = this;
    return $1.$computeMirrorGroup$(self, function ($r) {
     return $r.$methods();
    });
   };
   this.$mixin = function () {
    var self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$MixinMirror().$reflecting$(self._$reflectee().$mixin());
   };
   this.$name = function () {
    var self = this;
    return self._$reflectee().$name();
   };
   this.$nestedClasses = function () {
    var self = this;
    return $1.$computeMirrorGroup$(self, function ($r) {
     return $r.$nestedClasses();
    });
   };
   this.$simpleName = function () {
    var self = this;
    return self._$reflectee().$name().$splitBy$("`").$last();
   };
   this.$slots = function () {
    var self = this;
    return $1.$computeMirrorGroup$(self, function ($r) {
     return $r.$slots();
    });
   };
   this.$superclass = function () {
    var self = this;
    if (self._$reflectee().$superclass().$isNil()) {
     return nil;
    } else {
     nil;
    };
    return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().$superclass());
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassMirror";
     this._$superInit$MirrorsForV8$ClassMirror = $.$superInit$MirrorsForV8$ClassMirror;
     this.$superInit$MirrorsForV8$ClassMirror = dnuCatcher("$superInit$MirrorsForV8$ClassMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$allSuperclasses = this._$allSuperclasses = $.$allSuperclasses;
     this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
     this.$methods = this._$methods = $.$methods;
     this.$mixin = this._$mixin = $.$mixin;
     this.$name = this._$name = $.$name;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$slots = this._$slots = $.$slots;
     this.$superclass = this._$superclass = $.$superclass;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$enclosingObjects$MirrorsForV8$ClassMirror = enclosingObjects;
     this.$super$MirrorsForV8$ClassMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($r) {
     return (new this.nonMeta.basicNew()).$instance$initializer($r);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassMirror = enclosingObjects;
      this.$super$MirrorsForV8$ClassMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MethodBuilder = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MethodBuilder";
   this.name = "MirrorsForV8`MethodBuilder";
   this.header = 1134;
   this.slots = [
    new SM("reflecteeX", false, false),
    new SM("definingMixinX", false, false),
    new SM("source", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MethodBuilder", true, 1135),
    new MM("instance`initializer", true, 1136),
    new MM("accessModifier", false, 1137),
    new MM("name", false, 1138),
    new MM("simpleName", false, 1139),
    new MM("init`reflecteeX:", true, 0),
    new MM("reflecteeX", true, 0),
    new MM("init`definingMixinX:", true, 0),
    new MM("definingMixinX", true, 0),
    new MM("init`source:", true, 0),
    new MM("source", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MethodBuilder = function ($mir, $mb, $s) {
    var self = this;
    self.$super$MirrorsForV8$MethodBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mir, $mb, $s) {
    var self = this;
    self._$superInit$MirrorsForV8$MethodBuilder($mir, $mb, $s);
    self._$init$reflecteeX$($mir);
    self._$init$definingMixinX$($mb);
    self._$init$source$($s);
    return self;
   };
   this.$accessModifier = function () {
    var self = this;
    return self._$reflecteeX().$accessModifier();
   };
   this.$name = function () {
    var self = this;
    return self._$reflecteeX().$name();
   };
   this.$simpleName = function () {
    var self = this;
    return self._$reflecteeX().$name();
   };
   this.$init$reflecteeX$ = function (v) {
    this.$reflecteeX$slot = v;
    return this;
   };
   this.$reflecteeX = function () {
    return this.$reflecteeX$slot;
   };
   this.$init$definingMixinX$ = function (v) {
    this.$definingMixinX$slot = v;
    return this;
   };
   this.$definingMixinX = function () {
    return this.$definingMixinX$slot;
   };
   this.$init$source$ = function (v) {
    this.$source$slot = v;
    return this;
   };
   this.$source = function () {
    return this.$source$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MethodBuilder";
     this._$superInit$MirrorsForV8$MethodBuilder = $.$superInit$MirrorsForV8$MethodBuilder;
     this.$superInit$MirrorsForV8$MethodBuilder = dnuCatcher("$superInit$MirrorsForV8$MethodBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$name = this._$name = $.$name;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this._$init$reflecteeX$ = $.$init$reflecteeX$;
     this.$init$reflecteeX$ = dnuCatcher("$init$reflecteeX$");
     this._$reflecteeX = $.$reflecteeX;
     this.$reflecteeX = dnuCatcher("$reflecteeX");
     this._$init$definingMixinX$ = $.$init$definingMixinX$;
     this.$init$definingMixinX$ = dnuCatcher("$init$definingMixinX$");
     this._$definingMixinX = $.$definingMixinX;
     this.$definingMixinX = dnuCatcher("$definingMixinX");
     this.$init$source$ = this._$init$source$ = $.$init$source$;
     this.$source = this._$source = $.$source;
     this.$enclosingObjects$MirrorsForV8$MethodBuilder = enclosingObjects;
     this.$super$MirrorsForV8$MethodBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`MethodBuilder"] = function () {
      superBasicNew.call(this);
      this.$reflecteeX$slot = nil;
      this.$definingMixinX$slot = nil;
      this.$source$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MethodBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MethodBuilder";
    this.slots = [];
    this.methods = [new MM("reflecting:in:source:", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$in$source$ = function ($mir, $mb, $s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($mir, $mb, $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MethodBuilder";
      this.$reflecting$in$source$ = this._$reflecting$in$source$ = $.$reflecting$in$source$;
      this.$enclosingObjects$MirrorsForV8$MethodBuilder = enclosingObjects;
      this.$super$MirrorsForV8$MethodBuilder = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MethodMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MethodMirror";
   this.name = "MirrorsForV8`MethodMirror";
   this.header = 1140;
   this.slots = [
    new SM("name", false, false),
    new SM("definingMixin", false, false),
    new SM("sourceIndex", false, false),
    new SM("accessModifier", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MethodMirror", true, 1141),
    new MM("instance`initializer", true, 1142),
    new MM("simpleName", false, 1143),
    new MM("source", false, 1144),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`definingMixin:", true, 0),
    new MM("definingMixin", true, 0),
    new MM("init`sourceIndex:", true, 0),
    new MM("sourceIndex", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MethodMirror = function ($n, $dm, $s) {
    var self = this;
    self.$super$MirrorsForV8$MethodMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n, $dm, $s) {
    var self = this;
    self._$superInit$MirrorsForV8$MethodMirror($n, $dm, $s);
    self._$init$name$($n);
    self._$init$definingMixin$($dm);
    $1.$init$sourceIndex$(self, $s);
    self._$init$accessModifier$("public");
    return self;
   };
   this.$simpleName = function () {
    var self = this;
    return self._$name();
   };
   this.$source = function () {
    var self = this;
    return sources[$1.$sourceIndex(self)];
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$definingMixin$ = function (v) {
    this.$definingMixin$slot = v;
    return this;
   };
   this.$definingMixin = function () {
    return this.$definingMixin$slot;
   };
   this.$init$sourceIndex$ = function (self, v) {
    self.$sourceIndex$slot = v;
    return self;
   };
   this.$sourceIndex = function (self) {
    return self.$sourceIndex$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MethodMirror";
     this._$superInit$MirrorsForV8$MethodMirror = $.$superInit$MirrorsForV8$MethodMirror;
     this.$superInit$MirrorsForV8$MethodMirror = dnuCatcher("$superInit$MirrorsForV8$MethodMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$source = this._$source = $.$source;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$definingMixin$ = this._$init$definingMixin$ = $.$init$definingMixin$;
     this.$definingMixin = this._$definingMixin = $.$definingMixin;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$enclosingObjects$MirrorsForV8$MethodMirror = enclosingObjects;
     this.$super$MirrorsForV8$MethodMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`MethodMirror"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$definingMixin$slot = nil;
      this.$sourceIndex$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MethodMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MethodMirror";
    this.slots = [];
    this.methods = [new MM("named:in:source:", true, 0)];
    this.nestedClasses = [];
    this.$named$in$source$ = function ($n, $dm, $s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($n, $dm, $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MethodMirror";
      this.$named$in$source$ = this._$named$in$source$ = $.$named$in$source$;
      this.$enclosingObjects$MirrorsForV8$MethodMirror = enclosingObjects;
      this.$super$MirrorsForV8$MethodMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MixinBuilder = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MixinBuilder";
   this.name = "MirrorsForV8`MixinBuilder";
   this.header = 1145;
   this.slots = [
    new SM("mixinIR", false, false),
    new SM("declaration", false, false),
    new SM("isMeta", false, false),
    new SM("slots", false, false),
    new SM("methods", false, false),
    new SM("nestedClasses", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MixinBuilder", true, 1146),
    new MM("instance`initializer", true, 1147),
    new MM("find:in:", false, 1148),
    new MM("isMixinMirror", false, 1149),
    new MM("init`mixinIR:", true, 0),
    new MM("mixinIR", true, 0),
    new MM("init`declaration:", true, 0),
    new MM("declaration", true, 0),
    new MM("init`isMeta:", true, 0),
    new MM("isMeta", true, 0),
    new MM("init`slots:", true, 0),
    new MM("slots", true, 0),
    new MM("init`methods:", true, 0),
    new MM("methods", true, 0),
    new MM("init`nestedClasses:", true, 0),
    new MM("nestedClasses", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MixinBuilder = function ($cdb, $ir, $em) {
    var self = this;
    self.$super$MirrorsForV8$MixinBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($cdb, $ir, $em) {
    var self = this;
    self._$superInit$MirrorsForV8$MixinBuilder($cdb, $ir, $em);
    self._$init$mixinIR$($ir);
    self._$init$declaration$($cdb);
    self._$init$isMeta$($ir.$isMeta());
    self._$init$slots$($ir.$slots().$collect$(function ($ea) {
     return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$SlotDeclarationMirror().$named$($ea.$name());
    }));
    self._$init$methods$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableMethodGroup().$group$within$ir$($ir.$methods().$reject$(function ($ea) {
     return $ea.$isSynthetic();
    }).$collect$(function ($ea) {
     return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MethodBuilder().$reflecting$in$source$($ea, self, nil);
    }), self, $ir));
    self._$init$nestedClasses$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableNestedClassGroup().$group$within$ir$($ir.$nestedClasses().$collect$(function ($ea) {
     return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$fromIR$forExistingMixin$within$($ea, self._$find$in$($ea.$qualifiedName(), $em), $cdb);
    }), self, $ir));
    return self;
   };
   this.$find$in$ = function ($name, $existingMixin) {
    var self = this;
    return $0.$Mixin(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]).$fromRuntimeMixin$($existingMixin.runtimeMixin[$0.$compilation(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]).$names().$manglePublic$($name)]);
   };
   this.$isMixinMirror = function () {
    var self = this;
    return true;
   };
   this.$init$mixinIR$ = function (v) {
    this.$mixinIR$slot = v;
    return this;
   };
   this.$mixinIR = function () {
    return this.$mixinIR$slot;
   };
   this.$init$declaration$ = function (v) {
    this.$declaration$slot = v;
    return this;
   };
   this.$declaration = function () {
    return this.$declaration$slot;
   };
   this.$init$isMeta$ = function (v) {
    this.$isMeta$slot = v;
    return this;
   };
   this.$isMeta = function () {
    return this.$isMeta$slot;
   };
   this.$init$slots$ = function (v) {
    this.$slots$slot = v;
    return this;
   };
   this.$slots = function () {
    return this.$slots$slot;
   };
   this.$init$methods$ = function (v) {
    this.$methods$slot = v;
    return this;
   };
   this.$methods = function () {
    return this.$methods$slot;
   };
   this.$init$nestedClasses$ = function (v) {
    this.$nestedClasses$slot = v;
    return this;
   };
   this.$nestedClasses = function () {
    return this.$nestedClasses$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MixinBuilder";
     this._$superInit$MirrorsForV8$MixinBuilder = $.$superInit$MirrorsForV8$MixinBuilder;
     this.$superInit$MirrorsForV8$MixinBuilder = dnuCatcher("$superInit$MirrorsForV8$MixinBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$find$in$ = $.$find$in$;
     this.$find$in$ = dnuCatcher("$find$in$");
     this.$isMixinMirror = this._$isMixinMirror = $.$isMixinMirror;
     this._$init$mixinIR$ = $.$init$mixinIR$;
     this.$init$mixinIR$ = dnuCatcher("$init$mixinIR$");
     this._$mixinIR = $.$mixinIR;
     this.$mixinIR = dnuCatcher("$mixinIR");
     this.$init$declaration$ = this._$init$declaration$ = $.$init$declaration$;
     this.$declaration = this._$declaration = $.$declaration;
     this.$init$isMeta$ = this._$init$isMeta$ = $.$init$isMeta$;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$init$slots$ = this._$init$slots$ = $.$init$slots$;
     this.$slots = this._$slots = $.$slots;
     this.$init$methods$ = this._$init$methods$ = $.$init$methods$;
     this.$methods = this._$methods = $.$methods;
     this.$init$nestedClasses$ = this._$init$nestedClasses$ = $.$init$nestedClasses$;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$enclosingObjects$MirrorsForV8$MixinBuilder = enclosingObjects;
     this.$super$MirrorsForV8$MixinBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`MixinBuilder"] = function () {
      superBasicNew.call(this);
      this.$mixinIR$slot = nil;
      this.$declaration$slot = nil;
      this.$isMeta$slot = nil;
      this.$slots$slot = nil;
      this.$methods$slot = nil;
      this.$nestedClasses$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MixinBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MixinBuilder";
    this.slots = [];
    this.methods = [
     new MM("forClassDeclaration:ir:em:", true, 0),
     new MM("reflecting:", false, 1150)
    ];
    this.nestedClasses = [];
    this.$forClassDeclaration$ir$em$ = function ($cdb, $ir, $em) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cdb, $ir, $em);
    };
    this.$reflecting$ = function ($mxn) {
     var self = this;
     return $mxn.$isMeta().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$reflecting$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MixinMirror().$reflecting$($mxn).$declaration().$instanceSide().$reflectee()).$classSide();
     }, function () {
      return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$reflecting$($mxn).$instanceSide();
     });
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MixinBuilder";
      this.$forClassDeclaration$ir$em$ = this._$forClassDeclaration$ir$em$ = $.$forClassDeclaration$ir$em$;
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$MixinBuilder = enclosingObjects;
      this.$super$MirrorsForV8$MixinBuilder = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MixinMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MixinMirror";
   this.name = "MirrorsForV8`MixinMirror";
   this.header = 1151;
   this.slots = [new SM("reflectee", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`MixinMirror", true, 1152),
    new MM("instance`initializer", true, 1153),
    new MM("declaration", false, 1154),
    new MM("isMixinMirror", false, 1155),
    new MM("methods", false, 1156),
    new MM("nestedClasses", false, 1157),
    new MM("slots", false, 1158),
    new MM("init`reflectee:", true, 0),
    new MM("reflectee", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MixinMirror = function ($mixin) {
    var self = this;
    self.$super$MirrorsForV8$MixinMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mixin) {
    var self = this;
    self._$superInit$MirrorsForV8$MixinMirror($mixin);
    self._$init$reflectee$($mixin);
    return self;
   };
   this.$declaration = function () {
    var self = this;
    return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassDeclarationMirror().$reflecting$(self._$reflectee().$isMeta().$ifFalse$ifTrue$(function () {
     return self._$reflectee();
    }, function () {
     return $0.$Mixin(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$fromRuntimeMixin$(self._$reflectee().runtimeMixin.nonMeta);
    }));
   };
   this.$isMixinMirror = function () {
    var self = this;
    return true;
   };
   this.$methods = function () {
    var self = this;
    var $raw = nil;
    $raw = self._$reflectee().runtimeMixin.methods.$select$(function ($each) {
     return $each.isSynthetic.$not();
    }).$collect$(function ($each) {
     return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$MethodMirror().$named$in$source$($each.name, self, $each.source);
    });
    return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
   };
   this.$nestedClasses = function () {
    var self = this;
    var $raw = nil;
    $raw = self._$reflectee().runtimeMixin.nestedClasses.$collect$(function ($each) {
     return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassDeclarationMirror().$reflecting$($0.$Mixin(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$fromRuntimeMixin$(self._$reflectee().runtimeMixin[$0.$vmmirror(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$mangleSelector$($each)]));
    });
    return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
   };
   this.$slots = function () {
    var self = this;
    var $raw = nil;
    $raw = self._$reflectee().runtimeMixin.slots.$select$(function ($each) {
     return $each.isSynthetic.$not();
    }).$collect$(function ($each) {
     return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$SlotDeclarationMirror().$named$($each.name);
    });
    return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MixinMirror";
     this._$superInit$MirrorsForV8$MixinMirror = $.$superInit$MirrorsForV8$MixinMirror;
     this.$superInit$MirrorsForV8$MixinMirror = dnuCatcher("$superInit$MirrorsForV8$MixinMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$declaration = this._$declaration = $.$declaration;
     this.$isMixinMirror = this._$isMixinMirror = $.$isMixinMirror;
     this.$methods = this._$methods = $.$methods;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$slots = this._$slots = $.$slots;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$enclosingObjects$MirrorsForV8$MixinMirror = enclosingObjects;
     this.$super$MirrorsForV8$MixinMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`MixinMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MixinMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MixinMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($mixin) {
     return (new this.nonMeta.basicNew()).$instance$initializer($mixin);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MixinMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$MixinMirror = enclosingObjects;
      this.$super$MirrorsForV8$MixinMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MutableMethodGroup = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MutableMethodGroup";
   this.name = "MirrorsForV8`MutableMethodGroup";
   this.header = 1159;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorsForV8`MutableMethodGroup", true, 1160),
    new MM("instance`initializer", true, 1161),
    new MM("addFromSource:", false, 1162)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MutableMethodGroup = function ($ms, $mb, $ir) {
    var self = this;
    self.$super$MirrorsForV8$MutableMethodGroup$slot._$instance$initializer.call(self, $ms, $mb, $ir);
    return self;
   };
   this.$instance$initializer = function ($ms, $mb, $ir) {
    var self = this;
    self._$superInit$MirrorsForV8$MutableMethodGroup($ms, $mb, $ir);
    return self;
   };
   this.$addFromSource$ = function ($s) {
    var self = this;
    var $result = nil;
    var $newM = nil;
    var $sourceIndex = nil;
    var $oldMirror = nil;
    $result = $0.$compiler(self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]).$compileMethodSource$within$($s, self._$enclosingMixin());
    $newM = self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]._$MethodBuilder().$reflecting$in$source$($result, self._$enclosingMixin(), $s);
    $oldMirror = self._$removeMirrorNamed$($result.$name());
    if ($oldMirror.$$tilde$equal(self)) {
     self._$mixinIR().$methods().$removeAllSuchThat$(function ($ea) {
      return $ea.$name().$$equal($result.$name());
     });
    } else {
     nil;
    };
    self._$mixinIR().$methods().$add$($result);
    self._$addMirror$($newM);
    return $newM;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MutableMethodGroup";
     this._$superInit$MirrorsForV8$MutableMethodGroup = $.$superInit$MirrorsForV8$MutableMethodGroup;
     this.$superInit$MirrorsForV8$MutableMethodGroup = dnuCatcher("$superInit$MirrorsForV8$MutableMethodGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
     this.$enclosingObjects$MirrorsForV8$MutableMethodGroup = enclosingObjects;
     this.$super$MirrorsForV8$MutableMethodGroup$slot = runtimeSuperclass;
     this["MirrorsForV8`MutableMethodGroup"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorsForV8`MutableMethodGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MutableMethodGroup";
    this.slots = [];
    this.methods = [new MM("group:within:ir:", true, 0)];
    this.nestedClasses = [];
    this.$group$within$ir$ = function ($ms, $mb, $ir) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ms, $mb, $ir);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MutableMethodGroup";
      this.$group$within$ir$ = this._$group$within$ir$ = $.$group$within$ir$;
      this.$enclosingObjects$MirrorsForV8$MutableMethodGroup = enclosingObjects;
      this.$super$MirrorsForV8$MutableMethodGroup = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MutableMirrorGroup = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MutableMirrorGroup";
   this.name = "MirrorsForV8`MutableMirrorGroup";
   this.header = 1163;
   this.slots = [
    new SM("enclosingMixin", false, false),
    new SM("mixinIR", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MutableMirrorGroup", true, 1164),
    new MM("instance`initializer", true, 1165),
    new MM("addMirror:", false, 1166),
    new MM("removeMirrorNamed:", false, 1167),
    new MM("init`enclosingMixin:", true, 0),
    new MM("enclosingMixin", true, 0),
    new MM("init`mixinIR:", true, 0),
    new MM("mixinIR", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MutableMirrorGroup = function ($ms, $mb, $ir) {
    var self = this;
    self.$super$MirrorsForV8$MutableMirrorGroup$slot._$instance$initializer.call(self, $ms);
    return self;
   };
   this.$instance$initializer = function ($ms, $mb, $ir) {
    var self = this;
    self._$superInit$MirrorsForV8$MutableMirrorGroup($ms, $mb, $ir);
    self._$init$enclosingMixin$($mb);
    self._$init$mixinIR$($ir);
    return self;
   };
   this.$addMirror$ = function ($m) {
    var self = this;
    var NLR = new Object();
    try {
     self._$mirrors().$keysAndValuesDo$(function ($index, $mirror) {
      return $mirror.$simpleName().$$equal($m.$simpleName()).$ifTrue$(function () {
       {
        NLR.value = self._$mirrors().$at$put$($index, $m);
        throw NLR;
       };
      });
     });
     return self._$mirrors().$addLast$($m);
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeMirrorNamed$ = function ($m) {
    var self = this;
    var NLR = new Object();
    try {
     self._$mirrors().$keysAndValuesDo$(function ($index, $mirror) {
      return $mirror.$simpleName().$$equal($m).$ifTrue$(function () {
       {
        NLR.value = self._$mirrors().$remove$($mirror);
        throw NLR;
       };
      });
     });
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$init$enclosingMixin$ = function (v) {
    this.$enclosingMixin$slot = v;
    return this;
   };
   this.$enclosingMixin = function () {
    return this.$enclosingMixin$slot;
   };
   this.$init$mixinIR$ = function (v) {
    this.$mixinIR$slot = v;
    return this;
   };
   this.$mixinIR = function () {
    return this.$mixinIR$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MutableMirrorGroup";
     this._$superInit$MirrorsForV8$MutableMirrorGroup = $.$superInit$MirrorsForV8$MutableMirrorGroup;
     this.$superInit$MirrorsForV8$MutableMirrorGroup = dnuCatcher("$superInit$MirrorsForV8$MutableMirrorGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$addMirror$ = $.$addMirror$;
     this.$addMirror$ = dnuCatcher("$addMirror$");
     this.$removeMirrorNamed$ = this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this.$init$enclosingMixin$ = this._$init$enclosingMixin$ = $.$init$enclosingMixin$;
     this.$enclosingMixin = this._$enclosingMixin = $.$enclosingMixin;
     this._$init$mixinIR$ = $.$init$mixinIR$;
     this.$init$mixinIR$ = dnuCatcher("$init$mixinIR$");
     this._$mixinIR = $.$mixinIR;
     this.$mixinIR = dnuCatcher("$mixinIR");
     this.$enclosingObjects$MirrorsForV8$MutableMirrorGroup = enclosingObjects;
     this.$super$MirrorsForV8$MutableMirrorGroup$slot = runtimeSuperclass;
     this["MirrorsForV8`MutableMirrorGroup"] = function () {
      superBasicNew.call(this);
      this.$enclosingMixin$slot = nil;
      this.$mixinIR$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MutableMirrorGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MutableMirrorGroup";
    this.slots = [];
    this.methods = [new MM("group:within:ir:", true, 0)];
    this.nestedClasses = [];
    this.$group$within$ir$ = function ($ms, $mb, $ir) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ms, $mb, $ir);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MutableMirrorGroup";
      this.$group$within$ir$ = this._$group$within$ir$ = $.$group$within$ir$;
      this.$enclosingObjects$MirrorsForV8$MutableMirrorGroup = enclosingObjects;
      this.$super$MirrorsForV8$MutableMirrorGroup = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MutableNestedClassGroup = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MutableNestedClassGroup";
   this.name = "MirrorsForV8`MutableNestedClassGroup";
   this.header = 1168;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorsForV8`MutableNestedClassGroup", true, 1169),
    new MM("instance`initializer", true, 1170)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MutableNestedClassGroup = function ($ms, $mb, $ir) {
    var self = this;
    self.$super$MirrorsForV8$MutableNestedClassGroup$slot._$instance$initializer.call(self, $ms, $mb, $ir);
    return self;
   };
   this.$instance$initializer = function ($ms, $mb, $ir) {
    var self = this;
    self._$superInit$MirrorsForV8$MutableNestedClassGroup($ms, $mb, $ir);
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MutableNestedClassGroup";
     this._$superInit$MirrorsForV8$MutableNestedClassGroup = $.$superInit$MirrorsForV8$MutableNestedClassGroup;
     this.$superInit$MirrorsForV8$MutableNestedClassGroup = dnuCatcher("$superInit$MirrorsForV8$MutableNestedClassGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enclosingObjects$MirrorsForV8$MutableNestedClassGroup = enclosingObjects;
     this.$super$MirrorsForV8$MutableNestedClassGroup$slot = runtimeSuperclass;
     this["MirrorsForV8`MutableNestedClassGroup"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorsForV8`MutableNestedClassGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MutableNestedClassGroup";
    this.slots = [];
    this.methods = [new MM("group:within:ir:", true, 0)];
    this.nestedClasses = [];
    this.$group$within$ir$ = function ($ms, $mb, $ir) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ms, $mb, $ir);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MutableNestedClassGroup";
      this.$group$within$ir$ = this._$group$within$ir$ = $.$group$within$ir$;
      this.$enclosingObjects$MirrorsForV8$MutableNestedClassGroup = enclosingObjects;
      this.$super$MirrorsForV8$MutableNestedClassGroup = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ObjectMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ObjectMirror";
   this.name = "MirrorsForV8`ObjectMirror";
   this.header = 1171;
   this.slots = [new SM("reflectee", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`ObjectMirror", true, 1172),
    new MM("instance`initializer", true, 1173),
    new MM("evaluate:ifCompilerError:ifError:", false, 1174),
    new MM("getClass", false, 1175),
    new MM("getClassIfFail:", false, 1176),
    new MM("getSlot:", false, 1177),
    new MM("getSlot:ifFail:", false, 1178),
    new MM("setSlot:to:", false, 1179),
    new MM("setSlot:to:ifFail:", false, 1180),
    new MM("init`reflectee:", true, 0),
    new MM("reflectee", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ObjectMirror = function ($r) {
    var self = this;
    self.$super$MirrorsForV8$ObjectMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r) {
    var self = this;
    self._$superInit$MirrorsForV8$ObjectMirror($r);
    self._$init$reflectee$($r);
    return self;
   };
   this.$evaluate$ifCompilerError$ifError$ = function ($expression, $compilationErrorHandler, $evalErrorHandler) {
    var self = this;
    var NLR = new Object();
    try {
     var $compiler = nil;
     var $ir = nil;
     var $dnuHandlers = nil;
     var $writer = nil;
     var $stream = nil;
     var $src = nil;
     var $func = nil;
     var $result = nil;
     (function () {
      $compiler = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Compiler().$new();
      $ir = $compiler.$compileExpressionSource$inMixin$($expression, self._$getClass().$mixin());
      $dnuHandlers = $compiler.$dnuHandlers();
      $writer = $0.$generation(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Writer().$new();
      $stream = $0.$CharacterWriteStream(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$on$(self._$Array().$new$(100));
      $writer.$generateSourceFor$on$($dnuHandlers, $stream);
      $src = self._$String().$withAll$($stream.$contents());
      $func = eval("(".$$comma($src).$$comma(")"));
      $func(Object.prototype);
      $writer = $0.$generation(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Writer().$new();
      $stream = $0.$CharacterWriteStream(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$on$(self._$Array().$new$(100));
      $writer.$generateSourceFor$on$($ir.$function(), $stream);
      $src = self._$String().$withAll$($stream.$contents());
      $src.$out();
      return $func = eval("(".$$comma($src).$$comma(")"));
     }).$on$do$(self._$Error(), function ($e) {
      {
       NLR.value = $compilationErrorHandler.$value$($e);
       throw NLR;
      };
     });
     (function () {
      return $result = $func.call(self._$reflectee());
     }).$on$do$(self._$Error(), function ($e) {
      {
       NLR.value = $evalErrorHandler.$value$($e);
       throw NLR;
      };
     });
     return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($result);
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$getClass = function () {
    var self = this;
    "BOGUS";
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().newspeakClass);
   };
   this.$getClassIfFail$ = function ($blk) {
    var self = this;
    "BOGUS";
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().newspeakClass);
   };
   this.$getSlot$ = function ($selector) {
    var self = this;
    var $mangledName = nil;
    var $raw = nil;
    $mangledName = $0.$vmmirror(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
    $raw = self._$reflectee()[$mangledName];
    if (undefined === $raw) {
     self._$halt();
    } else {
     nil;
    };
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($raw);
   };
   this.$getSlot$ifFail$ = function ($selector, $blk) {
    var self = this;
    var $mangledName = nil;
    var $raw = nil;
    $mangledName = $0.$vmmirror(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
    $raw = self._$reflectee()[$mangledName];
    if (undefined === $raw) {
     self._$halt();
    } else {
     nil;
    };
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($raw);
   };
   this.$setSlot$to$ = function ($selector, $value) {
    var self = this;
    var $mangledName = nil;
    var $raw = nil;
    $mangledName = $0.$vmmirror(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
    $raw = self._$reflectee()[$mangledName];
    if (undefined === $raw) {
     return self._$halt();
    } else {
     nil;
    };
    self._$reflectee()[$mangledName] = $value;
    return self;
   };
   this.$setSlot$to$ifFail$ = function ($selector, $value, $blk) {
    var self = this;
    var $mangledName = nil;
    var $raw = nil;
    $mangledName = $0.$vmmirror(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
    $raw = self._$reflectee()[$mangledName];
    if (undefined === $raw) {
     return self._$halt();
    } else {
     nil;
    };
    self._$reflectee()[$mangledName] = $value;
    return self;
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ObjectMirror";
     this._$superInit$MirrorsForV8$ObjectMirror = $.$superInit$MirrorsForV8$ObjectMirror;
     this.$superInit$MirrorsForV8$ObjectMirror = dnuCatcher("$superInit$MirrorsForV8$ObjectMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$evaluate$ifCompilerError$ifError$ = this._$evaluate$ifCompilerError$ifError$ = $.$evaluate$ifCompilerError$ifError$;
     this.$getClass = this._$getClass = $.$getClass;
     this.$getClassIfFail$ = this._$getClassIfFail$ = $.$getClassIfFail$;
     this.$getSlot$ = this._$getSlot$ = $.$getSlot$;
     this.$getSlot$ifFail$ = this._$getSlot$ifFail$ = $.$getSlot$ifFail$;
     this.$setSlot$to$ = this._$setSlot$to$ = $.$setSlot$to$;
     this.$setSlot$to$ifFail$ = this._$setSlot$to$ifFail$ = $.$setSlot$to$ifFail$;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$enclosingObjects$MirrorsForV8$ObjectMirror = enclosingObjects;
     this.$super$MirrorsForV8$ObjectMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ObjectMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ObjectMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ObjectMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($r) {
     return (new this.nonMeta.basicNew()).$instance$initializer($r);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ObjectMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ObjectMirror = enclosingObjects;
      this.$super$MirrorsForV8$ObjectMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$SlotDeclarationMirror = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`SlotDeclarationMirror";
   this.name = "MirrorsForV8`SlotDeclarationMirror";
   this.header = 1181;
   this.slots = [
    new SM("name", false, false),
    new SM("accessModifier", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`SlotDeclarationMirror", true, 1182),
    new MM("instance`initializer", true, 1183),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$SlotDeclarationMirror = function ($n) {
    var self = this;
    self.$super$MirrorsForV8$SlotDeclarationMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n) {
    var self = this;
    self._$superInit$MirrorsForV8$SlotDeclarationMirror($n);
    self._$init$name$($n);
    self._$init$accessModifier$("public");
    return self;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`SlotDeclarationMirror";
     this._$superInit$MirrorsForV8$SlotDeclarationMirror = $.$superInit$MirrorsForV8$SlotDeclarationMirror;
     this.$superInit$MirrorsForV8$SlotDeclarationMirror = dnuCatcher("$superInit$MirrorsForV8$SlotDeclarationMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$enclosingObjects$MirrorsForV8$SlotDeclarationMirror = enclosingObjects;
     this.$super$MirrorsForV8$SlotDeclarationMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`SlotDeclarationMirror"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`SlotDeclarationMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`SlotDeclarationMirror";
    this.slots = [];
    this.methods = [new MM("named:", true, 0)];
    this.nestedClasses = [];
    this.$named$ = function ($n) {
     return (new this.nonMeta.basicNew()).$instance$initializer($n);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`SlotDeclarationMirror";
      this.$named$ = this._$named$ = $.$named$;
      this.$enclosingObjects$MirrorsForV8$SlotDeclarationMirror = enclosingObjects;
      this.$super$MirrorsForV8$SlotDeclarationMirror = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassDeclarationBuilder.enclosingMixin = this;
  this.$MirrorsForV8$ClassDeclarationMirror.enclosingMixin = this;
  this.$MirrorsForV8$ClassHeaderMirror.enclosingMixin = this;
  this.$MirrorsForV8$ClassMirror.enclosingMixin = this;
  this.$MirrorsForV8$MethodBuilder.enclosingMixin = this;
  this.$MirrorsForV8$MethodMirror.enclosingMixin = this;
  this.$MirrorsForV8$MixinBuilder.enclosingMixin = this;
  this.$MirrorsForV8$MixinMirror.enclosingMixin = this;
  this.$MirrorsForV8$MutableMethodGroup.enclosingMixin = this;
  this.$MirrorsForV8$MutableMirrorGroup.enclosingMixin = this;
  this.$MirrorsForV8$MutableNestedClassGroup.enclosingMixin = this;
  this.$MirrorsForV8$ObjectMirror.enclosingMixin = this;
  this.$MirrorsForV8$SlotDeclarationMirror.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for MirrorsForV8";
    this._$superInit$MirrorsForV8 = $.$superInit$MirrorsForV8;
    this.$superInit$MirrorsForV8 = dnuCatcher("$superInit$MirrorsForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$classDeclIRFor$within$ = $.$classDeclIRFor$within$;
    this.$classDeclIRFor$within$ = dnuCatcher("$classDeclIRFor$within$");
    this._$sourceForMethod$ofMixin$ = $.$sourceForMethod$ofMixin$;
    this.$sourceForMethod$ofMixin$ = dnuCatcher("$sourceForMethod$ofMixin$");
    this._$sourceIndexForMethod$ofMixin$ = $.$sourceIndexForMethod$ofMixin$;
    this.$sourceIndexForMethod$ofMixin$ = dnuCatcher("$sourceIndexForMethod$ofMixin$");
    this._$updateMixin$from$by$ = $.$updateMixin$from$by$;
    this.$updateMixin$from$by$ = dnuCatcher("$updateMixin$from$by$");
    this.$ClassDeclarationBuilder = this._$ClassDeclarationBuilder = $.$ClassDeclarationBuilder;
    this.$ClassDeclarationMirror = this._$ClassDeclarationMirror = $.$ClassDeclarationMirror;
    this.$ClassHeaderMirror = this._$ClassHeaderMirror = $.$ClassHeaderMirror;
    this.$ClassMirror = this._$ClassMirror = $.$ClassMirror;
    this.$MethodBuilder = this._$MethodBuilder = $.$MethodBuilder;
    this.$MethodMirror = this._$MethodMirror = $.$MethodMirror;
    this.$MixinBuilder = this._$MixinBuilder = $.$MixinBuilder;
    this.$MixinMirror = this._$MixinMirror = $.$MixinMirror;
    this.$MutableMethodGroup = this._$MutableMethodGroup = $.$MutableMethodGroup;
    this.$MutableMirrorGroup = this._$MutableMirrorGroup = $.$MutableMirrorGroup;
    this.$MutableNestedClassGroup = this._$MutableNestedClassGroup = $.$MutableNestedClassGroup;
    this.$ObjectMirror = this._$ObjectMirror = $.$ObjectMirror;
    this.$SlotDeclarationMirror = this._$SlotDeclarationMirror = $.$SlotDeclarationMirror;
    this.$init$MirrorsForV8$ClassDeclarationBuilder$ = this._$init$MirrorsForV8$ClassDeclarationBuilder$ = $.$init$MirrorsForV8$ClassDeclarationBuilder$;
    this.$MirrorsForV8$ClassDeclarationBuilder = this._$MirrorsForV8$ClassDeclarationBuilder = $.$MirrorsForV8$ClassDeclarationBuilder;
    this.$MirrorsForV8$ClassDeclarationBuilder$ = this._$MirrorsForV8$ClassDeclarationBuilder$ = $.$MirrorsForV8$ClassDeclarationBuilder$;
    this.$init$MirrorsForV8$ClassDeclarationMirror$ = this._$init$MirrorsForV8$ClassDeclarationMirror$ = $.$init$MirrorsForV8$ClassDeclarationMirror$;
    this.$MirrorsForV8$ClassDeclarationMirror = this._$MirrorsForV8$ClassDeclarationMirror = $.$MirrorsForV8$ClassDeclarationMirror;
    this.$MirrorsForV8$ClassDeclarationMirror$ = this._$MirrorsForV8$ClassDeclarationMirror$ = $.$MirrorsForV8$ClassDeclarationMirror$;
    this.$init$MirrorsForV8$ClassHeaderMirror$ = this._$init$MirrorsForV8$ClassHeaderMirror$ = $.$init$MirrorsForV8$ClassHeaderMirror$;
    this.$MirrorsForV8$ClassHeaderMirror = this._$MirrorsForV8$ClassHeaderMirror = $.$MirrorsForV8$ClassHeaderMirror;
    this.$MirrorsForV8$ClassHeaderMirror$ = this._$MirrorsForV8$ClassHeaderMirror$ = $.$MirrorsForV8$ClassHeaderMirror$;
    this.$init$MirrorsForV8$ClassMirror$ = this._$init$MirrorsForV8$ClassMirror$ = $.$init$MirrorsForV8$ClassMirror$;
    this.$MirrorsForV8$ClassMirror = this._$MirrorsForV8$ClassMirror = $.$MirrorsForV8$ClassMirror;
    this.$MirrorsForV8$ClassMirror$ = this._$MirrorsForV8$ClassMirror$ = $.$MirrorsForV8$ClassMirror$;
    this.$init$MirrorsForV8$MethodBuilder$ = this._$init$MirrorsForV8$MethodBuilder$ = $.$init$MirrorsForV8$MethodBuilder$;
    this.$MirrorsForV8$MethodBuilder = this._$MirrorsForV8$MethodBuilder = $.$MirrorsForV8$MethodBuilder;
    this.$MirrorsForV8$MethodBuilder$ = this._$MirrorsForV8$MethodBuilder$ = $.$MirrorsForV8$MethodBuilder$;
    this.$init$MirrorsForV8$MethodMirror$ = this._$init$MirrorsForV8$MethodMirror$ = $.$init$MirrorsForV8$MethodMirror$;
    this.$MirrorsForV8$MethodMirror = this._$MirrorsForV8$MethodMirror = $.$MirrorsForV8$MethodMirror;
    this.$MirrorsForV8$MethodMirror$ = this._$MirrorsForV8$MethodMirror$ = $.$MirrorsForV8$MethodMirror$;
    this.$init$MirrorsForV8$MixinBuilder$ = this._$init$MirrorsForV8$MixinBuilder$ = $.$init$MirrorsForV8$MixinBuilder$;
    this.$MirrorsForV8$MixinBuilder = this._$MirrorsForV8$MixinBuilder = $.$MirrorsForV8$MixinBuilder;
    this.$MirrorsForV8$MixinBuilder$ = this._$MirrorsForV8$MixinBuilder$ = $.$MirrorsForV8$MixinBuilder$;
    this.$init$MirrorsForV8$MixinMirror$ = this._$init$MirrorsForV8$MixinMirror$ = $.$init$MirrorsForV8$MixinMirror$;
    this.$MirrorsForV8$MixinMirror = this._$MirrorsForV8$MixinMirror = $.$MirrorsForV8$MixinMirror;
    this.$MirrorsForV8$MixinMirror$ = this._$MirrorsForV8$MixinMirror$ = $.$MirrorsForV8$MixinMirror$;
    this.$init$MirrorsForV8$MutableMethodGroup$ = this._$init$MirrorsForV8$MutableMethodGroup$ = $.$init$MirrorsForV8$MutableMethodGroup$;
    this.$MirrorsForV8$MutableMethodGroup = this._$MirrorsForV8$MutableMethodGroup = $.$MirrorsForV8$MutableMethodGroup;
    this.$MirrorsForV8$MutableMethodGroup$ = this._$MirrorsForV8$MutableMethodGroup$ = $.$MirrorsForV8$MutableMethodGroup$;
    this.$init$MirrorsForV8$MutableMirrorGroup$ = this._$init$MirrorsForV8$MutableMirrorGroup$ = $.$init$MirrorsForV8$MutableMirrorGroup$;
    this.$MirrorsForV8$MutableMirrorGroup = this._$MirrorsForV8$MutableMirrorGroup = $.$MirrorsForV8$MutableMirrorGroup;
    this.$MirrorsForV8$MutableMirrorGroup$ = this._$MirrorsForV8$MutableMirrorGroup$ = $.$MirrorsForV8$MutableMirrorGroup$;
    this.$init$MirrorsForV8$MutableNestedClassGroup$ = this._$init$MirrorsForV8$MutableNestedClassGroup$ = $.$init$MirrorsForV8$MutableNestedClassGroup$;
    this.$MirrorsForV8$MutableNestedClassGroup = this._$MirrorsForV8$MutableNestedClassGroup = $.$MirrorsForV8$MutableNestedClassGroup;
    this.$MirrorsForV8$MutableNestedClassGroup$ = this._$MirrorsForV8$MutableNestedClassGroup$ = $.$MirrorsForV8$MutableNestedClassGroup$;
    this.$init$MirrorsForV8$ObjectMirror$ = this._$init$MirrorsForV8$ObjectMirror$ = $.$init$MirrorsForV8$ObjectMirror$;
    this.$MirrorsForV8$ObjectMirror = this._$MirrorsForV8$ObjectMirror = $.$MirrorsForV8$ObjectMirror;
    this.$MirrorsForV8$ObjectMirror$ = this._$MirrorsForV8$ObjectMirror$ = $.$MirrorsForV8$ObjectMirror$;
    this.$init$MirrorsForV8$SlotDeclarationMirror$ = this._$init$MirrorsForV8$SlotDeclarationMirror$ = $.$init$MirrorsForV8$SlotDeclarationMirror$;
    this.$MirrorsForV8$SlotDeclarationMirror = this._$MirrorsForV8$SlotDeclarationMirror = $.$MirrorsForV8$SlotDeclarationMirror;
    this.$MirrorsForV8$SlotDeclarationMirror$ = this._$MirrorsForV8$SlotDeclarationMirror$ = $.$MirrorsForV8$SlotDeclarationMirror$;
    this.$enclosingObjects$MirrorsForV8 = enclosingObjects;
    this.$super$MirrorsForV8$slot = runtimeSuperclass;
    this.MirrorsForV8 = function () {
     superBasicNew.call(this);
     this.$List$slot = nil;
     this.$Map$slot = nil;
     this.$Mixin$slot = nil;
     this.$CharacterReadStream$slot = nil;
     this.$CharacterWriteStream$slot = nil;
     this.$ImmutableMirrorGroup$slot = nil;
     this.$vmmirror$slot = nil;
     this.$parserLib$slot = nil;
     this.$grammar$slot = nil;
     this.$asts$slot = nil;
     this.$parsing$slot = nil;
     this.$generation$slot = nil;
     this.$compilation$slot = nil;
     this.$compiler$slot = nil;
     this.$MirrorsForV8$ClassDeclarationBuilder$slot = nil;
     this.$MirrorsForV8$ClassDeclarationMirror$slot = nil;
     this.$MirrorsForV8$ClassHeaderMirror$slot = nil;
     this.$MirrorsForV8$ClassMirror$slot = nil;
     this.$MirrorsForV8$MethodBuilder$slot = nil;
     this.$MirrorsForV8$MethodMirror$slot = nil;
     this.$MirrorsForV8$MixinBuilder$slot = nil;
     this.$MirrorsForV8$MixinMirror$slot = nil;
     this.$MirrorsForV8$MutableMethodGroup$slot = nil;
     this.$MirrorsForV8$MutableMirrorGroup$slot = nil;
     this.$MirrorsForV8$MutableNestedClassGroup$slot = nil;
     this.$MirrorsForV8$ObjectMirror$slot = nil;
     this.$MirrorsForV8$SlotDeclarationMirror$slot = nil;
    };
    this.basicNew = this.MirrorsForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for MirrorsForV8";
   this.slots = [];
   this.methods = [new MM("usingPlatform:vmMirror:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$vmMirror$ = function ($p, $vmm) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p, $vmm);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for MirrorsForV8";
     this.$usingPlatform$vmMirror$ = this._$usingPlatform$vmMirror$ = $.$usingPlatform$vmMirror$;
     this.$enclosingObjects$MirrorsForV8 = enclosingObjects;
     this.$super$MirrorsForV8 = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$MirrorGroups = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for MirrorGroups";
  this.name = "MirrorGroups";
  this.header = 1184;
  this.slots = [
   new SM("Collection", false, false),
   new SM("OrderedCollection", false, false),
   new SM("MirrorGroups`ImmutableMirrorGroup", true, true),
   new SM("MirrorGroups`MirrorGroup", true, true)
  ];
  this.methods = [
   new MM("superInit`MirrorGroups", true, 1185),
   new MM("instance`initializer", true, 1186),
   new MM("ImmutableMirrorGroup", true, 0),
   new MM("MirrorGroup", true, 0),
   new MM("init`Collection:", true, 0),
   new MM("Collection", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`MirrorGroups`ImmutableMirrorGroup:", true, 0),
   new MM("MirrorGroups`ImmutableMirrorGroup", true, 0),
   new MM("MirrorGroups`ImmutableMirrorGroup:", true, 0),
   new MM("init`MirrorGroups`MirrorGroup:", true, 0),
   new MM("MirrorGroups`MirrorGroup", true, 0),
   new MM("MirrorGroups`MirrorGroup:", true, 0)
  ];
  this.nestedClasses = [
   "MirrorGroups`ImmutableMirrorGroup",
   "MirrorGroups`MirrorGroup"
  ];
  this.applications = [];
  this.$superInit$MirrorGroups = function ($platform) {
   var self = this;
   self.$super$MirrorGroups$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   var self = this;
   self._$superInit$MirrorGroups($platform);
   $0.$init$Collection$(self, $platform.$collections().$Collection());
   $0.$init$OrderedCollection$(self, $platform.$collections().$OrderedCollection());
   return self;
  };
  this.$ImmutableMirrorGroup = function () {
   if (nil === this.$MirrorGroups$ImmutableMirrorGroup$slot) {
    var self = this;
    var superclass = $0.$Collection(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorGroups);
    var mixin = $.$MirrorGroups$ImmutableMirrorGroup;
    this.$MirrorGroups$ImmutableMirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorGroups$ImmutableMirrorGroup$slot;
  };
  this.$MirrorGroup = function () {
   if (nil === this.$MirrorGroups$MirrorGroup$slot) {
    var self = this;
    var superclass = self._$ImmutableMirrorGroup();
    var enclosingObjects = [this].concat(this.$enclosingObjects$MirrorGroups);
    var mixin = $.$MirrorGroups$MirrorGroup;
    this.$MirrorGroups$MirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorGroups$MirrorGroup$slot;
  };
  this.$init$Collection$ = function (self, v) {
   self.$Collection$slot = v;
   return self;
  };
  this.$Collection = function (self) {
   return self.$Collection$slot;
  };
  this.$init$OrderedCollection$ = function (self, v) {
   self.$OrderedCollection$slot = v;
   return self;
  };
  this.$OrderedCollection = function (self) {
   return self.$OrderedCollection$slot;
  };
  this.$init$MirrorGroups$ImmutableMirrorGroup$ = function (v) {
   this.$MirrorGroups$ImmutableMirrorGroup$slot = v;
   return this;
  };
  this.$MirrorGroups$ImmutableMirrorGroup = function () {
   return this.$MirrorGroups$ImmutableMirrorGroup$slot;
  };
  this.$MirrorGroups$ImmutableMirrorGroup$ = function (v) {
   this.$MirrorGroups$ImmutableMirrorGroup$slot = v;
   return this;
  };
  this.$init$MirrorGroups$MirrorGroup$ = function (v) {
   this.$MirrorGroups$MirrorGroup$slot = v;
   return this;
  };
  this.$MirrorGroups$MirrorGroup = function () {
   return this.$MirrorGroups$MirrorGroup$slot;
  };
  this.$MirrorGroups$MirrorGroup$ = function (v) {
   this.$MirrorGroups$MirrorGroup$slot = v;
   return this;
  };
  this.$MirrorGroups$ImmutableMirrorGroup = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorGroups`ImmutableMirrorGroup";
   this.name = "MirrorGroups`ImmutableMirrorGroup";
   this.header = 1187;
   this.slots = [new SM("mirrors", false, false)];
   this.methods = [
    new MM("superInit`MirrorGroups`ImmutableMirrorGroup", true, 1188),
    new MM("instance`initializer", true, 1189),
    new MM("addFromSource:", false, 1190),
    new MM("addMirror:", false, 1191),
    new MM("do:", false, 1192),
    new MM("findMirrorNamed:", false, 1193),
    new MM("includesMirrorNamed:", false, 1194),
    new MM("removeMirror:", false, 1195),
    new MM("removeMirrorNamed:", false, 1196),
    new MM("size", false, 1197),
    new MM("init`mirrors:", true, 0),
    new MM("mirrors", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorGroups$ImmutableMirrorGroup = function ($ms) {
    var self = this;
    self.$super$MirrorGroups$ImmutableMirrorGroup$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ms) {
    var self = this;
    self._$superInit$MirrorGroups$ImmutableMirrorGroup($ms);
    self._$init$mirrors$($0.$OrderedCollection(self.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup[0]).$withAll$($ms));
    return self;
   };
   this.$addFromSource$ = function ($s) {
    var self = this;
    return self._$Error().$signal$("Adding mirrors not allowed on an immutable mirror group!");
   };
   this.$addMirror$ = function ($m) {
    var self = this;
    return self._$Error().$signal$("Adding mirrors not allowed on an immutable mirror group!");
   };
   this.$do$ = function ($blk) {
    var self = this;
    self._$mirrors().$do$($blk);
    return self;
   };
   this.$findMirrorNamed$ = function ($n) {
    var self = this;
    var NLR = new Object();
    try {
     self._$mirrors().$do$(function ($mirror) {
      return $mirror.$simpleName().$$equal($n).$ifTrue$(function () {
       {
        NLR.value = $mirror;
        throw NLR;
       };
      });
     });
     return nil;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includesMirrorNamed$ = function ($n) {
    var self = this;
    var NLR = new Object();
    try {
     self._$mirrors().$do$(function ($mirror) {
      return $mirror.$simpleName().$$equal($n).$ifTrue$(function () {
       {
        NLR.value = true;
        throw NLR;
       };
      });
     });
     return false;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeMirror$ = function ($m) {
    var self = this;
    return self._$Error().$signal$("Removng mirrors not allowed on an immutable mirror group!");
   };
   this.$removeMirrorNamed$ = function ($m) {
    var self = this;
    return self._$Error().$signal$("Removng mirrors not allowed on an immutable mirror group!");
   };
   this.$size = function () {
    var self = this;
    return self._$mirrors().$size();
   };
   this.$init$mirrors$ = function (v) {
    this.$mirrors$slot = v;
    return this;
   };
   this.$mirrors = function () {
    return this.$mirrors$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorGroups`ImmutableMirrorGroup";
     this._$superInit$MirrorGroups$ImmutableMirrorGroup = $.$superInit$MirrorGroups$ImmutableMirrorGroup;
     this.$superInit$MirrorGroups$ImmutableMirrorGroup = dnuCatcher("$superInit$MirrorGroups$ImmutableMirrorGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
     this.$addMirror$ = this._$addMirror$ = $.$addMirror$;
     this.$do$ = this._$do$ = $.$do$;
     this.$findMirrorNamed$ = this._$findMirrorNamed$ = $.$findMirrorNamed$;
     this.$includesMirrorNamed$ = this._$includesMirrorNamed$ = $.$includesMirrorNamed$;
     this.$removeMirror$ = this._$removeMirror$ = $.$removeMirror$;
     this.$removeMirrorNamed$ = this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this.$size = this._$size = $.$size;
     this._$init$mirrors$ = $.$init$mirrors$;
     this.$init$mirrors$ = dnuCatcher("$init$mirrors$");
     this._$mirrors = $.$mirrors;
     this.$mirrors = dnuCatcher("$mirrors");
     this.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup = enclosingObjects;
     this.$super$MirrorGroups$ImmutableMirrorGroup$slot = runtimeSuperclass;
     this["MirrorGroups`ImmutableMirrorGroup"] = function () {
      superBasicNew.call(this);
      this.$mirrors$slot = nil;
     };
     this.basicNew = this["MirrorGroups`ImmutableMirrorGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorGroups`ImmutableMirrorGroup";
    this.slots = [];
    this.methods = [new MM("group:", true, 0)];
    this.nestedClasses = [];
    this.$group$ = function ($ms) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ms);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorGroups`ImmutableMirrorGroup";
      this.$group$ = this._$group$ = $.$group$;
      this.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup = enclosingObjects;
      this.$super$MirrorGroups$ImmutableMirrorGroup = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorGroups$MirrorGroup = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for MirrorGroups`MirrorGroup";
   this.name = "MirrorGroups`MirrorGroup";
   this.header = 1198;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorGroups`MirrorGroup", true, 1199),
    new MM("instance`initializer", true, 1200),
    new MM("addFromSource:", false, 1201),
    new MM("addMirror:", false, 1202),
    new MM("removeAll", false, 1203),
    new MM("removeAllSuchThat:", false, 1204),
    new MM("removeMirror:", false, 1205),
    new MM("removeMirrorNamed:", false, 1206)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorGroups$MirrorGroup = function ($ms) {
    var self = this;
    self.$super$MirrorGroups$MirrorGroup$slot._$instance$initializer.call(self, $ms);
    return self;
   };
   this.$instance$initializer = function ($ms) {
    var self = this;
    self._$superInit$MirrorGroups$MirrorGroup($ms);
    return self;
   };
   this.$addFromSource$ = function ($s) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$addMirror$ = function ($m) {
    var self = this;
    var NLR = new Object();
    try {
     self._$mirrors().$keysAndValuesDo$(function ($index, $mirror) {
      return $mirror.$simpleName().$$equal($m.$simpleName()).$ifTrue$(function () {
       {
        NLR.value = self._$mirrors().$at$put$($index, $m);
        throw NLR;
       };
      });
     });
     return self._$mirrors().$addLast$($m);
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeAll = function () {
    var self = this;
    self._$mirrors$($0.$OrderedCollection(self.$enclosingObjects$MirrorGroups$MirrorGroup[0]).$new());
    return self;
   };
   this.$removeAllSuchThat$ = function ($blk) {
    var self = this;
    self._$mirrors().$select$thenDo$($blk, function ($m) {
     return self._$removeMirrorNamed$($m.$name());
    });
    return self;
   };
   this.$removeMirror$ = function ($m) {
    var self = this;
    return self._$mirrors().$remove$($m);
   };
   this.$removeMirrorNamed$ = function ($n) {
    var self = this;
    var $m = nil;
    $m = self._$findMirrorNamed$($n);
    return $m.$ifNotNil$(function () {
     return self._$removeMirror$($m);
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorGroups`MirrorGroup";
     this._$superInit$MirrorGroups$MirrorGroup = $.$superInit$MirrorGroups$MirrorGroup;
     this.$superInit$MirrorGroups$MirrorGroup = dnuCatcher("$superInit$MirrorGroups$MirrorGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$addFromSource$ = $.$addFromSource$;
     this.$addFromSource$ = dnuCatcher("$addFromSource$");
     this._$addMirror$ = $.$addMirror$;
     this.$addMirror$ = dnuCatcher("$addMirror$");
     this._$removeAll = $.$removeAll;
     this.$removeAll = dnuCatcher("$removeAll");
     this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this.$removeAllSuchThat$ = dnuCatcher("$removeAllSuchThat$");
     this._$removeMirror$ = $.$removeMirror$;
     this.$removeMirror$ = dnuCatcher("$removeMirror$");
     this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this.$removeMirrorNamed$ = dnuCatcher("$removeMirrorNamed$");
     this.$enclosingObjects$MirrorGroups$MirrorGroup = enclosingObjects;
     this.$super$MirrorGroups$MirrorGroup$slot = runtimeSuperclass;
     this["MirrorGroups`MirrorGroup"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorGroups`MirrorGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for MirrorGroups`MirrorGroup";
    this.slots = [];
    this.methods = [new MM("group:", true, 0)];
    this.nestedClasses = [];
    this.$group$ = function ($ms) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ms);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorGroups`MirrorGroup";
      this.$group$ = this._$group$ = $.$group$;
      this.$enclosingObjects$MirrorGroups$MirrorGroup = enclosingObjects;
      this.$super$MirrorGroups$MirrorGroup = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorGroups$ImmutableMirrorGroup.enclosingMixin = this;
  this.$MirrorGroups$MirrorGroup.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for MirrorGroups";
    this._$superInit$MirrorGroups = $.$superInit$MirrorGroups;
    this.$superInit$MirrorGroups = dnuCatcher("$superInit$MirrorGroups");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$ImmutableMirrorGroup = this._$ImmutableMirrorGroup = $.$ImmutableMirrorGroup;
    this._$MirrorGroup = $.$MirrorGroup;
    this.$MirrorGroup = dnuCatcher("$MirrorGroup");
    this.$init$MirrorGroups$ImmutableMirrorGroup$ = this._$init$MirrorGroups$ImmutableMirrorGroup$ = $.$init$MirrorGroups$ImmutableMirrorGroup$;
    this.$MirrorGroups$ImmutableMirrorGroup = this._$MirrorGroups$ImmutableMirrorGroup = $.$MirrorGroups$ImmutableMirrorGroup;
    this.$MirrorGroups$ImmutableMirrorGroup$ = this._$MirrorGroups$ImmutableMirrorGroup$ = $.$MirrorGroups$ImmutableMirrorGroup$;
    this.$init$MirrorGroups$MirrorGroup$ = this._$init$MirrorGroups$MirrorGroup$ = $.$init$MirrorGroups$MirrorGroup$;
    this.$MirrorGroups$MirrorGroup = this._$MirrorGroups$MirrorGroup = $.$MirrorGroups$MirrorGroup;
    this.$MirrorGroups$MirrorGroup$ = this._$MirrorGroups$MirrorGroup$ = $.$MirrorGroups$MirrorGroup$;
    this.$enclosingObjects$MirrorGroups = enclosingObjects;
    this.$super$MirrorGroups$slot = runtimeSuperclass;
    this.MirrorGroups = function () {
     superBasicNew.call(this);
     this.$Collection$slot = nil;
     this.$OrderedCollection$slot = nil;
     this.$MirrorGroups$ImmutableMirrorGroup$slot = nil;
     this.$MirrorGroups$MirrorGroup$slot = nil;
    };
    this.basicNew = this.MirrorGroups;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for MirrorGroups";
   this.slots = [];
   this.methods = [new MM("usingLib:", true, 0)];
   this.nestedClasses = [];
   this.$usingLib$ = function ($platform) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for MirrorGroups";
     this.$usingLib$ = this._$usingLib$ = $.$usingLib$;
     this.$enclosingObjects$MirrorGroups = enclosingObjects;
     this.$super$MirrorGroups = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Streams = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for Streams";
  this.name = "Streams";
  this.header = 1207;
  this.slots = [
   new SM("String", false, false),
   new SM("BasicOutputReadStream", false, false),
   new SM("CharacterSequenceReadStream", false, false),
   new SM("CharacterIStream", false, false),
   new SM("CharacterOStream", false, false),
   new SM("CharacterSequenceReadWriteStream", false, false),
   new SM("CharacterConverterWithOutput", false, false),
   new SM("OutputInputConverter", false, false),
   new SM("BasicIExStream", false, false),
   new SM("EIStream", false, false),
   new SM("ReadExternalOutputStream", false, false),
   new SM("EOStream", false, false),
   new SM("EIOStream", false, false),
   new SM("Streams`BasicInputStream", true, true),
   new SM("Streams`BasicOutputStream", true, true),
   new SM("Streams`BasicReadStream", true, true),
   new SM("Streams`BasicReadWriteStream", true, true),
   new SM("Streams`CharacterInput", true, true),
   new SM("Streams`CharacterInputConverter", true, true),
   new SM("Streams`CharacterInputOutputConverter", true, true),
   new SM("Streams`CharacterOutput", true, true),
   new SM("Streams`CharacterOutputConverter", true, true),
   new SM("Streams`CharacterReadConverter", true, true),
   new SM("Streams`CharacterReadStream", true, true),
   new SM("Streams`CharacterReadWriteStream", true, true),
   new SM("Streams`ExternalInputStream", true, true),
   new SM("Streams`ExternalOutputStream", true, true),
   new SM("Streams`ExternalReadStream", true, true),
   new SM("Streams`ExternalReadWriteStream", true, true),
   new SM("Streams`ExternalStream", true, true),
   new SM("Streams`SeqCltnReadStream", true, true),
   new SM("Streams`SeqCltnReadWriteStream", true, true),
   new SM("Streams`TempTranscript", true, true)
  ];
  this.methods = [
   new MM("superInit`Streams", true, 1208),
   new MM("instance`initializer", true, 1209),
   new MM("usingCrLfConvention", false, 1210),
   new MM("BasicInputStream", true, 0),
   new MM("BasicOutputStream", true, 0),
   new MM("BasicReadStream", true, 0),
   new MM("BasicReadWriteStream", true, 0),
   new MM("CharacterInput", true, 0),
   new MM("CharacterInputConverter", true, 0),
   new MM("CharacterInputOutputConverter", true, 0),
   new MM("CharacterOutput", true, 0),
   new MM("CharacterOutputConverter", true, 0),
   new MM("CharacterReadConverter", true, 0),
   new MM("CharacterReadStream", true, 0),
   new MM("CharacterReadWriteStream", true, 0),
   new MM("ExternalInputStream", true, 0),
   new MM("ExternalOutputStream", true, 0),
   new MM("ExternalReadStream", true, 0),
   new MM("ExternalReadWriteStream", true, 0),
   new MM("ExternalStream", true, 0),
   new MM("SeqCltnReadStream", true, 0),
   new MM("SeqCltnReadWriteStream", true, 0),
   new MM("TempTranscript", true, 0),
   new MM("init`String:", true, 0),
   new MM("String", true, 0),
   new MM("init`BasicOutputReadStream:", true, 0),
   new MM("BasicOutputReadStream", true, 0),
   new MM("init`CharacterSequenceReadStream:", true, 0),
   new MM("CharacterSequenceReadStream", true, 0),
   new MM("init`CharacterIStream:", true, 0),
   new MM("CharacterIStream", true, 0),
   new MM("init`CharacterOStream:", true, 0),
   new MM("CharacterOStream", true, 0),
   new MM("init`CharacterSequenceReadWriteStream:", true, 0),
   new MM("CharacterSequenceReadWriteStream", true, 0),
   new MM("init`CharacterConverterWithOutput:", true, 0),
   new MM("CharacterConverterWithOutput", true, 0),
   new MM("init`OutputInputConverter:", true, 0),
   new MM("OutputInputConverter", true, 0),
   new MM("init`BasicIExStream:", true, 0),
   new MM("BasicIExStream", true, 0),
   new MM("init`EIStream:", true, 0),
   new MM("EIStream", true, 0),
   new MM("init`ReadExternalOutputStream:", true, 0),
   new MM("ReadExternalOutputStream", true, 0),
   new MM("init`EOStream:", true, 0),
   new MM("EOStream", true, 0),
   new MM("init`EIOStream:", true, 0),
   new MM("EIOStream", true, 0),
   new MM("init`Streams`BasicInputStream:", true, 0),
   new MM("Streams`BasicInputStream", true, 0),
   new MM("Streams`BasicInputStream:", true, 0),
   new MM("init`Streams`BasicOutputStream:", true, 0),
   new MM("Streams`BasicOutputStream", true, 0),
   new MM("Streams`BasicOutputStream:", true, 0),
   new MM("init`Streams`BasicReadStream:", true, 0),
   new MM("Streams`BasicReadStream", true, 0),
   new MM("Streams`BasicReadStream:", true, 0),
   new MM("init`Streams`BasicReadWriteStream:", true, 0),
   new MM("Streams`BasicReadWriteStream", true, 0),
   new MM("Streams`BasicReadWriteStream:", true, 0),
   new MM("init`Streams`CharacterInput:", true, 0),
   new MM("Streams`CharacterInput", true, 0),
   new MM("Streams`CharacterInput:", true, 0),
   new MM("init`Streams`CharacterInputConverter:", true, 0),
   new MM("Streams`CharacterInputConverter", true, 0),
   new MM("Streams`CharacterInputConverter:", true, 0),
   new MM("init`Streams`CharacterInputOutputConverter:", true, 0),
   new MM("Streams`CharacterInputOutputConverter", true, 0),
   new MM("Streams`CharacterInputOutputConverter:", true, 0),
   new MM("init`Streams`CharacterOutput:", true, 0),
   new MM("Streams`CharacterOutput", true, 0),
   new MM("Streams`CharacterOutput:", true, 0),
   new MM("init`Streams`CharacterOutputConverter:", true, 0),
   new MM("Streams`CharacterOutputConverter", true, 0),
   new MM("Streams`CharacterOutputConverter:", true, 0),
   new MM("init`Streams`CharacterReadConverter:", true, 0),
   new MM("Streams`CharacterReadConverter", true, 0),
   new MM("Streams`CharacterReadConverter:", true, 0),
   new MM("init`Streams`CharacterReadStream:", true, 0),
   new MM("Streams`CharacterReadStream", true, 0),
   new MM("Streams`CharacterReadStream:", true, 0),
   new MM("init`Streams`CharacterReadWriteStream:", true, 0),
   new MM("Streams`CharacterReadWriteStream", true, 0),
   new MM("Streams`CharacterReadWriteStream:", true, 0),
   new MM("init`Streams`ExternalInputStream:", true, 0),
   new MM("Streams`ExternalInputStream", true, 0),
   new MM("Streams`ExternalInputStream:", true, 0),
   new MM("init`Streams`ExternalOutputStream:", true, 0),
   new MM("Streams`ExternalOutputStream", true, 0),
   new MM("Streams`ExternalOutputStream:", true, 0),
   new MM("init`Streams`ExternalReadStream:", true, 0),
   new MM("Streams`ExternalReadStream", true, 0),
   new MM("Streams`ExternalReadStream:", true, 0),
   new MM("init`Streams`ExternalReadWriteStream:", true, 0),
   new MM("Streams`ExternalReadWriteStream", true, 0),
   new MM("Streams`ExternalReadWriteStream:", true, 0),
   new MM("init`Streams`ExternalStream:", true, 0),
   new MM("Streams`ExternalStream", true, 0),
   new MM("Streams`ExternalStream:", true, 0),
   new MM("init`Streams`SeqCltnReadStream:", true, 0),
   new MM("Streams`SeqCltnReadStream", true, 0),
   new MM("Streams`SeqCltnReadStream:", true, 0),
   new MM("init`Streams`SeqCltnReadWriteStream:", true, 0),
   new MM("Streams`SeqCltnReadWriteStream", true, 0),
   new MM("Streams`SeqCltnReadWriteStream:", true, 0),
   new MM("init`Streams`TempTranscript:", true, 0),
   new MM("Streams`TempTranscript", true, 0),
   new MM("Streams`TempTranscript:", true, 0)
  ];
  this.nestedClasses = [
   "Streams`BasicInputStream",
   "Streams`BasicOutputStream",
   "Streams`BasicReadStream",
   "Streams`BasicReadWriteStream",
   "Streams`CharacterInput",
   "Streams`CharacterInputConverter",
   "Streams`CharacterInputOutputConverter",
   "Streams`CharacterOutput",
   "Streams`CharacterOutputConverter",
   "Streams`CharacterReadConverter",
   "Streams`CharacterReadStream",
   "Streams`CharacterReadWriteStream",
   "Streams`ExternalInputStream",
   "Streams`ExternalOutputStream",
   "Streams`ExternalReadStream",
   "Streams`ExternalReadWriteStream",
   "Streams`ExternalStream",
   "Streams`SeqCltnReadStream",
   "Streams`SeqCltnReadWriteStream",
   "Streams`TempTranscript"
  ];
  this.applications = [];
  this.$superInit$Streams = function ($platform) {
   var self = this;
   self.$super$Streams$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   var self = this;
   self._$superInit$Streams($platform);
   $0.$init$String$(self, $platform.$kernel().$MutableString());
   $0.$init$BasicOutputReadStream$(self, self._$BasicOutputStream().$mixinApply$(self._$BasicReadStream()));
   $0.$init$CharacterSequenceReadStream$(self, self._$CharacterInput().$mixinApply$(self._$SeqCltnReadStream()));
   $0.$init$CharacterIStream$(self, self._$CharacterInput().$mixinApply$(self._$BasicInputStream()));
   $0.$init$CharacterOStream$(self, self._$CharacterOutput().$mixinApply$(self._$BasicOutputStream()));
   $0.$init$CharacterSequenceReadWriteStream$(self, self._$CharacterInput().$mixinApply$(self._$SeqCltnReadWriteStream()));
   $0.$init$CharacterConverterWithOutput$(self, self._$BasicOutputStream().$mixinApply$(self._$CharacterInputConverter()));
   $0.$init$OutputInputConverter$(self, self._$CharacterOutput().$mixinApply$($0.$CharacterConverterWithOutput(self)));
   $0.$init$BasicIExStream$(self, self._$BasicInputStream().$mixinApply$(self._$ExternalStream()));
   $0.$init$EIStream$(self, self._$BasicReadStream().$mixinApply$(self._$ExternalInputStream()));
   $0.$init$ReadExternalOutputStream$(self, self._$BasicOutputStream().$mixinApply$(self._$ExternalReadStream()));
   $0.$init$EOStream$(self, self._$BasicOutputStream().$mixinApply$(self._$ExternalStream()));
   $0.$init$EIOStream$(self, self._$ExternalOutputStream().$mixinApply$($0.$ReadExternalOutputStream(self)));
   return self;
  };
  this.$usingCrLfConvention = function () {
   var self = this;
   return true;
  };
  this.$BasicInputStream = function () {
   if (nil === this.$Streams$BasicInputStream$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$BasicInputStream;
    this.$Streams$BasicInputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicInputStream$slot;
  };
  this.$BasicOutputStream = function () {
   if (nil === this.$Streams$BasicOutputStream$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$BasicOutputStream;
    this.$Streams$BasicOutputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicOutputStream$slot;
  };
  this.$BasicReadStream = function () {
   if (nil === this.$Streams$BasicReadStream$slot) {
    var self = this;
    var superclass = self._$BasicInputStream();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$BasicReadStream;
    this.$Streams$BasicReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicReadStream$slot;
  };
  this.$BasicReadWriteStream = function () {
   if (nil === this.$Streams$BasicReadWriteStream$slot) {
    var self = this;
    var superclass = $0.$BasicOutputReadStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$BasicReadWriteStream;
    this.$Streams$BasicReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicReadWriteStream$slot;
  };
  this.$CharacterInput = function () {
   if (nil === this.$Streams$CharacterInput$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterInput;
    this.$Streams$CharacterInput$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterInput$slot;
  };
  this.$CharacterInputConverter = function () {
   if (nil === this.$Streams$CharacterInputConverter$slot) {
    var self = this;
    var superclass = $0.$CharacterIStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterInputConverter;
    this.$Streams$CharacterInputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterInputConverter$slot;
  };
  this.$CharacterInputOutputConverter = function () {
   if (nil === this.$Streams$CharacterInputOutputConverter$slot) {
    var self = this;
    var superclass = $0.$OutputInputConverter(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterInputOutputConverter;
    this.$Streams$CharacterInputOutputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterInputOutputConverter$slot;
  };
  this.$CharacterOutput = function () {
   if (nil === this.$Streams$CharacterOutput$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterOutput;
    this.$Streams$CharacterOutput$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterOutput$slot;
  };
  this.$CharacterOutputConverter = function () {
   if (nil === this.$Streams$CharacterOutputConverter$slot) {
    var self = this;
    var superclass = $0.$CharacterOStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterOutputConverter;
    this.$Streams$CharacterOutputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterOutputConverter$slot;
  };
  this.$CharacterReadConverter = function () {
   if (nil === this.$Streams$CharacterReadConverter$slot) {
    var self = this;
    var superclass = self._$CharacterInputConverter();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterReadConverter;
    this.$Streams$CharacterReadConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterReadConverter$slot;
  };
  this.$CharacterReadStream = function () {
   if (nil === this.$Streams$CharacterReadStream$slot) {
    var self = this;
    var superclass = $0.$CharacterSequenceReadStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterReadStream;
    this.$Streams$CharacterReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterReadStream$slot;
  };
  this.$CharacterReadWriteStream = function () {
   if (nil === this.$Streams$CharacterReadWriteStream$slot) {
    var self = this;
    var superclass = $0.$CharacterSequenceReadWriteStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$CharacterReadWriteStream;
    this.$Streams$CharacterReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterReadWriteStream$slot;
  };
  this.$ExternalInputStream = function () {
   if (nil === this.$Streams$ExternalInputStream$slot) {
    var self = this;
    var superclass = $0.$BasicIExStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$ExternalInputStream;
    this.$Streams$ExternalInputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalInputStream$slot;
  };
  this.$ExternalOutputStream = function () {
   if (nil === this.$Streams$ExternalOutputStream$slot) {
    var self = this;
    var superclass = $0.$EOStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$ExternalOutputStream;
    this.$Streams$ExternalOutputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalOutputStream$slot;
  };
  this.$ExternalReadStream = function () {
   if (nil === this.$Streams$ExternalReadStream$slot) {
    var self = this;
    var superclass = $0.$EIStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$ExternalReadStream;
    this.$Streams$ExternalReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalReadStream$slot;
  };
  this.$ExternalReadWriteStream = function () {
   if (nil === this.$Streams$ExternalReadWriteStream$slot) {
    var self = this;
    var superclass = $0.$EIOStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$ExternalReadWriteStream;
    this.$Streams$ExternalReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalReadWriteStream$slot;
  };
  this.$ExternalStream = function () {
   if (nil === this.$Streams$ExternalStream$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$ExternalStream;
    this.$Streams$ExternalStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalStream$slot;
  };
  this.$SeqCltnReadStream = function () {
   if (nil === this.$Streams$SeqCltnReadStream$slot) {
    var self = this;
    var superclass = self._$BasicReadStream();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$SeqCltnReadStream;
    this.$Streams$SeqCltnReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$SeqCltnReadStream$slot;
  };
  this.$SeqCltnReadWriteStream = function () {
   if (nil === this.$Streams$SeqCltnReadWriteStream$slot) {
    var self = this;
    var superclass = self._$BasicReadWriteStream();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$SeqCltnReadWriteStream;
    this.$Streams$SeqCltnReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$SeqCltnReadWriteStream$slot;
  };
  this.$TempTranscript = function () {
   if (nil === this.$Streams$TempTranscript$slot) {
    var self = this;
    var superclass = $0.$CharacterOStream(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    var mixin = $.$Streams$TempTranscript;
    this.$Streams$TempTranscript$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$TempTranscript$slot;
  };
  this.$init$String$ = function (self, v) {
   self.$String$slot = v;
   return self;
  };
  this.$String = function (self) {
   return self.$String$slot;
  };
  this.$init$BasicOutputReadStream$ = function (self, v) {
   self.$BasicOutputReadStream$slot = v;
   return self;
  };
  this.$BasicOutputReadStream = function (self) {
   return self.$BasicOutputReadStream$slot;
  };
  this.$init$CharacterSequenceReadStream$ = function (self, v) {
   self.$CharacterSequenceReadStream$slot = v;
   return self;
  };
  this.$CharacterSequenceReadStream = function (self) {
   return self.$CharacterSequenceReadStream$slot;
  };
  this.$init$CharacterIStream$ = function (self, v) {
   self.$CharacterIStream$slot = v;
   return self;
  };
  this.$CharacterIStream = function (self) {
   return self.$CharacterIStream$slot;
  };
  this.$init$CharacterOStream$ = function (self, v) {
   self.$CharacterOStream$slot = v;
   return self;
  };
  this.$CharacterOStream = function (self) {
   return self.$CharacterOStream$slot;
  };
  this.$init$CharacterSequenceReadWriteStream$ = function (self, v) {
   self.$CharacterSequenceReadWriteStream$slot = v;
   return self;
  };
  this.$CharacterSequenceReadWriteStream = function (self) {
   return self.$CharacterSequenceReadWriteStream$slot;
  };
  this.$init$CharacterConverterWithOutput$ = function (self, v) {
   self.$CharacterConverterWithOutput$slot = v;
   return self;
  };
  this.$CharacterConverterWithOutput = function (self) {
   return self.$CharacterConverterWithOutput$slot;
  };
  this.$init$OutputInputConverter$ = function (self, v) {
   self.$OutputInputConverter$slot = v;
   return self;
  };
  this.$OutputInputConverter = function (self) {
   return self.$OutputInputConverter$slot;
  };
  this.$init$BasicIExStream$ = function (self, v) {
   self.$BasicIExStream$slot = v;
   return self;
  };
  this.$BasicIExStream = function (self) {
   return self.$BasicIExStream$slot;
  };
  this.$init$EIStream$ = function (self, v) {
   self.$EIStream$slot = v;
   return self;
  };
  this.$EIStream = function (self) {
   return self.$EIStream$slot;
  };
  this.$init$ReadExternalOutputStream$ = function (self, v) {
   self.$ReadExternalOutputStream$slot = v;
   return self;
  };
  this.$ReadExternalOutputStream = function (self) {
   return self.$ReadExternalOutputStream$slot;
  };
  this.$init$EOStream$ = function (self, v) {
   self.$EOStream$slot = v;
   return self;
  };
  this.$EOStream = function (self) {
   return self.$EOStream$slot;
  };
  this.$init$EIOStream$ = function (self, v) {
   self.$EIOStream$slot = v;
   return self;
  };
  this.$EIOStream = function (self) {
   return self.$EIOStream$slot;
  };
  this.$init$Streams$BasicInputStream$ = function (v) {
   this.$Streams$BasicInputStream$slot = v;
   return this;
  };
  this.$Streams$BasicInputStream = function () {
   return this.$Streams$BasicInputStream$slot;
  };
  this.$Streams$BasicInputStream$ = function (v) {
   this.$Streams$BasicInputStream$slot = v;
   return this;
  };
  this.$init$Streams$BasicOutputStream$ = function (v) {
   this.$Streams$BasicOutputStream$slot = v;
   return this;
  };
  this.$Streams$BasicOutputStream = function () {
   return this.$Streams$BasicOutputStream$slot;
  };
  this.$Streams$BasicOutputStream$ = function (v) {
   this.$Streams$BasicOutputStream$slot = v;
   return this;
  };
  this.$init$Streams$BasicReadStream$ = function (v) {
   this.$Streams$BasicReadStream$slot = v;
   return this;
  };
  this.$Streams$BasicReadStream = function () {
   return this.$Streams$BasicReadStream$slot;
  };
  this.$Streams$BasicReadStream$ = function (v) {
   this.$Streams$BasicReadStream$slot = v;
   return this;
  };
  this.$init$Streams$BasicReadWriteStream$ = function (v) {
   this.$Streams$BasicReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$BasicReadWriteStream = function () {
   return this.$Streams$BasicReadWriteStream$slot;
  };
  this.$Streams$BasicReadWriteStream$ = function (v) {
   this.$Streams$BasicReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$CharacterInput$ = function (v) {
   this.$Streams$CharacterInput$slot = v;
   return this;
  };
  this.$Streams$CharacterInput = function () {
   return this.$Streams$CharacterInput$slot;
  };
  this.$Streams$CharacterInput$ = function (v) {
   this.$Streams$CharacterInput$slot = v;
   return this;
  };
  this.$init$Streams$CharacterInputConverter$ = function (v) {
   this.$Streams$CharacterInputConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterInputConverter = function () {
   return this.$Streams$CharacterInputConverter$slot;
  };
  this.$Streams$CharacterInputConverter$ = function (v) {
   this.$Streams$CharacterInputConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterInputOutputConverter$ = function (v) {
   this.$Streams$CharacterInputOutputConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterInputOutputConverter = function () {
   return this.$Streams$CharacterInputOutputConverter$slot;
  };
  this.$Streams$CharacterInputOutputConverter$ = function (v) {
   this.$Streams$CharacterInputOutputConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterOutput$ = function (v) {
   this.$Streams$CharacterOutput$slot = v;
   return this;
  };
  this.$Streams$CharacterOutput = function () {
   return this.$Streams$CharacterOutput$slot;
  };
  this.$Streams$CharacterOutput$ = function (v) {
   this.$Streams$CharacterOutput$slot = v;
   return this;
  };
  this.$init$Streams$CharacterOutputConverter$ = function (v) {
   this.$Streams$CharacterOutputConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterOutputConverter = function () {
   return this.$Streams$CharacterOutputConverter$slot;
  };
  this.$Streams$CharacterOutputConverter$ = function (v) {
   this.$Streams$CharacterOutputConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterReadConverter$ = function (v) {
   this.$Streams$CharacterReadConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterReadConverter = function () {
   return this.$Streams$CharacterReadConverter$slot;
  };
  this.$Streams$CharacterReadConverter$ = function (v) {
   this.$Streams$CharacterReadConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterReadStream$ = function (v) {
   this.$Streams$CharacterReadStream$slot = v;
   return this;
  };
  this.$Streams$CharacterReadStream = function () {
   return this.$Streams$CharacterReadStream$slot;
  };
  this.$Streams$CharacterReadStream$ = function (v) {
   this.$Streams$CharacterReadStream$slot = v;
   return this;
  };
  this.$init$Streams$CharacterReadWriteStream$ = function (v) {
   this.$Streams$CharacterReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$CharacterReadWriteStream = function () {
   return this.$Streams$CharacterReadWriteStream$slot;
  };
  this.$Streams$CharacterReadWriteStream$ = function (v) {
   this.$Streams$CharacterReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalInputStream$ = function (v) {
   this.$Streams$ExternalInputStream$slot = v;
   return this;
  };
  this.$Streams$ExternalInputStream = function () {
   return this.$Streams$ExternalInputStream$slot;
  };
  this.$Streams$ExternalInputStream$ = function (v) {
   this.$Streams$ExternalInputStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalOutputStream$ = function (v) {
   this.$Streams$ExternalOutputStream$slot = v;
   return this;
  };
  this.$Streams$ExternalOutputStream = function () {
   return this.$Streams$ExternalOutputStream$slot;
  };
  this.$Streams$ExternalOutputStream$ = function (v) {
   this.$Streams$ExternalOutputStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalReadStream$ = function (v) {
   this.$Streams$ExternalReadStream$slot = v;
   return this;
  };
  this.$Streams$ExternalReadStream = function () {
   return this.$Streams$ExternalReadStream$slot;
  };
  this.$Streams$ExternalReadStream$ = function (v) {
   this.$Streams$ExternalReadStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalReadWriteStream$ = function (v) {
   this.$Streams$ExternalReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$ExternalReadWriteStream = function () {
   return this.$Streams$ExternalReadWriteStream$slot;
  };
  this.$Streams$ExternalReadWriteStream$ = function (v) {
   this.$Streams$ExternalReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalStream$ = function (v) {
   this.$Streams$ExternalStream$slot = v;
   return this;
  };
  this.$Streams$ExternalStream = function () {
   return this.$Streams$ExternalStream$slot;
  };
  this.$Streams$ExternalStream$ = function (v) {
   this.$Streams$ExternalStream$slot = v;
   return this;
  };
  this.$init$Streams$SeqCltnReadStream$ = function (v) {
   this.$Streams$SeqCltnReadStream$slot = v;
   return this;
  };
  this.$Streams$SeqCltnReadStream = function () {
   return this.$Streams$SeqCltnReadStream$slot;
  };
  this.$Streams$SeqCltnReadStream$ = function (v) {
   this.$Streams$SeqCltnReadStream$slot = v;
   return this;
  };
  this.$init$Streams$SeqCltnReadWriteStream$ = function (v) {
   this.$Streams$SeqCltnReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$SeqCltnReadWriteStream = function () {
   return this.$Streams$SeqCltnReadWriteStream$slot;
  };
  this.$Streams$SeqCltnReadWriteStream$ = function (v) {
   this.$Streams$SeqCltnReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$TempTranscript$ = function (v) {
   this.$Streams$TempTranscript$slot = v;
   return this;
  };
  this.$Streams$TempTranscript = function () {
   return this.$Streams$TempTranscript$slot;
  };
  this.$Streams$TempTranscript$ = function (v) {
   this.$Streams$TempTranscript$slot = v;
   return this;
  };
  this.$Streams$BasicInputStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`BasicInputStream";
   this.name = "Streams`BasicInputStream";
   this.header = 1211;
   this.slots = [
    new SM("havePeeked_0", true, false),
    new SM("peekVal", true, false)
   ];
   this.methods = [
    new MM("superInit`Streams`BasicInputStream", true, 1212),
    new MM("instance`initializer", true, 1213),
    new MM("atEnd", false, 1214),
    new MM("contentsRemaining", false, 1215),
    new MM("do:", false, 1216),
    new MM("next", false, 1217),
    new MM("next:", false, 1218),
    new MM("nextIfAbsent:", false, 1219),
    new MM("nextMatchFor:", false, 1220),
    new MM("peek", false, 1221),
    new MM("peekFor:", false, 1222),
    new MM("peekIfAbsent:", false, 1223),
    new MM("skip:", false, 1224),
    new MM("skipTo:", false, 1225),
    new MM("upTo:", false, 1226),
    new MM("close", false, 1227),
    new MM("printOn:", false, 1228),
    new MM("accumulateUntil:", false, 1229),
    new MM("actualAtEnd", false, 1230),
    new MM("actualNext", false, 1231),
    new MM("atEndOrPeekIs:", false, 1232),
    new MM("havePeeked", false, 1233),
    new MM("havePeeked:", false, 1234),
    new MM("newBuildStream", false, 1235),
    new MM("newCollectionOfSize:", false, 1236),
    new MM("nextFromPeek", false, 1237),
    new MM("noPeekVal", false, 1238),
    new MM("defaultExpected", false, 1239),
    new MM("init`havePeeked_0:", true, 0),
    new MM("havePeeked_0", true, 0),
    new MM("havePeeked_0:", true, 0),
    new MM("init`peekVal:", true, 0),
    new MM("peekVal", true, 0),
    new MM("peekVal:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicInputStream = function () {
    var self = this;
    self.$super$Streams$BasicInputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$BasicInputStream();
    self._$init$havePeeked_0$(false);
    return self;
   };
   this.$atEnd = function () {
    var self = this;
    return self._$havePeeked().$ifTrue$ifFalse$(function () {
     return false;
    }, function () {
     return self._$actualAtEnd();
    });
   };
   this.$contentsRemaining = function () {
    var self = this;
    return self._$accumulateUntil$(function () {
     return self._$atEnd();
    });
   };
   this.$do$ = function ($f) {
    var self = this;
    {
     nil;
     for (; !self._$atEnd(); ) {
      $f.$value$(self._$next());
     };
    };
    return self;
   };
   this.$next = function () {
    var self = this;
    return self._$havePeeked().$ifTrue$ifFalse$(function () {
     return self._$nextFromPeek();
    }, function () {
     return self._$actualNext();
    });
   };
   this.$next$ = function ($nElements) {
    var self = this;
    var $cltn = nil;
    $cltn = self._$newCollectionOfSize$($nElements);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $nElements;
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$atEnd()) {
       self._$error$("Not enough elements");
      } else {
       nil;
      };
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    return $cltn;
   };
   this.$nextIfAbsent$ = function ($f) {
    var self = this;
    return self._$havePeeked().$ifTrue$ifFalse$(function () {
     return self._$nextFromPeek();
    }, function () {
     return self._$actualAtEnd().$ifFalse$ifTrue$(function () {
      return self._$actualNext();
     }, function () {
      return $f.$value();
     });
    });
   };
   this.$nextMatchFor$ = function ($o) {
    var self = this;
    return self._$next().$$equal($o);
   };
   this.$peek = function () {
    var self = this;
    if (!self._$havePeeked()) {
     self._$peekVal$(self._$actualNext());
     self._$havePeeked$(true);
    } else {
     nil;
    };
    return self._$peekVal();
   };
   this.$peekFor$ = function ($o) {
    var self = this;
    return self._$peek().$$equal($o).$ifTrue$ifFalse$(function () {
     self._$next();
     return true;
    }, function () {
     return false;
    });
   };
   this.$peekIfAbsent$ = function ($f) {
    var self = this;
    if (!self._$havePeeked()) {
     if (self._$actualAtEnd()) {
      return $f.$value();
     } else {
      nil;
     };
     self._$peekVal$(self._$actualNext());
     self._$havePeeked$(true);
    } else {
     nil;
    };
    return self._$peekVal();
   };
   this.$skip$ = function ($nElements) {
    var self = this;
    {
     var $$limit = nil;
     var $$i = nil;
     nil;
     $$i = 1;
     $$limit = $nElements;
     for (; $$limit.$$greater$equal($$i); ) {
      self._$next();
      $$i = (1).$$plus($$i);
     };
    };
    return self;
   };
   this.$skipTo$ = function ($o) {
    var self = this;
    {
     nil;
     for (; !self._$atEnd(); ) {
      if (self._$next().$$equal($o)) {
       return true;
      } else {
       nil;
      };
     };
    };
    return false;
   };
   this.$upTo$ = function ($delimiter) {
    var self = this;
    var $s = nil;
    $s = self._$accumulateUntil$(function () {
     return self._$atEndOrPeekIs$($delimiter);
    });
    self._$nextIfAbsent$(function () {
     return nil;
    });
    return $s;
   };
   this.$close = function () {
    var self = this;
    return self;
   };
   this.$printOn$ = function ($strm) {
    var self = this;
    $strm.$nextPutAll$(self._$class().$name());
    return self;
   };
   this.$accumulateUntil$ = function ($predicate) {
    var self = this;
    var $build = nil;
    $build = self._$newBuildStream();
    {
     nil;
     for (; !$predicate.$value(); ) {
      $build.$nextPut$(self._$next());
     };
    };
    return $build.$contentsWritten();
   };
   this.$actualAtEnd = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$actualNext = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$atEndOrPeekIs$ = function ($delimiter) {
    var self = this;
    var NLR = new Object();
    try {
     return self._$peekIfAbsent$(function () {
      {
       NLR.value = true;
       throw NLR;
      };
     }).$$equal($delimiter);
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$havePeeked = function () {
    var self = this;
    return self._$havePeeked_0();
   };
   this.$havePeeked$ = function ($f) {
    var self = this;
    if (!$f) {
     self._$peekVal$(nil);
    } else {
     nil;
    };
    self._$havePeeked_0$($f);
    return self;
   };
   this.$newBuildStream = function () {
    var self = this;
    return self.$enclosingObjects$Streams$BasicInputStream[0]._$BasicReadWriteStream().$on$(self._$newCollectionOfSize$(self._$defaultExpected()));
   };
   this.$newCollectionOfSize$ = function ($n) {
    var self = this;
    return self._$Array().$new$($n);
   };
   this.$nextFromPeek = function () {
    var self = this;
    var $v = nil;
    $v = self._$peekVal();
    self._$noPeekVal();
    return $v;
   };
   this.$noPeekVal = function () {
    var self = this;
    self._$havePeeked$(false);
    self._$peekVal$(nil);
    return self;
   };
   this.$defaultExpected = function () {
    var self = this;
    return 10;
   };
   this.$init$havePeeked_0$ = function (v) {
    this.$havePeeked_0$slot = v;
    return this;
   };
   this.$havePeeked_0 = function () {
    return this.$havePeeked_0$slot;
   };
   this.$havePeeked_0$ = function (v) {
    this.$havePeeked_0$slot = v;
    return this;
   };
   this.$init$peekVal$ = function (v) {
    this.$peekVal$slot = v;
    return this;
   };
   this.$peekVal = function () {
    return this.$peekVal$slot;
   };
   this.$peekVal$ = function (v) {
    this.$peekVal$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicInputStream";
     this._$superInit$Streams$BasicInputStream = $.$superInit$Streams$BasicInputStream;
     this.$superInit$Streams$BasicInputStream = dnuCatcher("$superInit$Streams$BasicInputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$atEnd = $.$atEnd;
     this.$atEnd = dnuCatcher("$atEnd");
     this._$contentsRemaining = $.$contentsRemaining;
     this.$contentsRemaining = dnuCatcher("$contentsRemaining");
     this._$do$ = $.$do$;
     this.$do$ = dnuCatcher("$do$");
     this._$next = $.$next;
     this.$next = dnuCatcher("$next");
     this._$next$ = $.$next$;
     this.$next$ = dnuCatcher("$next$");
     this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
     this._$nextMatchFor$ = $.$nextMatchFor$;
     this.$nextMatchFor$ = dnuCatcher("$nextMatchFor$");
     this._$peek = $.$peek;
     this.$peek = dnuCatcher("$peek");
     this._$peekFor$ = $.$peekFor$;
     this.$peekFor$ = dnuCatcher("$peekFor$");
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this._$skip$ = $.$skip$;
     this.$skip$ = dnuCatcher("$skip$");
     this._$skipTo$ = $.$skipTo$;
     this.$skipTo$ = dnuCatcher("$skipTo$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$close = $.$close;
     this.$close = dnuCatcher("$close");
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$accumulateUntil$ = $.$accumulateUntil$;
     this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$atEndOrPeekIs$ = $.$atEndOrPeekIs$;
     this.$atEndOrPeekIs$ = dnuCatcher("$atEndOrPeekIs$");
     this._$havePeeked = $.$havePeeked;
     this.$havePeeked = dnuCatcher("$havePeeked");
     this._$havePeeked$ = $.$havePeeked$;
     this.$havePeeked$ = dnuCatcher("$havePeeked$");
     this._$newBuildStream = $.$newBuildStream;
     this.$newBuildStream = dnuCatcher("$newBuildStream");
     this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
     this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
     this._$nextFromPeek = $.$nextFromPeek;
     this.$nextFromPeek = dnuCatcher("$nextFromPeek");
     this._$noPeekVal = $.$noPeekVal;
     this.$noPeekVal = dnuCatcher("$noPeekVal");
     this._$defaultExpected = $.$defaultExpected;
     this.$defaultExpected = dnuCatcher("$defaultExpected");
     this._$init$havePeeked_0$ = $.$init$havePeeked_0$;
     this.$init$havePeeked_0$ = dnuCatcher("$init$havePeeked_0$");
     this._$havePeeked_0 = $.$havePeeked_0;
     this.$havePeeked_0 = dnuCatcher("$havePeeked_0");
     this._$havePeeked_0$ = $.$havePeeked_0$;
     this.$havePeeked_0$ = dnuCatcher("$havePeeked_0$");
     this._$init$peekVal$ = $.$init$peekVal$;
     this.$init$peekVal$ = dnuCatcher("$init$peekVal$");
     this._$peekVal = $.$peekVal;
     this.$peekVal = dnuCatcher("$peekVal");
     this._$peekVal$ = $.$peekVal$;
     this.$peekVal$ = dnuCatcher("$peekVal$");
     this.$enclosingObjects$Streams$BasicInputStream = enclosingObjects;
     this.$super$Streams$BasicInputStream$slot = runtimeSuperclass;
     this["Streams`BasicInputStream"] = function () {
      superBasicNew.call(this);
      this.$havePeeked_0$slot = nil;
      this.$peekVal$slot = nil;
     };
     this.basicNew = this["Streams`BasicInputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicInputStream";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicInputStream";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$BasicInputStream = enclosingObjects;
      this.$super$Streams$BasicInputStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicOutputStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`BasicOutputStream";
   this.name = "Streams`BasicOutputStream";
   this.header = 1240;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`BasicOutputStream", true, 1241),
    new MM("instance`initializer", true, 1242),
    new MM("externalFlush", false, 1243),
    new MM("flush", false, 1244),
    new MM("next:put:", false, 1245),
    new MM("nextPut:", false, 1246),
    new MM("nextPutAll:", false, 1247),
    new MM("put:", false, 1248),
    new MM("putAll:", false, 1249),
    new MM("show:", false, 1250)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicOutputStream = function () {
    var self = this;
    self.$super$Streams$BasicOutputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$BasicOutputStream();
    return self;
   };
   this.$externalFlush = function () {
    var self = this;
    self._$flush();
    return self;
   };
   this.$flush = function () {
    var self = this;
    return self;
   };
   this.$next$put$ = function ($nElements, $el) {
    var self = this;
    {
     var $$limit = nil;
     var $$i = nil;
     nil;
     $$i = 1;
     $$limit = $nElements;
     for (; $$limit.$$greater$equal($$i); ) {
      self._$nextPut$($el);
      $$i = (1).$$plus($$i);
     };
    };
    return $el;
   };
   this.$nextPut$ = function ($el) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$nextPutAll$ = function ($els) {
    var self = this;
    $els.$do$(function ($el) {
     return self._$nextPut$($el);
    });
    return $els;
   };
   this.$put$ = function ($el) {
    var self = this;
    return self._$nextPut$($el);
   };
   this.$putAll$ = function ($els) {
    var self = this;
    return self._$nextPutAll$($els);
   };
   this.$show$ = function ($els) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$($els);
     return cascadeReceiver.$flush();
    })(self);
    return $els;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicOutputStream";
     this._$superInit$Streams$BasicOutputStream = $.$superInit$Streams$BasicOutputStream;
     this.$superInit$Streams$BasicOutputStream = dnuCatcher("$superInit$Streams$BasicOutputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this._$next$put$ = $.$next$put$;
     this.$next$put$ = dnuCatcher("$next$put$");
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$nextPutAll$ = this._$nextPutAll$ = $.$nextPutAll$;
     this._$put$ = $.$put$;
     this.$put$ = dnuCatcher("$put$");
     this._$putAll$ = $.$putAll$;
     this.$putAll$ = dnuCatcher("$putAll$");
     this._$show$ = $.$show$;
     this.$show$ = dnuCatcher("$show$");
     this.$enclosingObjects$Streams$BasicOutputStream = enclosingObjects;
     this.$super$Streams$BasicOutputStream$slot = runtimeSuperclass;
     this["Streams`BasicOutputStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`BasicOutputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicOutputStream";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicOutputStream";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$BasicOutputStream = enclosingObjects;
      this.$super$Streams$BasicOutputStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicReadStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`BasicReadStream";
   this.name = "Streams`BasicReadStream";
   this.header = 1251;
   this.slots = [new SM("actualPosition_slot", true, false)];
   this.methods = [
    new MM("superInit`Streams`BasicReadStream", true, 1252),
    new MM("instance`initializer", true, 1253),
    new MM("at:", false, 1254),
    new MM("collection", false, 1255),
    new MM("contents", false, 1256),
    new MM("contentsRemaining", false, 1257),
    new MM("copyFrom:to:", false, 1258),
    new MM("isEmpty", false, 1259),
    new MM("position", false, 1260),
    new MM("position:", false, 1261),
    new MM("repositioningAt:", false, 1262),
    new MM("reset", false, 1263),
    new MM("setToEnd", false, 1264),
    new MM("size", false, 1265),
    new MM("skip:", false, 1266),
    new MM("skipTo:", false, 1267),
    new MM("upTo:", false, 1268),
    new MM("actualPosition", false, 1269),
    new MM("actualPosition:", false, 1270),
    new MM("actualAtEnd", false, 1271),
    new MM("init`actualPosition_slot:", true, 0),
    new MM("actualPosition_slot", true, 0),
    new MM("actualPosition_slot:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicReadStream = function () {
    var self = this;
    self.$super$Streams$BasicReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$BasicReadStream();
    self._$init$actualPosition_slot$(0);
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    var $pos = nil;
    var $result = nil;
    $pos = self._$position();
    self._$position$($index - 1);
    $result = self._$next();
    self._$position$($pos);
    return $result;
   };
   this.$collection = function () {
    var self = this;
    var $cltn = nil;
    var $origPos = nil;
    $cltn = self._$newCollectionOfSize$(self._$size());
    $origPos = self._$position();
    self._$position$(0);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    self._$position$($origPos);
    return $cltn;
   };
   this.$contents = function () {
    var self = this;
    return self._$collection();
   };
   this.$contentsRemaining = function () {
    var self = this;
    var $cltn = nil;
    var $n = nil;
    $n = self._$size() - self._$position();
    $cltn = self._$newCollectionOfSize$($n);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $n;
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    return $cltn;
   };
   this.$copyFrom$to$ = function ($start, $stop) {
    var self = this;
    var $pos = nil;
    var $n = nil;
    var $result = nil;
    var $offset = nil;
    $pos = self._$position();
    $n = ($stop - $start) + 1;
    $result = self._$Array().$new$($n);
    $offset = $start - 1;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $n;
     for (; $$limit.$$greater$equal($i); ) {
      $result.$at$put$($i, self._$repositioningAt$($offset + $i));
      $i = (1).$$plus($i);
     };
    };
    self._$position$($pos);
    return $result;
   };
   this.$isEmpty = function () {
    var self = this;
    return self._$size().$$equal(0);
   };
   this.$position = function () {
    var self = this;
    return self._$havePeeked().$ifFalse$ifTrue$(function () {
     return self._$actualPosition();
    }, function () {
     return self._$actualPosition() - 1;
    });
   };
   this.$position$ = function ($p) {
    var self = this;
    self._$actualPosition$($p);
    self._$noPeekVal();
    return self;
   };
   this.$repositioningAt$ = function ($index) {
    var self = this;
    return self._$at$($index);
   };
   this.$reset = function () {
    var self = this;
    self._$position$(0);
    return self;
   };
   this.$setToEnd = function () {
    var self = this;
    self._$position$(self._$size());
    return self;
   };
   this.$size = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$skip$ = function ($nElements) {
    var self = this;
    self._$position$((self._$position() + $nElements).$max$(self._$size()));
    return self;
   };
   this.$skipTo$ = function ($o) {
    var self = this;
    var $pos = nil;
    var $n = nil;
    var $sz = nil;
    $sz = self._$size();
    $pos = self._$position();
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = $pos + 1;
     $$limit = $sz;
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$repositioningAt$($i).$$equal($o)) {
       self._$position$($i);
       return true;
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    self._$position$($sz);
    return false;
   };
   this.$upTo$ = function ($delimiter) {
    var self = this;
    var $pos = nil;
    var $n = nil;
    var $result = nil;
    $pos = self._$position();
    return self._$skipTo$($delimiter).$ifTrue$ifFalse$(function () {
     return self._$copyFrom$to$($pos + 1, self._$position() - 1);
    }, function () {
     return self._$copyFrom$to$($pos + 1, self._$position());
    });
   };
   this.$actualPosition = function () {
    var self = this;
    return self._$actualPosition_slot();
   };
   this.$actualPosition$ = function ($p) {
    var self = this;
    self._$actualPosition_slot$($p);
    return self;
   };
   this.$actualAtEnd = function () {
    var self = this;
    return self._$actualPosition().$$greater$equal(self._$size());
   };
   this.$init$actualPosition_slot$ = function (v) {
    this.$actualPosition_slot$slot = v;
    return this;
   };
   this.$actualPosition_slot = function () {
    return this.$actualPosition_slot$slot;
   };
   this.$actualPosition_slot$ = function (v) {
    this.$actualPosition_slot$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicReadStream";
     this._$superInit$Streams$BasicReadStream = $.$superInit$Streams$BasicReadStream;
     this.$superInit$Streams$BasicReadStream = dnuCatcher("$superInit$Streams$BasicReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this._$collection = $.$collection;
     this.$collection = dnuCatcher("$collection");
     this.$contents = this._$contents = $.$contents;
     this._$contentsRemaining = $.$contentsRemaining;
     this.$contentsRemaining = dnuCatcher("$contentsRemaining");
     this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$copyFrom$to$ = dnuCatcher("$copyFrom$to$");
     this._$isEmpty = $.$isEmpty;
     this.$isEmpty = dnuCatcher("$isEmpty");
     this.$position = this._$position = $.$position;
     this.$position$ = this._$position$ = $.$position$;
     this._$repositioningAt$ = $.$repositioningAt$;
     this.$repositioningAt$ = dnuCatcher("$repositioningAt$");
     this._$reset = $.$reset;
     this.$reset = dnuCatcher("$reset");
     this._$setToEnd = $.$setToEnd;
     this.$setToEnd = dnuCatcher("$setToEnd");
     this._$size = $.$size;
     this.$size = dnuCatcher("$size");
     this._$skip$ = $.$skip$;
     this.$skip$ = dnuCatcher("$skip$");
     this._$skipTo$ = $.$skipTo$;
     this.$skipTo$ = dnuCatcher("$skipTo$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$actualPosition = $.$actualPosition;
     this.$actualPosition = dnuCatcher("$actualPosition");
     this._$actualPosition$ = $.$actualPosition$;
     this.$actualPosition$ = dnuCatcher("$actualPosition$");
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$init$actualPosition_slot$ = $.$init$actualPosition_slot$;
     this.$init$actualPosition_slot$ = dnuCatcher("$init$actualPosition_slot$");
     this._$actualPosition_slot = $.$actualPosition_slot;
     this.$actualPosition_slot = dnuCatcher("$actualPosition_slot");
     this._$actualPosition_slot$ = $.$actualPosition_slot$;
     this.$actualPosition_slot$ = dnuCatcher("$actualPosition_slot$");
     this.$enclosingObjects$Streams$BasicReadStream = enclosingObjects;
     this.$super$Streams$BasicReadStream$slot = runtimeSuperclass;
     this["Streams`BasicReadStream"] = function () {
      superBasicNew.call(this);
      this.$actualPosition_slot$slot = nil;
     };
     this.basicNew = this["Streams`BasicReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1272),
     new MM("on:from:to:", false, 1273)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($sc) {
     var self = this;
     return self.$enclosingObjects$Streams$BasicReadStream[0]._$SeqCltnReadStream().$on$($sc);
    };
    this.$on$from$to$ = function ($sc, $firstIndex, $lastIndex) {
     var self = this;
     return self._$on$($sc.$copyFrom$to$($firstIndex, $lastIndex));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicReadStream";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this._$on$from$to$ = $.$on$from$to$;
      this.$on$from$to$ = dnuCatcher("$on$from$to$");
      this.$enclosingObjects$Streams$BasicReadStream = enclosingObjects;
      this.$super$Streams$BasicReadStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicReadWriteStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`BasicReadWriteStream";
   this.name = "Streams`BasicReadWriteStream";
   this.header = 1274;
   this.slots = [new SM("size", true, false)];
   this.methods = [
    new MM("superInit`Streams`BasicReadWriteStream", true, 1275),
    new MM("instance`initializer", true, 1276),
    new MM("contents", false, 1277),
    new MM("contentsWritten", false, 1278),
    new MM("nextPut:", false, 1279),
    new MM("init`size:", true, 0),
    new MM("size", true, 0),
    new MM("size:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicReadWriteStream = function () {
    var self = this;
    self.$super$Streams$BasicReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$BasicReadWriteStream();
    self._$init$size$(0);
    return self;
   };
   this.$contents = function () {
    var self = this;
    return self._$collection();
   };
   this.$contentsWritten = function () {
    var self = this;
    var $cltn = nil;
    var $origPos = nil;
    $cltn = self._$newCollectionOfSize$(self._$position());
    $origPos = self._$position();
    self._$position$(0);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $origPos;
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    self._$position$($origPos);
    return $cltn;
   };
   this.$nextPut$ = function ($el) {
    var self = this;
    var $pos = nil;
    self._$position$($pos = self._$position() + 1);
    if ($pos.$$greater(self._$size())) {
     self._$size$($pos);
    } else {
     nil;
    };
    return $el;
   };
   this.$init$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.$size = function () {
    return this.$size$slot;
   };
   this.$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicReadWriteStream";
     this._$superInit$Streams$BasicReadWriteStream = $.$superInit$Streams$BasicReadWriteStream;
     this.$superInit$Streams$BasicReadWriteStream = dnuCatcher("$superInit$Streams$BasicReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$contents = this._$contents = $.$contents;
     this.$contentsWritten = this._$contentsWritten = $.$contentsWritten;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this._$init$size$ = $.$init$size$;
     this.$init$size$ = dnuCatcher("$init$size$");
     this._$size = $.$size;
     this.$size = dnuCatcher("$size");
     this._$size$ = $.$size$;
     this.$size$ = dnuCatcher("$size$");
     this.$enclosingObjects$Streams$BasicReadWriteStream = enclosingObjects;
     this.$super$Streams$BasicReadWriteStream$slot = runtimeSuperclass;
     this["Streams`BasicReadWriteStream"] = function () {
      superBasicNew.call(this);
      this.$size$slot = nil;
     };
     this.basicNew = this["Streams`BasicReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1280),
     new MM("on:numElements:", false, 1281)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($sc) {
     var self = this;
     return self._$on$numElements$($sc, 0);
    };
    this.$on$numElements$ = function ($sc, $n) {
     var self = this;
     return self.$enclosingObjects$Streams$BasicReadWriteStream[0]._$SeqCltnReadWriteStream().$on$numElements$($sc, $n);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicReadWriteStream";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this._$on$numElements$ = $.$on$numElements$;
      this.$on$numElements$ = dnuCatcher("$on$numElements$");
      this.$enclosingObjects$Streams$BasicReadWriteStream = enclosingObjects;
      this.$super$Streams$BasicReadWriteStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterInput = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterInput";
   this.name = "Streams`CharacterInput";
   this.header = 1282;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterInput", true, 1283),
    new MM("instance`initializer", true, 1284),
    new MM("contentsRemaining", false, 1285),
    new MM("next:", false, 1286),
    new MM("upTo:", false, 1287),
    new MM("newCollectionOfSize:", false, 1288)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterInput = function () {
    var self = this;
    self.$super$Streams$CharacterInput$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterInput();
    return self;
   };
   this.$contentsRemaining = function () {
    var self = this;
    var $con = nil;
    $con = self.$super$Streams$CharacterInput$slot._$contentsRemaining.call(self);
    return $con.$isString().$ifTrue$ifFalse$(function () {
     return $con;
    }, function () {
     return $0.$String(self.$enclosingObjects$Streams$CharacterInput[0]).$withAll$($con);
    });
   };
   this.$next$ = function ($nElements) {
    var self = this;
    var $con = nil;
    $con = self.$super$Streams$CharacterInput$slot._$next$.call(self, $nElements);
    return $con.$isString().$ifTrue$ifFalse$(function () {
     return $con;
    }, function () {
     return $0.$String(self.$enclosingObjects$Streams$CharacterInput[0]).$withAll$($con);
    });
   };
   this.$upTo$ = function ($o) {
    var self = this;
    var $con = nil;
    $con = self.$super$Streams$CharacterInput$slot._$upTo$.call(self, $o);
    return $con.$isString().$ifTrue$ifFalse$(function () {
     return $con;
    }, function () {
     return $0.$String(self.$enclosingObjects$Streams$CharacterInput[0]).$withAll$($con);
    });
   };
   this.$newCollectionOfSize$ = function ($n) {
    var self = this;
    return $0.$String(self.$enclosingObjects$Streams$CharacterInput[0]).$new$($n);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterInput";
     this._$superInit$Streams$CharacterInput = $.$superInit$Streams$CharacterInput;
     this.$superInit$Streams$CharacterInput = dnuCatcher("$superInit$Streams$CharacterInput");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$contentsRemaining = $.$contentsRemaining;
     this.$contentsRemaining = dnuCatcher("$contentsRemaining");
     this._$next$ = $.$next$;
     this.$next$ = dnuCatcher("$next$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
     this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
     this.$enclosingObjects$Streams$CharacterInput = enclosingObjects;
     this.$super$Streams$CharacterInput$slot = runtimeSuperclass;
     this["Streams`CharacterInput"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterInput"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterInput";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterInput";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$CharacterInput = enclosingObjects;
      this.$super$Streams$CharacterInput = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterInputConverter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterInputConverter";
   this.name = "Streams`CharacterInputConverter";
   this.header = 1289;
   this.slots = [new SM("binaryStream", true, false)];
   this.methods = [
    new MM("superInit`Streams`CharacterInputConverter", true, 1290),
    new MM("instance`initializer", true, 1291),
    new MM("upTo:", false, 1292),
    new MM("close", false, 1293),
    new MM("initBinaryStream:", false, 1294),
    new MM("actualAtEnd", false, 1295),
    new MM("actualNext", false, 1296),
    new MM("init`binaryStream:", true, 0),
    new MM("binaryStream", true, 0),
    new MM("binaryStream:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterInputConverter = function () {
    var self = this;
    self.$super$Streams$CharacterInputConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterInputConverter();
    return self;
   };
   this.$upTo$ = function ($del) {
    var self = this;
    var $bytes = nil;
    var $s = nil;
    var $lfs = nil;
    var $j = nil;
    var $delimiter = nil;
    if (self._$havePeeked() && (self._$peek() === $del)) {
     return self.$super$Streams$CharacterInputConverter$slot._$upTo$.call(self, $del);
    } else {
     nil;
    };
    $delimiter = self._$Character().$coerce$($del);
    $bytes = self._$binaryStream().$upTo$($delimiter.$asciiValue());
    if (self.$enclosingObjects$Streams$CharacterInputConverter[0]._$usingCrLfConvention()) {
     if ($delimiter === self._$Character().$cr()) {
      if (self._$binaryStream().$atEnd().$not() && (self._$binaryStream().$peek() === 10)) {
       self._$binaryStream().$next();
      } else {
       nil;
      };
     } else {
      nil;
     };
    } else {
     nil;
    };
    $lfs = 0;
    {
     var $$limit = nil;
     var $ind = nil;
     nil;
     $ind = 1;
     $$limit = $bytes.$size();
     for (; $$limit.$$greater$equal($ind); ) {
      if ($bytes.$at$($ind) === 10) {
       $lfs = $lfs + 1;
      } else {
       nil;
      };
      $ind = (1).$$plus($ind);
     };
    };
    if (!self._$havePeeked()) {
     $s = $0.$String(self.$enclosingObjects$Streams$CharacterInputConverter[0]).$new$($bytes.$size() - $lfs);
     $j = 1;
    } else {
     $s = $0.$String(self.$enclosingObjects$Streams$CharacterInputConverter[0]).$new$(($bytes.$size() - $lfs) + 1);
     $j = 2;
    };
    $bytes.$do$(function ($b) {
     return ($b === 10).$ifFalse$(function () {
      $s.$at$putUnicode$($j, $b);
      return $j = $j + 1;
     });
    });
    if (self._$havePeeked()) {
     $s.$at$put$(1, self._$next());
    } else {
     nil;
    };
    return $s;
   };
   this.$close = function () {
    var self = this;
    self._$binaryStream().$close();
    return self;
   };
   this.$initBinaryStream$ = function ($binaryStrm) {
    var self = this;
    self._$binaryStream$($binaryStrm);
    return self;
   };
   this.$actualAtEnd = function () {
    var self = this;
    return self._$binaryStream().$atEnd();
   };
   this.$actualNext = function () {
    var self = this;
    var $c = nil;
    $c = self._$Character().$value$(self._$binaryStream().$next());
    if (self.$enclosingObjects$Streams$CharacterInputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
     if (!self._$binaryStream().$atEnd()) {
      if (self._$binaryStream().$peek().$$equal(self._$Character().$lf().$asciiValue())) {
       self._$binaryStream().$next();
      } else {
       nil;
      };
     } else {
      nil;
     };
    } else {
     nil;
    };
    return $c;
   };
   this.$init$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.$binaryStream = function () {
    return this.$binaryStream$slot;
   };
   this.$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterInputConverter";
     this._$superInit$Streams$CharacterInputConverter = $.$superInit$Streams$CharacterInputConverter;
     this.$superInit$Streams$CharacterInputConverter = dnuCatcher("$superInit$Streams$CharacterInputConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$close = $.$close;
     this.$close = dnuCatcher("$close");
     this._$initBinaryStream$ = $.$initBinaryStream$;
     this.$initBinaryStream$ = dnuCatcher("$initBinaryStream$");
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$init$binaryStream$ = $.$init$binaryStream$;
     this.$init$binaryStream$ = dnuCatcher("$init$binaryStream$");
     this._$binaryStream = $.$binaryStream;
     this.$binaryStream = dnuCatcher("$binaryStream");
     this._$binaryStream$ = $.$binaryStream$;
     this.$binaryStream$ = dnuCatcher("$binaryStream$");
     this.$enclosingObjects$Streams$CharacterInputConverter = enclosingObjects;
     this.$super$Streams$CharacterInputConverter$slot = runtimeSuperclass;
     this["Streams`CharacterInputConverter"] = function () {
      superBasicNew.call(this);
      this.$binaryStream$slot = nil;
     };
     this.basicNew = this["Streams`CharacterInputConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterInputConverter";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1297)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($binaryStrm) {
     var self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterInputConverter";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this.$enclosingObjects$Streams$CharacterInputConverter = enclosingObjects;
      this.$super$Streams$CharacterInputConverter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterInputOutputConverter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterInputOutputConverter";
   this.name = "Streams`CharacterInputOutputConverter";
   this.header = 1298;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterInputOutputConverter", true, 1299),
    new MM("instance`initializer", true, 1300),
    new MM("nextPut:", false, 1301),
    new MM("position", false, 1302),
    new MM("position:", false, 1303),
    new MM("setToEnd", false, 1304),
    new MM("externalFlush", false, 1305),
    new MM("flush", false, 1306)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterInputOutputConverter = function () {
    var self = this;
    self.$super$Streams$CharacterInputOutputConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterInputOutputConverter();
    return self;
   };
   this.$nextPut$ = function ($c) {
    var self = this;
    self._$binaryStream().$nextPut$($c.$asciiValue());
    if (self.$enclosingObjects$Streams$CharacterInputOutputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
     self._$binaryStream().$nextPut$(self._$Character().$lf().$asciiValue());
    } else {
     nil;
    };
    return $c;
   };
   this.$position = function () {
    var self = this;
    return self._$binaryStream().$position();
   };
   this.$position$ = function ($i) {
    var self = this;
    self._$binaryStream().$position$($i);
    self._$noPeekVal();
    return self;
   };
   this.$setToEnd = function () {
    var self = this;
    self._$binaryStream().$setToEnd();
    return self;
   };
   this.$externalFlush = function () {
    var self = this;
    self._$binaryStream().$externalFlush();
    return self;
   };
   this.$flush = function () {
    var self = this;
    self._$binaryStream().$flush();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterInputOutputConverter";
     this._$superInit$Streams$CharacterInputOutputConverter = $.$superInit$Streams$CharacterInputOutputConverter;
     this.$superInit$Streams$CharacterInputOutputConverter = dnuCatcher("$superInit$Streams$CharacterInputOutputConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$position = this._$position = $.$position;
     this.$position$ = this._$position$ = $.$position$;
     this._$setToEnd = $.$setToEnd;
     this.$setToEnd = dnuCatcher("$setToEnd");
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this.$enclosingObjects$Streams$CharacterInputOutputConverter = enclosingObjects;
     this.$super$Streams$CharacterInputOutputConverter$slot = runtimeSuperclass;
     this["Streams`CharacterInputOutputConverter"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterInputOutputConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterInputOutputConverter";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1307)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($binaryStrm) {
     var self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterInputOutputConverter";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$Streams$CharacterInputOutputConverter = enclosingObjects;
      this.$super$Streams$CharacterInputOutputConverter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterOutput = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterOutput";
   this.name = "Streams`CharacterOutput";
   this.header = 1308;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterOutput", true, 1309),
    new MM("instance`initializer", true, 1310),
    new MM("cr", false, 1311),
    new MM("crTab", false, 1312),
    new MM("crTab:", false, 1313),
    new MM("print:", false, 1314),
    new MM("space", false, 1315),
    new MM("tab", false, 1316)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterOutput = function () {
    var self = this;
    self.$super$Streams$CharacterOutput$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterOutput();
    return self;
   };
   this.$cr = function () {
    var self = this;
    self._$nextPut$(self._$Character().$cr());
    return self;
   };
   this.$crTab = function () {
    var self = this;
    self._$crTab$(1);
    return self;
   };
   this.$crTab$ = function ($count) {
    var self = this;
    {
     var $$limit = nil;
     var $$i = nil;
     nil;
     $$i = 1;
     $$limit = $count;
     for (; $$limit.$$greater$equal($$i); ) {
      (function (cascadeReceiver) {
       cascadeReceiver.$nextPut$(self._$Character().$cr());
       return cascadeReceiver.$nextPut$(self._$Character().$tab());
      })(self);
      $$i = (1).$$plus($$i);
     };
    };
    return self;
   };
   this.$print$ = function ($o) {
    var self = this;
    $o.$printOn$(self);
    return self;
   };
   this.$space = function () {
    var self = this;
    self._$nextPut$(self._$Character().$space());
    return self;
   };
   this.$tab = function () {
    var self = this;
    self._$nextPut$(self._$Character().$tab());
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterOutput";
     this._$superInit$Streams$CharacterOutput = $.$superInit$Streams$CharacterOutput;
     this.$superInit$Streams$CharacterOutput = dnuCatcher("$superInit$Streams$CharacterOutput");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cr = this._$cr = $.$cr;
     this.$crTab = this._$crTab = $.$crTab;
     this.$crTab$ = this._$crTab$ = $.$crTab$;
     this.$print$ = this._$print$ = $.$print$;
     this.$space = this._$space = $.$space;
     this.$tab = this._$tab = $.$tab;
     this.$enclosingObjects$Streams$CharacterOutput = enclosingObjects;
     this.$super$Streams$CharacterOutput$slot = runtimeSuperclass;
     this["Streams`CharacterOutput"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterOutput"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterOutput";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterOutput";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$CharacterOutput = enclosingObjects;
      this.$super$Streams$CharacterOutput = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterOutputConverter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterOutputConverter";
   this.name = "Streams`CharacterOutputConverter";
   this.header = 1317;
   this.slots = [new SM("binaryStream", true, false)];
   this.methods = [
    new MM("superInit`Streams`CharacterOutputConverter", true, 1318),
    new MM("instance`initializer", true, 1319),
    new MM("nextPut:", false, 1320),
    new MM("close", false, 1321),
    new MM("externalFlush", false, 1322),
    new MM("flush", false, 1323),
    new MM("initBinaryStream:", false, 1324),
    new MM("init`binaryStream:", true, 0),
    new MM("binaryStream", true, 0),
    new MM("binaryStream:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterOutputConverter = function () {
    var self = this;
    self.$super$Streams$CharacterOutputConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterOutputConverter();
    return self;
   };
   this.$nextPut$ = function ($c) {
    var self = this;
    self._$binaryStream().$nextPut$($c.$asciiValue());
    if (self.$enclosingObjects$Streams$CharacterOutputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
     self._$binaryStream().$nextPut$(self._$Character().$lf().$asciiValue());
    } else {
     nil;
    };
    return $c;
   };
   this.$close = function () {
    var self = this;
    self._$binaryStream().$close();
    return self;
   };
   this.$externalFlush = function () {
    var self = this;
    self._$binaryStream().$externalFlush();
    return self;
   };
   this.$flush = function () {
    var self = this;
    self._$binaryStream().$flush();
    return self;
   };
   this.$initBinaryStream$ = function ($binaryStrm) {
    var self = this;
    self._$binaryStream$($binaryStrm);
    return self;
   };
   this.$init$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.$binaryStream = function () {
    return this.$binaryStream$slot;
   };
   this.$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterOutputConverter";
     this._$superInit$Streams$CharacterOutputConverter = $.$superInit$Streams$CharacterOutputConverter;
     this.$superInit$Streams$CharacterOutputConverter = dnuCatcher("$superInit$Streams$CharacterOutputConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$close = this._$close = $.$close;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this._$initBinaryStream$ = $.$initBinaryStream$;
     this.$initBinaryStream$ = dnuCatcher("$initBinaryStream$");
     this._$init$binaryStream$ = $.$init$binaryStream$;
     this.$init$binaryStream$ = dnuCatcher("$init$binaryStream$");
     this._$binaryStream = $.$binaryStream;
     this.$binaryStream = dnuCatcher("$binaryStream");
     this._$binaryStream$ = $.$binaryStream$;
     this.$binaryStream$ = dnuCatcher("$binaryStream$");
     this.$enclosingObjects$Streams$CharacterOutputConverter = enclosingObjects;
     this.$super$Streams$CharacterOutputConverter$slot = runtimeSuperclass;
     this["Streams`CharacterOutputConverter"] = function () {
      superBasicNew.call(this);
      this.$binaryStream$slot = nil;
     };
     this.basicNew = this["Streams`CharacterOutputConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterOutputConverter";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1325)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($binaryStrm) {
     var self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterOutputConverter";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$Streams$CharacterOutputConverter = enclosingObjects;
      this.$super$Streams$CharacterOutputConverter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterReadConverter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterReadConverter";
   this.name = "Streams`CharacterReadConverter";
   this.header = 1326;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterReadConverter", true, 1327),
    new MM("instance`initializer", true, 1328),
    new MM("upTo:", false, 1329),
    new MM("numCharsUpToAscii:", false, 1330)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterReadConverter = function () {
    var self = this;
    self.$super$Streams$CharacterReadConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterReadConverter();
    return self;
   };
   this.$upTo$ = function ($del) {
    var self = this;
    var $sz = nil;
    var $s = nil;
    var $lfs = nil;
    var $offset = nil;
    var $delimiter = nil;
    var $pos = nil;
    var $bsize = nil;
    var $i = nil;
    if (self._$havePeeked() && (self._$peek() === $del)) {
     return self.$super$Streams$CharacterReadConverter$slot._$upTo$.call(self, $del);
    } else {
     nil;
    };
    $delimiter = self._$Character().$coerce$($del).$asciiValue();
    $pos = self._$binaryStream().$position();
    $sz = self._$numCharsUpToAscii$($delimiter);
    if (!self._$havePeeked()) {
     $s = $0.$String(self.$enclosingObjects$Streams$CharacterReadConverter[0]).$new$($sz);
     $offset = 0;
    } else {
     $s = $0.$String(self.$enclosingObjects$Streams$CharacterReadConverter[0]).$new$($sz + 1);
     $s.$at$put$(1, self._$next());
     $offset = 1;
    };
    $pos = $pos + 1;
    $i = 1;
    {
     nil;
     for (; $i.$$less$equal($sz); ) {
      var $code = nil;
      $code = self._$binaryStream().$repositioningAt$($pos);
      $s.$at$putUnicode$($i + $offset, $code);
      $i = $i + 1;
      if (($code === 13) && self.$enclosingObjects$Streams$CharacterReadConverter[0]._$usingCrLfConvention()) {
       $pos = $pos + 1;
      } else {
       nil;
      };
      $pos = $pos + 1;
     };
    };
    self._$binaryStream().$position$($pos - 1);
    if (!self._$binaryStream().$atEnd()) {
     self._$binaryStream().$next();
    } else {
     nil;
    };
    return $s;
   };
   this.$numCharsUpToAscii$ = function ($del) {
    var self = this;
    var $n = nil;
    var $sz = nil;
    $n = 0;
    $sz = self._$binaryStream().$size();
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = self._$binaryStream().$position() + 1;
     $$limit = $sz;
     for (; $$limit.$$greater$equal($i); ) {
      var $asc = nil;
      $asc = self._$binaryStream().$repositioningAt$($i);
      if (!(self.$enclosingObjects$Streams$CharacterReadConverter[0]._$usingCrLfConvention() && ($asc === 10))) {
       if ($asc === $del) {
        return $n;
       } else {
        $n = $n + 1;
       };
      } else {
       nil;
      };
      $i = (1).$$plus($i);
     };
    };
    return $n;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterReadConverter";
     this._$superInit$Streams$CharacterReadConverter = $.$superInit$Streams$CharacterReadConverter;
     this.$superInit$Streams$CharacterReadConverter = dnuCatcher("$superInit$Streams$CharacterReadConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$numCharsUpToAscii$ = $.$numCharsUpToAscii$;
     this.$numCharsUpToAscii$ = dnuCatcher("$numCharsUpToAscii$");
     this.$enclosingObjects$Streams$CharacterReadConverter = enclosingObjects;
     this.$super$Streams$CharacterReadConverter$slot = runtimeSuperclass;
     this["Streams`CharacterReadConverter"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterReadConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterReadConverter";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1331)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($binaryStrm) {
     var self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterReadConverter";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$Streams$CharacterReadConverter = enclosingObjects;
      this.$super$Streams$CharacterReadConverter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterReadStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterReadStream";
   this.name = "Streams`CharacterReadStream";
   this.header = 1332;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterReadStream", true, 1333),
    new MM("instance`initializer", true, 1334),
    new MM("copyFrom:to:", false, 1335)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterReadStream = function () {
    var self = this;
    self.$super$Streams$CharacterReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterReadStream();
    return self;
   };
   this.$copyFrom$to$ = function ($start, $stop) {
    var self = this;
    var $pos = nil;
    var $n = nil;
    var $result = nil;
    var $offset = nil;
    $pos = self._$position();
    $n = ($stop - $start) + 1;
    $result = $0.$String(self.$enclosingObjects$Streams$CharacterReadStream[0]).$new$($n);
    $offset = $start - 1;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $n;
     for (; $$limit.$$greater$equal($i); ) {
      $result.$at$put$($i, self._$repositioningAt$($offset + $i));
      $i = (1).$$plus($i);
     };
    };
    self._$position$($pos);
    return $result;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterReadStream";
     this._$superInit$Streams$CharacterReadStream = $.$superInit$Streams$CharacterReadStream;
     this.$superInit$Streams$CharacterReadStream = dnuCatcher("$superInit$Streams$CharacterReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$enclosingObjects$Streams$CharacterReadStream = enclosingObjects;
     this.$super$Streams$CharacterReadStream$slot = runtimeSuperclass;
     this["Streams`CharacterReadStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1336),
     new MM("over:", false, 1337)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($sc) {
     var self = this;
     return self._$over$($sc);
    };
    this.$over$ = function ($sc) {
     var self = this;
     return self._$new().$initCollection$($sc);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterReadStream";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$over$ = this._$over$ = $.$over$;
      this.$enclosingObjects$Streams$CharacterReadStream = enclosingObjects;
      this.$super$Streams$CharacterReadStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterReadWriteStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterReadWriteStream";
   this.name = "Streams`CharacterReadWriteStream";
   this.header = 1338;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterReadWriteStream", true, 1339),
    new MM("instance`initializer", true, 1340),
    new MM("copyFrom:to:", false, 1341),
    new MM("cr", false, 1342),
    new MM("crTab", false, 1343),
    new MM("crTab:", false, 1344),
    new MM("print:", false, 1345),
    new MM("space", false, 1346),
    new MM("tab", false, 1347)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterReadWriteStream = function () {
    var self = this;
    self.$super$Streams$CharacterReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$CharacterReadWriteStream();
    return self;
   };
   this.$copyFrom$to$ = function ($start, $stop) {
    var self = this;
    var $pos = nil;
    var $n = nil;
    var $result = nil;
    var $offset = nil;
    $pos = self._$position();
    $n = ($stop - $start) + 1;
    $result = $0.$String(self.$enclosingObjects$Streams$CharacterReadWriteStream[0]).$new$($n);
    $offset = $start - 1;
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $n;
     for (; $$limit.$$greater$equal($i); ) {
      $result.$at$put$($i, self._$repositioningAt$($offset + $i));
      $i = (1).$$plus($i);
     };
    };
    self._$position$($pos);
    return $result;
   };
   this.$cr = function () {
    var self = this;
    self._$nextPut$(self._$Character().$cr());
    return self;
   };
   this.$crTab = function () {
    var self = this;
    self._$crTab$(1);
    return self;
   };
   this.$crTab$ = function ($count) {
    var self = this;
    {
     var $$limit = nil;
     var $$i = nil;
     nil;
     $$i = 1;
     $$limit = $count;
     for (; $$limit.$$greater$equal($$i); ) {
      (function (cascadeReceiver) {
       cascadeReceiver.$nextPut$(self._$Character().$cr());
       return cascadeReceiver.$nextPut$(self._$Character().$tab());
      })(self);
      $$i = (1).$$plus($$i);
     };
    };
    return self;
   };
   this.$print$ = function ($o) {
    var self = this;
    $o.$printOn$(self);
    return self;
   };
   this.$space = function () {
    var self = this;
    self._$nextPut$(self._$Character().$space());
    return self;
   };
   this.$tab = function () {
    var self = this;
    self._$nextPut$(self._$Character().$tab());
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterReadWriteStream";
     this._$superInit$Streams$CharacterReadWriteStream = $.$superInit$Streams$CharacterReadWriteStream;
     this.$superInit$Streams$CharacterReadWriteStream = dnuCatcher("$superInit$Streams$CharacterReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$cr = this._$cr = $.$cr;
     this.$crTab = this._$crTab = $.$crTab;
     this.$crTab$ = this._$crTab$ = $.$crTab$;
     this.$print$ = this._$print$ = $.$print$;
     this.$space = this._$space = $.$space;
     this.$tab = this._$tab = $.$tab;
     this.$enclosingObjects$Streams$CharacterReadWriteStream = enclosingObjects;
     this.$super$Streams$CharacterReadWriteStream$slot = runtimeSuperclass;
     this["Streams`CharacterReadWriteStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1348),
     new MM("on:numElements:", false, 1349),
     new MM("over:", false, 1350)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($sc) {
     var self = this;
     return self._$over$($sc);
    };
    this.$on$numElements$ = function ($sc, $n) {
     var self = this;
     return self._$over$($sc).$size$($n);
    };
    this.$over$ = function ($sc) {
     var self = this;
     return self._$new().$initBuffer$($sc);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterReadWriteStream";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$on$numElements$ = this._$on$numElements$ = $.$on$numElements$;
      this.$over$ = this._$over$ = $.$over$;
      this.$enclosingObjects$Streams$CharacterReadWriteStream = enclosingObjects;
      this.$super$Streams$CharacterReadWriteStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalInputStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalInputStream";
   this.name = "Streams`ExternalInputStream";
   this.header = 1351;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`ExternalInputStream", true, 1352),
    new MM("instance`initializer", true, 1353),
    new MM("atEnd", false, 1354),
    new MM("next", false, 1355),
    new MM("peek", false, 1356),
    new MM("peekIfAbsent:", false, 1357),
    new MM("close", false, 1358),
    new MM("initDescriptor:", false, 1359),
    new MM("actualAtEnd", false, 1360),
    new MM("actualNext", false, 1361),
    new MM("arrangeForFinalization", false, 1362),
    new MM("fillBuffer", false, 1363),
    new MM("newCollectionOfSize:", false, 1364)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalInputStream = function () {
    var self = this;
    self.$super$Streams$ExternalInputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$ExternalInputStream();
    return self;
   };
   this.$atEnd = function () {
    var self = this;
    return self._$actualAtEnd();
   };
   this.$next = function () {
    var self = this;
    return self._$actualNext();
   };
   this.$peek = function () {
    var self = this;
    self._$assert$message$(function () {
     return self._$atEnd().$not();
    }, "Can't peak past the end of the stream");
    return self._$buffer().$unsignedByteAt$(self._$nextBufferPosition() + 1);
   };
   this.$peekIfAbsent$ = function ($f) {
    var self = this;
    return self._$atEnd().$ifTrue$ifFalse$(function () {
     return $f.$value();
    }, function () {
     return self._$buffer().$byteAt$(self._$nextBufferPosition());
    });
   };
   this.$close = function () {
    var self = this;
    self._$doClose();
    return self;
   };
   this.$initDescriptor$ = function ($d) {
    var self = this;
    "ACCESSBOGUS";
    self.$super$Streams$ExternalInputStream$slot._$initDescriptor$.call(self, $d);
    self._$fillBuffer();
    return self;
   };
   this.$actualAtEnd = function () {
    var self = this;
    return self._$nextBufferPosition().$$greater$equal(self._$bufferNumElements());
   };
   this.$actualNext = function () {
    var self = this;
    var $pos = nil;
    var $byte = nil;
    if (self._$actualAtEnd()) {
     self._$error$("attempt to read past the end of an external stream");
    } else {
     nil;
    };
    $pos = self._$nextBufferPosition();
    $byte = self._$buffer().$unsignedByteAt$($pos + 1);
    $pos = $pos + 1;
    if (!$pos.$$greater$equal(self._$bufferSize())) {
     self._$nextBufferPosition$($pos);
    } else {
     self._$advanceBuffer();
    };
    return $byte;
   };
   this.$arrangeForFinalization = function () {
    var self = this;
    return self;
   };
   this.$fillBuffer = function () {
    var self = this;
    self._$bufferNumElements$(self._$descriptor().$readAt$ifFail$(self._$bufferOrigin(), function ($err) {
     return self._$error$($err);
    }));
    return self;
   };
   this.$newCollectionOfSize$ = function ($n) {
    var self = this;
    return self._$ByteArray().$new$($n);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalInputStream";
     this._$superInit$Streams$ExternalInputStream = $.$superInit$Streams$ExternalInputStream;
     this.$superInit$Streams$ExternalInputStream = dnuCatcher("$superInit$Streams$ExternalInputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$atEnd = $.$atEnd;
     this.$atEnd = dnuCatcher("$atEnd");
     this.$next = this._$next = $.$next;
     this._$peek = $.$peek;
     this.$peek = dnuCatcher("$peek");
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this.$close = this._$close = $.$close;
     this.$initDescriptor$ = this._$initDescriptor$ = $.$initDescriptor$;
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$arrangeForFinalization = $.$arrangeForFinalization;
     this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
     this._$fillBuffer = $.$fillBuffer;
     this.$fillBuffer = dnuCatcher("$fillBuffer");
     this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
     this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
     this.$enclosingObjects$Streams$ExternalInputStream = enclosingObjects;
     this.$super$Streams$ExternalInputStream$slot = runtimeSuperclass;
     this["Streams`ExternalInputStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`ExternalInputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalInputStream";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalInputStream";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$ExternalInputStream = enclosingObjects;
      this.$super$Streams$ExternalInputStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalOutputStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalOutputStream";
   this.name = "Streams`ExternalOutputStream";
   this.header = 1365;
   this.slots = [new SM("dirty", true, false)];
   this.methods = [
    new MM("superInit`Streams`ExternalOutputStream", true, 1366),
    new MM("instance`initializer", true, 1367),
    new MM("close", false, 1368),
    new MM("externalFlush", false, 1369),
    new MM("flush", false, 1370),
    new MM("logicalFlush", false, 1371),
    new MM("advanceBufferLocation", false, 1372),
    new MM("arrangeForFinalization", false, 1373),
    new MM("finalize", false, 1374),
    new MM("nextPut:", false, 1375),
    new MM("updateBufferLocationAfterFlush", false, 1376),
    new MM("writeBuffer", false, 1377),
    new MM("init`dirty:", true, 0),
    new MM("dirty", true, 0),
    new MM("dirty:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalOutputStream = function () {
    var self = this;
    self.$super$Streams$ExternalOutputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$ExternalOutputStream();
    self._$init$dirty$(false);
    return self;
   };
   this.$close = function () {
    var self = this;
    self._$flush();
    self.$super$Streams$ExternalOutputStream$slot._$close.call(self);
    return self;
   };
   this.$externalFlush = function () {
    var self = this;
    self._$flush();
    self._$descriptor().$flushIfFail$(function ($err) {
     return self._$error$($err);
    });
    return self;
   };
   this.$flush = function () {
    var self = this;
    if (self._$dirty()) {
     if (self._$bufferNumElements() > 0) {
      (function (cascadeReceiver) {
       cascadeReceiver.$writeBuffer();
       return cascadeReceiver.$updateBufferLocationAfterFlush();
      })(self);
     } else {
      nil;
     };
     self._$dirty$(false);
    } else {
     nil;
    };
    return self;
   };
   this.$logicalFlush = function () {
    var self = this;
    if (self._$dirty()) {
     if (self._$bufferNumElements() > 0) {
      (function (cascadeReceiver) {
       cascadeReceiver.$writeBuffer();
       return cascadeReceiver.$updateBufferLocationAfterFlush();
      })(self);
     } else {
      nil;
     };
     self._$dirty$(false);
    } else {
     nil;
    };
    return self;
   };
   this.$advanceBufferLocation = function () {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$bufferOrigin$(self._$bufferOrigin() + self._$bufferNumElements());
     cascadeReceiver.$nextBufferPosition$(0);
     return cascadeReceiver.$bufferNumElements$(0);
    })(self);
    return self;
   };
   this.$arrangeForFinalization = function () {
    var self = this;
    return self;
   };
   this.$finalize = function () {
    var self = this;
    self._$close();
    return self;
   };
   this.$nextPut$ = function ($byte) {
    var self = this;
    var $pos = nil;
    $pos = self._$nextBufferPosition();
    self._$buffer().$unsignedByteAt$put$($pos + 1, $byte);
    $pos = $pos + 1;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextBufferPosition$($pos);
     return cascadeReceiver.$bufferNumElements$($pos.$max$(self._$bufferNumElements()));
    })(self);
    if ($pos.$$greater$equal(self._$bufferSize())) {
     (function (cascadeReceiver) {
      cascadeReceiver.$writeBuffer();
      cascadeReceiver.$advanceBuffer();
      return cascadeReceiver.$dirty$(false);
     })(self);
    } else {
     self._$dirty$(true);
    };
    return $byte;
   };
   this.$updateBufferLocationAfterFlush = function () {
    var self = this;
    self._$advanceBufferLocation();
    return self;
   };
   this.$writeBuffer = function () {
    var self = this;
    self._$descriptor().$write$at$ifFail$(self._$bufferNumElements(), self._$bufferOrigin(), function ($err) {
     return self._$error$($err);
    });
    return self;
   };
   this.$init$dirty$ = function (v) {
    this.$dirty$slot = v;
    return this;
   };
   this.$dirty = function () {
    return this.$dirty$slot;
   };
   this.$dirty$ = function (v) {
    this.$dirty$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalOutputStream";
     this._$superInit$Streams$ExternalOutputStream = $.$superInit$Streams$ExternalOutputStream;
     this.$superInit$Streams$ExternalOutputStream = dnuCatcher("$superInit$Streams$ExternalOutputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$close = this._$close = $.$close;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this._$logicalFlush = $.$logicalFlush;
     this.$logicalFlush = dnuCatcher("$logicalFlush");
     this._$advanceBufferLocation = $.$advanceBufferLocation;
     this.$advanceBufferLocation = dnuCatcher("$advanceBufferLocation");
     this._$arrangeForFinalization = $.$arrangeForFinalization;
     this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
     this._$finalize = $.$finalize;
     this.$finalize = dnuCatcher("$finalize");
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this._$updateBufferLocationAfterFlush = $.$updateBufferLocationAfterFlush;
     this.$updateBufferLocationAfterFlush = dnuCatcher("$updateBufferLocationAfterFlush");
     this.$writeBuffer = this._$writeBuffer = $.$writeBuffer;
     this._$init$dirty$ = $.$init$dirty$;
     this.$init$dirty$ = dnuCatcher("$init$dirty$");
     this._$dirty = $.$dirty;
     this.$dirty = dnuCatcher("$dirty");
     this._$dirty$ = $.$dirty$;
     this.$dirty$ = dnuCatcher("$dirty$");
     this.$enclosingObjects$Streams$ExternalOutputStream = enclosingObjects;
     this.$super$Streams$ExternalOutputStream$slot = runtimeSuperclass;
     this["Streams`ExternalOutputStream"] = function () {
      superBasicNew.call(this);
      this.$dirty$slot = nil;
     };
     this.basicNew = this["Streams`ExternalOutputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalOutputStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("onDescriptor:", false, 1378)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$onDescriptor$ = function ($d) {
     var self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalOutputStream";
      this.$new = this._$new = $.$new;
      this.$onDescriptor$ = this._$onDescriptor$ = $.$onDescriptor$;
      this.$enclosingObjects$Streams$ExternalOutputStream = enclosingObjects;
      this.$super$Streams$ExternalOutputStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalReadStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalReadStream";
   this.name = "Streams`ExternalReadStream";
   this.header = 1379;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`ExternalReadStream", true, 1380),
    new MM("instance`initializer", true, 1381),
    new MM("at:", false, 1382),
    new MM("repositioningAt:", false, 1383),
    new MM("size", false, 1384),
    new MM("initializeActualPosition", false, 1385),
    new MM("actualAtEnd", false, 1386),
    new MM("actualPosition", false, 1387),
    new MM("actualPosition:", false, 1388),
    new MM("goodBufferOriginForPosition:", false, 1389),
    new MM("writeIfNeededBeforePositionChange", false, 1390)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalReadStream = function () {
    var self = this;
    self.$super$Streams$ExternalReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$ExternalReadStream();
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    var $i = nil;
    $i = $index - self._$bufferOrigin();
    return (($i < 1) || $i.$$greater(self._$bufferNumElements())).$ifFalse$ifTrue$(function () {
     return self._$buffer().$byteAt$($i - 1);
    }, function () {
     var $pos = nil;
     var $result = nil;
     $pos = self._$position();
     self._$position$($index - 1);
     $result = self._$at$($index);
     self._$position$($pos);
     return $result;
    });
   };
   this.$repositioningAt$ = function ($index) {
    var self = this;
    var $i = nil;
    $i = $index - self._$bufferOrigin();
    return (($i < 1) || $i.$$greater(self._$bufferNumElements())).$ifFalse$ifTrue$(function () {
     return self._$buffer().$byteAt$($i - 1);
    }, function () {
     self._$position$($index - 1);
     return self._$at$($index);
    });
   };
   this.$size = function () {
    var self = this;
    return self._$descriptor().$size();
   };
   this.$initializeActualPosition = function () {
    var self = this;
    return self;
   };
   this.$actualAtEnd = function () {
    var self = this;
    return self._$nextBufferPosition().$$greater$equal(self._$bufferNumElements());
   };
   this.$actualPosition = function () {
    var self = this;
    return self._$bufferOrigin() + self._$nextBufferPosition();
   };
   this.$actualPosition$ = function ($p) {
    var self = this;
    var $bufPos = nil;
    $bufPos = $p - self._$bufferOrigin();
    if (($bufPos >= 0) && $bufPos.$$less(self._$bufferNumElements())) {
     self._$nextBufferPosition$($bufPos);
    } else {
     self._$assert$message$(function () {
      return $p.$between$and$(0, self._$size());
     }, "");
     self._$writeIfNeededBeforePositionChange();
     self._$bufferOrigin$(self._$goodBufferOriginForPosition$($p));
     self._$descriptor().$position$(self._$bufferOrigin());
     self._$fillBuffer();
     self._$nextBufferPosition$($p - self._$bufferOrigin());
    };
    return self;
   };
   this.$goodBufferOriginForPosition$ = function ($nextPos) {
    var self = this;
    return $nextPos - $nextPos.$$back$back(self._$bufferSize());
   };
   this.$writeIfNeededBeforePositionChange = function () {
    var self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalReadStream";
     this._$superInit$Streams$ExternalReadStream = $.$superInit$Streams$ExternalReadStream;
     this.$superInit$Streams$ExternalReadStream = dnuCatcher("$superInit$Streams$ExternalReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this._$repositioningAt$ = $.$repositioningAt$;
     this.$repositioningAt$ = dnuCatcher("$repositioningAt$");
     this.$size = this._$size = $.$size;
     this._$initializeActualPosition = $.$initializeActualPosition;
     this.$initializeActualPosition = dnuCatcher("$initializeActualPosition");
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualPosition = $.$actualPosition;
     this.$actualPosition = dnuCatcher("$actualPosition");
     this._$actualPosition$ = $.$actualPosition$;
     this.$actualPosition$ = dnuCatcher("$actualPosition$");
     this._$goodBufferOriginForPosition$ = $.$goodBufferOriginForPosition$;
     this.$goodBufferOriginForPosition$ = dnuCatcher("$goodBufferOriginForPosition$");
     this._$writeIfNeededBeforePositionChange = $.$writeIfNeededBeforePositionChange;
     this.$writeIfNeededBeforePositionChange = dnuCatcher("$writeIfNeededBeforePositionChange");
     this.$enclosingObjects$Streams$ExternalReadStream = enclosingObjects;
     this.$super$Streams$ExternalReadStream$slot = runtimeSuperclass;
     this["Streams`ExternalReadStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`ExternalReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("onDescriptor:", false, 1391)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$onDescriptor$ = function ($d) {
     var self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalReadStream";
      this.$new = this._$new = $.$new;
      this.$onDescriptor$ = this._$onDescriptor$ = $.$onDescriptor$;
      this.$enclosingObjects$Streams$ExternalReadStream = enclosingObjects;
      this.$super$Streams$ExternalReadStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalReadWriteStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalReadWriteStream";
   this.name = "Streams`ExternalReadWriteStream";
   this.header = 1392;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`ExternalReadWriteStream", true, 1393),
    new MM("instance`initializer", true, 1394),
    new MM("contents", false, 1395),
    new MM("contentsWritten", false, 1396),
    new MM("size", false, 1397),
    new MM("updateBufferLocationAfterFlush", false, 1398),
    new MM("writeIfNeededBeforePositionChange", false, 1399)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalReadWriteStream = function () {
    var self = this;
    self.$super$Streams$ExternalReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$ExternalReadWriteStream();
    return self;
   };
   this.$contents = function () {
    var self = this;
    return self._$collection();
   };
   this.$contentsWritten = function () {
    var self = this;
    var $cltn = nil;
    var $origPos = nil;
    $cltn = self._$newCollectionOfSize$(self._$position());
    $origPos = self._$position();
    self._$position$(0);
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $origPos;
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    self._$position$($origPos);
    return $cltn;
   };
   this.$size = function () {
    var self = this;
    self._$flush();
    return self.$super$Streams$ExternalReadWriteStream$slot._$size.call(self);
   };
   this.$updateBufferLocationAfterFlush = function () {
    var self = this;
    "ACCESSBOGUS";
    return self;
   };
   this.$writeIfNeededBeforePositionChange = function () {
    var self = this;
    if (self._$dirty()) {
     (function (cascadeReceiver) {
      cascadeReceiver.$writeBuffer();
      return cascadeReceiver.$dirty$(false);
     })(self);
    } else {
     nil;
    };
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalReadWriteStream";
     this._$superInit$Streams$ExternalReadWriteStream = $.$superInit$Streams$ExternalReadWriteStream;
     this.$superInit$Streams$ExternalReadWriteStream = dnuCatcher("$superInit$Streams$ExternalReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$contents = this._$contents = $.$contents;
     this._$contentsWritten = $.$contentsWritten;
     this.$contentsWritten = dnuCatcher("$contentsWritten");
     this.$size = this._$size = $.$size;
     this.$updateBufferLocationAfterFlush = this._$updateBufferLocationAfterFlush = $.$updateBufferLocationAfterFlush;
     this._$writeIfNeededBeforePositionChange = $.$writeIfNeededBeforePositionChange;
     this.$writeIfNeededBeforePositionChange = dnuCatcher("$writeIfNeededBeforePositionChange");
     this.$enclosingObjects$Streams$ExternalReadWriteStream = enclosingObjects;
     this.$super$Streams$ExternalReadWriteStream$slot = runtimeSuperclass;
     this["Streams`ExternalReadWriteStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`ExternalReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("onDescriptor:", false, 1400)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$onDescriptor$ = function ($d) {
     var self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalReadWriteStream";
      this.$new = this._$new = $.$new;
      this.$onDescriptor$ = this._$onDescriptor$ = $.$onDescriptor$;
      this.$enclosingObjects$Streams$ExternalReadWriteStream = enclosingObjects;
      this.$super$Streams$ExternalReadWriteStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalStream";
   this.name = "Streams`ExternalStream";
   this.header = 1401;
   this.slots = [
    new SM("descriptor", true, false),
    new SM("buffer", true, false),
    new SM("bufferSize", true, false),
    new SM("bufferOrigin", true, false),
    new SM("nextBufferPosition", true, false),
    new SM("bufferNumElements", true, false)
   ];
   this.methods = [
    new MM("superInit`Streams`ExternalStream", true, 1402),
    new MM("instance`initializer", true, 1403),
    new MM("close", false, 1404),
    new MM("initBuffer", false, 1405),
    new MM("initDescriptor:", false, 1406),
    new MM("advanceBuffer", false, 1407),
    new MM("arrangeForFinalization", false, 1408),
    new MM("doClose", false, 1409),
    new MM("fillBuffer", false, 1410),
    new MM("postCopy", false, 1411),
    new MM("init`descriptor:", true, 0),
    new MM("descriptor", true, 0),
    new MM("descriptor:", true, 0),
    new MM("init`buffer:", true, 0),
    new MM("buffer", true, 0),
    new MM("buffer:", true, 0),
    new MM("init`bufferSize:", true, 0),
    new MM("bufferSize", true, 0),
    new MM("bufferSize:", true, 0),
    new MM("init`bufferOrigin:", true, 0),
    new MM("bufferOrigin", true, 0),
    new MM("bufferOrigin:", true, 0),
    new MM("init`nextBufferPosition:", true, 0),
    new MM("nextBufferPosition", true, 0),
    new MM("nextBufferPosition:", true, 0),
    new MM("init`bufferNumElements:", true, 0),
    new MM("bufferNumElements", true, 0),
    new MM("bufferNumElements:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalStream = function () {
    var self = this;
    self.$super$Streams$ExternalStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$ExternalStream();
    return self;
   };
   this.$close = function () {
    var self = this;
    self._$doClose();
    return self;
   };
   this.$initBuffer = function () {
    var self = this;
    self._$buffer$(self._$descriptor().$buffer());
    self._$bufferSize$(self._$descriptor().$bufferSize());
    self._$arrangeForFinalization();
    return self;
   };
   this.$initDescriptor$ = function ($d) {
    var self = this;
    self._$descriptor$($d);
    self._$initBuffer();
    self._$bufferOrigin$(0);
    self._$bufferNumElements$(0);
    self._$nextBufferPosition$(0);
    return self;
   };
   this.$advanceBuffer = function () {
    var self = this;
    self._$bufferOrigin$(self._$bufferOrigin() + self._$bufferSize());
    self._$fillBuffer();
    self._$nextBufferPosition$(0);
    return self;
   };
   this.$arrangeForFinalization = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$doClose = function () {
    var self = this;
    self._$descriptor().$close();
    self._$buffer$(nil);
    return self;
   };
   this.$fillBuffer = function () {
    var self = this;
    self._$bufferNumElements$(0);
    return self;
   };
   this.$postCopy = function () {
    var self = this;
    self.$super$Streams$ExternalStream$slot._$postCopy.call(self);
    self._$descriptor$(self._$descriptor().$copy());
    self._$initBuffer();
    return self;
   };
   this.$init$descriptor$ = function (v) {
    this.$descriptor$slot = v;
    return this;
   };
   this.$descriptor = function () {
    return this.$descriptor$slot;
   };
   this.$descriptor$ = function (v) {
    this.$descriptor$slot = v;
    return this;
   };
   this.$init$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.$buffer = function () {
    return this.$buffer$slot;
   };
   this.$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.$init$bufferSize$ = function (v) {
    this.$bufferSize$slot = v;
    return this;
   };
   this.$bufferSize = function () {
    return this.$bufferSize$slot;
   };
   this.$bufferSize$ = function (v) {
    this.$bufferSize$slot = v;
    return this;
   };
   this.$init$bufferOrigin$ = function (v) {
    this.$bufferOrigin$slot = v;
    return this;
   };
   this.$bufferOrigin = function () {
    return this.$bufferOrigin$slot;
   };
   this.$bufferOrigin$ = function (v) {
    this.$bufferOrigin$slot = v;
    return this;
   };
   this.$init$nextBufferPosition$ = function (v) {
    this.$nextBufferPosition$slot = v;
    return this;
   };
   this.$nextBufferPosition = function () {
    return this.$nextBufferPosition$slot;
   };
   this.$nextBufferPosition$ = function (v) {
    this.$nextBufferPosition$slot = v;
    return this;
   };
   this.$init$bufferNumElements$ = function (v) {
    this.$bufferNumElements$slot = v;
    return this;
   };
   this.$bufferNumElements = function () {
    return this.$bufferNumElements$slot;
   };
   this.$bufferNumElements$ = function (v) {
    this.$bufferNumElements$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalStream";
     this._$superInit$Streams$ExternalStream = $.$superInit$Streams$ExternalStream;
     this.$superInit$Streams$ExternalStream = dnuCatcher("$superInit$Streams$ExternalStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$close = this._$close = $.$close;
     this._$initBuffer = $.$initBuffer;
     this.$initBuffer = dnuCatcher("$initBuffer");
     this._$initDescriptor$ = $.$initDescriptor$;
     this.$initDescriptor$ = dnuCatcher("$initDescriptor$");
     this._$advanceBuffer = $.$advanceBuffer;
     this.$advanceBuffer = dnuCatcher("$advanceBuffer");
     this._$arrangeForFinalization = $.$arrangeForFinalization;
     this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
     this._$doClose = $.$doClose;
     this.$doClose = dnuCatcher("$doClose");
     this._$fillBuffer = $.$fillBuffer;
     this.$fillBuffer = dnuCatcher("$fillBuffer");
     this._$postCopy = $.$postCopy;
     this.$postCopy = dnuCatcher("$postCopy");
     this._$init$descriptor$ = $.$init$descriptor$;
     this.$init$descriptor$ = dnuCatcher("$init$descriptor$");
     this._$descriptor = $.$descriptor;
     this.$descriptor = dnuCatcher("$descriptor");
     this._$descriptor$ = $.$descriptor$;
     this.$descriptor$ = dnuCatcher("$descriptor$");
     this._$init$buffer$ = $.$init$buffer$;
     this.$init$buffer$ = dnuCatcher("$init$buffer$");
     this._$buffer = $.$buffer;
     this.$buffer = dnuCatcher("$buffer");
     this._$buffer$ = $.$buffer$;
     this.$buffer$ = dnuCatcher("$buffer$");
     this._$init$bufferSize$ = $.$init$bufferSize$;
     this.$init$bufferSize$ = dnuCatcher("$init$bufferSize$");
     this._$bufferSize = $.$bufferSize;
     this.$bufferSize = dnuCatcher("$bufferSize");
     this._$bufferSize$ = $.$bufferSize$;
     this.$bufferSize$ = dnuCatcher("$bufferSize$");
     this._$init$bufferOrigin$ = $.$init$bufferOrigin$;
     this.$init$bufferOrigin$ = dnuCatcher("$init$bufferOrigin$");
     this._$bufferOrigin = $.$bufferOrigin;
     this.$bufferOrigin = dnuCatcher("$bufferOrigin");
     this._$bufferOrigin$ = $.$bufferOrigin$;
     this.$bufferOrigin$ = dnuCatcher("$bufferOrigin$");
     this.$init$nextBufferPosition$ = this._$init$nextBufferPosition$ = $.$init$nextBufferPosition$;
     this.$nextBufferPosition = this._$nextBufferPosition = $.$nextBufferPosition;
     this.$nextBufferPosition$ = this._$nextBufferPosition$ = $.$nextBufferPosition$;
     this.$init$bufferNumElements$ = this._$init$bufferNumElements$ = $.$init$bufferNumElements$;
     this.$bufferNumElements = this._$bufferNumElements = $.$bufferNumElements;
     this.$bufferNumElements$ = this._$bufferNumElements$ = $.$bufferNumElements$;
     this.$enclosingObjects$Streams$ExternalStream = enclosingObjects;
     this.$super$Streams$ExternalStream$slot = runtimeSuperclass;
     this["Streams`ExternalStream"] = function () {
      superBasicNew.call(this);
      this.$descriptor$slot = nil;
      this.$buffer$slot = nil;
      this.$bufferSize$slot = nil;
      this.$bufferOrigin$slot = nil;
      this.$nextBufferPosition$slot = nil;
      this.$bufferNumElements$slot = nil;
     };
     this.basicNew = this["Streams`ExternalStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("onDescriptor:", false, 1412)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$onDescriptor$ = function ($d) {
     var self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalStream";
      this.$new = this._$new = $.$new;
      this._$onDescriptor$ = $.$onDescriptor$;
      this.$onDescriptor$ = dnuCatcher("$onDescriptor$");
      this.$enclosingObjects$Streams$ExternalStream = enclosingObjects;
      this.$super$Streams$ExternalStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$SeqCltnReadStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`SeqCltnReadStream";
   this.name = "Streams`SeqCltnReadStream";
   this.header = 1413;
   this.slots = [new SM("collection", true, false)];
   this.methods = [
    new MM("superInit`Streams`SeqCltnReadStream", true, 1414),
    new MM("instance`initializer", true, 1415),
    new MM("at:", false, 1416),
    new MM("atEnd", false, 1417),
    new MM("next", false, 1418),
    new MM("nextIfAbsent:", false, 1419),
    new MM("peek", false, 1420),
    new MM("peekIfAbsent:", false, 1421),
    new MM("position:", false, 1422),
    new MM("size", false, 1423),
    new MM("initCollection:", false, 1424),
    new MM("printOn:", false, 1425),
    new MM("accumulateUntil:", false, 1426),
    new MM("actualNext", false, 1427),
    new MM("nextFromPeek", false, 1428),
    new MM("peekVal", false, 1429),
    new MM("init`collection:", true, 0),
    new MM("collection", true, 0),
    new MM("collection:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$SeqCltnReadStream = function () {
    var self = this;
    self.$super$Streams$SeqCltnReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$SeqCltnReadStream();
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    return self._$collection().$at$($index);
   };
   this.$atEnd = function () {
    var self = this;
    return self._$actualAtEnd();
   };
   this.$next = function () {
    var self = this;
    return self._$actualNext();
   };
   this.$nextIfAbsent$ = function ($f) {
    var self = this;
    var $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    } else {
     nil;
    };
    self._$actualPosition$($pos);
    return self._$collection().$at$($pos);
   };
   this.$peek = function () {
    var self = this;
    var $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    } else {
     nil;
    };
    return self._$collection().$at$($pos);
   };
   this.$peekIfAbsent$ = function ($f) {
    var self = this;
    var $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    } else {
     nil;
    };
    return self._$collection().$at$($pos);
   };
   this.$position$ = function ($p) {
    var self = this;
    self._$actualPosition$($p);
    return self;
   };
   this.$size = function () {
    var self = this;
    return self._$collection().$size();
   };
   this.$initCollection$ = function ($sc) {
    var self = this;
    self._$collection$($sc);
    return self;
   };
   this.$printOn$ = function ($strm) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$(self._$class().$name());
     cascadeReceiver.$nextPutAll$("(position=");
     cascadeReceiver.$print$(self._$position());
     cascadeReceiver.$nextPutAll$(" collection=");
     cascadeReceiver.$print$(self._$collection());
     return cascadeReceiver.$nextPut$(")");
    })($strm);
    return self;
   };
   this.$accumulateUntil$ = function ($predicate) {
    var self = this;
    var $start = nil;
    $start = self._$position();
    {
     nil;
     for (; !$predicate.$value(); ) {
      self._$position$(self._$position() + 1);
     };
    };
    return self._$collection().$copyFrom$to$($start + 1, self._$position());
   };
   this.$actualNext = function () {
    var self = this;
    var $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    } else {
     nil;
    };
    self._$actualPosition$($pos);
    return self._$collection().$at$($pos);
   };
   this.$nextFromPeek = function () {
    var self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$peekVal = function () {
    var self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$init$collection$ = function (v) {
    this.$collection$slot = v;
    return this;
   };
   this.$collection = function () {
    return this.$collection$slot;
   };
   this.$collection$ = function (v) {
    this.$collection$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`SeqCltnReadStream";
     this._$superInit$Streams$SeqCltnReadStream = $.$superInit$Streams$SeqCltnReadStream;
     this.$superInit$Streams$SeqCltnReadStream = dnuCatcher("$superInit$Streams$SeqCltnReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this.$atEnd = this._$atEnd = $.$atEnd;
     this.$next = this._$next = $.$next;
     this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
     this.$peek = this._$peek = $.$peek;
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this.$position$ = this._$position$ = $.$position$;
     this.$size = this._$size = $.$size;
     this.$initCollection$ = this._$initCollection$ = $.$initCollection$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$accumulateUntil$ = $.$accumulateUntil$;
     this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
     this.$actualNext = this._$actualNext = $.$actualNext;
     this._$nextFromPeek = $.$nextFromPeek;
     this.$nextFromPeek = dnuCatcher("$nextFromPeek");
     this._$peekVal = $.$peekVal;
     this.$peekVal = dnuCatcher("$peekVal");
     this._$init$collection$ = $.$init$collection$;
     this.$init$collection$ = dnuCatcher("$init$collection$");
     this._$collection = $.$collection;
     this.$collection = dnuCatcher("$collection");
     this._$collection$ = $.$collection$;
     this.$collection$ = dnuCatcher("$collection$");
     this.$enclosingObjects$Streams$SeqCltnReadStream = enclosingObjects;
     this.$super$Streams$SeqCltnReadStream$slot = runtimeSuperclass;
     this["Streams`SeqCltnReadStream"] = function () {
      superBasicNew.call(this);
      this.$collection$slot = nil;
     };
     this.basicNew = this["Streams`SeqCltnReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`SeqCltnReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1430),
     new MM("over:", false, 1431)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($sc) {
     var self = this;
     return self._$over$($sc);
    };
    this.$over$ = function ($sc) {
     var self = this;
     return self._$new().$initCollection$($sc);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`SeqCltnReadStream";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this._$over$ = $.$over$;
      this.$over$ = dnuCatcher("$over$");
      this.$enclosingObjects$Streams$SeqCltnReadStream = enclosingObjects;
      this.$super$Streams$SeqCltnReadStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$SeqCltnReadWriteStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`SeqCltnReadWriteStream";
   this.name = "Streams`SeqCltnReadWriteStream";
   this.header = 1432;
   this.slots = [new SM("buffer", true, false)];
   this.methods = [
    new MM("superInit`Streams`SeqCltnReadWriteStream", true, 1433),
    new MM("instance`initializer", true, 1434),
    new MM("at:", false, 1435),
    new MM("atEnd", false, 1436),
    new MM("contents", false, 1437),
    new MM("next", false, 1438),
    new MM("nextIfAbsent:", false, 1439),
    new MM("nextPut:", false, 1440),
    new MM("peek", false, 1441),
    new MM("peekIfAbsent:", false, 1442),
    new MM("position:", false, 1443),
    new MM("initBuffer:", false, 1444),
    new MM("printOn:", false, 1445),
    new MM("accumulateUntil:", false, 1446),
    new MM("actualNext", false, 1447),
    new MM("collection", false, 1448),
    new MM("nextFromPeek", false, 1449),
    new MM("peekVal", false, 1450),
    new MM("init`buffer:", true, 0),
    new MM("buffer", true, 0),
    new MM("buffer:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$SeqCltnReadWriteStream = function () {
    var self = this;
    self.$super$Streams$SeqCltnReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$SeqCltnReadWriteStream();
    return self;
   };
   this.$at$ = function ($index) {
    var self = this;
    self._$assert$(function () {
     return $index.$$less$equal(self._$size());
    });
    return self._$buffer().$at$($index);
   };
   this.$atEnd = function () {
    var self = this;
    return self._$actualAtEnd();
   };
   this.$contents = function () {
    var self = this;
    return self._$collection();
   };
   this.$next = function () {
    var self = this;
    return self._$actualNext();
   };
   this.$nextIfAbsent$ = function ($f) {
    var self = this;
    var $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    } else {
     nil;
    };
    self._$actualPosition$($pos);
    return self._$buffer().$at$($pos);
   };
   this.$nextPut$ = function ($el) {
    var self = this;
    var $pos = nil;
    self.$super$Streams$SeqCltnReadWriteStream$slot._$nextPut$.call(self, $el);
    if (($pos = self._$position()).$$greater(self._$buffer().$size())) {
     self._$initBuffer$(self._$buffer().$copyWithSize$((self._$buffer().$size() * 2).$max$(8)));
    } else {
     nil;
    };
    self._$buffer().$at$put$($pos, $el);
    return $el;
   };
   this.$peek = function () {
    var self = this;
    var $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    } else {
     nil;
    };
    return self._$buffer().$at$($pos);
   };
   this.$peekIfAbsent$ = function ($f) {
    var self = this;
    var $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    } else {
     nil;
    };
    return self._$buffer().$at$($pos);
   };
   this.$position$ = function ($p) {
    var self = this;
    self._$actualPosition$($p);
    return self;
   };
   this.$initBuffer$ = function ($sc) {
    var self = this;
    self._$buffer$($sc);
    return self;
   };
   this.$printOn$ = function ($strm) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$(self._$class().$name());
     cascadeReceiver.$nextPutAll$("(position=");
     cascadeReceiver.$print$(self._$position());
     cascadeReceiver.$nextPutAll$(" buffer=");
     cascadeReceiver.$print$(self._$buffer());
     return cascadeReceiver.$nextPut$(")");
    })($strm);
    return self;
   };
   this.$accumulateUntil$ = function ($predicate) {
    var self = this;
    var $start = nil;
    $start = self._$position();
    {
     nil;
     for (; !$predicate.$value(); ) {
      self._$position$(self._$position() + 1);
     };
    };
    return self._$buffer().$copyFrom$to$($start + 1, self._$position());
   };
   this.$actualNext = function () {
    var self = this;
    var $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    } else {
     nil;
    };
    self._$actualPosition$($pos);
    return self._$buffer().$at$($pos);
   };
   this.$collection = function () {
    var self = this;
    return self._$buffer().$copyFrom$to$(1, self._$size());
   };
   this.$nextFromPeek = function () {
    var self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$peekVal = function () {
    var self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$init$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.$buffer = function () {
    return this.$buffer$slot;
   };
   this.$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`SeqCltnReadWriteStream";
     this._$superInit$Streams$SeqCltnReadWriteStream = $.$superInit$Streams$SeqCltnReadWriteStream;
     this.$superInit$Streams$SeqCltnReadWriteStream = dnuCatcher("$superInit$Streams$SeqCltnReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this.$atEnd = this._$atEnd = $.$atEnd;
     this.$contents = this._$contents = $.$contents;
     this._$next = $.$next;
     this.$next = dnuCatcher("$next");
     this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
     this._$nextPut$ = $.$nextPut$;
     this.$nextPut$ = dnuCatcher("$nextPut$");
     this._$peek = $.$peek;
     this.$peek = dnuCatcher("$peek");
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this._$position$ = $.$position$;
     this.$position$ = dnuCatcher("$position$");
     this.$initBuffer$ = this._$initBuffer$ = $.$initBuffer$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$accumulateUntil$ = $.$accumulateUntil$;
     this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$collection = $.$collection;
     this.$collection = dnuCatcher("$collection");
     this._$nextFromPeek = $.$nextFromPeek;
     this.$nextFromPeek = dnuCatcher("$nextFromPeek");
     this._$peekVal = $.$peekVal;
     this.$peekVal = dnuCatcher("$peekVal");
     this._$init$buffer$ = $.$init$buffer$;
     this.$init$buffer$ = dnuCatcher("$init$buffer$");
     this._$buffer = $.$buffer;
     this.$buffer = dnuCatcher("$buffer");
     this._$buffer$ = $.$buffer$;
     this.$buffer$ = dnuCatcher("$buffer$");
     this.$enclosingObjects$Streams$SeqCltnReadWriteStream = enclosingObjects;
     this.$super$Streams$SeqCltnReadWriteStream$slot = runtimeSuperclass;
     this["Streams`SeqCltnReadWriteStream"] = function () {
      superBasicNew.call(this);
      this.$buffer$slot = nil;
     };
     this.basicNew = this["Streams`SeqCltnReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`SeqCltnReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("on:", false, 1451),
     new MM("on:numElements:", false, 1452),
     new MM("over:", false, 1453)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$on$ = function ($sc) {
     var self = this;
     return self._$over$($sc);
    };
    this.$on$numElements$ = function ($sc, $n) {
     var self = this;
     return self._$over$($sc).$size$($n);
    };
    this.$over$ = function ($sc) {
     var self = this;
     return self._$new().$initBuffer$($sc);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`SeqCltnReadWriteStream";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this._$on$numElements$ = $.$on$numElements$;
      this.$on$numElements$ = dnuCatcher("$on$numElements$");
      this._$over$ = $.$over$;
      this.$over$ = dnuCatcher("$over$");
      this.$enclosingObjects$Streams$SeqCltnReadWriteStream = enclosingObjects;
      this.$super$Streams$SeqCltnReadWriteStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$TempTranscript = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Streams`TempTranscript";
   this.name = "Streams`TempTranscript";
   this.header = 1454;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`TempTranscript", true, 1455),
    new MM("instance`initializer", true, 1456),
    new MM("cr", false, 1457),
    new MM("nextPut:", false, 1458),
    new MM("show:", false, 1459)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$TempTranscript = function () {
    var self = this;
    self.$super$Streams$TempTranscript$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Streams$TempTranscript();
    return self;
   };
   this.$cr = function () {
    var self = this;
    self._$nextPut$(self._$Character().$lf());
    return self;
   };
   this.$nextPut$ = function ($c) {
    var self = this;
    $c.$unicodeValue().$printCharacter();
    if ($c === self._$Character().$cr()) {
     self._$Character().$lf().$unicodeValue().$printCharacter();
    } else {
     nil;
    };
    return self;
   };
   this.$show$ = function ($s) {
    var self = this;
    self._$nextPutAll$($s);
    return $s;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`TempTranscript";
     this._$superInit$Streams$TempTranscript = $.$superInit$Streams$TempTranscript;
     this.$superInit$Streams$TempTranscript = dnuCatcher("$superInit$Streams$TempTranscript");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cr = this._$cr = $.$cr;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$show$ = this._$show$ = $.$show$;
     this.$enclosingObjects$Streams$TempTranscript = enclosingObjects;
     this.$super$Streams$TempTranscript$slot = runtimeSuperclass;
     this["Streams`TempTranscript"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`TempTranscript"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Streams`TempTranscript";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`TempTranscript";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$TempTranscript = enclosingObjects;
      this.$super$Streams$TempTranscript = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicInputStream.enclosingMixin = this;
  this.$Streams$BasicOutputStream.enclosingMixin = this;
  this.$Streams$BasicReadStream.enclosingMixin = this;
  this.$Streams$BasicReadWriteStream.enclosingMixin = this;
  this.$Streams$CharacterInput.enclosingMixin = this;
  this.$Streams$CharacterInputConverter.enclosingMixin = this;
  this.$Streams$CharacterInputOutputConverter.enclosingMixin = this;
  this.$Streams$CharacterOutput.enclosingMixin = this;
  this.$Streams$CharacterOutputConverter.enclosingMixin = this;
  this.$Streams$CharacterReadConverter.enclosingMixin = this;
  this.$Streams$CharacterReadStream.enclosingMixin = this;
  this.$Streams$CharacterReadWriteStream.enclosingMixin = this;
  this.$Streams$ExternalInputStream.enclosingMixin = this;
  this.$Streams$ExternalOutputStream.enclosingMixin = this;
  this.$Streams$ExternalReadStream.enclosingMixin = this;
  this.$Streams$ExternalReadWriteStream.enclosingMixin = this;
  this.$Streams$ExternalStream.enclosingMixin = this;
  this.$Streams$SeqCltnReadStream.enclosingMixin = this;
  this.$Streams$SeqCltnReadWriteStream.enclosingMixin = this;
  this.$Streams$TempTranscript.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Streams";
    this._$superInit$Streams = $.$superInit$Streams;
    this.$superInit$Streams = dnuCatcher("$superInit$Streams");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$usingCrLfConvention = $.$usingCrLfConvention;
    this.$usingCrLfConvention = dnuCatcher("$usingCrLfConvention");
    this.$BasicInputStream = this._$BasicInputStream = $.$BasicInputStream;
    this.$BasicOutputStream = this._$BasicOutputStream = $.$BasicOutputStream;
    this._$BasicReadStream = $.$BasicReadStream;
    this.$BasicReadStream = dnuCatcher("$BasicReadStream");
    this._$BasicReadWriteStream = $.$BasicReadWriteStream;
    this.$BasicReadWriteStream = dnuCatcher("$BasicReadWriteStream");
    this._$CharacterInput = $.$CharacterInput;
    this.$CharacterInput = dnuCatcher("$CharacterInput");
    this._$CharacterInputConverter = $.$CharacterInputConverter;
    this.$CharacterInputConverter = dnuCatcher("$CharacterInputConverter");
    this.$CharacterInputOutputConverter = this._$CharacterInputOutputConverter = $.$CharacterInputOutputConverter;
    this._$CharacterOutput = $.$CharacterOutput;
    this.$CharacterOutput = dnuCatcher("$CharacterOutput");
    this._$CharacterOutputConverter = $.$CharacterOutputConverter;
    this.$CharacterOutputConverter = dnuCatcher("$CharacterOutputConverter");
    this.$CharacterReadConverter = this._$CharacterReadConverter = $.$CharacterReadConverter;
    this.$CharacterReadStream = this._$CharacterReadStream = $.$CharacterReadStream;
    this.$CharacterReadWriteStream = this._$CharacterReadWriteStream = $.$CharacterReadWriteStream;
    this._$ExternalInputStream = $.$ExternalInputStream;
    this.$ExternalInputStream = dnuCatcher("$ExternalInputStream");
    this.$ExternalOutputStream = this._$ExternalOutputStream = $.$ExternalOutputStream;
    this.$ExternalReadStream = this._$ExternalReadStream = $.$ExternalReadStream;
    this.$ExternalReadWriteStream = this._$ExternalReadWriteStream = $.$ExternalReadWriteStream;
    this._$ExternalStream = $.$ExternalStream;
    this.$ExternalStream = dnuCatcher("$ExternalStream");
    this.$SeqCltnReadStream = this._$SeqCltnReadStream = $.$SeqCltnReadStream;
    this.$SeqCltnReadWriteStream = this._$SeqCltnReadWriteStream = $.$SeqCltnReadWriteStream;
    this.$TempTranscript = this._$TempTranscript = $.$TempTranscript;
    this.$init$Streams$BasicInputStream$ = this._$init$Streams$BasicInputStream$ = $.$init$Streams$BasicInputStream$;
    this.$Streams$BasicInputStream = this._$Streams$BasicInputStream = $.$Streams$BasicInputStream;
    this.$Streams$BasicInputStream$ = this._$Streams$BasicInputStream$ = $.$Streams$BasicInputStream$;
    this.$init$Streams$BasicOutputStream$ = this._$init$Streams$BasicOutputStream$ = $.$init$Streams$BasicOutputStream$;
    this.$Streams$BasicOutputStream = this._$Streams$BasicOutputStream = $.$Streams$BasicOutputStream;
    this.$Streams$BasicOutputStream$ = this._$Streams$BasicOutputStream$ = $.$Streams$BasicOutputStream$;
    this.$init$Streams$BasicReadStream$ = this._$init$Streams$BasicReadStream$ = $.$init$Streams$BasicReadStream$;
    this.$Streams$BasicReadStream = this._$Streams$BasicReadStream = $.$Streams$BasicReadStream;
    this.$Streams$BasicReadStream$ = this._$Streams$BasicReadStream$ = $.$Streams$BasicReadStream$;
    this.$init$Streams$BasicReadWriteStream$ = this._$init$Streams$BasicReadWriteStream$ = $.$init$Streams$BasicReadWriteStream$;
    this.$Streams$BasicReadWriteStream = this._$Streams$BasicReadWriteStream = $.$Streams$BasicReadWriteStream;
    this.$Streams$BasicReadWriteStream$ = this._$Streams$BasicReadWriteStream$ = $.$Streams$BasicReadWriteStream$;
    this.$init$Streams$CharacterInput$ = this._$init$Streams$CharacterInput$ = $.$init$Streams$CharacterInput$;
    this.$Streams$CharacterInput = this._$Streams$CharacterInput = $.$Streams$CharacterInput;
    this.$Streams$CharacterInput$ = this._$Streams$CharacterInput$ = $.$Streams$CharacterInput$;
    this.$init$Streams$CharacterInputConverter$ = this._$init$Streams$CharacterInputConverter$ = $.$init$Streams$CharacterInputConverter$;
    this.$Streams$CharacterInputConverter = this._$Streams$CharacterInputConverter = $.$Streams$CharacterInputConverter;
    this.$Streams$CharacterInputConverter$ = this._$Streams$CharacterInputConverter$ = $.$Streams$CharacterInputConverter$;
    this.$init$Streams$CharacterInputOutputConverter$ = this._$init$Streams$CharacterInputOutputConverter$ = $.$init$Streams$CharacterInputOutputConverter$;
    this.$Streams$CharacterInputOutputConverter = this._$Streams$CharacterInputOutputConverter = $.$Streams$CharacterInputOutputConverter;
    this.$Streams$CharacterInputOutputConverter$ = this._$Streams$CharacterInputOutputConverter$ = $.$Streams$CharacterInputOutputConverter$;
    this.$init$Streams$CharacterOutput$ = this._$init$Streams$CharacterOutput$ = $.$init$Streams$CharacterOutput$;
    this.$Streams$CharacterOutput = this._$Streams$CharacterOutput = $.$Streams$CharacterOutput;
    this.$Streams$CharacterOutput$ = this._$Streams$CharacterOutput$ = $.$Streams$CharacterOutput$;
    this.$init$Streams$CharacterOutputConverter$ = this._$init$Streams$CharacterOutputConverter$ = $.$init$Streams$CharacterOutputConverter$;
    this.$Streams$CharacterOutputConverter = this._$Streams$CharacterOutputConverter = $.$Streams$CharacterOutputConverter;
    this.$Streams$CharacterOutputConverter$ = this._$Streams$CharacterOutputConverter$ = $.$Streams$CharacterOutputConverter$;
    this.$init$Streams$CharacterReadConverter$ = this._$init$Streams$CharacterReadConverter$ = $.$init$Streams$CharacterReadConverter$;
    this.$Streams$CharacterReadConverter = this._$Streams$CharacterReadConverter = $.$Streams$CharacterReadConverter;
    this.$Streams$CharacterReadConverter$ = this._$Streams$CharacterReadConverter$ = $.$Streams$CharacterReadConverter$;
    this.$init$Streams$CharacterReadStream$ = this._$init$Streams$CharacterReadStream$ = $.$init$Streams$CharacterReadStream$;
    this.$Streams$CharacterReadStream = this._$Streams$CharacterReadStream = $.$Streams$CharacterReadStream;
    this.$Streams$CharacterReadStream$ = this._$Streams$CharacterReadStream$ = $.$Streams$CharacterReadStream$;
    this.$init$Streams$CharacterReadWriteStream$ = this._$init$Streams$CharacterReadWriteStream$ = $.$init$Streams$CharacterReadWriteStream$;
    this.$Streams$CharacterReadWriteStream = this._$Streams$CharacterReadWriteStream = $.$Streams$CharacterReadWriteStream;
    this.$Streams$CharacterReadWriteStream$ = this._$Streams$CharacterReadWriteStream$ = $.$Streams$CharacterReadWriteStream$;
    this.$init$Streams$ExternalInputStream$ = this._$init$Streams$ExternalInputStream$ = $.$init$Streams$ExternalInputStream$;
    this.$Streams$ExternalInputStream = this._$Streams$ExternalInputStream = $.$Streams$ExternalInputStream;
    this.$Streams$ExternalInputStream$ = this._$Streams$ExternalInputStream$ = $.$Streams$ExternalInputStream$;
    this.$init$Streams$ExternalOutputStream$ = this._$init$Streams$ExternalOutputStream$ = $.$init$Streams$ExternalOutputStream$;
    this.$Streams$ExternalOutputStream = this._$Streams$ExternalOutputStream = $.$Streams$ExternalOutputStream;
    this.$Streams$ExternalOutputStream$ = this._$Streams$ExternalOutputStream$ = $.$Streams$ExternalOutputStream$;
    this.$init$Streams$ExternalReadStream$ = this._$init$Streams$ExternalReadStream$ = $.$init$Streams$ExternalReadStream$;
    this.$Streams$ExternalReadStream = this._$Streams$ExternalReadStream = $.$Streams$ExternalReadStream;
    this.$Streams$ExternalReadStream$ = this._$Streams$ExternalReadStream$ = $.$Streams$ExternalReadStream$;
    this.$init$Streams$ExternalReadWriteStream$ = this._$init$Streams$ExternalReadWriteStream$ = $.$init$Streams$ExternalReadWriteStream$;
    this.$Streams$ExternalReadWriteStream = this._$Streams$ExternalReadWriteStream = $.$Streams$ExternalReadWriteStream;
    this.$Streams$ExternalReadWriteStream$ = this._$Streams$ExternalReadWriteStream$ = $.$Streams$ExternalReadWriteStream$;
    this.$init$Streams$ExternalStream$ = this._$init$Streams$ExternalStream$ = $.$init$Streams$ExternalStream$;
    this.$Streams$ExternalStream = this._$Streams$ExternalStream = $.$Streams$ExternalStream;
    this.$Streams$ExternalStream$ = this._$Streams$ExternalStream$ = $.$Streams$ExternalStream$;
    this.$init$Streams$SeqCltnReadStream$ = this._$init$Streams$SeqCltnReadStream$ = $.$init$Streams$SeqCltnReadStream$;
    this.$Streams$SeqCltnReadStream = this._$Streams$SeqCltnReadStream = $.$Streams$SeqCltnReadStream;
    this.$Streams$SeqCltnReadStream$ = this._$Streams$SeqCltnReadStream$ = $.$Streams$SeqCltnReadStream$;
    this.$init$Streams$SeqCltnReadWriteStream$ = this._$init$Streams$SeqCltnReadWriteStream$ = $.$init$Streams$SeqCltnReadWriteStream$;
    this.$Streams$SeqCltnReadWriteStream = this._$Streams$SeqCltnReadWriteStream = $.$Streams$SeqCltnReadWriteStream;
    this.$Streams$SeqCltnReadWriteStream$ = this._$Streams$SeqCltnReadWriteStream$ = $.$Streams$SeqCltnReadWriteStream$;
    this.$init$Streams$TempTranscript$ = this._$init$Streams$TempTranscript$ = $.$init$Streams$TempTranscript$;
    this.$Streams$TempTranscript = this._$Streams$TempTranscript = $.$Streams$TempTranscript;
    this.$Streams$TempTranscript$ = this._$Streams$TempTranscript$ = $.$Streams$TempTranscript$;
    this.$enclosingObjects$Streams = enclosingObjects;
    this.$super$Streams$slot = runtimeSuperclass;
    this.Streams = function () {
     superBasicNew.call(this);
     this.$String$slot = nil;
     this.$BasicOutputReadStream$slot = nil;
     this.$CharacterSequenceReadStream$slot = nil;
     this.$CharacterIStream$slot = nil;
     this.$CharacterOStream$slot = nil;
     this.$CharacterSequenceReadWriteStream$slot = nil;
     this.$CharacterConverterWithOutput$slot = nil;
     this.$OutputInputConverter$slot = nil;
     this.$BasicIExStream$slot = nil;
     this.$EIStream$slot = nil;
     this.$ReadExternalOutputStream$slot = nil;
     this.$EOStream$slot = nil;
     this.$EIOStream$slot = nil;
     this.$Streams$BasicInputStream$slot = nil;
     this.$Streams$BasicOutputStream$slot = nil;
     this.$Streams$BasicReadStream$slot = nil;
     this.$Streams$BasicReadWriteStream$slot = nil;
     this.$Streams$CharacterInput$slot = nil;
     this.$Streams$CharacterInputConverter$slot = nil;
     this.$Streams$CharacterInputOutputConverter$slot = nil;
     this.$Streams$CharacterOutput$slot = nil;
     this.$Streams$CharacterOutputConverter$slot = nil;
     this.$Streams$CharacterReadConverter$slot = nil;
     this.$Streams$CharacterReadStream$slot = nil;
     this.$Streams$CharacterReadWriteStream$slot = nil;
     this.$Streams$ExternalInputStream$slot = nil;
     this.$Streams$ExternalOutputStream$slot = nil;
     this.$Streams$ExternalReadStream$slot = nil;
     this.$Streams$ExternalReadWriteStream$slot = nil;
     this.$Streams$ExternalStream$slot = nil;
     this.$Streams$SeqCltnReadStream$slot = nil;
     this.$Streams$SeqCltnReadWriteStream$slot = nil;
     this.$Streams$TempTranscript$slot = nil;
    };
    this.basicNew = this.Streams;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for Streams";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($platform) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Streams";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$Streams = enclosingObjects;
     this.$super$Streams = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$CombinatorialParsing = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for CombinatorialParsing";
  this.name = "CombinatorialParsing";
  this.header = 1460;
  this.slots = [
   new SM("OrderedCollection", false, false),
   new SM("Dictionary", false, false),
   new SM("ObjectMirror", false, false),
   new SM("CombinatorialParsing`AlternatingParser", true, true),
   new SM("CombinatorialParsing`CharParser", true, true),
   new SM("CombinatorialParsing`CollectingCommentParser", true, true),
   new SM("CombinatorialParsing`CombinatorialParser", true, true),
   new SM("CombinatorialParsing`CommentParser", true, true),
   new SM("CombinatorialParsing`EOIParser", true, true),
   new SM("CombinatorialParsing`EmptyParser", true, true),
   new SM("CombinatorialParsing`ExecutableGrammar", true, true),
   new SM("CombinatorialParsing`FailingParser", true, true),
   new SM("CombinatorialParsing`ForwardReferenceParser", true, true),
   new SM("CombinatorialParsing`ForwardingWrappingParser", true, true),
   new SM("CombinatorialParsing`NamedWrappingParser", true, true),
   new SM("CombinatorialParsing`NegatingParser", true, true),
   new SM("CombinatorialParsing`ParserContext", true, true),
   new SM("CombinatorialParsing`ParserError", true, true),
   new SM("CombinatorialParsing`ParserStream", true, true),
   new SM("CombinatorialParsing`PlusParser", true, true),
   new SM("CombinatorialParsing`PredicateTokenParser", true, true),
   new SM("CombinatorialParsing`SequentialParser", true, true),
   new SM("CombinatorialParsing`StarParser", true, true),
   new SM("CombinatorialParsing`SymbolicTokenParser", true, true),
   new SM("CombinatorialParsing`Token", true, true),
   new SM("CombinatorialParsing`TokenParser", true, true),
   new SM("CombinatorialParsing`TokenizingParser", true, true),
   new SM("CombinatorialParsing`WhitespaceParser", true, true),
   new SM("CombinatorialParsing`WrappingParser", true, true)
  ];
  this.methods = [
   new MM("superInit`CombinatorialParsing", true, 1461),
   new MM("instance`initializer", true, 1462),
   new MM("AlternatingParser", true, 0),
   new MM("CharParser", true, 0),
   new MM("CollectingCommentParser", true, 0),
   new MM("CombinatorialParser", true, 0),
   new MM("CommentParser", true, 0),
   new MM("EOIParser", true, 0),
   new MM("EmptyParser", true, 0),
   new MM("ExecutableGrammar", true, 0),
   new MM("FailingParser", true, 0),
   new MM("ForwardReferenceParser", true, 0),
   new MM("ForwardingWrappingParser", true, 0),
   new MM("NamedWrappingParser", true, 0),
   new MM("NegatingParser", true, 0),
   new MM("ParserContext", true, 0),
   new MM("ParserError", true, 0),
   new MM("ParserStream", true, 0),
   new MM("PlusParser", true, 0),
   new MM("PredicateTokenParser", true, 0),
   new MM("SequentialParser", true, 0),
   new MM("StarParser", true, 0),
   new MM("SymbolicTokenParser", true, 0),
   new MM("Token", true, 0),
   new MM("TokenParser", true, 0),
   new MM("TokenizingParser", true, 0),
   new MM("WhitespaceParser", true, 0),
   new MM("WrappingParser", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`Dictionary:", true, 0),
   new MM("Dictionary", true, 0),
   new MM("init`ObjectMirror:", true, 0),
   new MM("ObjectMirror", true, 0),
   new MM("init`CombinatorialParsing`AlternatingParser:", true, 0),
   new MM("CombinatorialParsing`AlternatingParser", true, 0),
   new MM("CombinatorialParsing`AlternatingParser:", true, 0),
   new MM("init`CombinatorialParsing`CharParser:", true, 0),
   new MM("CombinatorialParsing`CharParser", true, 0),
   new MM("CombinatorialParsing`CharParser:", true, 0),
   new MM("init`CombinatorialParsing`CollectingCommentParser:", true, 0),
   new MM("CombinatorialParsing`CollectingCommentParser", true, 0),
   new MM("CombinatorialParsing`CollectingCommentParser:", true, 0),
   new MM("init`CombinatorialParsing`CombinatorialParser:", true, 0),
   new MM("CombinatorialParsing`CombinatorialParser", true, 0),
   new MM("CombinatorialParsing`CombinatorialParser:", true, 0),
   new MM("init`CombinatorialParsing`CommentParser:", true, 0),
   new MM("CombinatorialParsing`CommentParser", true, 0),
   new MM("CombinatorialParsing`CommentParser:", true, 0),
   new MM("init`CombinatorialParsing`EOIParser:", true, 0),
   new MM("CombinatorialParsing`EOIParser", true, 0),
   new MM("CombinatorialParsing`EOIParser:", true, 0),
   new MM("init`CombinatorialParsing`EmptyParser:", true, 0),
   new MM("CombinatorialParsing`EmptyParser", true, 0),
   new MM("CombinatorialParsing`EmptyParser:", true, 0),
   new MM("init`CombinatorialParsing`ExecutableGrammar:", true, 0),
   new MM("CombinatorialParsing`ExecutableGrammar", true, 0),
   new MM("CombinatorialParsing`ExecutableGrammar:", true, 0),
   new MM("init`CombinatorialParsing`FailingParser:", true, 0),
   new MM("CombinatorialParsing`FailingParser", true, 0),
   new MM("CombinatorialParsing`FailingParser:", true, 0),
   new MM("init`CombinatorialParsing`ForwardReferenceParser:", true, 0),
   new MM("CombinatorialParsing`ForwardReferenceParser", true, 0),
   new MM("CombinatorialParsing`ForwardReferenceParser:", true, 0),
   new MM("init`CombinatorialParsing`ForwardingWrappingParser:", true, 0),
   new MM("CombinatorialParsing`ForwardingWrappingParser", true, 0),
   new MM("CombinatorialParsing`ForwardingWrappingParser:", true, 0),
   new MM("init`CombinatorialParsing`NamedWrappingParser:", true, 0),
   new MM("CombinatorialParsing`NamedWrappingParser", true, 0),
   new MM("CombinatorialParsing`NamedWrappingParser:", true, 0),
   new MM("init`CombinatorialParsing`NegatingParser:", true, 0),
   new MM("CombinatorialParsing`NegatingParser", true, 0),
   new MM("CombinatorialParsing`NegatingParser:", true, 0),
   new MM("init`CombinatorialParsing`ParserContext:", true, 0),
   new MM("CombinatorialParsing`ParserContext", true, 0),
   new MM("CombinatorialParsing`ParserContext:", true, 0),
   new MM("init`CombinatorialParsing`ParserError:", true, 0),
   new MM("CombinatorialParsing`ParserError", true, 0),
   new MM("CombinatorialParsing`ParserError:", true, 0),
   new MM("init`CombinatorialParsing`ParserStream:", true, 0),
   new MM("CombinatorialParsing`ParserStream", true, 0),
   new MM("CombinatorialParsing`ParserStream:", true, 0),
   new MM("init`CombinatorialParsing`PlusParser:", true, 0),
   new MM("CombinatorialParsing`PlusParser", true, 0),
   new MM("CombinatorialParsing`PlusParser:", true, 0),
   new MM("init`CombinatorialParsing`PredicateTokenParser:", true, 0),
   new MM("CombinatorialParsing`PredicateTokenParser", true, 0),
   new MM("CombinatorialParsing`PredicateTokenParser:", true, 0),
   new MM("init`CombinatorialParsing`SequentialParser:", true, 0),
   new MM("CombinatorialParsing`SequentialParser", true, 0),
   new MM("CombinatorialParsing`SequentialParser:", true, 0),
   new MM("init`CombinatorialParsing`StarParser:", true, 0),
   new MM("CombinatorialParsing`StarParser", true, 0),
   new MM("CombinatorialParsing`StarParser:", true, 0),
   new MM("init`CombinatorialParsing`SymbolicTokenParser:", true, 0),
   new MM("CombinatorialParsing`SymbolicTokenParser", true, 0),
   new MM("CombinatorialParsing`SymbolicTokenParser:", true, 0),
   new MM("init`CombinatorialParsing`Token:", true, 0),
   new MM("CombinatorialParsing`Token", true, 0),
   new MM("CombinatorialParsing`Token:", true, 0),
   new MM("init`CombinatorialParsing`TokenParser:", true, 0),
   new MM("CombinatorialParsing`TokenParser", true, 0),
   new MM("CombinatorialParsing`TokenParser:", true, 0),
   new MM("init`CombinatorialParsing`TokenizingParser:", true, 0),
   new MM("CombinatorialParsing`TokenizingParser", true, 0),
   new MM("CombinatorialParsing`TokenizingParser:", true, 0),
   new MM("init`CombinatorialParsing`WhitespaceParser:", true, 0),
   new MM("CombinatorialParsing`WhitespaceParser", true, 0),
   new MM("CombinatorialParsing`WhitespaceParser:", true, 0),
   new MM("init`CombinatorialParsing`WrappingParser:", true, 0),
   new MM("CombinatorialParsing`WrappingParser", true, 0),
   new MM("CombinatorialParsing`WrappingParser:", true, 0)
  ];
  this.nestedClasses = [
   "CombinatorialParsing`AlternatingParser",
   "CombinatorialParsing`CharParser",
   "CombinatorialParsing`CollectingCommentParser",
   "CombinatorialParsing`CombinatorialParser",
   "CombinatorialParsing`CommentParser",
   "CombinatorialParsing`EOIParser",
   "CombinatorialParsing`EmptyParser",
   "CombinatorialParsing`ExecutableGrammar",
   "CombinatorialParsing`FailingParser",
   "CombinatorialParsing`ForwardReferenceParser",
   "CombinatorialParsing`ForwardingWrappingParser",
   "CombinatorialParsing`NamedWrappingParser",
   "CombinatorialParsing`NegatingParser",
   "CombinatorialParsing`ParserContext",
   "CombinatorialParsing`ParserError",
   "CombinatorialParsing`ParserStream",
   "CombinatorialParsing`PlusParser",
   "CombinatorialParsing`PredicateTokenParser",
   "CombinatorialParsing`SequentialParser",
   "CombinatorialParsing`StarParser",
   "CombinatorialParsing`SymbolicTokenParser",
   "CombinatorialParsing`Token",
   "CombinatorialParsing`TokenParser",
   "CombinatorialParsing`TokenizingParser",
   "CombinatorialParsing`WhitespaceParser",
   "CombinatorialParsing`WrappingParser"
  ];
  this.applications = [];
  this.$superInit$CombinatorialParsing = function ($platform) {
   var self = this;
   self.$super$CombinatorialParsing$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   var self = this;
   self._$superInit$CombinatorialParsing($platform);
   $0.$init$OrderedCollection$(self, $platform.$collections().$OrderedCollection());
   $0.$init$Dictionary$(self, $platform.$collections().$Dictionary());
   $0.$init$ObjectMirror$(self, $platform.$mirrors().$ObjectMirror());
   return self;
  };
  this.$AlternatingParser = function () {
   if (nil === this.$CombinatorialParsing$AlternatingParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$AlternatingParser;
    this.$CombinatorialParsing$AlternatingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$AlternatingParser$slot;
  };
  this.$CharParser = function () {
   if (nil === this.$CombinatorialParsing$CharParser$slot) {
    var self = this;
    var superclass = self._$PredicateTokenParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$CharParser;
    this.$CombinatorialParsing$CharParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$CharParser$slot;
  };
  this.$CollectingCommentParser = function () {
   if (nil === this.$CombinatorialParsing$CollectingCommentParser$slot) {
    var self = this;
    var superclass = self._$CommentParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$CollectingCommentParser;
    this.$CombinatorialParsing$CollectingCommentParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$CollectingCommentParser$slot;
  };
  this.$CombinatorialParser = function () {
   if (nil === this.$CombinatorialParsing$CombinatorialParser$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$CombinatorialParser;
    this.$CombinatorialParsing$CombinatorialParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$CombinatorialParser$slot;
  };
  this.$CommentParser = function () {
   if (nil === this.$CombinatorialParsing$CommentParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$CommentParser;
    this.$CombinatorialParsing$CommentParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$CommentParser$slot;
  };
  this.$EOIParser = function () {
   if (nil === this.$CombinatorialParsing$EOIParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$EOIParser;
    this.$CombinatorialParsing$EOIParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$EOIParser$slot;
  };
  this.$EmptyParser = function () {
   if (nil === this.$CombinatorialParsing$EmptyParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$EmptyParser;
    this.$CombinatorialParsing$EmptyParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$EmptyParser$slot;
  };
  this.$ExecutableGrammar = function () {
   if (nil === this.$CombinatorialParsing$ExecutableGrammar$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$ExecutableGrammar;
    this.$CombinatorialParsing$ExecutableGrammar$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$ExecutableGrammar$slot;
  };
  this.$FailingParser = function () {
   if (nil === this.$CombinatorialParsing$FailingParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$FailingParser;
    this.$CombinatorialParsing$FailingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$FailingParser$slot;
  };
  this.$ForwardReferenceParser = function () {
   if (nil === this.$CombinatorialParsing$ForwardReferenceParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$ForwardReferenceParser;
    this.$CombinatorialParsing$ForwardReferenceParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$ForwardReferenceParser$slot;
  };
  this.$ForwardingWrappingParser = function () {
   if (nil === this.$CombinatorialParsing$ForwardingWrappingParser$slot) {
    var self = this;
    var superclass = self._$WrappingParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$ForwardingWrappingParser;
    this.$CombinatorialParsing$ForwardingWrappingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$ForwardingWrappingParser$slot;
  };
  this.$NamedWrappingParser = function () {
   if (nil === this.$CombinatorialParsing$NamedWrappingParser$slot) {
    var self = this;
    var superclass = self._$WrappingParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$NamedWrappingParser;
    this.$CombinatorialParsing$NamedWrappingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$NamedWrappingParser$slot;
  };
  this.$NegatingParser = function () {
   if (nil === this.$CombinatorialParsing$NegatingParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$NegatingParser;
    this.$CombinatorialParsing$NegatingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$NegatingParser$slot;
  };
  this.$ParserContext = function () {
   if (nil === this.$CombinatorialParsing$ParserContext$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$ParserContext;
    this.$CombinatorialParsing$ParserContext$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$ParserContext$slot;
  };
  this.$ParserError = function () {
   if (nil === this.$CombinatorialParsing$ParserError$slot) {
    var self = this;
    var superclass = self._$Error();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$ParserError;
    this.$CombinatorialParsing$ParserError$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$ParserError$slot;
  };
  this.$ParserStream = function () {
   if (nil === this.$CombinatorialParsing$ParserStream$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$ParserStream;
    this.$CombinatorialParsing$ParserStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$ParserStream$slot;
  };
  this.$PlusParser = function () {
   if (nil === this.$CombinatorialParsing$PlusParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$PlusParser;
    this.$CombinatorialParsing$PlusParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$PlusParser$slot;
  };
  this.$PredicateTokenParser = function () {
   if (nil === this.$CombinatorialParsing$PredicateTokenParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$PredicateTokenParser;
    this.$CombinatorialParsing$PredicateTokenParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$PredicateTokenParser$slot;
  };
  this.$SequentialParser = function () {
   if (nil === this.$CombinatorialParsing$SequentialParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$SequentialParser;
    this.$CombinatorialParsing$SequentialParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$SequentialParser$slot;
  };
  this.$StarParser = function () {
   if (nil === this.$CombinatorialParsing$StarParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$StarParser;
    this.$CombinatorialParsing$StarParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$StarParser$slot;
  };
  this.$SymbolicTokenParser = function () {
   if (nil === this.$CombinatorialParsing$SymbolicTokenParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$SymbolicTokenParser;
    this.$CombinatorialParsing$SymbolicTokenParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$SymbolicTokenParser$slot;
  };
  this.$Token = function () {
   if (nil === this.$CombinatorialParsing$Token$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$Token;
    this.$CombinatorialParsing$Token$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$Token$slot;
  };
  this.$TokenParser = function () {
   if (nil === this.$CombinatorialParsing$TokenParser$slot) {
    var self = this;
    var superclass = self._$PredicateTokenParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$TokenParser;
    this.$CombinatorialParsing$TokenParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$TokenParser$slot;
  };
  this.$TokenizingParser = function () {
   if (nil === this.$CombinatorialParsing$TokenizingParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$TokenizingParser;
    this.$CombinatorialParsing$TokenizingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$TokenizingParser$slot;
  };
  this.$WhitespaceParser = function () {
   if (nil === this.$CombinatorialParsing$WhitespaceParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$WhitespaceParser;
    this.$CombinatorialParsing$WhitespaceParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$WhitespaceParser$slot;
  };
  this.$WrappingParser = function () {
   if (nil === this.$CombinatorialParsing$WrappingParser$slot) {
    var self = this;
    var superclass = self._$CombinatorialParser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$CombinatorialParsing);
    var mixin = $.$CombinatorialParsing$WrappingParser;
    this.$CombinatorialParsing$WrappingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$CombinatorialParsing$WrappingParser$slot;
  };
  this.$init$OrderedCollection$ = function (self, v) {
   self.$OrderedCollection$slot = v;
   return self;
  };
  this.$OrderedCollection = function (self) {
   return self.$OrderedCollection$slot;
  };
  this.$init$Dictionary$ = function (self, v) {
   self.$Dictionary$slot = v;
   return self;
  };
  this.$Dictionary = function (self) {
   return self.$Dictionary$slot;
  };
  this.$init$ObjectMirror$ = function (self, v) {
   self.$ObjectMirror$slot = v;
   return self;
  };
  this.$ObjectMirror = function (self) {
   return self.$ObjectMirror$slot;
  };
  this.$init$CombinatorialParsing$AlternatingParser$ = function (v) {
   this.$CombinatorialParsing$AlternatingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$AlternatingParser = function () {
   return this.$CombinatorialParsing$AlternatingParser$slot;
  };
  this.$CombinatorialParsing$AlternatingParser$ = function (v) {
   this.$CombinatorialParsing$AlternatingParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$CharParser$ = function (v) {
   this.$CombinatorialParsing$CharParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$CharParser = function () {
   return this.$CombinatorialParsing$CharParser$slot;
  };
  this.$CombinatorialParsing$CharParser$ = function (v) {
   this.$CombinatorialParsing$CharParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$CollectingCommentParser$ = function (v) {
   this.$CombinatorialParsing$CollectingCommentParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$CollectingCommentParser = function () {
   return this.$CombinatorialParsing$CollectingCommentParser$slot;
  };
  this.$CombinatorialParsing$CollectingCommentParser$ = function (v) {
   this.$CombinatorialParsing$CollectingCommentParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$CombinatorialParser$ = function (v) {
   this.$CombinatorialParsing$CombinatorialParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$CombinatorialParser = function () {
   return this.$CombinatorialParsing$CombinatorialParser$slot;
  };
  this.$CombinatorialParsing$CombinatorialParser$ = function (v) {
   this.$CombinatorialParsing$CombinatorialParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$CommentParser$ = function (v) {
   this.$CombinatorialParsing$CommentParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$CommentParser = function () {
   return this.$CombinatorialParsing$CommentParser$slot;
  };
  this.$CombinatorialParsing$CommentParser$ = function (v) {
   this.$CombinatorialParsing$CommentParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$EOIParser$ = function (v) {
   this.$CombinatorialParsing$EOIParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$EOIParser = function () {
   return this.$CombinatorialParsing$EOIParser$slot;
  };
  this.$CombinatorialParsing$EOIParser$ = function (v) {
   this.$CombinatorialParsing$EOIParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$EmptyParser$ = function (v) {
   this.$CombinatorialParsing$EmptyParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$EmptyParser = function () {
   return this.$CombinatorialParsing$EmptyParser$slot;
  };
  this.$CombinatorialParsing$EmptyParser$ = function (v) {
   this.$CombinatorialParsing$EmptyParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$ExecutableGrammar$ = function (v) {
   this.$CombinatorialParsing$ExecutableGrammar$slot = v;
   return this;
  };
  this.$CombinatorialParsing$ExecutableGrammar = function () {
   return this.$CombinatorialParsing$ExecutableGrammar$slot;
  };
  this.$CombinatorialParsing$ExecutableGrammar$ = function (v) {
   this.$CombinatorialParsing$ExecutableGrammar$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$FailingParser$ = function (v) {
   this.$CombinatorialParsing$FailingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$FailingParser = function () {
   return this.$CombinatorialParsing$FailingParser$slot;
  };
  this.$CombinatorialParsing$FailingParser$ = function (v) {
   this.$CombinatorialParsing$FailingParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$ForwardReferenceParser$ = function (v) {
   this.$CombinatorialParsing$ForwardReferenceParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$ForwardReferenceParser = function () {
   return this.$CombinatorialParsing$ForwardReferenceParser$slot;
  };
  this.$CombinatorialParsing$ForwardReferenceParser$ = function (v) {
   this.$CombinatorialParsing$ForwardReferenceParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$ForwardingWrappingParser$ = function (v) {
   this.$CombinatorialParsing$ForwardingWrappingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$ForwardingWrappingParser = function () {
   return this.$CombinatorialParsing$ForwardingWrappingParser$slot;
  };
  this.$CombinatorialParsing$ForwardingWrappingParser$ = function (v) {
   this.$CombinatorialParsing$ForwardingWrappingParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$NamedWrappingParser$ = function (v) {
   this.$CombinatorialParsing$NamedWrappingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$NamedWrappingParser = function () {
   return this.$CombinatorialParsing$NamedWrappingParser$slot;
  };
  this.$CombinatorialParsing$NamedWrappingParser$ = function (v) {
   this.$CombinatorialParsing$NamedWrappingParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$NegatingParser$ = function (v) {
   this.$CombinatorialParsing$NegatingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$NegatingParser = function () {
   return this.$CombinatorialParsing$NegatingParser$slot;
  };
  this.$CombinatorialParsing$NegatingParser$ = function (v) {
   this.$CombinatorialParsing$NegatingParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$ParserContext$ = function (v) {
   this.$CombinatorialParsing$ParserContext$slot = v;
   return this;
  };
  this.$CombinatorialParsing$ParserContext = function () {
   return this.$CombinatorialParsing$ParserContext$slot;
  };
  this.$CombinatorialParsing$ParserContext$ = function (v) {
   this.$CombinatorialParsing$ParserContext$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$ParserError$ = function (v) {
   this.$CombinatorialParsing$ParserError$slot = v;
   return this;
  };
  this.$CombinatorialParsing$ParserError = function () {
   return this.$CombinatorialParsing$ParserError$slot;
  };
  this.$CombinatorialParsing$ParserError$ = function (v) {
   this.$CombinatorialParsing$ParserError$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$ParserStream$ = function (v) {
   this.$CombinatorialParsing$ParserStream$slot = v;
   return this;
  };
  this.$CombinatorialParsing$ParserStream = function () {
   return this.$CombinatorialParsing$ParserStream$slot;
  };
  this.$CombinatorialParsing$ParserStream$ = function (v) {
   this.$CombinatorialParsing$ParserStream$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$PlusParser$ = function (v) {
   this.$CombinatorialParsing$PlusParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$PlusParser = function () {
   return this.$CombinatorialParsing$PlusParser$slot;
  };
  this.$CombinatorialParsing$PlusParser$ = function (v) {
   this.$CombinatorialParsing$PlusParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$PredicateTokenParser$ = function (v) {
   this.$CombinatorialParsing$PredicateTokenParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$PredicateTokenParser = function () {
   return this.$CombinatorialParsing$PredicateTokenParser$slot;
  };
  this.$CombinatorialParsing$PredicateTokenParser$ = function (v) {
   this.$CombinatorialParsing$PredicateTokenParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$SequentialParser$ = function (v) {
   this.$CombinatorialParsing$SequentialParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$SequentialParser = function () {
   return this.$CombinatorialParsing$SequentialParser$slot;
  };
  this.$CombinatorialParsing$SequentialParser$ = function (v) {
   this.$CombinatorialParsing$SequentialParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$StarParser$ = function (v) {
   this.$CombinatorialParsing$StarParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$StarParser = function () {
   return this.$CombinatorialParsing$StarParser$slot;
  };
  this.$CombinatorialParsing$StarParser$ = function (v) {
   this.$CombinatorialParsing$StarParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$SymbolicTokenParser$ = function (v) {
   this.$CombinatorialParsing$SymbolicTokenParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$SymbolicTokenParser = function () {
   return this.$CombinatorialParsing$SymbolicTokenParser$slot;
  };
  this.$CombinatorialParsing$SymbolicTokenParser$ = function (v) {
   this.$CombinatorialParsing$SymbolicTokenParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$Token$ = function (v) {
   this.$CombinatorialParsing$Token$slot = v;
   return this;
  };
  this.$CombinatorialParsing$Token = function () {
   return this.$CombinatorialParsing$Token$slot;
  };
  this.$CombinatorialParsing$Token$ = function (v) {
   this.$CombinatorialParsing$Token$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$TokenParser$ = function (v) {
   this.$CombinatorialParsing$TokenParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$TokenParser = function () {
   return this.$CombinatorialParsing$TokenParser$slot;
  };
  this.$CombinatorialParsing$TokenParser$ = function (v) {
   this.$CombinatorialParsing$TokenParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$TokenizingParser$ = function (v) {
   this.$CombinatorialParsing$TokenizingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$TokenizingParser = function () {
   return this.$CombinatorialParsing$TokenizingParser$slot;
  };
  this.$CombinatorialParsing$TokenizingParser$ = function (v) {
   this.$CombinatorialParsing$TokenizingParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$WhitespaceParser$ = function (v) {
   this.$CombinatorialParsing$WhitespaceParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$WhitespaceParser = function () {
   return this.$CombinatorialParsing$WhitespaceParser$slot;
  };
  this.$CombinatorialParsing$WhitespaceParser$ = function (v) {
   this.$CombinatorialParsing$WhitespaceParser$slot = v;
   return this;
  };
  this.$init$CombinatorialParsing$WrappingParser$ = function (v) {
   this.$CombinatorialParsing$WrappingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$WrappingParser = function () {
   return this.$CombinatorialParsing$WrappingParser$slot;
  };
  this.$CombinatorialParsing$WrappingParser$ = function (v) {
   this.$CombinatorialParsing$WrappingParser$slot = v;
   return this;
  };
  this.$CombinatorialParsing$AlternatingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`AlternatingParser";
   this.name = "CombinatorialParsing`AlternatingParser";
   this.header = 1463;
   this.slots = [
    new SM("p", false, false),
    new SM("q", false, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`AlternatingParser", true, 1464),
    new MM("instance`initializer", true, 1465),
    new MM("parse:inContext:ifError:", false, 1466),
    new MM("combineErrors:and:at:with:", false, 1467),
    new MM("init`p:", true, 0),
    new MM("p", true, 0),
    new MM("init`q:", true, 0),
    new MM("q", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$AlternatingParser = function ($p_, $q_) {
    var self = this;
    self.$super$CombinatorialParsing$AlternatingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p_, $q_) {
    var self = this;
    self._$superInit$CombinatorialParsing$AlternatingParser($p_, $q_);
    self._$init$p$($p_);
    self._$init$q$($q_);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     var $rewindPosition = nil;
     $rewindPosition = $input.$position();
     return self._$p().$parse$inContext$ifError$($input, $context, function ($msg1, $pos1) {
      $input.$position$($rewindPosition);
      $context.$recordFailure$([
       $msg1,
       $pos1
      ]);
      {
       NLR.value = self._$q().$parse$inContext$ifError$($input, $context, function ($msg2, $pos2) {
        $context.$recordFailure$([
         $msg2,
         $pos2
        ]);
        if ($pos1.$$greater($pos2)) {
         {
          NLR.value = $blk.$value$value$($msg1, $pos1);
          throw NLR;
         };
        } else {
         nil;
        };
        if ($pos2.$$greater($pos1)) {
         {
          NLR.value = $blk.$value$value$($msg2, $pos2);
          throw NLR;
         };
        } else {
         nil;
        };
        {
         NLR.value = self._$combineErrors$and$at$with$($msg1, $msg2, $pos1, $blk);
         throw NLR;
        };
       });
       throw NLR;
      };
     });
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$combineErrors$and$at$with$ = function ($e1, $e2, $pos, $blk) {
    var self = this;
    var $or = nil;
    var $msg = nil;
    $or = ($e1.$$equal("") || $e2.$$equal("")).$ifTrue$ifFalse$(function () {
     return "";
    }, function () {
     return " or ";
    });
    $msg = $e1.$$equal($e2).$ifTrue$ifFalse$(function () {
     return $e1;
    }, function () {
     return $e1.$$comma($or).$$comma($e2);
    });
    return $blk.$value$value$($msg, $pos);
   };
   this.$init$p$ = function (v) {
    this.$p$slot = v;
    return this;
   };
   this.$p = function () {
    return this.$p$slot;
   };
   this.$init$q$ = function (v) {
    this.$q$slot = v;
    return this;
   };
   this.$q = function () {
    return this.$q$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`AlternatingParser";
     this._$superInit$CombinatorialParsing$AlternatingParser = $.$superInit$CombinatorialParsing$AlternatingParser;
     this.$superInit$CombinatorialParsing$AlternatingParser = dnuCatcher("$superInit$CombinatorialParsing$AlternatingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$combineErrors$and$at$with$ = $.$combineErrors$and$at$with$;
     this.$combineErrors$and$at$with$ = dnuCatcher("$combineErrors$and$at$with$");
     this._$init$p$ = $.$init$p$;
     this.$init$p$ = dnuCatcher("$init$p$");
     this._$p = $.$p;
     this.$p = dnuCatcher("$p");
     this._$init$q$ = $.$init$q$;
     this.$init$q$ = dnuCatcher("$init$q$");
     this._$q = $.$q;
     this.$q = dnuCatcher("$q");
     this.$enclosingObjects$CombinatorialParsing$AlternatingParser = enclosingObjects;
     this.$super$CombinatorialParsing$AlternatingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`AlternatingParser"] = function () {
      superBasicNew.call(this);
      this.$p$slot = nil;
      this.$q$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`AlternatingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`AlternatingParser";
    this.slots = [];
    this.methods = [new MM("either:or:", true, 0)];
    this.nestedClasses = [];
    this.$either$or$ = function ($p_, $q_) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p_, $q_);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`AlternatingParser";
      this.$either$or$ = this._$either$or$ = $.$either$or$;
      this.$enclosingObjects$CombinatorialParsing$AlternatingParser = enclosingObjects;
      this.$super$CombinatorialParsing$AlternatingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$CharParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`CharParser";
   this.name = "CombinatorialParsing`CharParser";
   this.header = 1468;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`CharParser", true, 1469),
    new MM("instance`initializer", true, 1470),
    new MM("for:", false, 1471)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$CharParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$CharParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$CharParser();
    return self;
   };
   this.$for$ = function ($token) {
    var self = this;
    var $rune = nil;
    $rune = $token.$runeAt$(1);
    return self._$accept$errorMsg$(function ($t) {
     return $t.$$equal($rune);
    }, $token.$asString().$$comma(" expected"));
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`CharParser";
     this._$superInit$CombinatorialParsing$CharParser = $.$superInit$CombinatorialParsing$CharParser;
     this.$superInit$CombinatorialParsing$CharParser = dnuCatcher("$superInit$CombinatorialParsing$CharParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$for$ = this._$for$ = $.$for$;
     this.$enclosingObjects$CombinatorialParsing$CharParser = enclosingObjects;
     this.$super$CombinatorialParsing$CharParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`CharParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`CharParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`CharParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`CharParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$CharParser = enclosingObjects;
      this.$super$CombinatorialParsing$CharParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$CollectingCommentParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`CollectingCommentParser";
   this.name = "CombinatorialParsing`CollectingCommentParser";
   this.header = 1472;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`CollectingCommentParser", true, 1473),
    new MM("instance`initializer", true, 1474),
    new MM("parse:inContext:ifError:", false, 1475)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$CollectingCommentParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$CollectingCommentParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$CollectingCommentParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var $comment = nil;
    var $char = nil;
    var $onFail = nil;
    $onFail = function () {
     return $blk.$value$value$("Premature end of input", $input.$position() - 1);
    };
    $comment = $0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$CollectingCommentParser[0]).$new();
    {
     nil;
     for (; !self._$termBlock().$value$($input); ) {
      if ($input.$atEnd()) {
       return $onFail;
      } else {
       nil;
      };
      $comment.$add$($input.$next());
     };
    };
    return $comment;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`CollectingCommentParser";
     this._$superInit$CombinatorialParsing$CollectingCommentParser = $.$superInit$CombinatorialParsing$CollectingCommentParser;
     this.$superInit$CombinatorialParsing$CollectingCommentParser = dnuCatcher("$superInit$CombinatorialParsing$CollectingCommentParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$CombinatorialParsing$CollectingCommentParser = enclosingObjects;
     this.$super$CombinatorialParsing$CollectingCommentParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`CollectingCommentParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`CollectingCommentParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`CollectingCommentParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`CollectingCommentParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$CollectingCommentParser = enclosingObjects;
      this.$super$CombinatorialParsing$CollectingCommentParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$CombinatorialParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`CombinatorialParser";
   this.name = "CombinatorialParsing`CombinatorialParser";
   this.header = 1476;
   this.slots = [new SM("name", true, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`CombinatorialParser", true, 1477),
    new MM("instance`initializer", true, 1478),
    new MM("assert:", false, 1479),
    new MM("isKindOfCombinatorialParser", false, 1480),
    new MM("parseString:", false, 1481),
    new MM("parseString:ifError:", false, 1482),
    new MM("printOn:", false, 1483),
    new MM("recordFailure:", false, 1484),
    new MM("ultimateParser", false, 1485),
    new MM("value", false, 1486),
    new MM("&", false, 1487),
    new MM(",", false, 1488),
    new MM("empty", false, 1489),
    new MM("eoi", false, 1490),
    new MM("fail", false, 1491),
    new MM("not", false, 1492),
    new MM("opt", false, 1493),
    new MM("plus", false, 1494),
    new MM("plusSeparatedBy:", false, 1495),
    new MM("plusSeparatedOrTerminatedBy:", false, 1496),
    new MM("star", false, 1497),
    new MM("starSeparatedBy:", false, 1498),
    new MM("starSeparatedOrTerminatedBy:", false, 1499),
    new MM("|", false, 1500),
    new MM("parse:", false, 1501),
    new MM("parse:ifError:", false, 1502),
    new MM("parse:ifErrorNoContext:", false, 1503),
    new MM("parse:inContext:ifError:", false, 1504),
    new MM("char:", false, 1505),
    new MM("charBetween:and:", false, 1506),
    new MM("comment", false, 1507),
    new MM("tokenFor:", false, 1508),
    new MM("tokenFromChar:", false, 1509),
    new MM("tokenFromSymbol:", false, 1510),
    new MM("whitespace", false, 1511),
    new MM("wrap:", false, 1512),
    new MM("wrap:name:", false, 1513),
    new MM("wrapper:", false, 1514),
    new MM("wrapper:name:", false, 1515),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$CombinatorialParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$CombinatorialParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$CombinatorialParser();
    return self;
   };
   this.$assert$ = function ($b) {
    var self = this;
    return self._$assert$message$($b, "Assertion failed");
   };
   this.$isKindOfCombinatorialParser = function () {
    var self = this;
    return true;
   };
   this.$parseString$ = function ($input) {
    var self = this;
    return self._$parse$(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$ParserStream().$over$($input));
   };
   this.$parseString$ifError$ = function ($input, $blk) {
    var self = this;
    return self._$parse$ifError$(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$ParserStream().$over$($input), $blk);
   };
   this.$printOn$ = function ($stream) {
    var self = this;
    if (self._$name().$isNil()) {
     self.$super$CombinatorialParsing$CombinatorialParser$slot._$printOn$.call(self, $stream);
    } else {
     $stream.$nextPutAll$(self._$name());
    };
    return self;
   };
   this.$recordFailure$ = function ($f) {
    var self = this;
    return self;
   };
   this.$ultimateParser = function () {
    var self = this;
    return self;
   };
   this.$value = function () {
    var self = this;
    return self;
   };
   this.$$amp = function ($p) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$SequentialParser().$withSubparsers$([
     self,
     $p
    ]);
   };
   this.$$comma = function ($p) {
    var self = this;
    return self._$$amp($p);
   };
   this.$empty = function () {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$EmptyParser().$new();
   };
   this.$eoi = function () {
    var self = this;
    return self._$tokenFor$(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$EOIParser().$new());
   };
   this.$fail = function () {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$FailingParser().$new();
   };
   this.$not = function () {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$NegatingParser().$withSubparser$(self);
   };
   this.$opt = function () {
    var self = this;
    return self._$$pipe(self._$empty());
   };
   this.$plus = function () {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$PlusParser().$withSubparser$(self);
   };
   this.$plusSeparatedBy$ = function ($separator) {
    var self = this;
    return self._$$amp($separator.$value().$$amp(self).$wrapper$(function ($s, $v) {
     return $v;
    }).$star()).$wrapper$(function ($fst, $rst) {
     var $results = nil;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addFirst$($fst);
      cascadeReceiver.$addAll$($rst);
      return cascadeReceiver.$yourself();
     })($0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]).$new());
    });
   };
   this.$plusSeparatedOrTerminatedBy$ = function ($separator) {
    var self = this;
    return self._$plusSeparatedBy$($separator).$$comma($separator.$value().$opt()).$wrapper$(function ($lst, $end) {
     return $lst;
    });
   };
   this.$star = function () {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$StarParser().$withSubparser$(self);
   };
   this.$starSeparatedBy$ = function ($separator) {
    var self = this;
    return self._$plusSeparatedBy$($separator).$opt().$wrap$(function ($rs) {
     return $rs.$isNil().$ifTrue$ifFalse$(function () {
      return $0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]).$new();
     }, function () {
      return $rs;
     });
    });
   };
   this.$starSeparatedOrTerminatedBy$ = function ($separator) {
    var self = this;
    return self._$plusSeparatedOrTerminatedBy$($separator).$opt().$wrap$(function ($rs) {
     return $rs.$isNil().$ifTrue$ifFalse$(function () {
      return $0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]).$new();
     }, function () {
      return $rs;
     });
    });
   };
   this.$$pipe = function ($p) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$AlternatingParser().$either$or$(self, $p);
   };
   this.$parse$ = function ($input) {
    var self = this;
    var NLR = new Object();
    try {
     return self._$parse$ifErrorNoContext$($input, function ($msg, $pos) {
      {
       NLR.value = self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$ParserError().$message$position$($msg, $pos).$signal();
       throw NLR;
      };
     });
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$parse$ifError$ = function ($input, $blk) {
    var self = this;
    "FLAG";
    return self._$parse$ifErrorNoContext$($input, $blk);
   };
   this.$parse$ifErrorNoContext$ = function ($input, $blk) {
    var self = this;
    return self._$parse$inContext$ifError$($input, self, $blk);
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$char$ = function ($c) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$CharParser().$new().$for$($c);
   };
   this.$charBetween$and$ = function ($c1, $c2) {
    var self = this;
    var $c1rune = nil;
    var $c2rune = nil;
    $c1rune = $c1.$runeAt$(1);
    $c2rune = $c2.$runeAt$(1);
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$PredicateTokenParser().$new().$accept$errorMsg$(function ($c) {
     return $c.$between$and$($c1rune, $c2rune);
    }, "character between ".$$comma($c1.$asString()).$$comma("and ").$$comma($c2.$asString()).$$comma("expected"));
   };
   this.$comment = function () {
    var self = this;
    return self._$fail();
   };
   this.$tokenFor$ = function ($p) {
    var self = this;
    return self._$whitespace().$$pipe(self._$comment()).$star().$$comma(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$TokenizingParser().$withSubparser$($p)).$wrapper$(function ($discardWhitespace, $t) {
     return $t;
    });
   };
   this.$tokenFromChar$ = function ($c) {
    var self = this;
    return self._$tokenFor$(self._$char$($c));
   };
   this.$tokenFromSymbol$ = function ($s) {
    var self = this;
    return self._$tokenFor$(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$SymbolicTokenParser().$new().$forSymbol$($s));
   };
   this.$whitespace = function () {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$WhitespaceParser().$new();
   };
   this.$wrap$ = function ($blk) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$WrappingParser().$new().$wrapParser$withWrapper$(self, $blk);
   };
   this.$wrap$name$ = function ($blk, $msg) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$NamedWrappingParser().$new().$wrapParser$withWrapper$(self, $blk).$name$($msg);
   };
   this.$wrapper$ = function ($blk) {
    var self = this;
    return self._$wrap$(function ($rs) {
     return $blk.$valueWithArguments$($rs.$isCollection().$ifTrue$ifFalse$(function () {
      return $rs.$asArray();
     }, function () {
      return [$rs];
     }));
    });
   };
   this.$wrapper$name$ = function ($blk, $msg) {
    var self = this;
    return self._$wrap$name$(function ($rs) {
     return $blk.$valueWithArguments$($rs.$isKindOfCollection().$ifTrue$ifFalse$(function () {
      return $rs.$asArray();
     }, function () {
      return self._$Array().$with$($rs);
     }));
    }, $msg);
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`CombinatorialParser";
     this._$superInit$CombinatorialParsing$CombinatorialParser = $.$superInit$CombinatorialParsing$CombinatorialParser;
     this.$superInit$CombinatorialParsing$CombinatorialParser = dnuCatcher("$superInit$CombinatorialParsing$CombinatorialParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$assert$ = $.$assert$;
     this.$assert$ = dnuCatcher("$assert$");
     this.$isKindOfCombinatorialParser = this._$isKindOfCombinatorialParser = $.$isKindOfCombinatorialParser;
     this.$parseString$ = this._$parseString$ = $.$parseString$;
     this.$parseString$ifError$ = this._$parseString$ifError$ = $.$parseString$ifError$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$recordFailure$ = this._$recordFailure$ = $.$recordFailure$;
     this.$ultimateParser = this._$ultimateParser = $.$ultimateParser;
     this.$value = this._$value = $.$value;
     this.$$amp = this._$$amp = $.$$amp;
     this.$$comma = this._$$comma = $.$$comma;
     this._$empty = $.$empty;
     this.$empty = dnuCatcher("$empty");
     this._$eoi = $.$eoi;
     this.$eoi = dnuCatcher("$eoi");
     this._$fail = $.$fail;
     this.$fail = dnuCatcher("$fail");
     this.$not = this._$not = $.$not;
     this.$opt = this._$opt = $.$opt;
     this.$plus = this._$plus = $.$plus;
     this.$plusSeparatedBy$ = this._$plusSeparatedBy$ = $.$plusSeparatedBy$;
     this.$plusSeparatedOrTerminatedBy$ = this._$plusSeparatedOrTerminatedBy$ = $.$plusSeparatedOrTerminatedBy$;
     this.$star = this._$star = $.$star;
     this.$starSeparatedBy$ = this._$starSeparatedBy$ = $.$starSeparatedBy$;
     this.$starSeparatedOrTerminatedBy$ = this._$starSeparatedOrTerminatedBy$ = $.$starSeparatedOrTerminatedBy$;
     this.$$pipe = this._$$pipe = $.$$pipe;
     this.$parse$ = this._$parse$ = $.$parse$;
     this.$parse$ifError$ = this._$parse$ifError$ = $.$parse$ifError$;
     this.$parse$ifErrorNoContext$ = this._$parse$ifErrorNoContext$ = $.$parse$ifErrorNoContext$;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$char$ = $.$char$;
     this.$char$ = dnuCatcher("$char$");
     this._$charBetween$and$ = $.$charBetween$and$;
     this.$charBetween$and$ = dnuCatcher("$charBetween$and$");
     this._$comment = $.$comment;
     this.$comment = dnuCatcher("$comment");
     this._$tokenFor$ = $.$tokenFor$;
     this.$tokenFor$ = dnuCatcher("$tokenFor$");
     this._$tokenFromChar$ = $.$tokenFromChar$;
     this.$tokenFromChar$ = dnuCatcher("$tokenFromChar$");
     this._$tokenFromSymbol$ = $.$tokenFromSymbol$;
     this.$tokenFromSymbol$ = dnuCatcher("$tokenFromSymbol$");
     this.$whitespace = this._$whitespace = $.$whitespace;
     this.$wrap$ = this._$wrap$ = $.$wrap$;
     this.$wrap$name$ = this._$wrap$name$ = $.$wrap$name$;
     this.$wrapper$ = this._$wrapper$ = $.$wrapper$;
     this.$wrapper$name$ = this._$wrapper$name$ = $.$wrapper$name$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$enclosingObjects$CombinatorialParsing$CombinatorialParser = enclosingObjects;
     this.$super$CombinatorialParsing$CombinatorialParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`CombinatorialParser"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`CombinatorialParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`CombinatorialParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`CombinatorialParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$CombinatorialParser = enclosingObjects;
      this.$super$CombinatorialParsing$CombinatorialParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$CommentParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`CommentParser";
   this.name = "CombinatorialParsing`CommentParser";
   this.header = 1516;
   this.slots = [new SM("termBlock", true, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`CommentParser", true, 1517),
    new MM("instance`initializer", true, 1518),
    new MM("parse:inContext:ifError:", false, 1519),
    new MM("init`termBlock:", true, 0),
    new MM("termBlock", true, 0),
    new MM("termBlock:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$CommentParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$CommentParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$CommentParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    {
     nil;
     for (; !self._$termBlock().$value$($input); ) {
      $input.$nextIfAbsent$(function () {
       return $blk.$value$value$("Premature end of input", $input.$position() - 1);
      });
     };
    };
    return self;
   };
   this.$init$termBlock$ = function (v) {
    this.$termBlock$slot = v;
    return this;
   };
   this.$termBlock = function () {
    return this.$termBlock$slot;
   };
   this.$termBlock$ = function (v) {
    this.$termBlock$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`CommentParser";
     this._$superInit$CombinatorialParsing$CommentParser = $.$superInit$CombinatorialParsing$CommentParser;
     this.$superInit$CombinatorialParsing$CommentParser = dnuCatcher("$superInit$CombinatorialParsing$CommentParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$init$termBlock$ = this._$init$termBlock$ = $.$init$termBlock$;
     this.$termBlock = this._$termBlock = $.$termBlock;
     this.$termBlock$ = this._$termBlock$ = $.$termBlock$;
     this.$enclosingObjects$CombinatorialParsing$CommentParser = enclosingObjects;
     this.$super$CombinatorialParsing$CommentParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`CommentParser"] = function () {
      superBasicNew.call(this);
      this.$termBlock$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`CommentParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`CommentParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`CommentParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$CommentParser = enclosingObjects;
      this.$super$CombinatorialParsing$CommentParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$EOIParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`EOIParser";
   this.name = "CombinatorialParsing`EOIParser";
   this.header = 1520;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`EOIParser", true, 1521),
    new MM("instance`initializer", true, 1522),
    new MM("parse:inContext:ifError:", false, 1523)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$EOIParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$EOIParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$EOIParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    if ($input.$atEnd()) {
     return true;
    } else {
     $blk.$value$value$("Unexpected input", $input.$position() + 1);
    };
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`EOIParser";
     this._$superInit$CombinatorialParsing$EOIParser = $.$superInit$CombinatorialParsing$EOIParser;
     this.$superInit$CombinatorialParsing$EOIParser = dnuCatcher("$superInit$CombinatorialParsing$EOIParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$CombinatorialParsing$EOIParser = enclosingObjects;
     this.$super$CombinatorialParsing$EOIParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`EOIParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`EOIParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`EOIParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`EOIParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$EOIParser = enclosingObjects;
      this.$super$CombinatorialParsing$EOIParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$EmptyParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`EmptyParser";
   this.name = "CombinatorialParsing`EmptyParser";
   this.header = 1524;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`EmptyParser", true, 1525),
    new MM("instance`initializer", true, 1526),
    new MM("parse:inContext:ifError:", false, 1527)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$EmptyParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$EmptyParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$EmptyParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return nil;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`EmptyParser";
     this._$superInit$CombinatorialParsing$EmptyParser = $.$superInit$CombinatorialParsing$EmptyParser;
     this.$superInit$CombinatorialParsing$EmptyParser = dnuCatcher("$superInit$CombinatorialParsing$EmptyParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$CombinatorialParsing$EmptyParser = enclosingObjects;
     this.$super$CombinatorialParsing$EmptyParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`EmptyParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`EmptyParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`EmptyParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`EmptyParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$EmptyParser = enclosingObjects;
      this.$super$CombinatorialParsing$EmptyParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$ExecutableGrammar = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`ExecutableGrammar";
   this.name = "CombinatorialParsing`ExecutableGrammar";
   this.header = 1528;
   this.slots = [
    new SM("forwardReferenceTable", true, false),
    new SM("selfMirror", false, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`ExecutableGrammar", true, 1529),
    new MM("instance`initializer", true, 1530),
    new MM("nameProductions", false, 1531),
    new MM("bindForwardReferences", false, 1532),
    new MM("finalBindForwardReferences", false, 1533),
    new MM("setupForwardReferences", false, 1534),
    new MM("init`forwardReferenceTable:", true, 0),
    new MM("forwardReferenceTable", true, 0),
    new MM("forwardReferenceTable:", true, 0),
    new MM("init`selfMirror:", true, 0),
    new MM("selfMirror", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$ExecutableGrammar = function () {
    var self = this;
    self.$super$CombinatorialParsing$ExecutableGrammar$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$ExecutableGrammar();
    self._$init$forwardReferenceTable$($0.$Dictionary(self.$enclosingObjects$CombinatorialParsing$ExecutableGrammar[0]).$new());
    self._$init$selfMirror$($0.$ObjectMirror(self.$enclosingObjects$CombinatorialParsing$ExecutableGrammar[0]).$reflecting$(self));
    self._$setupForwardReferences();
    self._$bindForwardReferences();
    return self;
   };
   this.$nameProductions = function () {
    var self = this;
    self._$selfMirror().$getClass().$slots().$do$(function ($slot) {
     var $parser = nil;
     $parser = self._$selfMirror().$getSlot$($slot.$simpleName()).$reflectee();
     return $parser.$isKindOfCombinatorialParser().$ifTrue$(function () {
      return $parser.$name$($slot.$name());
     });
    });
    return self;
   };
   this.$bindForwardReferences = function () {
    var self = this;
    self._$forwardReferenceTable().$keysAndValuesDo$(function ($k, $v) {
     return $v.$bindingRoutine$(function () {
      return self._$finalBindForwardReferences();
     });
    });
    return self;
   };
   this.$finalBindForwardReferences = function () {
    var self = this;
    self._$forwardReferenceTable().$keysAndValuesDo$(function ($k, $v) {
     var $p = nil;
     $p = self._$selfMirror().$getSlot$($k.$asSymbol()).$reflectee();
     return $p.$isKindOfCombinatorialParser().$ifTrue$(function () {
      $v.$bind$($p);
      return $p.$name$($k);
     });
    });
    return self;
   };
   this.$setupForwardReferences = function () {
    var self = this;
    self._$selfMirror().$getClass().$slots().$do$(function ($slot) {
     var $fref = nil;
     var $iv = nil;
     $iv = $slot.$name();
     $fref = self.$enclosingObjects$CombinatorialParsing$ExecutableGrammar[0]._$ForwardReferenceParser().$new();
     return self._$selfMirror().$getSlot$($iv).$reflectee().$isNil().$ifTrue$(function () {
      self._$forwardReferenceTable().$at$put$($iv, $fref);
      return self._$selfMirror().$setSlot$to$($iv, $fref);
     });
    });
    return self;
   };
   this.$init$forwardReferenceTable$ = function (v) {
    this.$forwardReferenceTable$slot = v;
    return this;
   };
   this.$forwardReferenceTable = function () {
    return this.$forwardReferenceTable$slot;
   };
   this.$forwardReferenceTable$ = function (v) {
    this.$forwardReferenceTable$slot = v;
    return this;
   };
   this.$init$selfMirror$ = function (v) {
    this.$selfMirror$slot = v;
    return this;
   };
   this.$selfMirror = function () {
    return this.$selfMirror$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`ExecutableGrammar";
     this._$superInit$CombinatorialParsing$ExecutableGrammar = $.$superInit$CombinatorialParsing$ExecutableGrammar;
     this.$superInit$CombinatorialParsing$ExecutableGrammar = dnuCatcher("$superInit$CombinatorialParsing$ExecutableGrammar");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$nameProductions = this._$nameProductions = $.$nameProductions;
     this._$bindForwardReferences = $.$bindForwardReferences;
     this.$bindForwardReferences = dnuCatcher("$bindForwardReferences");
     this._$finalBindForwardReferences = $.$finalBindForwardReferences;
     this.$finalBindForwardReferences = dnuCatcher("$finalBindForwardReferences");
     this._$setupForwardReferences = $.$setupForwardReferences;
     this.$setupForwardReferences = dnuCatcher("$setupForwardReferences");
     this._$init$forwardReferenceTable$ = $.$init$forwardReferenceTable$;
     this.$init$forwardReferenceTable$ = dnuCatcher("$init$forwardReferenceTable$");
     this._$forwardReferenceTable = $.$forwardReferenceTable;
     this.$forwardReferenceTable = dnuCatcher("$forwardReferenceTable");
     this._$forwardReferenceTable$ = $.$forwardReferenceTable$;
     this.$forwardReferenceTable$ = dnuCatcher("$forwardReferenceTable$");
     this._$init$selfMirror$ = $.$init$selfMirror$;
     this.$init$selfMirror$ = dnuCatcher("$init$selfMirror$");
     this._$selfMirror = $.$selfMirror;
     this.$selfMirror = dnuCatcher("$selfMirror");
     this.$enclosingObjects$CombinatorialParsing$ExecutableGrammar = enclosingObjects;
     this.$super$CombinatorialParsing$ExecutableGrammar$slot = runtimeSuperclass;
     this["CombinatorialParsing`ExecutableGrammar"] = function () {
      superBasicNew.call(this);
      this.$forwardReferenceTable$slot = nil;
      this.$selfMirror$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`ExecutableGrammar"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`ExecutableGrammar";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`ExecutableGrammar";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$ExecutableGrammar = enclosingObjects;
      this.$super$CombinatorialParsing$ExecutableGrammar = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$FailingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`FailingParser";
   this.name = "CombinatorialParsing`FailingParser";
   this.header = 1535;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`FailingParser", true, 1536),
    new MM("instance`initializer", true, 1537),
    new MM("parse:inContext:ifError:", false, 1538)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$FailingParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$FailingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$FailingParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return $blk.$value$value$("Failing Parser invoked", $input.$position());
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`FailingParser";
     this._$superInit$CombinatorialParsing$FailingParser = $.$superInit$CombinatorialParsing$FailingParser;
     this.$superInit$CombinatorialParsing$FailingParser = dnuCatcher("$superInit$CombinatorialParsing$FailingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$CombinatorialParsing$FailingParser = enclosingObjects;
     this.$super$CombinatorialParsing$FailingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`FailingParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`FailingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`FailingParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`FailingParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$FailingParser = enclosingObjects;
      this.$super$CombinatorialParsing$FailingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$ForwardReferenceParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`ForwardReferenceParser";
   this.name = "CombinatorialParsing`ForwardReferenceParser";
   this.header = 1539;
   this.slots = [
    new SM("forwardee", true, false),
    new SM("bindingRoutine", true, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`ForwardReferenceParser", true, 1540),
    new MM("instance`initializer", true, 1541),
    new MM("bind:", false, 1542),
    new MM("parserToForwardTo", false, 1543),
    new MM("ultimateParser", false, 1544),
    new MM("&", false, 1545),
    new MM("opt", false, 1546),
    new MM("wrapper:", false, 1547),
    new MM("|", false, 1548),
    new MM("parse:inContext:ifError:", false, 1549),
    new MM("init`forwardee:", true, 0),
    new MM("forwardee", true, 0),
    new MM("forwardee:", true, 0),
    new MM("init`bindingRoutine:", true, 0),
    new MM("bindingRoutine", true, 0),
    new MM("bindingRoutine:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$ForwardReferenceParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$ForwardReferenceParser();
    return self;
   };
   this.$bind$ = function ($p) {
    var self = this;
    if ($p.$isKindOfCombinatorialParser()) {
     self._$forwardee$($p);
    } else {
     nil;
    };
    return self;
   };
   this.$parserToForwardTo = function () {
    var self = this;
    if (self._$forwardee().$isNil()) {
     self._$bindingRoutine().$value();
    } else {
     nil;
    };
    return self._$forwardee();
   };
   this.$ultimateParser = function () {
    var self = this;
    return self._$parserToForwardTo().$ultimateParser();
   };
   this.$$amp = function ($p) {
    var self = this;
    return self._$forwardee().$isNil().$ifTrue$ifFalse$(function () {
     return self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$$amp.call(self, $p);
    }, function () {
     return self._$forwardee().$$amp($p);
    });
   };
   this.$opt = function () {
    var self = this;
    return self._$forwardee().$isNil().$ifTrue$ifFalse$(function () {
     return self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$opt.call(self);
    }, function () {
     return self._$forwardee().$opt();
    });
   };
   this.$wrapper$ = function ($blk) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$ForwardReferenceParser[0]._$ForwardingWrappingParser().$new().$wrapParser$withWrapper$(self, $blk);
   };
   this.$$pipe = function ($p) {
    var self = this;
    return self._$forwardee().$isNil().$ifTrue$ifFalse$(function () {
     return self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$$pipe.call(self, $p);
    }, function () {
     return self._$forwardee().$$pipe($p);
    });
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return self._$parserToForwardTo().$parse$inContext$ifError$($input, $context, $blk);
   };
   this.$init$forwardee$ = function (v) {
    this.$forwardee$slot = v;
    return this;
   };
   this.$forwardee = function () {
    return this.$forwardee$slot;
   };
   this.$forwardee$ = function (v) {
    this.$forwardee$slot = v;
    return this;
   };
   this.$init$bindingRoutine$ = function (v) {
    this.$bindingRoutine$slot = v;
    return this;
   };
   this.$bindingRoutine = function () {
    return this.$bindingRoutine$slot;
   };
   this.$bindingRoutine$ = function (v) {
    this.$bindingRoutine$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`ForwardReferenceParser";
     this._$superInit$CombinatorialParsing$ForwardReferenceParser = $.$superInit$CombinatorialParsing$ForwardReferenceParser;
     this.$superInit$CombinatorialParsing$ForwardReferenceParser = dnuCatcher("$superInit$CombinatorialParsing$ForwardReferenceParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$bind$ = this._$bind$ = $.$bind$;
     this.$parserToForwardTo = this._$parserToForwardTo = $.$parserToForwardTo;
     this.$ultimateParser = this._$ultimateParser = $.$ultimateParser;
     this.$$amp = this._$$amp = $.$$amp;
     this.$opt = this._$opt = $.$opt;
     this.$wrapper$ = this._$wrapper$ = $.$wrapper$;
     this.$$pipe = this._$$pipe = $.$$pipe;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$forwardee$ = $.$init$forwardee$;
     this.$init$forwardee$ = dnuCatcher("$init$forwardee$");
     this._$forwardee = $.$forwardee;
     this.$forwardee = dnuCatcher("$forwardee");
     this._$forwardee$ = $.$forwardee$;
     this.$forwardee$ = dnuCatcher("$forwardee$");
     this.$init$bindingRoutine$ = this._$init$bindingRoutine$ = $.$init$bindingRoutine$;
     this.$bindingRoutine = this._$bindingRoutine = $.$bindingRoutine;
     this.$bindingRoutine$ = this._$bindingRoutine$ = $.$bindingRoutine$;
     this.$enclosingObjects$CombinatorialParsing$ForwardReferenceParser = enclosingObjects;
     this.$super$CombinatorialParsing$ForwardReferenceParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`ForwardReferenceParser"] = function () {
      superBasicNew.call(this);
      this.$forwardee$slot = nil;
      this.$bindingRoutine$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`ForwardReferenceParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`ForwardReferenceParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`ForwardReferenceParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$ForwardReferenceParser = enclosingObjects;
      this.$super$CombinatorialParsing$ForwardReferenceParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$ForwardingWrappingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`ForwardingWrappingParser";
   this.name = "CombinatorialParsing`ForwardingWrappingParser";
   this.header = 1550;
   this.slots = [new SM("wrappingParser", true, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`ForwardingWrappingParser", true, 1551),
    new MM("instance`initializer", true, 1552),
    new MM("parse:inContext:ifError:", false, 1553),
    new MM("trueWrappingParser", false, 1554),
    new MM("init`wrappingParser:", true, 0),
    new MM("wrappingParser", true, 0),
    new MM("wrappingParser:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$ForwardingWrappingParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$ForwardingWrappingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$ForwardingWrappingParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return self._$trueWrappingParser().$parse$inContext$ifError$($input, $context, $blk);
   };
   this.$trueWrappingParser = function () {
    var self = this;
    if (self._$wrappingParser().$isNil()) {
     self._$wrappingParser$(self._$parser().$ultimateParser().$wrapper$(self._$wrapperBlock()));
    } else {
     nil;
    };
    return self._$wrappingParser();
   };
   this.$init$wrappingParser$ = function (v) {
    this.$wrappingParser$slot = v;
    return this;
   };
   this.$wrappingParser = function () {
    return this.$wrappingParser$slot;
   };
   this.$wrappingParser$ = function (v) {
    this.$wrappingParser$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`ForwardingWrappingParser";
     this._$superInit$CombinatorialParsing$ForwardingWrappingParser = $.$superInit$CombinatorialParsing$ForwardingWrappingParser;
     this.$superInit$CombinatorialParsing$ForwardingWrappingParser = dnuCatcher("$superInit$CombinatorialParsing$ForwardingWrappingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$trueWrappingParser = $.$trueWrappingParser;
     this.$trueWrappingParser = dnuCatcher("$trueWrappingParser");
     this._$init$wrappingParser$ = $.$init$wrappingParser$;
     this.$init$wrappingParser$ = dnuCatcher("$init$wrappingParser$");
     this._$wrappingParser = $.$wrappingParser;
     this.$wrappingParser = dnuCatcher("$wrappingParser");
     this._$wrappingParser$ = $.$wrappingParser$;
     this.$wrappingParser$ = dnuCatcher("$wrappingParser$");
     this.$enclosingObjects$CombinatorialParsing$ForwardingWrappingParser = enclosingObjects;
     this.$super$CombinatorialParsing$ForwardingWrappingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`ForwardingWrappingParser"] = function () {
      superBasicNew.call(this);
      this.$wrappingParser$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`ForwardingWrappingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`ForwardingWrappingParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`ForwardingWrappingParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$ForwardingWrappingParser = enclosingObjects;
      this.$super$CombinatorialParsing$ForwardingWrappingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$NamedWrappingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`NamedWrappingParser";
   this.name = "CombinatorialParsing`NamedWrappingParser";
   this.header = 1555;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`NamedWrappingParser", true, 1556),
    new MM("instance`initializer", true, 1557),
    new MM("parse:inContext:ifError:", false, 1558)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$NamedWrappingParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$NamedWrappingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$NamedWrappingParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return self._$wrapperBlock().$value$(self._$parser().$parse$inContext$ifError$($input, self, $blk));
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`NamedWrappingParser";
     this._$superInit$CombinatorialParsing$NamedWrappingParser = $.$superInit$CombinatorialParsing$NamedWrappingParser;
     this.$superInit$CombinatorialParsing$NamedWrappingParser = dnuCatcher("$superInit$CombinatorialParsing$NamedWrappingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$CombinatorialParsing$NamedWrappingParser = enclosingObjects;
     this.$super$CombinatorialParsing$NamedWrappingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`NamedWrappingParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`NamedWrappingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`NamedWrappingParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`NamedWrappingParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$NamedWrappingParser = enclosingObjects;
      this.$super$CombinatorialParsing$NamedWrappingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$NegatingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`NegatingParser";
   this.name = "CombinatorialParsing`NegatingParser";
   this.header = 1559;
   this.slots = [new SM("subparser", false, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`NegatingParser", true, 1560),
    new MM("instance`initializer", true, 1561),
    new MM("parse:inContext:ifError:", false, 1562),
    new MM("init`subparser:", true, 0),
    new MM("subparser", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$NegatingParser = function ($p) {
    var self = this;
    self.$super$CombinatorialParsing$NegatingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p) {
    var self = this;
    self._$superInit$CombinatorialParsing$NegatingParser($p);
    self._$init$subparser$($p);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $ctxt, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     var $rewindPosition = nil;
     $rewindPosition = $input.$position();
     self._$subparser().$parse$inContext$ifError$($input, $ctxt, function ($msg, $pos) {
      $input.$position$($rewindPosition);
      {
       NLR.value = true;
       throw NLR;
      };
     });
     $blk.$value$value$("not combinator failed", $rewindPosition);
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$init$subparser$ = function (v) {
    this.$subparser$slot = v;
    return this;
   };
   this.$subparser = function () {
    return this.$subparser$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`NegatingParser";
     this._$superInit$CombinatorialParsing$NegatingParser = $.$superInit$CombinatorialParsing$NegatingParser;
     this.$superInit$CombinatorialParsing$NegatingParser = dnuCatcher("$superInit$CombinatorialParsing$NegatingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$subparser$ = $.$init$subparser$;
     this.$init$subparser$ = dnuCatcher("$init$subparser$");
     this._$subparser = $.$subparser;
     this.$subparser = dnuCatcher("$subparser");
     this.$enclosingObjects$CombinatorialParsing$NegatingParser = enclosingObjects;
     this.$super$CombinatorialParsing$NegatingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`NegatingParser"] = function () {
      superBasicNew.call(this);
      this.$subparser$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`NegatingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`NegatingParser";
    this.slots = [];
    this.methods = [new MM("withSubparser:", true, 0)];
    this.nestedClasses = [];
    this.$withSubparser$ = function ($p) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`NegatingParser";
      this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
      this.$enclosingObjects$CombinatorialParsing$NegatingParser = enclosingObjects;
      this.$super$CombinatorialParsing$NegatingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$ParserContext = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`ParserContext";
   this.name = "CombinatorialParsing`ParserContext";
   this.header = 1563;
   this.slots = [new SM("failures", true, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`ParserContext", true, 1564),
    new MM("instance`initializer", true, 1565),
    new MM("errorMessage", false, 1566),
    new MM("errorPosition", false, 1567),
    new MM("recordFailure:", false, 1568),
    new MM("init`failures:", true, 0),
    new MM("failures", true, 0),
    new MM("failures:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$ParserContext = function () {
    var self = this;
    self.$super$CombinatorialParsing$ParserContext$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$ParserContext();
    self._$init$failures$($0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$ParserContext[0]).$new());
    return self;
   };
   this.$errorMessage = function () {
    var self = this;
    if (self._$failures().$isEmpty()) {
     return "";
    } else {
     nil;
    };
    return self._$failures().$last().$first();
   };
   this.$errorPosition = function () {
    var self = this;
    if (self._$failures().$isEmpty()) {
     return -1;
    } else {
     nil;
    };
    return self._$failures().$last().$last();
   };
   this.$recordFailure$ = function ($f) {
    var self = this;
    if (self._$failures().$isEmpty() || self._$failures().$last().$last().$$less$equal($f.$last())) {
     self._$failures().$addLast$($f);
    } else {
     nil;
    };
    return self;
   };
   this.$init$failures$ = function (v) {
    this.$failures$slot = v;
    return this;
   };
   this.$failures = function () {
    return this.$failures$slot;
   };
   this.$failures$ = function (v) {
    this.$failures$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`ParserContext";
     this._$superInit$CombinatorialParsing$ParserContext = $.$superInit$CombinatorialParsing$ParserContext;
     this.$superInit$CombinatorialParsing$ParserContext = dnuCatcher("$superInit$CombinatorialParsing$ParserContext");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$errorMessage = $.$errorMessage;
     this.$errorMessage = dnuCatcher("$errorMessage");
     this._$errorPosition = $.$errorPosition;
     this.$errorPosition = dnuCatcher("$errorPosition");
     this._$recordFailure$ = $.$recordFailure$;
     this.$recordFailure$ = dnuCatcher("$recordFailure$");
     this._$init$failures$ = $.$init$failures$;
     this.$init$failures$ = dnuCatcher("$init$failures$");
     this._$failures = $.$failures;
     this.$failures = dnuCatcher("$failures");
     this._$failures$ = $.$failures$;
     this.$failures$ = dnuCatcher("$failures$");
     this.$enclosingObjects$CombinatorialParsing$ParserContext = enclosingObjects;
     this.$super$CombinatorialParsing$ParserContext$slot = runtimeSuperclass;
     this["CombinatorialParsing`ParserContext"] = function () {
      superBasicNew.call(this);
      this.$failures$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`ParserContext"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`ParserContext";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`ParserContext";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$ParserContext = enclosingObjects;
      this.$super$CombinatorialParsing$ParserContext = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$ParserError = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`ParserError";
   this.name = "CombinatorialParsing`ParserError";
   this.header = 1569;
   this.slots = [
    new SM("message", false, false),
    new SM("position", false, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`ParserError", true, 1570),
    new MM("instance`initializer", true, 1571),
    new MM("description", false, 1572),
    new MM("init`message:", true, 0),
    new MM("message", true, 0),
    new MM("init`position:", true, 0),
    new MM("position", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$ParserError = function ($m, $p) {
    var self = this;
    self.$super$CombinatorialParsing$ParserError$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($m, $p) {
    var self = this;
    self._$superInit$CombinatorialParsing$ParserError($m, $p);
    self._$init$message$($m);
    self._$init$position$($p);
    return self;
   };
   this.$description = function () {
    var self = this;
    return "ParserError: ".$$comma(self._$message());
   };
   this.$init$message$ = function (v) {
    this.$message$slot = v;
    return this;
   };
   this.$message = function () {
    return this.$message$slot;
   };
   this.$init$position$ = function (v) {
    this.$position$slot = v;
    return this;
   };
   this.$position = function () {
    return this.$position$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`ParserError";
     this._$superInit$CombinatorialParsing$ParserError = $.$superInit$CombinatorialParsing$ParserError;
     this.$superInit$CombinatorialParsing$ParserError = dnuCatcher("$superInit$CombinatorialParsing$ParserError");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$description = this._$description = $.$description;
     this.$init$message$ = this._$init$message$ = $.$init$message$;
     this.$message = this._$message = $.$message;
     this.$init$position$ = this._$init$position$ = $.$init$position$;
     this.$position = this._$position = $.$position;
     this.$enclosingObjects$CombinatorialParsing$ParserError = enclosingObjects;
     this.$super$CombinatorialParsing$ParserError$slot = runtimeSuperclass;
     this["CombinatorialParsing`ParserError"] = function () {
      superBasicNew.call(this);
      this.$message$slot = nil;
      this.$position$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`ParserError"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`ParserError";
    this.slots = [];
    this.methods = [new MM("message:position:", true, 0)];
    this.nestedClasses = [];
    this.$message$position$ = function ($m, $p) {
     return (new this.nonMeta.basicNew()).$instance$initializer($m, $p);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`ParserError";
      this.$message$position$ = this._$message$position$ = $.$message$position$;
      this.$enclosingObjects$CombinatorialParsing$ParserError = enclosingObjects;
      this.$super$CombinatorialParsing$ParserError = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$ParserStream = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`ParserStream";
   this.name = "CombinatorialParsing`ParserStream";
   this.header = 1573;
   this.slots = [
    new SM("contents", false, false),
    new SM("position", true, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`ParserStream", true, 1574),
    new MM("instance`initializer", true, 1575),
    new MM("atEnd", false, 1576),
    new MM("next", false, 1577),
    new MM("peek", false, 1578),
    new MM("init`contents:", true, 0),
    new MM("contents", true, 0),
    new MM("init`position:", true, 0),
    new MM("position", true, 0),
    new MM("position:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$ParserStream = function ($string) {
    var self = this;
    self.$super$CombinatorialParsing$ParserStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($string) {
    var self = this;
    self._$superInit$CombinatorialParsing$ParserStream($string);
    self._$init$contents$($string);
    self._$init$position$(0);
    return self;
   };
   this.$atEnd = function () {
    var self = this;
    return self._$position().$$greater$equal(self._$contents().$size());
   };
   this.$next = function () {
    var self = this;
    if (self._$position().$$greater$equal(self._$contents().$size())) {
     return nil;
    } else {
     nil;
    };
    self._$position$(1 + self._$position());
    return self._$contents().$runeAt$(self._$position());
   };
   this.$peek = function () {
    var self = this;
    if (self._$position().$$greater$equal(self._$contents().$size())) {
     return nil;
    } else {
     nil;
    };
    return self._$contents().$runeAt$(1 + self._$position());
   };
   this.$init$contents$ = function (v) {
    this.$contents$slot = v;
    return this;
   };
   this.$contents = function () {
    return this.$contents$slot;
   };
   this.$init$position$ = function (v) {
    this.$position$slot = v;
    return this;
   };
   this.$position = function () {
    return this.$position$slot;
   };
   this.$position$ = function (v) {
    this.$position$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`ParserStream";
     this._$superInit$CombinatorialParsing$ParserStream = $.$superInit$CombinatorialParsing$ParserStream;
     this.$superInit$CombinatorialParsing$ParserStream = dnuCatcher("$superInit$CombinatorialParsing$ParserStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$atEnd = this._$atEnd = $.$atEnd;
     this.$next = this._$next = $.$next;
     this.$peek = this._$peek = $.$peek;
     this.$init$contents$ = this._$init$contents$ = $.$init$contents$;
     this.$contents = this._$contents = $.$contents;
     this.$init$position$ = this._$init$position$ = $.$init$position$;
     this.$position = this._$position = $.$position;
     this.$position$ = this._$position$ = $.$position$;
     this.$enclosingObjects$CombinatorialParsing$ParserStream = enclosingObjects;
     this.$super$CombinatorialParsing$ParserStream$slot = runtimeSuperclass;
     this["CombinatorialParsing`ParserStream"] = function () {
      superBasicNew.call(this);
      this.$contents$slot = nil;
      this.$position$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`ParserStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`ParserStream";
    this.slots = [];
    this.methods = [new MM("over:", true, 0)];
    this.nestedClasses = [];
    this.$over$ = function ($string) {
     return (new this.nonMeta.basicNew()).$instance$initializer($string);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`ParserStream";
      this.$over$ = this._$over$ = $.$over$;
      this.$enclosingObjects$CombinatorialParsing$ParserStream = enclosingObjects;
      this.$super$CombinatorialParsing$ParserStream = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$PlusParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`PlusParser";
   this.name = "CombinatorialParsing`PlusParser";
   this.header = 1579;
   this.slots = [new SM("subparser", false, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`PlusParser", true, 1580),
    new MM("instance`initializer", true, 1581),
    new MM("parse:inContext:ifError:", false, 1582),
    new MM("init`subparser:", true, 0),
    new MM("subparser", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$PlusParser = function ($p) {
    var self = this;
    self.$super$CombinatorialParsing$PlusParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p) {
    var self = this;
    self._$superInit$CombinatorialParsing$PlusParser($p);
    self._$init$subparser$($p);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     var $rewindPosition = nil;
     var $results = nil;
     var $nextResult = nil;
     $results = $0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$PlusParser[0]).$new();
     $results.$add$(self._$subparser().$parse$inContext$ifError$($input, $context, $blk));
     {
      nil;
      $rewindPosition = $input.$position();
      $nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, function ($msg, $pos) {
       $input.$position$($rewindPosition);
       {
        NLR.value = $results;
        throw NLR;
       };
      });
      $results.$add$($nextResult);
      for (; true; ) {
       nil;
       $rewindPosition = $input.$position();
       $nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, function ($msg, $pos) {
        $input.$position$($rewindPosition);
        {
         NLR.value = $results;
         throw NLR;
        };
       });
       $results.$add$($nextResult);
      };
     };
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$init$subparser$ = function (v) {
    this.$subparser$slot = v;
    return this;
   };
   this.$subparser = function () {
    return this.$subparser$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`PlusParser";
     this._$superInit$CombinatorialParsing$PlusParser = $.$superInit$CombinatorialParsing$PlusParser;
     this.$superInit$CombinatorialParsing$PlusParser = dnuCatcher("$superInit$CombinatorialParsing$PlusParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$subparser$ = $.$init$subparser$;
     this.$init$subparser$ = dnuCatcher("$init$subparser$");
     this._$subparser = $.$subparser;
     this.$subparser = dnuCatcher("$subparser");
     this.$enclosingObjects$CombinatorialParsing$PlusParser = enclosingObjects;
     this.$super$CombinatorialParsing$PlusParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`PlusParser"] = function () {
      superBasicNew.call(this);
      this.$subparser$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`PlusParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`PlusParser";
    this.slots = [];
    this.methods = [new MM("withSubparser:", true, 0)];
    this.nestedClasses = [];
    this.$withSubparser$ = function ($p) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`PlusParser";
      this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
      this.$enclosingObjects$CombinatorialParsing$PlusParser = enclosingObjects;
      this.$super$CombinatorialParsing$PlusParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$PredicateTokenParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`PredicateTokenParser";
   this.name = "CombinatorialParsing`PredicateTokenParser";
   this.header = 1583;
   this.slots = [
    new SM("predicate", true, false),
    new SM("errMsg", true, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`PredicateTokenParser", true, 1584),
    new MM("instance`initializer", true, 1585),
    new MM("accept:errorMsg:", false, 1586),
    new MM("parse:inContext:ifError:", false, 1587),
    new MM("init`predicate:", true, 0),
    new MM("predicate", true, 0),
    new MM("predicate:", true, 0),
    new MM("init`errMsg:", true, 0),
    new MM("errMsg", true, 0),
    new MM("errMsg:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$PredicateTokenParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$PredicateTokenParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$PredicateTokenParser();
    return self;
   };
   this.$accept$errorMsg$ = function ($pred, $err) {
    var self = this;
    self._$predicate$($pred);
    self._$errMsg$($err);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var $token = nil;
    if ($input.$atEnd()) {
     return $blk.$value$value$(self._$errMsg(), $input.$position() - 1);
    } else {
     nil;
    };
    $token = $input.$next();
    if (!self._$predicate().$value$($token)) {
     return $blk.$value$value$(self._$errMsg(), $input.$position() - 1);
    } else {
     nil;
    };
    return $token;
   };
   this.$init$predicate$ = function (v) {
    this.$predicate$slot = v;
    return this;
   };
   this.$predicate = function () {
    return this.$predicate$slot;
   };
   this.$predicate$ = function (v) {
    this.$predicate$slot = v;
    return this;
   };
   this.$init$errMsg$ = function (v) {
    this.$errMsg$slot = v;
    return this;
   };
   this.$errMsg = function () {
    return this.$errMsg$slot;
   };
   this.$errMsg$ = function (v) {
    this.$errMsg$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`PredicateTokenParser";
     this._$superInit$CombinatorialParsing$PredicateTokenParser = $.$superInit$CombinatorialParsing$PredicateTokenParser;
     this.$superInit$CombinatorialParsing$PredicateTokenParser = dnuCatcher("$superInit$CombinatorialParsing$PredicateTokenParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accept$errorMsg$ = this._$accept$errorMsg$ = $.$accept$errorMsg$;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$predicate$ = $.$init$predicate$;
     this.$init$predicate$ = dnuCatcher("$init$predicate$");
     this._$predicate = $.$predicate;
     this.$predicate = dnuCatcher("$predicate");
     this._$predicate$ = $.$predicate$;
     this.$predicate$ = dnuCatcher("$predicate$");
     this._$init$errMsg$ = $.$init$errMsg$;
     this.$init$errMsg$ = dnuCatcher("$init$errMsg$");
     this._$errMsg = $.$errMsg;
     this.$errMsg = dnuCatcher("$errMsg");
     this._$errMsg$ = $.$errMsg$;
     this.$errMsg$ = dnuCatcher("$errMsg$");
     this.$enclosingObjects$CombinatorialParsing$PredicateTokenParser = enclosingObjects;
     this.$super$CombinatorialParsing$PredicateTokenParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`PredicateTokenParser"] = function () {
      superBasicNew.call(this);
      this.$predicate$slot = nil;
      this.$errMsg$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`PredicateTokenParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`PredicateTokenParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`PredicateTokenParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$PredicateTokenParser = enclosingObjects;
      this.$super$CombinatorialParsing$PredicateTokenParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$SequentialParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`SequentialParser";
   this.name = "CombinatorialParsing`SequentialParser";
   this.header = 1588;
   this.slots = [new SM("subparsers", false, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`SequentialParser", true, 1589),
    new MM("instance`initializer", true, 1590),
    new MM(",", false, 1591),
    new MM("parse:inContext:ifError:", false, 1592),
    new MM("wrapper:", false, 1593),
    new MM("init`subparsers:", true, 0),
    new MM("subparsers", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$SequentialParser = function ($s) {
    var self = this;
    self.$super$CombinatorialParsing$SequentialParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s) {
    var self = this;
    self._$superInit$CombinatorialParsing$SequentialParser($s);
    self._$init$subparsers$($s);
    return self;
   };
   this.$$comma = function ($p) {
    var self = this;
    return self.$enclosingObjects$CombinatorialParsing$SequentialParser[0]._$SequentialParser().$withSubparsers$(self._$subparsers().$copyWith$($p));
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return self._$subparsers().$collect$(function ($p) {
     return $p.$parse$inContext$ifError$($input, $context, $blk);
    });
   };
   this.$wrapper$ = function ($block) {
    var self = this;
    self._$assert$message$(function () {
     return $block.$numArgs().$$equal(self._$subparsers().$size());
    }, "Block arity does not match production arity");
    return self._$wrap$(function ($results) {
     return $block.$valueWithArguments$($results.$asArray());
    });
   };
   this.$init$subparsers$ = function (v) {
    this.$subparsers$slot = v;
    return this;
   };
   this.$subparsers = function () {
    return this.$subparsers$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`SequentialParser";
     this._$superInit$CombinatorialParsing$SequentialParser = $.$superInit$CombinatorialParsing$SequentialParser;
     this.$superInit$CombinatorialParsing$SequentialParser = dnuCatcher("$superInit$CombinatorialParsing$SequentialParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$comma = this._$$comma = $.$$comma;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$wrapper$ = this._$wrapper$ = $.$wrapper$;
     this._$init$subparsers$ = $.$init$subparsers$;
     this.$init$subparsers$ = dnuCatcher("$init$subparsers$");
     this._$subparsers = $.$subparsers;
     this.$subparsers = dnuCatcher("$subparsers");
     this.$enclosingObjects$CombinatorialParsing$SequentialParser = enclosingObjects;
     this.$super$CombinatorialParsing$SequentialParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`SequentialParser"] = function () {
      superBasicNew.call(this);
      this.$subparsers$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`SequentialParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`SequentialParser";
    this.slots = [];
    this.methods = [new MM("withSubparsers:", true, 0)];
    this.nestedClasses = [];
    this.$withSubparsers$ = function ($s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`SequentialParser";
      this.$withSubparsers$ = this._$withSubparsers$ = $.$withSubparsers$;
      this.$enclosingObjects$CombinatorialParsing$SequentialParser = enclosingObjects;
      this.$super$CombinatorialParsing$SequentialParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$StarParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`StarParser";
   this.name = "CombinatorialParsing`StarParser";
   this.header = 1594;
   this.slots = [new SM("subparser", false, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`StarParser", true, 1595),
    new MM("instance`initializer", true, 1596),
    new MM("parse:inContext:ifError:", false, 1597),
    new MM("init`subparser:", true, 0),
    new MM("subparser", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$StarParser = function ($p) {
    var self = this;
    self.$super$CombinatorialParsing$StarParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p) {
    var self = this;
    self._$superInit$CombinatorialParsing$StarParser($p);
    self._$init$subparser$($p);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     var $rewindPosition = nil;
     var $results = nil;
     var $nextResult = nil;
     $results = $0.$OrderedCollection(self.$enclosingObjects$CombinatorialParsing$StarParser[0]).$new();
     {
      nil;
      $rewindPosition = $input.$position();
      $nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, function ($msg, $pos) {
       $input.$position$($rewindPosition);
       {
        NLR.value = $results;
        throw NLR;
       };
      });
      $results.$add$($nextResult);
      for (; true; ) {
       nil;
       $rewindPosition = $input.$position();
       $nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, function ($msg, $pos) {
        $input.$position$($rewindPosition);
        {
         NLR.value = $results;
         throw NLR;
        };
       });
       $results.$add$($nextResult);
      };
     };
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$init$subparser$ = function (v) {
    this.$subparser$slot = v;
    return this;
   };
   this.$subparser = function () {
    return this.$subparser$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`StarParser";
     this._$superInit$CombinatorialParsing$StarParser = $.$superInit$CombinatorialParsing$StarParser;
     this.$superInit$CombinatorialParsing$StarParser = dnuCatcher("$superInit$CombinatorialParsing$StarParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$subparser$ = $.$init$subparser$;
     this.$init$subparser$ = dnuCatcher("$init$subparser$");
     this._$subparser = $.$subparser;
     this.$subparser = dnuCatcher("$subparser");
     this.$enclosingObjects$CombinatorialParsing$StarParser = enclosingObjects;
     this.$super$CombinatorialParsing$StarParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`StarParser"] = function () {
      superBasicNew.call(this);
      this.$subparser$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`StarParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`StarParser";
    this.slots = [];
    this.methods = [new MM("withSubparser:", true, 0)];
    this.nestedClasses = [];
    this.$withSubparser$ = function ($p) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`StarParser";
      this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
      this.$enclosingObjects$CombinatorialParsing$StarParser = enclosingObjects;
      this.$super$CombinatorialParsing$StarParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$SymbolicTokenParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`SymbolicTokenParser";
   this.name = "CombinatorialParsing`SymbolicTokenParser";
   this.header = 1598;
   this.slots = [new SM("symbol", true, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`SymbolicTokenParser", true, 1599),
    new MM("instance`initializer", true, 1600),
    new MM("forSymbol:", false, 1601),
    new MM("parse:inContext:ifError:", false, 1602),
    new MM("init`symbol:", true, 0),
    new MM("symbol", true, 0),
    new MM("symbol:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$SymbolicTokenParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$SymbolicTokenParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$SymbolicTokenParser();
    return self;
   };
   this.$forSymbol$ = function ($s) {
    var self = this;
    self._$symbol$($s);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var $errMsg = nil;
    var $pos = nil;
    $errMsg = self._$symbol().$$comma(" expected");
    $pos = $input.$position();
    {
     var $$limit = nil;
     var $index = nil;
     nil;
     $index = 1;
     $$limit = self._$symbol().$size();
     for (; $$limit.$$greater$equal($index); ) {
      if ($input.$atEnd()) {
       return $blk.$value$value$($errMsg, $pos);
      } else {
       nil;
      };
      if (!self._$symbol().$runeAt$($index).$$equal($input.$next())) {
       return $blk.$value$value$($errMsg, $pos);
      } else {
       nil;
      };
      $index = (1).$$plus($index);
     };
    };
    return self._$symbol();
   };
   this.$init$symbol$ = function (v) {
    this.$symbol$slot = v;
    return this;
   };
   this.$symbol = function () {
    return this.$symbol$slot;
   };
   this.$symbol$ = function (v) {
    this.$symbol$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`SymbolicTokenParser";
     this._$superInit$CombinatorialParsing$SymbolicTokenParser = $.$superInit$CombinatorialParsing$SymbolicTokenParser;
     this.$superInit$CombinatorialParsing$SymbolicTokenParser = dnuCatcher("$superInit$CombinatorialParsing$SymbolicTokenParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$forSymbol$ = this._$forSymbol$ = $.$forSymbol$;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$symbol$ = $.$init$symbol$;
     this.$init$symbol$ = dnuCatcher("$init$symbol$");
     this._$symbol = $.$symbol;
     this.$symbol = dnuCatcher("$symbol");
     this._$symbol$ = $.$symbol$;
     this.$symbol$ = dnuCatcher("$symbol$");
     this.$enclosingObjects$CombinatorialParsing$SymbolicTokenParser = enclosingObjects;
     this.$super$CombinatorialParsing$SymbolicTokenParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`SymbolicTokenParser"] = function () {
      superBasicNew.call(this);
      this.$symbol$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`SymbolicTokenParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`SymbolicTokenParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`SymbolicTokenParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$SymbolicTokenParser = enclosingObjects;
      this.$super$CombinatorialParsing$SymbolicTokenParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$Token = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`Token";
   this.name = "CombinatorialParsing`Token";
   this.header = 1603;
   this.slots = [
    new SM("token", true, false),
    new SM("start", true, false),
    new SM("end", true, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`Token", true, 1604),
    new MM("instance`initializer", true, 1605),
    new MM("concreteEnd", false, 1606),
    new MM("concreteStart", false, 1607),
    new MM("for:start:end:", false, 1608),
    new MM("init`token:", true, 0),
    new MM("token", true, 0),
    new MM("token:", true, 0),
    new MM("init`start:", true, 0),
    new MM("start", true, 0),
    new MM("start:", true, 0),
    new MM("init`end:", true, 0),
    new MM("end", true, 0),
    new MM("end:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$Token = function () {
    var self = this;
    self.$super$CombinatorialParsing$Token$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$Token();
    return self;
   };
   this.$concreteEnd = function () {
    var self = this;
    return self._$end();
   };
   this.$concreteStart = function () {
    var self = this;
    return self._$start();
   };
   this.$for$start$end$ = function ($t, $p, $e) {
    var self = this;
    self._$token$($t);
    self._$start$($p);
    self._$end$($e);
    return self;
   };
   this.$init$token$ = function (v) {
    this.$token$slot = v;
    return this;
   };
   this.$token = function () {
    return this.$token$slot;
   };
   this.$token$ = function (v) {
    this.$token$slot = v;
    return this;
   };
   this.$init$start$ = function (v) {
    this.$start$slot = v;
    return this;
   };
   this.$start = function () {
    return this.$start$slot;
   };
   this.$start$ = function (v) {
    this.$start$slot = v;
    return this;
   };
   this.$init$end$ = function (v) {
    this.$end$slot = v;
    return this;
   };
   this.$end = function () {
    return this.$end$slot;
   };
   this.$end$ = function (v) {
    this.$end$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`Token";
     this._$superInit$CombinatorialParsing$Token = $.$superInit$CombinatorialParsing$Token;
     this.$superInit$CombinatorialParsing$Token = dnuCatcher("$superInit$CombinatorialParsing$Token");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
     this.$concreteStart = this._$concreteStart = $.$concreteStart;
     this.$for$start$end$ = this._$for$start$end$ = $.$for$start$end$;
     this.$init$token$ = this._$init$token$ = $.$init$token$;
     this.$token = this._$token = $.$token;
     this.$token$ = this._$token$ = $.$token$;
     this.$init$start$ = this._$init$start$ = $.$init$start$;
     this.$start = this._$start = $.$start;
     this.$start$ = this._$start$ = $.$start$;
     this.$init$end$ = this._$init$end$ = $.$init$end$;
     this.$end = this._$end = $.$end;
     this.$end$ = this._$end$ = $.$end$;
     this.$enclosingObjects$CombinatorialParsing$Token = enclosingObjects;
     this.$super$CombinatorialParsing$Token$slot = runtimeSuperclass;
     this["CombinatorialParsing`Token"] = function () {
      superBasicNew.call(this);
      this.$token$slot = nil;
      this.$start$slot = nil;
      this.$end$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`Token"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`Token";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`Token";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$Token = enclosingObjects;
      this.$super$CombinatorialParsing$Token = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$TokenParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`TokenParser";
   this.name = "CombinatorialParsing`TokenParser";
   this.header = 1609;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`TokenParser", true, 1610),
    new MM("instance`initializer", true, 1611),
    new MM("for:", false, 1612)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$TokenParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$TokenParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$TokenParser();
    return self;
   };
   this.$for$ = function ($token) {
    var self = this;
    return self._$accept$errorMsg$(function ($t) {
     return $t.$$equal($token);
    }, $token.$printString().$$comma(" expected"));
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`TokenParser";
     this._$superInit$CombinatorialParsing$TokenParser = $.$superInit$CombinatorialParsing$TokenParser;
     this.$superInit$CombinatorialParsing$TokenParser = dnuCatcher("$superInit$CombinatorialParsing$TokenParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$for$ = $.$for$;
     this.$for$ = dnuCatcher("$for$");
     this.$enclosingObjects$CombinatorialParsing$TokenParser = enclosingObjects;
     this.$super$CombinatorialParsing$TokenParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`TokenParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`TokenParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`TokenParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`TokenParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$TokenParser = enclosingObjects;
      this.$super$CombinatorialParsing$TokenParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$TokenizingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`TokenizingParser";
   this.name = "CombinatorialParsing`TokenizingParser";
   this.header = 1613;
   this.slots = [new SM("subparser", false, false)];
   this.methods = [
    new MM("superInit`CombinatorialParsing`TokenizingParser", true, 1614),
    new MM("instance`initializer", true, 1615),
    new MM("parse:inContext:ifError:", false, 1616),
    new MM("init`subparser:", true, 0),
    new MM("subparser", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$TokenizingParser = function ($p) {
    var self = this;
    self.$super$CombinatorialParsing$TokenizingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p) {
    var self = this;
    self._$superInit$CombinatorialParsing$TokenizingParser($p);
    self._$init$subparser$($p);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var $pos = nil;
    var $res = nil;
    $pos = $input.$position() + 1;
    $res = self._$subparser().$parse$inContext$ifError$($input, $context, $blk);
    return self.$enclosingObjects$CombinatorialParsing$TokenizingParser[0]._$Token().$new().$for$start$end$($res, $pos, $input.$position());
   };
   this.$init$subparser$ = function (v) {
    this.$subparser$slot = v;
    return this;
   };
   this.$subparser = function () {
    return this.$subparser$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`TokenizingParser";
     this._$superInit$CombinatorialParsing$TokenizingParser = $.$superInit$CombinatorialParsing$TokenizingParser;
     this.$superInit$CombinatorialParsing$TokenizingParser = dnuCatcher("$superInit$CombinatorialParsing$TokenizingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$subparser$ = $.$init$subparser$;
     this.$init$subparser$ = dnuCatcher("$init$subparser$");
     this._$subparser = $.$subparser;
     this.$subparser = dnuCatcher("$subparser");
     this.$enclosingObjects$CombinatorialParsing$TokenizingParser = enclosingObjects;
     this.$super$CombinatorialParsing$TokenizingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`TokenizingParser"] = function () {
      superBasicNew.call(this);
      this.$subparser$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`TokenizingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`TokenizingParser";
    this.slots = [];
    this.methods = [new MM("withSubparser:", true, 0)];
    this.nestedClasses = [];
    this.$withSubparser$ = function ($p) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`TokenizingParser";
      this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
      this.$enclosingObjects$CombinatorialParsing$TokenizingParser = enclosingObjects;
      this.$super$CombinatorialParsing$TokenizingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$WhitespaceParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`WhitespaceParser";
   this.name = "CombinatorialParsing`WhitespaceParser";
   this.header = 1617;
   this.slots = [];
   this.methods = [
    new MM("superInit`CombinatorialParsing`WhitespaceParser", true, 1618),
    new MM("instance`initializer", true, 1619),
    new MM("parse:inContext:ifError:", false, 1620)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$WhitespaceParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$WhitespaceParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$WhitespaceParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var $rewindPosition = nil;
    $rewindPosition = $input.$position();
    {
     nil;
     for (; $input.$atEnd().$ifTrue$ifFalse$(function () {
      return false;
     }, function () {
      return $input.$peek() <= 32;
     }); ) {
      $input.$next();
     };
    };
    if ($input.$position().$$equal($rewindPosition)) {
     $input.$position$($rewindPosition);
     $blk.$value$value$("Whitespace expected", $rewindPosition);
    } else {
     nil;
    };
    return self.$enclosingObjects$CombinatorialParsing$WhitespaceParser[0]._$Token().$new().$for$start$end$("whitespace", $rewindPosition + 1, $input.$position());
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`WhitespaceParser";
     this._$superInit$CombinatorialParsing$WhitespaceParser = $.$superInit$CombinatorialParsing$WhitespaceParser;
     this.$superInit$CombinatorialParsing$WhitespaceParser = dnuCatcher("$superInit$CombinatorialParsing$WhitespaceParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$CombinatorialParsing$WhitespaceParser = enclosingObjects;
     this.$super$CombinatorialParsing$WhitespaceParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`WhitespaceParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["CombinatorialParsing`WhitespaceParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`WhitespaceParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`WhitespaceParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$WhitespaceParser = enclosingObjects;
      this.$super$CombinatorialParsing$WhitespaceParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$WrappingParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for CombinatorialParsing`WrappingParser";
   this.name = "CombinatorialParsing`WrappingParser";
   this.header = 1621;
   this.slots = [
    new SM("parser", true, false),
    new SM("wrapperBlock", true, false)
   ];
   this.methods = [
    new MM("superInit`CombinatorialParsing`WrappingParser", true, 1622),
    new MM("instance`initializer", true, 1623),
    new MM("wrapParser:withWrapper:", false, 1624),
    new MM("parse:inContext:ifError:", false, 1625),
    new MM("init`parser:", true, 0),
    new MM("parser", true, 0),
    new MM("parser:", true, 0),
    new MM("init`wrapperBlock:", true, 0),
    new MM("wrapperBlock", true, 0),
    new MM("wrapperBlock:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$CombinatorialParsing$WrappingParser = function () {
    var self = this;
    self.$super$CombinatorialParsing$WrappingParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$CombinatorialParsing$WrappingParser();
    return self;
   };
   this.$wrapParser$withWrapper$ = function ($p, $blk) {
    var self = this;
    self._$parser$($p);
    self._$wrapperBlock$($blk);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    return self._$wrapperBlock().$value$(self._$parser().$parse$inContext$ifError$($input, $context, $blk));
   };
   this.$init$parser$ = function (v) {
    this.$parser$slot = v;
    return this;
   };
   this.$parser = function () {
    return this.$parser$slot;
   };
   this.$parser$ = function (v) {
    this.$parser$slot = v;
    return this;
   };
   this.$init$wrapperBlock$ = function (v) {
    this.$wrapperBlock$slot = v;
    return this;
   };
   this.$wrapperBlock = function () {
    return this.$wrapperBlock$slot;
   };
   this.$wrapperBlock$ = function (v) {
    this.$wrapperBlock$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for CombinatorialParsing`WrappingParser";
     this._$superInit$CombinatorialParsing$WrappingParser = $.$superInit$CombinatorialParsing$WrappingParser;
     this.$superInit$CombinatorialParsing$WrappingParser = dnuCatcher("$superInit$CombinatorialParsing$WrappingParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$wrapParser$withWrapper$ = this._$wrapParser$withWrapper$ = $.$wrapParser$withWrapper$;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$parser$ = $.$init$parser$;
     this.$init$parser$ = dnuCatcher("$init$parser$");
     this._$parser = $.$parser;
     this.$parser = dnuCatcher("$parser");
     this._$parser$ = $.$parser$;
     this.$parser$ = dnuCatcher("$parser$");
     this._$init$wrapperBlock$ = $.$init$wrapperBlock$;
     this.$init$wrapperBlock$ = dnuCatcher("$init$wrapperBlock$");
     this._$wrapperBlock = $.$wrapperBlock;
     this.$wrapperBlock = dnuCatcher("$wrapperBlock");
     this._$wrapperBlock$ = $.$wrapperBlock$;
     this.$wrapperBlock$ = dnuCatcher("$wrapperBlock$");
     this.$enclosingObjects$CombinatorialParsing$WrappingParser = enclosingObjects;
     this.$super$CombinatorialParsing$WrappingParser$slot = runtimeSuperclass;
     this["CombinatorialParsing`WrappingParser"] = function () {
      superBasicNew.call(this);
      this.$parser$slot = nil;
      this.$wrapperBlock$slot = nil;
     };
     this.basicNew = this["CombinatorialParsing`WrappingParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for CombinatorialParsing`WrappingParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for CombinatorialParsing`WrappingParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$CombinatorialParsing$WrappingParser = enclosingObjects;
      this.$super$CombinatorialParsing$WrappingParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$CombinatorialParsing$AlternatingParser.enclosingMixin = this;
  this.$CombinatorialParsing$CharParser.enclosingMixin = this;
  this.$CombinatorialParsing$CollectingCommentParser.enclosingMixin = this;
  this.$CombinatorialParsing$CombinatorialParser.enclosingMixin = this;
  this.$CombinatorialParsing$CommentParser.enclosingMixin = this;
  this.$CombinatorialParsing$EOIParser.enclosingMixin = this;
  this.$CombinatorialParsing$EmptyParser.enclosingMixin = this;
  this.$CombinatorialParsing$ExecutableGrammar.enclosingMixin = this;
  this.$CombinatorialParsing$FailingParser.enclosingMixin = this;
  this.$CombinatorialParsing$ForwardReferenceParser.enclosingMixin = this;
  this.$CombinatorialParsing$ForwardingWrappingParser.enclosingMixin = this;
  this.$CombinatorialParsing$NamedWrappingParser.enclosingMixin = this;
  this.$CombinatorialParsing$NegatingParser.enclosingMixin = this;
  this.$CombinatorialParsing$ParserContext.enclosingMixin = this;
  this.$CombinatorialParsing$ParserError.enclosingMixin = this;
  this.$CombinatorialParsing$ParserStream.enclosingMixin = this;
  this.$CombinatorialParsing$PlusParser.enclosingMixin = this;
  this.$CombinatorialParsing$PredicateTokenParser.enclosingMixin = this;
  this.$CombinatorialParsing$SequentialParser.enclosingMixin = this;
  this.$CombinatorialParsing$StarParser.enclosingMixin = this;
  this.$CombinatorialParsing$SymbolicTokenParser.enclosingMixin = this;
  this.$CombinatorialParsing$Token.enclosingMixin = this;
  this.$CombinatorialParsing$TokenParser.enclosingMixin = this;
  this.$CombinatorialParsing$TokenizingParser.enclosingMixin = this;
  this.$CombinatorialParsing$WhitespaceParser.enclosingMixin = this;
  this.$CombinatorialParsing$WrappingParser.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for CombinatorialParsing";
    this._$superInit$CombinatorialParsing = $.$superInit$CombinatorialParsing;
    this.$superInit$CombinatorialParsing = dnuCatcher("$superInit$CombinatorialParsing");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$AlternatingParser = $.$AlternatingParser;
    this.$AlternatingParser = dnuCatcher("$AlternatingParser");
    this._$CharParser = $.$CharParser;
    this.$CharParser = dnuCatcher("$CharParser");
    this.$CollectingCommentParser = this._$CollectingCommentParser = $.$CollectingCommentParser;
    this.$CombinatorialParser = this._$CombinatorialParser = $.$CombinatorialParser;
    this.$CommentParser = this._$CommentParser = $.$CommentParser;
    this._$EOIParser = $.$EOIParser;
    this.$EOIParser = dnuCatcher("$EOIParser");
    this._$EmptyParser = $.$EmptyParser;
    this.$EmptyParser = dnuCatcher("$EmptyParser");
    this.$ExecutableGrammar = this._$ExecutableGrammar = $.$ExecutableGrammar;
    this._$FailingParser = $.$FailingParser;
    this.$FailingParser = dnuCatcher("$FailingParser");
    this._$ForwardReferenceParser = $.$ForwardReferenceParser;
    this.$ForwardReferenceParser = dnuCatcher("$ForwardReferenceParser");
    this._$ForwardingWrappingParser = $.$ForwardingWrappingParser;
    this.$ForwardingWrappingParser = dnuCatcher("$ForwardingWrappingParser");
    this._$NamedWrappingParser = $.$NamedWrappingParser;
    this.$NamedWrappingParser = dnuCatcher("$NamedWrappingParser");
    this._$NegatingParser = $.$NegatingParser;
    this.$NegatingParser = dnuCatcher("$NegatingParser");
    this._$ParserContext = $.$ParserContext;
    this.$ParserContext = dnuCatcher("$ParserContext");
    this.$ParserError = this._$ParserError = $.$ParserError;
    this._$ParserStream = $.$ParserStream;
    this.$ParserStream = dnuCatcher("$ParserStream");
    this._$PlusParser = $.$PlusParser;
    this.$PlusParser = dnuCatcher("$PlusParser");
    this.$PredicateTokenParser = this._$PredicateTokenParser = $.$PredicateTokenParser;
    this._$SequentialParser = $.$SequentialParser;
    this.$SequentialParser = dnuCatcher("$SequentialParser");
    this._$StarParser = $.$StarParser;
    this.$StarParser = dnuCatcher("$StarParser");
    this._$SymbolicTokenParser = $.$SymbolicTokenParser;
    this.$SymbolicTokenParser = dnuCatcher("$SymbolicTokenParser");
    this.$Token = this._$Token = $.$Token;
    this._$TokenParser = $.$TokenParser;
    this.$TokenParser = dnuCatcher("$TokenParser");
    this.$TokenizingParser = this._$TokenizingParser = $.$TokenizingParser;
    this._$WhitespaceParser = $.$WhitespaceParser;
    this.$WhitespaceParser = dnuCatcher("$WhitespaceParser");
    this._$WrappingParser = $.$WrappingParser;
    this.$WrappingParser = dnuCatcher("$WrappingParser");
    this.$init$CombinatorialParsing$AlternatingParser$ = this._$init$CombinatorialParsing$AlternatingParser$ = $.$init$CombinatorialParsing$AlternatingParser$;
    this.$CombinatorialParsing$AlternatingParser = this._$CombinatorialParsing$AlternatingParser = $.$CombinatorialParsing$AlternatingParser;
    this.$CombinatorialParsing$AlternatingParser$ = this._$CombinatorialParsing$AlternatingParser$ = $.$CombinatorialParsing$AlternatingParser$;
    this.$init$CombinatorialParsing$CharParser$ = this._$init$CombinatorialParsing$CharParser$ = $.$init$CombinatorialParsing$CharParser$;
    this.$CombinatorialParsing$CharParser = this._$CombinatorialParsing$CharParser = $.$CombinatorialParsing$CharParser;
    this.$CombinatorialParsing$CharParser$ = this._$CombinatorialParsing$CharParser$ = $.$CombinatorialParsing$CharParser$;
    this.$init$CombinatorialParsing$CollectingCommentParser$ = this._$init$CombinatorialParsing$CollectingCommentParser$ = $.$init$CombinatorialParsing$CollectingCommentParser$;
    this.$CombinatorialParsing$CollectingCommentParser = this._$CombinatorialParsing$CollectingCommentParser = $.$CombinatorialParsing$CollectingCommentParser;
    this.$CombinatorialParsing$CollectingCommentParser$ = this._$CombinatorialParsing$CollectingCommentParser$ = $.$CombinatorialParsing$CollectingCommentParser$;
    this.$init$CombinatorialParsing$CombinatorialParser$ = this._$init$CombinatorialParsing$CombinatorialParser$ = $.$init$CombinatorialParsing$CombinatorialParser$;
    this.$CombinatorialParsing$CombinatorialParser = this._$CombinatorialParsing$CombinatorialParser = $.$CombinatorialParsing$CombinatorialParser;
    this.$CombinatorialParsing$CombinatorialParser$ = this._$CombinatorialParsing$CombinatorialParser$ = $.$CombinatorialParsing$CombinatorialParser$;
    this.$init$CombinatorialParsing$CommentParser$ = this._$init$CombinatorialParsing$CommentParser$ = $.$init$CombinatorialParsing$CommentParser$;
    this.$CombinatorialParsing$CommentParser = this._$CombinatorialParsing$CommentParser = $.$CombinatorialParsing$CommentParser;
    this.$CombinatorialParsing$CommentParser$ = this._$CombinatorialParsing$CommentParser$ = $.$CombinatorialParsing$CommentParser$;
    this.$init$CombinatorialParsing$EOIParser$ = this._$init$CombinatorialParsing$EOIParser$ = $.$init$CombinatorialParsing$EOIParser$;
    this.$CombinatorialParsing$EOIParser = this._$CombinatorialParsing$EOIParser = $.$CombinatorialParsing$EOIParser;
    this.$CombinatorialParsing$EOIParser$ = this._$CombinatorialParsing$EOIParser$ = $.$CombinatorialParsing$EOIParser$;
    this.$init$CombinatorialParsing$EmptyParser$ = this._$init$CombinatorialParsing$EmptyParser$ = $.$init$CombinatorialParsing$EmptyParser$;
    this.$CombinatorialParsing$EmptyParser = this._$CombinatorialParsing$EmptyParser = $.$CombinatorialParsing$EmptyParser;
    this.$CombinatorialParsing$EmptyParser$ = this._$CombinatorialParsing$EmptyParser$ = $.$CombinatorialParsing$EmptyParser$;
    this.$init$CombinatorialParsing$ExecutableGrammar$ = this._$init$CombinatorialParsing$ExecutableGrammar$ = $.$init$CombinatorialParsing$ExecutableGrammar$;
    this.$CombinatorialParsing$ExecutableGrammar = this._$CombinatorialParsing$ExecutableGrammar = $.$CombinatorialParsing$ExecutableGrammar;
    this.$CombinatorialParsing$ExecutableGrammar$ = this._$CombinatorialParsing$ExecutableGrammar$ = $.$CombinatorialParsing$ExecutableGrammar$;
    this.$init$CombinatorialParsing$FailingParser$ = this._$init$CombinatorialParsing$FailingParser$ = $.$init$CombinatorialParsing$FailingParser$;
    this.$CombinatorialParsing$FailingParser = this._$CombinatorialParsing$FailingParser = $.$CombinatorialParsing$FailingParser;
    this.$CombinatorialParsing$FailingParser$ = this._$CombinatorialParsing$FailingParser$ = $.$CombinatorialParsing$FailingParser$;
    this.$init$CombinatorialParsing$ForwardReferenceParser$ = this._$init$CombinatorialParsing$ForwardReferenceParser$ = $.$init$CombinatorialParsing$ForwardReferenceParser$;
    this.$CombinatorialParsing$ForwardReferenceParser = this._$CombinatorialParsing$ForwardReferenceParser = $.$CombinatorialParsing$ForwardReferenceParser;
    this.$CombinatorialParsing$ForwardReferenceParser$ = this._$CombinatorialParsing$ForwardReferenceParser$ = $.$CombinatorialParsing$ForwardReferenceParser$;
    this.$init$CombinatorialParsing$ForwardingWrappingParser$ = this._$init$CombinatorialParsing$ForwardingWrappingParser$ = $.$init$CombinatorialParsing$ForwardingWrappingParser$;
    this.$CombinatorialParsing$ForwardingWrappingParser = this._$CombinatorialParsing$ForwardingWrappingParser = $.$CombinatorialParsing$ForwardingWrappingParser;
    this.$CombinatorialParsing$ForwardingWrappingParser$ = this._$CombinatorialParsing$ForwardingWrappingParser$ = $.$CombinatorialParsing$ForwardingWrappingParser$;
    this.$init$CombinatorialParsing$NamedWrappingParser$ = this._$init$CombinatorialParsing$NamedWrappingParser$ = $.$init$CombinatorialParsing$NamedWrappingParser$;
    this.$CombinatorialParsing$NamedWrappingParser = this._$CombinatorialParsing$NamedWrappingParser = $.$CombinatorialParsing$NamedWrappingParser;
    this.$CombinatorialParsing$NamedWrappingParser$ = this._$CombinatorialParsing$NamedWrappingParser$ = $.$CombinatorialParsing$NamedWrappingParser$;
    this.$init$CombinatorialParsing$NegatingParser$ = this._$init$CombinatorialParsing$NegatingParser$ = $.$init$CombinatorialParsing$NegatingParser$;
    this.$CombinatorialParsing$NegatingParser = this._$CombinatorialParsing$NegatingParser = $.$CombinatorialParsing$NegatingParser;
    this.$CombinatorialParsing$NegatingParser$ = this._$CombinatorialParsing$NegatingParser$ = $.$CombinatorialParsing$NegatingParser$;
    this.$init$CombinatorialParsing$ParserContext$ = this._$init$CombinatorialParsing$ParserContext$ = $.$init$CombinatorialParsing$ParserContext$;
    this.$CombinatorialParsing$ParserContext = this._$CombinatorialParsing$ParserContext = $.$CombinatorialParsing$ParserContext;
    this.$CombinatorialParsing$ParserContext$ = this._$CombinatorialParsing$ParserContext$ = $.$CombinatorialParsing$ParserContext$;
    this.$init$CombinatorialParsing$ParserError$ = this._$init$CombinatorialParsing$ParserError$ = $.$init$CombinatorialParsing$ParserError$;
    this.$CombinatorialParsing$ParserError = this._$CombinatorialParsing$ParserError = $.$CombinatorialParsing$ParserError;
    this.$CombinatorialParsing$ParserError$ = this._$CombinatorialParsing$ParserError$ = $.$CombinatorialParsing$ParserError$;
    this.$init$CombinatorialParsing$ParserStream$ = this._$init$CombinatorialParsing$ParserStream$ = $.$init$CombinatorialParsing$ParserStream$;
    this.$CombinatorialParsing$ParserStream = this._$CombinatorialParsing$ParserStream = $.$CombinatorialParsing$ParserStream;
    this.$CombinatorialParsing$ParserStream$ = this._$CombinatorialParsing$ParserStream$ = $.$CombinatorialParsing$ParserStream$;
    this.$init$CombinatorialParsing$PlusParser$ = this._$init$CombinatorialParsing$PlusParser$ = $.$init$CombinatorialParsing$PlusParser$;
    this.$CombinatorialParsing$PlusParser = this._$CombinatorialParsing$PlusParser = $.$CombinatorialParsing$PlusParser;
    this.$CombinatorialParsing$PlusParser$ = this._$CombinatorialParsing$PlusParser$ = $.$CombinatorialParsing$PlusParser$;
    this.$init$CombinatorialParsing$PredicateTokenParser$ = this._$init$CombinatorialParsing$PredicateTokenParser$ = $.$init$CombinatorialParsing$PredicateTokenParser$;
    this.$CombinatorialParsing$PredicateTokenParser = this._$CombinatorialParsing$PredicateTokenParser = $.$CombinatorialParsing$PredicateTokenParser;
    this.$CombinatorialParsing$PredicateTokenParser$ = this._$CombinatorialParsing$PredicateTokenParser$ = $.$CombinatorialParsing$PredicateTokenParser$;
    this.$init$CombinatorialParsing$SequentialParser$ = this._$init$CombinatorialParsing$SequentialParser$ = $.$init$CombinatorialParsing$SequentialParser$;
    this.$CombinatorialParsing$SequentialParser = this._$CombinatorialParsing$SequentialParser = $.$CombinatorialParsing$SequentialParser;
    this.$CombinatorialParsing$SequentialParser$ = this._$CombinatorialParsing$SequentialParser$ = $.$CombinatorialParsing$SequentialParser$;
    this.$init$CombinatorialParsing$StarParser$ = this._$init$CombinatorialParsing$StarParser$ = $.$init$CombinatorialParsing$StarParser$;
    this.$CombinatorialParsing$StarParser = this._$CombinatorialParsing$StarParser = $.$CombinatorialParsing$StarParser;
    this.$CombinatorialParsing$StarParser$ = this._$CombinatorialParsing$StarParser$ = $.$CombinatorialParsing$StarParser$;
    this.$init$CombinatorialParsing$SymbolicTokenParser$ = this._$init$CombinatorialParsing$SymbolicTokenParser$ = $.$init$CombinatorialParsing$SymbolicTokenParser$;
    this.$CombinatorialParsing$SymbolicTokenParser = this._$CombinatorialParsing$SymbolicTokenParser = $.$CombinatorialParsing$SymbolicTokenParser;
    this.$CombinatorialParsing$SymbolicTokenParser$ = this._$CombinatorialParsing$SymbolicTokenParser$ = $.$CombinatorialParsing$SymbolicTokenParser$;
    this.$init$CombinatorialParsing$Token$ = this._$init$CombinatorialParsing$Token$ = $.$init$CombinatorialParsing$Token$;
    this.$CombinatorialParsing$Token = this._$CombinatorialParsing$Token = $.$CombinatorialParsing$Token;
    this.$CombinatorialParsing$Token$ = this._$CombinatorialParsing$Token$ = $.$CombinatorialParsing$Token$;
    this.$init$CombinatorialParsing$TokenParser$ = this._$init$CombinatorialParsing$TokenParser$ = $.$init$CombinatorialParsing$TokenParser$;
    this.$CombinatorialParsing$TokenParser = this._$CombinatorialParsing$TokenParser = $.$CombinatorialParsing$TokenParser;
    this.$CombinatorialParsing$TokenParser$ = this._$CombinatorialParsing$TokenParser$ = $.$CombinatorialParsing$TokenParser$;
    this.$init$CombinatorialParsing$TokenizingParser$ = this._$init$CombinatorialParsing$TokenizingParser$ = $.$init$CombinatorialParsing$TokenizingParser$;
    this.$CombinatorialParsing$TokenizingParser = this._$CombinatorialParsing$TokenizingParser = $.$CombinatorialParsing$TokenizingParser;
    this.$CombinatorialParsing$TokenizingParser$ = this._$CombinatorialParsing$TokenizingParser$ = $.$CombinatorialParsing$TokenizingParser$;
    this.$init$CombinatorialParsing$WhitespaceParser$ = this._$init$CombinatorialParsing$WhitespaceParser$ = $.$init$CombinatorialParsing$WhitespaceParser$;
    this.$CombinatorialParsing$WhitespaceParser = this._$CombinatorialParsing$WhitespaceParser = $.$CombinatorialParsing$WhitespaceParser;
    this.$CombinatorialParsing$WhitespaceParser$ = this._$CombinatorialParsing$WhitespaceParser$ = $.$CombinatorialParsing$WhitespaceParser$;
    this.$init$CombinatorialParsing$WrappingParser$ = this._$init$CombinatorialParsing$WrappingParser$ = $.$init$CombinatorialParsing$WrappingParser$;
    this.$CombinatorialParsing$WrappingParser = this._$CombinatorialParsing$WrappingParser = $.$CombinatorialParsing$WrappingParser;
    this.$CombinatorialParsing$WrappingParser$ = this._$CombinatorialParsing$WrappingParser$ = $.$CombinatorialParsing$WrappingParser$;
    this.$enclosingObjects$CombinatorialParsing = enclosingObjects;
    this.$super$CombinatorialParsing$slot = runtimeSuperclass;
    this.CombinatorialParsing = function () {
     superBasicNew.call(this);
     this.$OrderedCollection$slot = nil;
     this.$Dictionary$slot = nil;
     this.$ObjectMirror$slot = nil;
     this.$CombinatorialParsing$AlternatingParser$slot = nil;
     this.$CombinatorialParsing$CharParser$slot = nil;
     this.$CombinatorialParsing$CollectingCommentParser$slot = nil;
     this.$CombinatorialParsing$CombinatorialParser$slot = nil;
     this.$CombinatorialParsing$CommentParser$slot = nil;
     this.$CombinatorialParsing$EOIParser$slot = nil;
     this.$CombinatorialParsing$EmptyParser$slot = nil;
     this.$CombinatorialParsing$ExecutableGrammar$slot = nil;
     this.$CombinatorialParsing$FailingParser$slot = nil;
     this.$CombinatorialParsing$ForwardReferenceParser$slot = nil;
     this.$CombinatorialParsing$ForwardingWrappingParser$slot = nil;
     this.$CombinatorialParsing$NamedWrappingParser$slot = nil;
     this.$CombinatorialParsing$NegatingParser$slot = nil;
     this.$CombinatorialParsing$ParserContext$slot = nil;
     this.$CombinatorialParsing$ParserError$slot = nil;
     this.$CombinatorialParsing$ParserStream$slot = nil;
     this.$CombinatorialParsing$PlusParser$slot = nil;
     this.$CombinatorialParsing$PredicateTokenParser$slot = nil;
     this.$CombinatorialParsing$SequentialParser$slot = nil;
     this.$CombinatorialParsing$StarParser$slot = nil;
     this.$CombinatorialParsing$SymbolicTokenParser$slot = nil;
     this.$CombinatorialParsing$Token$slot = nil;
     this.$CombinatorialParsing$TokenParser$slot = nil;
     this.$CombinatorialParsing$TokenizingParser$slot = nil;
     this.$CombinatorialParsing$WhitespaceParser$slot = nil;
     this.$CombinatorialParsing$WrappingParser$slot = nil;
    };
    this.basicNew = this.CombinatorialParsing;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for CombinatorialParsing";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($platform) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for CombinatorialParsing";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$CombinatorialParsing = enclosingObjects;
     this.$super$CombinatorialParsing = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$NewspeakGrammar = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for NewspeakGrammar";
  this.name = "NewspeakGrammar";
  this.header = 1626;
  this.slots = [
   new SM("OrderedCollection", false, false),
   new SM("ExecutableGrammar", false, false),
   new SM("CollectingCommentParser", false, false),
   new SM("CombinatorialParser", false, false),
   new SM("PredicateTokenParser", false, false),
   new SM("Token", false, false),
   new SM("ParserError", false, false),
   new SM("NewspeakGrammar`NS3Grammar", true, true),
   new SM("NewspeakGrammar`NSCommentParser", true, true),
   new SM("NewspeakGrammar`TypedNS3Grammar", true, true),
   new SM("NewspeakGrammar`UnarySelectorParser", true, true)
  ];
  this.methods = [
   new MM("superInit`NewspeakGrammar", true, 1627),
   new MM("instance`initializer", true, 1628),
   new MM("NS3Grammar", true, 0),
   new MM("NSCommentParser", true, 0),
   new MM("TypedNS3Grammar", true, 0),
   new MM("UnarySelectorParser", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`ExecutableGrammar:", true, 0),
   new MM("ExecutableGrammar", true, 0),
   new MM("init`CollectingCommentParser:", true, 0),
   new MM("CollectingCommentParser", true, 0),
   new MM("init`CombinatorialParser:", true, 0),
   new MM("CombinatorialParser", true, 0),
   new MM("init`PredicateTokenParser:", true, 0),
   new MM("PredicateTokenParser", true, 0),
   new MM("init`Token:", true, 0),
   new MM("Token", true, 0),
   new MM("init`ParserError:", true, 0),
   new MM("ParserError", true, 0),
   new MM("init`NewspeakGrammar`NS3Grammar:", true, 0),
   new MM("NewspeakGrammar`NS3Grammar", true, 0),
   new MM("NewspeakGrammar`NS3Grammar:", true, 0),
   new MM("init`NewspeakGrammar`NSCommentParser:", true, 0),
   new MM("NewspeakGrammar`NSCommentParser", true, 0),
   new MM("NewspeakGrammar`NSCommentParser:", true, 0),
   new MM("init`NewspeakGrammar`TypedNS3Grammar:", true, 0),
   new MM("NewspeakGrammar`TypedNS3Grammar", true, 0),
   new MM("NewspeakGrammar`TypedNS3Grammar:", true, 0),
   new MM("init`NewspeakGrammar`UnarySelectorParser:", true, 0),
   new MM("NewspeakGrammar`UnarySelectorParser", true, 0),
   new MM("NewspeakGrammar`UnarySelectorParser:", true, 0)
  ];
  this.nestedClasses = [
   "NewspeakGrammar`NS3Grammar",
   "NewspeakGrammar`NSCommentParser",
   "NewspeakGrammar`TypedNS3Grammar",
   "NewspeakGrammar`UnarySelectorParser"
  ];
  this.applications = [];
  this.$superInit$NewspeakGrammar = function ($p, $parsers) {
   var self = this;
   self.$super$NewspeakGrammar$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p, $parsers) {
   var self = this;
   self._$superInit$NewspeakGrammar($p, $parsers);
   $0.$init$OrderedCollection$(self, $p.$collections().$OrderedCollection());
   $0.$init$ExecutableGrammar$(self, $parsers.$ExecutableGrammar());
   $0.$init$CollectingCommentParser$(self, $parsers.$CollectingCommentParser());
   $0.$init$CombinatorialParser$(self, $parsers.$CombinatorialParser());
   $0.$init$PredicateTokenParser$(self, $parsers.$PredicateTokenParser());
   $0.$init$Token$(self, $parsers.$Token());
   self._$init$ParserError$($parsers.$ParserError());
   return self;
  };
  this.$NS3Grammar = function () {
   if (nil === this.$NewspeakGrammar$NS3Grammar$slot) {
    var self = this;
    var superclass = $0.$ExecutableGrammar(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakGrammar);
    var mixin = $.$NewspeakGrammar$NS3Grammar;
    this.$NewspeakGrammar$NS3Grammar$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakGrammar$NS3Grammar$slot;
  };
  this.$NSCommentParser = function () {
   if (nil === this.$NewspeakGrammar$NSCommentParser$slot) {
    var self = this;
    var superclass = $0.$CombinatorialParser(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakGrammar);
    var mixin = $.$NewspeakGrammar$NSCommentParser;
    this.$NewspeakGrammar$NSCommentParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakGrammar$NSCommentParser$slot;
  };
  this.$TypedNS3Grammar = function () {
   if (nil === this.$NewspeakGrammar$TypedNS3Grammar$slot) {
    var self = this;
    var superclass = self._$NS3Grammar();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakGrammar);
    var mixin = $.$NewspeakGrammar$TypedNS3Grammar;
    this.$NewspeakGrammar$TypedNS3Grammar$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakGrammar$TypedNS3Grammar$slot;
  };
  this.$UnarySelectorParser = function () {
   if (nil === this.$NewspeakGrammar$UnarySelectorParser$slot) {
    var self = this;
    var superclass = $0.$CombinatorialParser(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakGrammar);
    var mixin = $.$NewspeakGrammar$UnarySelectorParser;
    this.$NewspeakGrammar$UnarySelectorParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakGrammar$UnarySelectorParser$slot;
  };
  this.$init$OrderedCollection$ = function (self, v) {
   self.$OrderedCollection$slot = v;
   return self;
  };
  this.$OrderedCollection = function (self) {
   return self.$OrderedCollection$slot;
  };
  this.$init$ExecutableGrammar$ = function (self, v) {
   self.$ExecutableGrammar$slot = v;
   return self;
  };
  this.$ExecutableGrammar = function (self) {
   return self.$ExecutableGrammar$slot;
  };
  this.$init$CollectingCommentParser$ = function (self, v) {
   self.$CollectingCommentParser$slot = v;
   return self;
  };
  this.$CollectingCommentParser = function (self) {
   return self.$CollectingCommentParser$slot;
  };
  this.$init$CombinatorialParser$ = function (self, v) {
   self.$CombinatorialParser$slot = v;
   return self;
  };
  this.$CombinatorialParser = function (self) {
   return self.$CombinatorialParser$slot;
  };
  this.$init$PredicateTokenParser$ = function (self, v) {
   self.$PredicateTokenParser$slot = v;
   return self;
  };
  this.$PredicateTokenParser = function (self) {
   return self.$PredicateTokenParser$slot;
  };
  this.$init$Token$ = function (self, v) {
   self.$Token$slot = v;
   return self;
  };
  this.$Token = function (self) {
   return self.$Token$slot;
  };
  this.$init$ParserError$ = function (v) {
   this.$ParserError$slot = v;
   return this;
  };
  this.$ParserError = function () {
   return this.$ParserError$slot;
  };
  this.$init$NewspeakGrammar$NS3Grammar$ = function (v) {
   this.$NewspeakGrammar$NS3Grammar$slot = v;
   return this;
  };
  this.$NewspeakGrammar$NS3Grammar = function () {
   return this.$NewspeakGrammar$NS3Grammar$slot;
  };
  this.$NewspeakGrammar$NS3Grammar$ = function (v) {
   this.$NewspeakGrammar$NS3Grammar$slot = v;
   return this;
  };
  this.$init$NewspeakGrammar$NSCommentParser$ = function (v) {
   this.$NewspeakGrammar$NSCommentParser$slot = v;
   return this;
  };
  this.$NewspeakGrammar$NSCommentParser = function () {
   return this.$NewspeakGrammar$NSCommentParser$slot;
  };
  this.$NewspeakGrammar$NSCommentParser$ = function (v) {
   this.$NewspeakGrammar$NSCommentParser$slot = v;
   return this;
  };
  this.$init$NewspeakGrammar$TypedNS3Grammar$ = function (v) {
   this.$NewspeakGrammar$TypedNS3Grammar$slot = v;
   return this;
  };
  this.$NewspeakGrammar$TypedNS3Grammar = function () {
   return this.$NewspeakGrammar$TypedNS3Grammar$slot;
  };
  this.$NewspeakGrammar$TypedNS3Grammar$ = function (v) {
   this.$NewspeakGrammar$TypedNS3Grammar$slot = v;
   return this;
  };
  this.$init$NewspeakGrammar$UnarySelectorParser$ = function (v) {
   this.$NewspeakGrammar$UnarySelectorParser$slot = v;
   return this;
  };
  this.$NewspeakGrammar$UnarySelectorParser = function () {
   return this.$NewspeakGrammar$UnarySelectorParser$slot;
  };
  this.$NewspeakGrammar$UnarySelectorParser$ = function (v) {
   this.$NewspeakGrammar$UnarySelectorParser$slot = v;
   return this;
  };
  this.$NewspeakGrammar$NS3Grammar = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakGrammar`NS3Grammar";
   this.name = "NewspeakGrammar`NS3Grammar";
   this.header = 1629;
   this.slots = [
    new SM("whitespace", false, false),
    new SM("colon", false, false),
    new SM("comma", false, false),
    new SM("dollar", false, false),
    new SM("dot", false, false),
    new SM("equalSign", false, false),
    new SM("hat", false, false),
    new SM("lbracket", false, false),
    new SM("lcurly", false, false),
    new SM("lparen", false, false),
    new SM("langleBracket", false, false),
    new SM("pound", false, false),
    new SM("rangleBracket", false, false),
    new SM("rbracket", false, false),
    new SM("rcurly", false, false),
    new SM("rparen", false, false),
    new SM("semicolon", false, false),
    new SM("slash", false, false),
    new SM("vbar", false, false),
    new SM("mixinOperator", false, false),
    new SM("inverseMixinOperator", false, false),
    new SM("eventualSendOperator", false, false),
    new SM("digit", false, false),
    new SM("digits", false, false),
    new SM("uppercaseLetter", false, false),
    new SM("extendedDigits", false, false),
    new SM("radix", false, false),
    new SM("fraction", false, false),
    new SM("extendedFraction", false, false),
    new SM("exponent", false, false),
    new SM("decimalNum", false, false),
    new SM("radixNum", false, false),
    new SM("num", false, false),
    new SM("number", false, false),
    new SM("letter", false, false),
    new SM("specialCharacter", false, false),
    new SM("character", false, false),
    new SM("id", false, false),
    new SM("identifier", false, false),
    new SM("charIncludingQuotesAndSpace", false, false),
    new SM("newChar", false, false),
    new SM("oldChar", false, false),
    new SM("characterConstant", false, false),
    new SM("str", false, false),
    new SM("string", false, false),
    new SM("kw", false, false),
    new SM("kwds", false, false),
    new SM("keyword", false, false),
    new SM("setterKw", false, false),
    new SM("setterKeyword", false, false),
    new SM("sym", false, false),
    new SM("symbol", false, false),
    new SM("comment", false, false),
    new SM("binSel", false, false),
    new SM("binarySelector", false, false),
    new SM("symbolConstant", false, false),
    new SM("tuple", false, false),
    new SM("literal", false, false),
    new SM("pattern", false, false),
    new SM("patternLiteral", false, false),
    new SM("wildcardPattern", false, false),
    new SM("literalPattern", false, false),
    new SM("keywordPattern", false, false),
    new SM("kwPatternPair", false, false),
    new SM("kwPatternValue", false, false),
    new SM("variablePattern", false, false),
    new SM("nestedPatternLiteral", false, false),
    new SM("slotName", false, false),
    new SM("unarySelector", false, false),
    new SM("parenthesizedExpression", false, false),
    new SM("primary", false, false),
    new SM("unaryMsg", false, false),
    new SM("unaryExpression", false, false),
    new SM("binaryMsg", false, false),
    new SM("binaryExpression", false, false),
    new SM("keywordMsg", false, false),
    new SM("message", false, false),
    new SM("nontrivialUnaryMessages", false, false),
    new SM("nontrivialBinaryMessages", false, false),
    new SM("keywordMessages", false, false),
    new SM("nonEmptyMessages", false, false),
    new SM("keywordExpression", false, false),
    new SM("keywordHereSend", false, false),
    new SM("cascadeMsg", false, false),
    new SM("msgCascade", false, false),
    new SM("cascadedMessageExpression", false, false),
    new SM("sendExpression", false, false),
    new SM("expression", false, false),
    new SM("returnStatement", false, false),
    new SM("furtherStatements", false, false),
    new SM("statementSequence", false, false),
    new SM("statements", false, false),
    new SM("blockParameter", false, false),
    new SM("blockParameters", false, false),
    new SM("slotDefs", false, false),
    new SM("seqSlotDecls", false, false),
    new SM("simSlotDecls", false, false),
    new SM("slotDecls", false, false),
    new SM("temporaries", false, false),
    new SM("beginNSComment", false, false),
    new SM("endNSComment", false, false),
    new SM("keywordAndLiteral", false, false),
    new SM("literalMessage", false, false),
    new SM("literalMessageComment", false, false),
    new SM("codeBody", false, false),
    new SM("block", false, false),
    new SM("slotDecl", false, false),
    new SM("accessModifier", false, false),
    new SM("slotDef", false, false),
    new SM("initExprs", false, false),
    new SM("unaryMsgPattern", false, false),
    new SM("binaryMsgPattern", false, false),
    new SM("keywordMsgPattern", false, false),
    new SM("messagePattern", false, false),
    new SM("methodDecl", false, false),
    new SM("optionalFactorySection", false, false),
    new SM("classPrefix", false, false),
    new SM("mixinApplication", false, false),
    new SM("category", false, false),
    new SM("classComment", false, false),
    new SM("sideDecl", false, false),
    new SM("classSideDecl", false, false),
    new SM("languageId", false, false),
    new SM("classCategory", false, false),
    new SM("superclassClause", false, false),
    new SM("superclassPrefix", false, false),
    new SM("outerReceiver", false, false),
    new SM("classHeader", false, false),
    new SM("classDeclaration", false, false),
    new SM("inheritanceClause", false, false),
    new SM("instanceInitializer", false, false),
    new SM("classBody", false, false),
    new SM("mixinAppSuffix", false, false),
    new SM("mixinSpec", false, false),
    new SM("explicitInheritanceListAndOrBody", false, false),
    new SM("defaultSuperclassAndBody", false, false),
    new SM("inheritanceListAndOrBody", false, false),
    new SM("classDecl", false, false),
    new SM("toplevelClass", false, false),
    new SM("compilationUnit", false, false),
    new SM("doItExpression", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakGrammar`NS3Grammar", true, 1630),
    new MM("instance`initializer", true, 1631),
    new MM("_", false, 1632),
    new MM("stringBody", false, 1633),
    new MM("init`whitespace:", true, 0),
    new MM("whitespace", true, 0),
    new MM("init`colon:", true, 0),
    new MM("colon", true, 0),
    new MM("init`comma:", true, 0),
    new MM("comma", true, 0),
    new MM("init`dollar:", true, 0),
    new MM("dollar", true, 0),
    new MM("init`dot:", true, 0),
    new MM("dot", true, 0),
    new MM("init`equalSign:", true, 0),
    new MM("equalSign", true, 0),
    new MM("init`hat:", true, 0),
    new MM("hat", true, 0),
    new MM("init`lbracket:", true, 0),
    new MM("lbracket", true, 0),
    new MM("init`lcurly:", true, 0),
    new MM("lcurly", true, 0),
    new MM("init`lparen:", true, 0),
    new MM("lparen", true, 0),
    new MM("init`langleBracket:", true, 0),
    new MM("langleBracket", true, 0),
    new MM("init`pound:", true, 0),
    new MM("pound", true, 0),
    new MM("init`rangleBracket:", true, 0),
    new MM("rangleBracket", true, 0),
    new MM("init`rbracket:", true, 0),
    new MM("rbracket", true, 0),
    new MM("init`rcurly:", true, 0),
    new MM("rcurly", true, 0),
    new MM("init`rparen:", true, 0),
    new MM("rparen", true, 0),
    new MM("init`semicolon:", true, 0),
    new MM("semicolon", true, 0),
    new MM("init`slash:", true, 0),
    new MM("slash", true, 0),
    new MM("init`vbar:", true, 0),
    new MM("vbar", true, 0),
    new MM("init`mixinOperator:", true, 0),
    new MM("mixinOperator", true, 0),
    new MM("init`inverseMixinOperator:", true, 0),
    new MM("inverseMixinOperator", true, 0),
    new MM("init`eventualSendOperator:", true, 0),
    new MM("eventualSendOperator", true, 0),
    new MM("init`digit:", true, 0),
    new MM("digit", true, 0),
    new MM("init`digits:", true, 0),
    new MM("digits", true, 0),
    new MM("init`uppercaseLetter:", true, 0),
    new MM("uppercaseLetter", true, 0),
    new MM("init`extendedDigits:", true, 0),
    new MM("extendedDigits", true, 0),
    new MM("init`radix:", true, 0),
    new MM("radix", true, 0),
    new MM("init`fraction:", true, 0),
    new MM("fraction", true, 0),
    new MM("init`extendedFraction:", true, 0),
    new MM("extendedFraction", true, 0),
    new MM("init`exponent:", true, 0),
    new MM("exponent", true, 0),
    new MM("init`decimalNum:", true, 0),
    new MM("decimalNum", true, 0),
    new MM("init`radixNum:", true, 0),
    new MM("radixNum", true, 0),
    new MM("init`num:", true, 0),
    new MM("num", true, 0),
    new MM("init`number:", true, 0),
    new MM("number", true, 0),
    new MM("init`letter:", true, 0),
    new MM("letter", true, 0),
    new MM("init`specialCharacter:", true, 0),
    new MM("specialCharacter", true, 0),
    new MM("init`character:", true, 0),
    new MM("character", true, 0),
    new MM("init`id:", true, 0),
    new MM("id", true, 0),
    new MM("init`identifier:", true, 0),
    new MM("identifier", true, 0),
    new MM("init`charIncludingQuotesAndSpace:", true, 0),
    new MM("charIncludingQuotesAndSpace", true, 0),
    new MM("init`newChar:", true, 0),
    new MM("newChar", true, 0),
    new MM("init`oldChar:", true, 0),
    new MM("oldChar", true, 0),
    new MM("init`characterConstant:", true, 0),
    new MM("characterConstant", true, 0),
    new MM("init`str:", true, 0),
    new MM("str", true, 0),
    new MM("init`string:", true, 0),
    new MM("string", true, 0),
    new MM("init`kw:", true, 0),
    new MM("kw", true, 0),
    new MM("init`kwds:", true, 0),
    new MM("kwds", true, 0),
    new MM("init`keyword:", true, 0),
    new MM("keyword", true, 0),
    new MM("init`setterKw:", true, 0),
    new MM("setterKw", true, 0),
    new MM("init`setterKeyword:", true, 0),
    new MM("setterKeyword", true, 0),
    new MM("init`sym:", true, 0),
    new MM("sym", true, 0),
    new MM("init`symbol:", true, 0),
    new MM("symbol", true, 0),
    new MM("init`comment:", true, 0),
    new MM("comment", true, 0),
    new MM("init`binSel:", true, 0),
    new MM("binSel", true, 0),
    new MM("init`binarySelector:", true, 0),
    new MM("binarySelector", true, 0),
    new MM("init`symbolConstant:", true, 0),
    new MM("symbolConstant", true, 0),
    new MM("init`tuple:", true, 0),
    new MM("tuple", true, 0),
    new MM("init`literal:", true, 0),
    new MM("literal", true, 0),
    new MM("init`pattern:", true, 0),
    new MM("pattern", true, 0),
    new MM("init`patternLiteral:", true, 0),
    new MM("patternLiteral", true, 0),
    new MM("init`wildcardPattern:", true, 0),
    new MM("wildcardPattern", true, 0),
    new MM("init`literalPattern:", true, 0),
    new MM("literalPattern", true, 0),
    new MM("init`keywordPattern:", true, 0),
    new MM("keywordPattern", true, 0),
    new MM("init`kwPatternPair:", true, 0),
    new MM("kwPatternPair", true, 0),
    new MM("init`kwPatternValue:", true, 0),
    new MM("kwPatternValue", true, 0),
    new MM("init`variablePattern:", true, 0),
    new MM("variablePattern", true, 0),
    new MM("init`nestedPatternLiteral:", true, 0),
    new MM("nestedPatternLiteral", true, 0),
    new MM("init`slotName:", true, 0),
    new MM("slotName", true, 0),
    new MM("init`unarySelector:", true, 0),
    new MM("unarySelector", true, 0),
    new MM("init`parenthesizedExpression:", true, 0),
    new MM("parenthesizedExpression", true, 0),
    new MM("init`primary:", true, 0),
    new MM("primary", true, 0),
    new MM("init`unaryMsg:", true, 0),
    new MM("unaryMsg", true, 0),
    new MM("init`unaryExpression:", true, 0),
    new MM("unaryExpression", true, 0),
    new MM("init`binaryMsg:", true, 0),
    new MM("binaryMsg", true, 0),
    new MM("init`binaryExpression:", true, 0),
    new MM("binaryExpression", true, 0),
    new MM("init`keywordMsg:", true, 0),
    new MM("keywordMsg", true, 0),
    new MM("init`message:", true, 0),
    new MM("message", true, 0),
    new MM("init`nontrivialUnaryMessages:", true, 0),
    new MM("nontrivialUnaryMessages", true, 0),
    new MM("init`nontrivialBinaryMessages:", true, 0),
    new MM("nontrivialBinaryMessages", true, 0),
    new MM("init`keywordMessages:", true, 0),
    new MM("keywordMessages", true, 0),
    new MM("init`nonEmptyMessages:", true, 0),
    new MM("nonEmptyMessages", true, 0),
    new MM("init`keywordExpression:", true, 0),
    new MM("keywordExpression", true, 0),
    new MM("init`keywordHereSend:", true, 0),
    new MM("keywordHereSend", true, 0),
    new MM("init`cascadeMsg:", true, 0),
    new MM("cascadeMsg", true, 0),
    new MM("init`msgCascade:", true, 0),
    new MM("msgCascade", true, 0),
    new MM("init`cascadedMessageExpression:", true, 0),
    new MM("cascadedMessageExpression", true, 0),
    new MM("init`sendExpression:", true, 0),
    new MM("sendExpression", true, 0),
    new MM("init`expression:", true, 0),
    new MM("expression", true, 0),
    new MM("init`returnStatement:", true, 0),
    new MM("returnStatement", true, 0),
    new MM("init`furtherStatements:", true, 0),
    new MM("furtherStatements", true, 0),
    new MM("init`statementSequence:", true, 0),
    new MM("statementSequence", true, 0),
    new MM("init`statements:", true, 0),
    new MM("statements", true, 0),
    new MM("init`blockParameter:", true, 0),
    new MM("blockParameter", true, 0),
    new MM("init`blockParameters:", true, 0),
    new MM("blockParameters", true, 0),
    new MM("init`slotDefs:", true, 0),
    new MM("slotDefs", true, 0),
    new MM("init`seqSlotDecls:", true, 0),
    new MM("seqSlotDecls", true, 0),
    new MM("init`simSlotDecls:", true, 0),
    new MM("simSlotDecls", true, 0),
    new MM("init`slotDecls:", true, 0),
    new MM("slotDecls", true, 0),
    new MM("init`temporaries:", true, 0),
    new MM("temporaries", true, 0),
    new MM("init`beginNSComment:", true, 0),
    new MM("beginNSComment", true, 0),
    new MM("init`endNSComment:", true, 0),
    new MM("endNSComment", true, 0),
    new MM("init`keywordAndLiteral:", true, 0),
    new MM("keywordAndLiteral", true, 0),
    new MM("init`literalMessage:", true, 0),
    new MM("literalMessage", true, 0),
    new MM("init`literalMessageComment:", true, 0),
    new MM("literalMessageComment", true, 0),
    new MM("init`codeBody:", true, 0),
    new MM("codeBody", true, 0),
    new MM("init`block:", true, 0),
    new MM("block", true, 0),
    new MM("init`slotDecl:", true, 0),
    new MM("slotDecl", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("init`slotDef:", true, 0),
    new MM("slotDef", true, 0),
    new MM("init`initExprs:", true, 0),
    new MM("initExprs", true, 0),
    new MM("init`unaryMsgPattern:", true, 0),
    new MM("unaryMsgPattern", true, 0),
    new MM("init`binaryMsgPattern:", true, 0),
    new MM("binaryMsgPattern", true, 0),
    new MM("init`keywordMsgPattern:", true, 0),
    new MM("keywordMsgPattern", true, 0),
    new MM("init`messagePattern:", true, 0),
    new MM("messagePattern", true, 0),
    new MM("init`methodDecl:", true, 0),
    new MM("methodDecl", true, 0),
    new MM("init`optionalFactorySection:", true, 0),
    new MM("optionalFactorySection", true, 0),
    new MM("init`classPrefix:", true, 0),
    new MM("classPrefix", true, 0),
    new MM("init`mixinApplication:", true, 0),
    new MM("mixinApplication", true, 0),
    new MM("init`category:", true, 0),
    new MM("category", true, 0),
    new MM("init`classComment:", true, 0),
    new MM("classComment", true, 0),
    new MM("init`sideDecl:", true, 0),
    new MM("sideDecl", true, 0),
    new MM("init`classSideDecl:", true, 0),
    new MM("classSideDecl", true, 0),
    new MM("init`languageId:", true, 0),
    new MM("languageId", true, 0),
    new MM("init`classCategory:", true, 0),
    new MM("classCategory", true, 0),
    new MM("init`superclassClause:", true, 0),
    new MM("superclassClause", true, 0),
    new MM("init`superclassPrefix:", true, 0),
    new MM("superclassPrefix", true, 0),
    new MM("init`outerReceiver:", true, 0),
    new MM("outerReceiver", true, 0),
    new MM("init`classHeader:", true, 0),
    new MM("classHeader", true, 0),
    new MM("init`classDeclaration:", true, 0),
    new MM("classDeclaration", true, 0),
    new MM("init`inheritanceClause:", true, 0),
    new MM("inheritanceClause", true, 0),
    new MM("init`instanceInitializer:", true, 0),
    new MM("instanceInitializer", true, 0),
    new MM("init`classBody:", true, 0),
    new MM("classBody", true, 0),
    new MM("init`mixinAppSuffix:", true, 0),
    new MM("mixinAppSuffix", true, 0),
    new MM("init`mixinSpec:", true, 0),
    new MM("mixinSpec", true, 0),
    new MM("init`explicitInheritanceListAndOrBody:", true, 0),
    new MM("explicitInheritanceListAndOrBody", true, 0),
    new MM("init`defaultSuperclassAndBody:", true, 0),
    new MM("defaultSuperclassAndBody", true, 0),
    new MM("init`inheritanceListAndOrBody:", true, 0),
    new MM("inheritanceListAndOrBody", true, 0),
    new MM("init`classDecl:", true, 0),
    new MM("classDecl", true, 0),
    new MM("init`toplevelClass:", true, 0),
    new MM("toplevelClass", true, 0),
    new MM("init`compilationUnit:", true, 0),
    new MM("compilationUnit", true, 0),
    new MM("init`doItExpression:", true, 0),
    new MM("doItExpression", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakGrammar$NS3Grammar = function () {
    var self = this;
    self.$super$NewspeakGrammar$NS3Grammar$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakGrammar$NS3Grammar();
    self._$init$whitespace$(self.$super$NewspeakGrammar$NS3Grammar$slot._$whitespace.call(self));
    self._$init$colon$(self._$tokenFromChar$(":"));
    self._$init$comma$(self._$tokenFromChar$(","));
    self._$init$dollar$(self._$tokenFromChar$("$"));
    self._$init$dot$(self._$tokenFromChar$("."));
    self._$init$equalSign$(self._$tokenFromChar$("="));
    self._$init$hat$(self._$tokenFromChar$("^"));
    self._$init$lbracket$(self._$tokenFromChar$("["));
    self._$init$lcurly$(self._$tokenFromChar$("{"));
    self._$init$lparen$(self._$tokenFromChar$("("));
    self._$init$langleBracket$(self._$tokenFromChar$("<"));
    self._$init$pound$(self._$tokenFromChar$("#"));
    self._$init$rangleBracket$(self._$tokenFromChar$(">"));
    self._$init$rbracket$(self._$tokenFromChar$("]"));
    self._$init$rcurly$(self._$tokenFromChar$("}"));
    self._$init$rparen$(self._$tokenFromChar$(")"));
    self._$init$semicolon$(self._$tokenFromChar$(";"));
    self._$init$slash$(self._$tokenFromChar$("/"));
    self._$init$vbar$(self._$tokenFromChar$("|"));
    self._$init$mixinOperator$(self._$tokenFromSymbol$(":>"));
    self._$init$inverseMixinOperator$(self._$tokenFromSymbol$("<:"));
    self._$init$eventualSendOperator$(self._$tokenFromSymbol$("<-:"));
    self._$init$digit$(self._$charBetween$and$("0", "9"));
    self._$init$digits$(self._$digit().$plus());
    self._$init$uppercaseLetter$(self._$charBetween$and$("A", "Z"));
    self._$init$extendedDigits$(self._$digit().$$pipe(self._$uppercaseLetter()).$plus());
    self._$init$radix$(self._$digits().$$comma(self._$char$("r")));
    self._$init$fraction$(self._$char$(".").$$comma(self._$digits()));
    self._$init$extendedFraction$(self._$char$(".").$$comma(self._$extendedDigits()));
    self._$init$exponent$(self._$char$("e").$$comma(self._$char$("-").$opt()).$$comma(self._$digits()));
    self._$init$decimalNum$(self._$char$("-").$opt().$$comma(self._$digits()).$$comma(self._$fraction().$opt()).$$comma(self._$exponent().$opt()));
    self._$init$radixNum$(self._$radix().$$comma(self._$char$("-").$opt()).$$comma(self._$extendedDigits()).$$comma(self._$extendedFraction().$opt()).$$comma(self._$exponent().$opt()));
    self._$init$num$(self._$radixNum().$$pipe(self._$decimalNum()));
    self._$init$number$(self._$tokenFor$(self._$num()));
    self._$init$letter$(self._$uppercaseLetter().$$pipe(self._$charBetween$and$("a", "z")));
    self._$init$specialCharacter$(self._$char$("+").$$pipe(self._$char$("/")).$$pipe(self._$char$("\\")).$$pipe(self._$char$("*")).$$pipe(self._$char$("~")).$$pipe(self._$char$("<")).$$pipe(self._$char$(">")).$$pipe(self._$char$("=")).$$pipe(self._$char$("@")).$$pipe(self._$char$("%")).$$pipe(self._$char$("|")).$$pipe(self._$char$("&")).$$pipe(self._$char$("?")).$$pipe(self._$char$("!")).$$pipe(self._$char$(",")));
    self._$init$character$(self._$digit().$$pipe(self._$letter()).$$pipe(self._$specialCharacter()).$$pipe(self._$char$("[")).$$pipe(self._$char$("]")).$$pipe(self._$char$("{")).$$pipe(self._$char$("}")).$$pipe(self._$char$("(")).$$pipe(self._$char$(")")).$$pipe(self._$char$("^")).$$pipe(self._$char$(";")).$$pipe(self._$char$("$")).$$pipe(self._$char$("#")).$$pipe(self._$char$(":")).$$pipe(self._$char$(".")).$$pipe(self._$char$("-")).$$pipe(self._$char$("_")).$$pipe(self._$char$("`")));
    self._$init$id$(self._$letter().$$pipe(self._$_()).$$comma(self._$letter().$$pipe(self._$digit()).$$pipe(self._$_()).$star()).$wrapper$(function ($fst, $snd) {
     return self._$String().$fromRunes$([$fst].$$comma($snd.$asArray()));
    }));
    self._$init$identifier$(self._$tokenFor$(self._$id()));
    self._$init$charIncludingQuotesAndSpace$(self._$character().$$pipe(self._$char$("'")).$$pipe(self._$char$("\"")).$$pipe(self._$char$(" ")));
    self._$init$newChar$(self._$tokenFor$(self._$char$("\"").$$comma(self._$charIncludingQuotesAndSpace()).$$comma(self._$char$("\""))));
    self._$init$oldChar$(self._$tokenFor$(self._$char$("$").$$comma(self._$charIncludingQuotesAndSpace())));
    self._$init$characterConstant$(self._$oldChar().$$pipe(self._$newChar()));
    self._$init$str$(self._$char$("'").$$comma(self._$stringBody()).$$comma(self._$char$("'")).$wrapper$(function ($oq, $es, $eq) {
     return self._$String().$fromRunes$($es);
    }));
    self._$init$string$(self._$tokenFor$(self._$str()));
    self._$init$kw$(self._$id().$$comma(self._$char$(":")).$wrapper$(function ($i, $c) {
     return $i.$$comma(":".$asString());
    }));
    self._$init$kwds$(self._$kw().$plus().$wrap$(function ($c) {
     return $c.$inject$into$("", function ($s, $e) {
      return $s.$$comma($e);
     });
    }));
    self._$init$keyword$(self._$tokenFor$(self._$kw()));
    self._$init$setterKw$(self._$kw().$$comma(self._$char$(":")).$wrapper$(function ($i, $c) {
     return $i.$$comma(":".$asString());
    }));
    self._$init$setterKeyword$(self._$tokenFor$(self._$setterKw()));
    self._$init$sym$(self._$str().$$pipe(self._$kwds()).$$pipe(self._$binSel()).$$pipe(self._$id()));
    self._$init$symbol$(self._$tokenFor$(self._$sym()));
    self._$init$comment$(self.$enclosingObjects$NewspeakGrammar$NS3Grammar[0]._$NSCommentParser().$new());
    self._$init$binSel$(self._$specialCharacter().$$pipe(self._$char$("-")).$$comma(self._$specialCharacter().$star()).$wrapper$(function ($c1, $c2) {
     return self._$String().$fromRunes$([$c1].$$comma($c2)).$asSymbol();
    }));
    self._$init$binarySelector$(self._$tokenFor$(self._$binSel()));
    self._$init$symbolConstant$(self._$pound().$$comma(self._$symbol()));
    self._$init$tuple$(self._$lcurly().$$comma(self._$expression().$starSeparatedOrTerminatedBy$(self._$dot())).$$comma(self._$rcurly()));
    self._$init$literal$(self._$pattern().$$pipe(self._$number()).$$pipe(self._$symbolConstant()).$$pipe(self._$characterConstant()).$$pipe(self._$string()).$$pipe(self._$tuple()));
    self._$init$pattern$(self._$tokenFromChar$("<").$$comma(self._$patternLiteral()).$$comma(self._$tokenFromChar$(">")));
    self._$init$patternLiteral$(self._$wildcardPattern().$$pipe(self._$literalPattern()).$$pipe(self._$keywordPattern()));
    self._$init$wildcardPattern$(self._$tokenFromChar$("_"));
    self._$init$literalPattern$(self._$tokenFor$(self._$number().$$pipe(self._$symbolConstant()).$$pipe(self._$characterConstant()).$$pipe(self._$string()).$$pipe(self._$tuple())));
    self._$init$keywordPattern$(self._$kwPatternPair().$plus());
    self._$init$kwPatternPair$(self._$keyword().$$comma(self._$kwPatternValue().$opt()));
    self._$init$kwPatternValue$(self._$wildcardPattern().$$pipe(self._$literalPattern()).$$pipe(self._$variablePattern()).$$pipe(self._$nestedPatternLiteral()));
    self._$init$variablePattern$(self._$tokenFor$(self._$char$("?").$$comma(self._$id())));
    self._$init$nestedPatternLiteral$(self._$tokenFor$(self._$pattern()));
    self._$init$slotName$(self._$identifier());
    self._$init$unarySelector$(self.$enclosingObjects$NewspeakGrammar$NS3Grammar[0]._$UnarySelectorParser().$new().$on$(self));
    self._$init$parenthesizedExpression$(self._$lparen().$$comma(self._$expression()).$$comma(self._$rparen()));
    self._$init$primary$(self._$slotName().$$pipe(self._$literal()).$$pipe(self._$block()).$$pipe(self._$parenthesizedExpression()));
    self._$init$unaryMsg$(self._$eventualSendOperator().$opt().$$comma(self._$unarySelector()));
    self._$init$unaryExpression$(self._$primary().$$comma(self._$unaryMsg().$star()));
    self._$init$binaryMsg$(self._$eventualSendOperator().$opt().$$comma(self._$binarySelector()).$$comma(self._$unaryExpression()));
    self._$init$binaryExpression$(self._$unaryExpression().$$comma(self._$binaryMsg().$star()));
    self._$init$keywordMsg$(self._$eventualSendOperator().$opt().$$comma(self._$keyword().$$comma(self._$binaryExpression()).$plus()));
    self._$init$message$(self._$keywordMsg().$$pipe(self._$binaryMsg()).$$pipe(self._$unaryMsg()));
    self._$init$nontrivialUnaryMessages$(self._$unaryMsg().$plus().$$comma(self._$binaryMsg().$star()).$$comma(self._$keywordMsg().$opt()));
    self._$init$nontrivialBinaryMessages$(self._$binaryMsg().$plus().$$comma(self._$keywordMsg().$opt()));
    self._$init$keywordMessages$(self._$keywordMsg());
    self._$init$nonEmptyMessages$(self._$nontrivialUnaryMessages().$$pipe(self._$nontrivialBinaryMessages()).$$pipe(self._$keywordMessages()));
    self._$init$keywordExpression$(self._$binaryExpression().$$comma(self._$keywordMsg().$opt()));
    self._$init$keywordHereSend$(self._$keywordMsg());
    self._$init$cascadeMsg$(self._$semicolon().$$comma(self._$keywordMsg().$$pipe(self._$binaryMsg()).$$pipe(self._$unaryMsg())));
    self._$init$msgCascade$(self._$nonEmptyMessages().$$comma(self._$cascadeMsg().$star()));
    self._$init$cascadedMessageExpression$(self._$primary().$$comma(self._$msgCascade().$opt()));
    self._$init$sendExpression$(self._$keywordHereSend().$$pipe(self._$cascadedMessageExpression()));
    self._$init$expression$(self._$setterKeyword().$star().$$comma(self._$sendExpression()));
    self._$init$returnStatement$(self._$hat().$$comma(self._$expression()).$$comma(self._$dot().$opt()));
    self._$init$furtherStatements$(self._$dot().$$comma(self._$statements()));
    self._$init$statementSequence$(self._$expression().$$comma(self._$furtherStatements().$opt()));
    self._$init$statements$(self._$returnStatement().$$pipe(self._$statementSequence()).$$pipe(self._$empty()));
    self._$init$blockParameter$(self._$colon().$$comma(self._$slotDecl()));
    self._$init$blockParameters$(self._$blockParameter().$plus().$$comma(self._$vbar()));
    self._$init$slotDefs$(self._$slotDef().$star());
    self._$init$seqSlotDecls$(self._$vbar().$$comma(self._$slotDefs()).$$comma(self._$vbar()));
    self._$init$simSlotDecls$(self._$vbar().$$comma(self._$vbar()).$$comma(self._$slotDefs()).$$comma(self._$vbar()).$$comma(self._$vbar()));
    self._$init$slotDecls$(self._$simSlotDecls().$$pipe(self._$seqSlotDecls()));
    self._$init$temporaries$(self._$slotDecls());
    self._$init$beginNSComment$(self._$char$("(").$$comma(self._$char$("*")));
    self._$init$endNSComment$(self._$char$("*").$$comma(self._$char$(")")));
    self._$init$keywordAndLiteral$(self._$keyword().$$comma(self._$literal()));
    self._$init$literalMessage$(self._$unaryMsg().$$pipe(self._$keywordAndLiteral().$plus()));
    self._$init$literalMessageComment$(self._$beginNSComment().$$comma(self._$tokenFromSymbol$(":literalmessage:")).$$comma(self._$whitespace().$opt()).$$comma(self._$literalMessage()).$$comma(self._$whitespace().$opt()).$$comma(self._$endNSComment()));
    self._$init$codeBody$(self._$literalMessageComment().$$pipe(self._$comment()).$$pipe(self._$whitespace()).$star().$$comma(self._$temporaries().$opt()).$$comma(self._$statements()));
    self._$init$block$(self._$lbracket().$$comma(self._$blockParameters().$opt()).$$comma(self._$codeBody()).$$comma(self._$rbracket()));
    self._$init$slotDecl$(self._$identifier());
    self._$init$accessModifier$(self._$tokenFromSymbol$("private").$$pipe(self._$tokenFromSymbol$("public")).$$pipe(self._$tokenFromSymbol$("protected")).$$comma(self._$whitespace()));
    self._$init$slotDef$(self._$accessModifier().$opt().$$comma(self._$slotDecl()).$$comma(self._$tokenFromSymbol$("=").$$pipe(self._$tokenFromSymbol$("::=")).$$comma(self._$expression()).$$comma(self._$dot()).$opt()));
    self._$init$initExprs$(self._$expression().$starSeparatedOrTerminatedBy$(self._$dot()));
    self._$init$unaryMsgPattern$(self._$unarySelector());
    self._$init$binaryMsgPattern$(self._$binarySelector().$$comma(self._$slotDecl()));
    self._$init$keywordMsgPattern$(self._$keyword().$$comma(self._$slotDecl()).$plus());
    self._$init$messagePattern$(self._$unaryMsgPattern().$$pipe(self._$binaryMsgPattern()).$$pipe(self._$keywordMsgPattern()));
    self._$init$methodDecl$(self._$accessModifier().$opt().$$comma(self._$messagePattern()).$$comma(self._$equalSign()).$$comma(self._$lparen()).$$comma(self._$codeBody()).$$comma(self._$rparen()));
    self._$init$optionalFactorySection$(self._$messagePattern().$opt().$$comma(self._$equalSign()));
    self._$init$classPrefix$(self._$tokenFromSymbol$("class").$$comma(self._$identifier()).$$comma(self._$optionalFactorySection()).$$comma(self._$superclassClause().$opt()));
    self._$init$mixinApplication$(self._$classPrefix().$$comma(self._$inverseMixinOperator()).$$comma(self._$sendExpression()));
    self._$init$category$(self._$string().$$comma(self._$methodDecl().$star()));
    self._$init$classComment$(self._$whitespace().$opt().$$comma(self._$comment()));
    self._$init$sideDecl$(self._$lparen().$$comma(self._$classDecl().$star()).$$comma(self._$category().$star()).$$comma(self._$rparen()));
    self._$init$classSideDecl$(self._$colon().$$comma(self._$lparen()).$$comma(self._$category().$star()).$$comma(self._$rparen()));
    self._$init$languageId$(self._$identifier());
    self._$init$classCategory$(self._$string().$opt());
    self._$init$superclassClause$(self._$superclassPrefix().$opt().$$comma(self._$unaryMsg()).$$comma(self._$message().$opt()));
    self._$init$superclassPrefix$(self._$outerReceiver().$$pipe(self._$tokenFromSymbol$("self")).$$pipe(self._$tokenFromSymbol$("super")));
    self._$init$outerReceiver$(self._$tokenFromSymbol$("outer").$$comma(self._$identifier()));
    self._$init$classHeader$(self._$accessModifier().$opt().$$comma(self._$tokenFromSymbol$("class")).$$comma(self._$identifier()).$$comma(self._$messagePattern()).$$comma(self._$equalSign()).$$comma(self._$superclassClause().$opt()).$$comma(self._$lparen()).$$comma(self._$classComment().$opt()).$$comma(self._$slotDecls().$opt()).$$comma(self._$initExprs()).$$comma(self._$rparen()).$$pipe(self._$accessModifier().$opt().$$comma(self._$tokenFromSymbol$("class")).$$comma(self._$identifier()).$$comma(self._$empty()).$$comma(self._$equalSign()).$$comma(self._$superclassClause().$opt()).$$comma(self._$lparen()).$$comma(self._$classComment().$opt()).$$comma(self._$slotDecls().$opt()).$$comma(self._$initExprs()).$$comma(self._$rparen())));
    self._$init$classDeclaration$(self._$classHeader().$$comma(self._$sideDecl()).$$comma(self._$classSideDecl().$opt()));
    self._$init$inheritanceClause$(self._$superclassClause());
    self._$init$instanceInitializer$(self._$lparen().$$comma(self._$classComment().$opt()).$$comma(self._$slotDecls().$opt()).$$comma(self._$initExprs()).$$comma(self._$rparen()));
    self._$init$classBody$(self._$instanceInitializer().$$comma(self._$sideDecl()).$$comma(self._$classSideDecl().$opt()));
    self._$init$mixinAppSuffix$(self._$tokenFromSymbol$("<:").$$comma(self._$inheritanceClause()).$plus().$$comma(self._$dot().$$pipe(self._$classBody())));
    self._$init$mixinSpec$(self._$classBody().$$pipe(self._$mixinAppSuffix()));
    self._$init$explicitInheritanceListAndOrBody$(self._$inheritanceClause().$$comma(self._$mixinSpec()));
    self._$init$defaultSuperclassAndBody$(self._$classBody());
    self._$init$inheritanceListAndOrBody$(self._$defaultSuperclassAndBody().$$pipe(self._$explicitInheritanceListAndOrBody()));
    self._$init$classDecl$(self._$accessModifier().$opt().$$comma(self._$tokenFromSymbol$("class")).$$comma(self._$identifier()).$$comma(self._$messagePattern()).$$comma(self._$equalSign()).$$comma(self._$inheritanceListAndOrBody()).$$pipe(self._$accessModifier().$opt().$$comma(self._$tokenFromSymbol$("class")).$$comma(self._$identifier()).$$comma(self._$empty()).$$comma(self._$equalSign()).$$comma(self._$inheritanceListAndOrBody())));
    self._$init$toplevelClass$(self._$classCategory().$$comma(self._$classDecl()));
    self._$init$compilationUnit$(self._$languageId().$$comma(self._$toplevelClass()).$$comma(self._$eoi()));
    self._$init$doItExpression$(self._$codeBody().$$comma(self._$eoi()));
    return self;
   };
   this.$_ = function () {
    var self = this;
    return self._$char$("_");
   };
   this.$stringBody = function () {
    var self = this;
    return $0.$CollectingCommentParser(self.$enclosingObjects$NewspeakGrammar$NS3Grammar[0]).$new().$termBlock$(function ($input) {
     var $c = nil;
     $c = $input.$peek();
     return $c.$isNil().$ifTrue$ifFalse$(function () {
      return false;
     }, function () {
      return $c.$$equal(39).$ifFalse$ifTrue$(function () {
       return false;
      }, function () {
       var $pos = nil;
       $pos = $input.$position();
       $input.$next();
       return $input.$peek().$$equal(39).$ifTrue$ifFalse$(function () {
        return false;
       }, function () {
        $input.$position$($pos);
        return true;
       });
      });
     });
    });
   };
   this.$init$whitespace$ = function (v) {
    this.$whitespace$slot = v;
    return this;
   };
   this.$whitespace = function () {
    return this.$whitespace$slot;
   };
   this.$init$colon$ = function (v) {
    this.$colon$slot = v;
    return this;
   };
   this.$colon = function () {
    return this.$colon$slot;
   };
   this.$init$comma$ = function (v) {
    this.$comma$slot = v;
    return this;
   };
   this.$comma = function () {
    return this.$comma$slot;
   };
   this.$init$dollar$ = function (v) {
    this.$dollar$slot = v;
    return this;
   };
   this.$dollar = function () {
    return this.$dollar$slot;
   };
   this.$init$dot$ = function (v) {
    this.$dot$slot = v;
    return this;
   };
   this.$dot = function () {
    return this.$dot$slot;
   };
   this.$init$equalSign$ = function (v) {
    this.$equalSign$slot = v;
    return this;
   };
   this.$equalSign = function () {
    return this.$equalSign$slot;
   };
   this.$init$hat$ = function (v) {
    this.$hat$slot = v;
    return this;
   };
   this.$hat = function () {
    return this.$hat$slot;
   };
   this.$init$lbracket$ = function (v) {
    this.$lbracket$slot = v;
    return this;
   };
   this.$lbracket = function () {
    return this.$lbracket$slot;
   };
   this.$init$lcurly$ = function (v) {
    this.$lcurly$slot = v;
    return this;
   };
   this.$lcurly = function () {
    return this.$lcurly$slot;
   };
   this.$init$lparen$ = function (v) {
    this.$lparen$slot = v;
    return this;
   };
   this.$lparen = function () {
    return this.$lparen$slot;
   };
   this.$init$langleBracket$ = function (v) {
    this.$langleBracket$slot = v;
    return this;
   };
   this.$langleBracket = function () {
    return this.$langleBracket$slot;
   };
   this.$init$pound$ = function (v) {
    this.$pound$slot = v;
    return this;
   };
   this.$pound = function () {
    return this.$pound$slot;
   };
   this.$init$rangleBracket$ = function (v) {
    this.$rangleBracket$slot = v;
    return this;
   };
   this.$rangleBracket = function () {
    return this.$rangleBracket$slot;
   };
   this.$init$rbracket$ = function (v) {
    this.$rbracket$slot = v;
    return this;
   };
   this.$rbracket = function () {
    return this.$rbracket$slot;
   };
   this.$init$rcurly$ = function (v) {
    this.$rcurly$slot = v;
    return this;
   };
   this.$rcurly = function () {
    return this.$rcurly$slot;
   };
   this.$init$rparen$ = function (v) {
    this.$rparen$slot = v;
    return this;
   };
   this.$rparen = function () {
    return this.$rparen$slot;
   };
   this.$init$semicolon$ = function (v) {
    this.$semicolon$slot = v;
    return this;
   };
   this.$semicolon = function () {
    return this.$semicolon$slot;
   };
   this.$init$slash$ = function (v) {
    this.$slash$slot = v;
    return this;
   };
   this.$slash = function () {
    return this.$slash$slot;
   };
   this.$init$vbar$ = function (v) {
    this.$vbar$slot = v;
    return this;
   };
   this.$vbar = function () {
    return this.$vbar$slot;
   };
   this.$init$mixinOperator$ = function (v) {
    this.$mixinOperator$slot = v;
    return this;
   };
   this.$mixinOperator = function () {
    return this.$mixinOperator$slot;
   };
   this.$init$inverseMixinOperator$ = function (v) {
    this.$inverseMixinOperator$slot = v;
    return this;
   };
   this.$inverseMixinOperator = function () {
    return this.$inverseMixinOperator$slot;
   };
   this.$init$eventualSendOperator$ = function (v) {
    this.$eventualSendOperator$slot = v;
    return this;
   };
   this.$eventualSendOperator = function () {
    return this.$eventualSendOperator$slot;
   };
   this.$init$digit$ = function (v) {
    this.$digit$slot = v;
    return this;
   };
   this.$digit = function () {
    return this.$digit$slot;
   };
   this.$init$digits$ = function (v) {
    this.$digits$slot = v;
    return this;
   };
   this.$digits = function () {
    return this.$digits$slot;
   };
   this.$init$uppercaseLetter$ = function (v) {
    this.$uppercaseLetter$slot = v;
    return this;
   };
   this.$uppercaseLetter = function () {
    return this.$uppercaseLetter$slot;
   };
   this.$init$extendedDigits$ = function (v) {
    this.$extendedDigits$slot = v;
    return this;
   };
   this.$extendedDigits = function () {
    return this.$extendedDigits$slot;
   };
   this.$init$radix$ = function (v) {
    this.$radix$slot = v;
    return this;
   };
   this.$radix = function () {
    return this.$radix$slot;
   };
   this.$init$fraction$ = function (v) {
    this.$fraction$slot = v;
    return this;
   };
   this.$fraction = function () {
    return this.$fraction$slot;
   };
   this.$init$extendedFraction$ = function (v) {
    this.$extendedFraction$slot = v;
    return this;
   };
   this.$extendedFraction = function () {
    return this.$extendedFraction$slot;
   };
   this.$init$exponent$ = function (v) {
    this.$exponent$slot = v;
    return this;
   };
   this.$exponent = function () {
    return this.$exponent$slot;
   };
   this.$init$decimalNum$ = function (v) {
    this.$decimalNum$slot = v;
    return this;
   };
   this.$decimalNum = function () {
    return this.$decimalNum$slot;
   };
   this.$init$radixNum$ = function (v) {
    this.$radixNum$slot = v;
    return this;
   };
   this.$radixNum = function () {
    return this.$radixNum$slot;
   };
   this.$init$num$ = function (v) {
    this.$num$slot = v;
    return this;
   };
   this.$num = function () {
    return this.$num$slot;
   };
   this.$init$number$ = function (v) {
    this.$number$slot = v;
    return this;
   };
   this.$number = function () {
    return this.$number$slot;
   };
   this.$init$letter$ = function (v) {
    this.$letter$slot = v;
    return this;
   };
   this.$letter = function () {
    return this.$letter$slot;
   };
   this.$init$specialCharacter$ = function (v) {
    this.$specialCharacter$slot = v;
    return this;
   };
   this.$specialCharacter = function () {
    return this.$specialCharacter$slot;
   };
   this.$init$character$ = function (v) {
    this.$character$slot = v;
    return this;
   };
   this.$character = function () {
    return this.$character$slot;
   };
   this.$init$id$ = function (v) {
    this.$id$slot = v;
    return this;
   };
   this.$id = function () {
    return this.$id$slot;
   };
   this.$init$identifier$ = function (v) {
    this.$identifier$slot = v;
    return this;
   };
   this.$identifier = function () {
    return this.$identifier$slot;
   };
   this.$init$charIncludingQuotesAndSpace$ = function (v) {
    this.$charIncludingQuotesAndSpace$slot = v;
    return this;
   };
   this.$charIncludingQuotesAndSpace = function () {
    return this.$charIncludingQuotesAndSpace$slot;
   };
   this.$init$newChar$ = function (v) {
    this.$newChar$slot = v;
    return this;
   };
   this.$newChar = function () {
    return this.$newChar$slot;
   };
   this.$init$oldChar$ = function (v) {
    this.$oldChar$slot = v;
    return this;
   };
   this.$oldChar = function () {
    return this.$oldChar$slot;
   };
   this.$init$characterConstant$ = function (v) {
    this.$characterConstant$slot = v;
    return this;
   };
   this.$characterConstant = function () {
    return this.$characterConstant$slot;
   };
   this.$init$str$ = function (v) {
    this.$str$slot = v;
    return this;
   };
   this.$str = function () {
    return this.$str$slot;
   };
   this.$init$string$ = function (v) {
    this.$string$slot = v;
    return this;
   };
   this.$string = function () {
    return this.$string$slot;
   };
   this.$init$kw$ = function (v) {
    this.$kw$slot = v;
    return this;
   };
   this.$kw = function () {
    return this.$kw$slot;
   };
   this.$init$kwds$ = function (v) {
    this.$kwds$slot = v;
    return this;
   };
   this.$kwds = function () {
    return this.$kwds$slot;
   };
   this.$init$keyword$ = function (v) {
    this.$keyword$slot = v;
    return this;
   };
   this.$keyword = function () {
    return this.$keyword$slot;
   };
   this.$init$setterKw$ = function (v) {
    this.$setterKw$slot = v;
    return this;
   };
   this.$setterKw = function () {
    return this.$setterKw$slot;
   };
   this.$init$setterKeyword$ = function (v) {
    this.$setterKeyword$slot = v;
    return this;
   };
   this.$setterKeyword = function () {
    return this.$setterKeyword$slot;
   };
   this.$init$sym$ = function (v) {
    this.$sym$slot = v;
    return this;
   };
   this.$sym = function () {
    return this.$sym$slot;
   };
   this.$init$symbol$ = function (v) {
    this.$symbol$slot = v;
    return this;
   };
   this.$symbol = function () {
    return this.$symbol$slot;
   };
   this.$init$comment$ = function (v) {
    this.$comment$slot = v;
    return this;
   };
   this.$comment = function () {
    return this.$comment$slot;
   };
   this.$init$binSel$ = function (v) {
    this.$binSel$slot = v;
    return this;
   };
   this.$binSel = function () {
    return this.$binSel$slot;
   };
   this.$init$binarySelector$ = function (v) {
    this.$binarySelector$slot = v;
    return this;
   };
   this.$binarySelector = function () {
    return this.$binarySelector$slot;
   };
   this.$init$symbolConstant$ = function (v) {
    this.$symbolConstant$slot = v;
    return this;
   };
   this.$symbolConstant = function () {
    return this.$symbolConstant$slot;
   };
   this.$init$tuple$ = function (v) {
    this.$tuple$slot = v;
    return this;
   };
   this.$tuple = function () {
    return this.$tuple$slot;
   };
   this.$init$literal$ = function (v) {
    this.$literal$slot = v;
    return this;
   };
   this.$literal = function () {
    return this.$literal$slot;
   };
   this.$init$pattern$ = function (v) {
    this.$pattern$slot = v;
    return this;
   };
   this.$pattern = function () {
    return this.$pattern$slot;
   };
   this.$init$patternLiteral$ = function (v) {
    this.$patternLiteral$slot = v;
    return this;
   };
   this.$patternLiteral = function () {
    return this.$patternLiteral$slot;
   };
   this.$init$wildcardPattern$ = function (v) {
    this.$wildcardPattern$slot = v;
    return this;
   };
   this.$wildcardPattern = function () {
    return this.$wildcardPattern$slot;
   };
   this.$init$literalPattern$ = function (v) {
    this.$literalPattern$slot = v;
    return this;
   };
   this.$literalPattern = function () {
    return this.$literalPattern$slot;
   };
   this.$init$keywordPattern$ = function (v) {
    this.$keywordPattern$slot = v;
    return this;
   };
   this.$keywordPattern = function () {
    return this.$keywordPattern$slot;
   };
   this.$init$kwPatternPair$ = function (v) {
    this.$kwPatternPair$slot = v;
    return this;
   };
   this.$kwPatternPair = function () {
    return this.$kwPatternPair$slot;
   };
   this.$init$kwPatternValue$ = function (v) {
    this.$kwPatternValue$slot = v;
    return this;
   };
   this.$kwPatternValue = function () {
    return this.$kwPatternValue$slot;
   };
   this.$init$variablePattern$ = function (v) {
    this.$variablePattern$slot = v;
    return this;
   };
   this.$variablePattern = function () {
    return this.$variablePattern$slot;
   };
   this.$init$nestedPatternLiteral$ = function (v) {
    this.$nestedPatternLiteral$slot = v;
    return this;
   };
   this.$nestedPatternLiteral = function () {
    return this.$nestedPatternLiteral$slot;
   };
   this.$init$slotName$ = function (v) {
    this.$slotName$slot = v;
    return this;
   };
   this.$slotName = function () {
    return this.$slotName$slot;
   };
   this.$init$unarySelector$ = function (v) {
    this.$unarySelector$slot = v;
    return this;
   };
   this.$unarySelector = function () {
    return this.$unarySelector$slot;
   };
   this.$init$parenthesizedExpression$ = function (v) {
    this.$parenthesizedExpression$slot = v;
    return this;
   };
   this.$parenthesizedExpression = function () {
    return this.$parenthesizedExpression$slot;
   };
   this.$init$primary$ = function (v) {
    this.$primary$slot = v;
    return this;
   };
   this.$primary = function () {
    return this.$primary$slot;
   };
   this.$init$unaryMsg$ = function (v) {
    this.$unaryMsg$slot = v;
    return this;
   };
   this.$unaryMsg = function () {
    return this.$unaryMsg$slot;
   };
   this.$init$unaryExpression$ = function (v) {
    this.$unaryExpression$slot = v;
    return this;
   };
   this.$unaryExpression = function () {
    return this.$unaryExpression$slot;
   };
   this.$init$binaryMsg$ = function (v) {
    this.$binaryMsg$slot = v;
    return this;
   };
   this.$binaryMsg = function () {
    return this.$binaryMsg$slot;
   };
   this.$init$binaryExpression$ = function (v) {
    this.$binaryExpression$slot = v;
    return this;
   };
   this.$binaryExpression = function () {
    return this.$binaryExpression$slot;
   };
   this.$init$keywordMsg$ = function (v) {
    this.$keywordMsg$slot = v;
    return this;
   };
   this.$keywordMsg = function () {
    return this.$keywordMsg$slot;
   };
   this.$init$message$ = function (v) {
    this.$message$slot = v;
    return this;
   };
   this.$message = function () {
    return this.$message$slot;
   };
   this.$init$nontrivialUnaryMessages$ = function (v) {
    this.$nontrivialUnaryMessages$slot = v;
    return this;
   };
   this.$nontrivialUnaryMessages = function () {
    return this.$nontrivialUnaryMessages$slot;
   };
   this.$init$nontrivialBinaryMessages$ = function (v) {
    this.$nontrivialBinaryMessages$slot = v;
    return this;
   };
   this.$nontrivialBinaryMessages = function () {
    return this.$nontrivialBinaryMessages$slot;
   };
   this.$init$keywordMessages$ = function (v) {
    this.$keywordMessages$slot = v;
    return this;
   };
   this.$keywordMessages = function () {
    return this.$keywordMessages$slot;
   };
   this.$init$nonEmptyMessages$ = function (v) {
    this.$nonEmptyMessages$slot = v;
    return this;
   };
   this.$nonEmptyMessages = function () {
    return this.$nonEmptyMessages$slot;
   };
   this.$init$keywordExpression$ = function (v) {
    this.$keywordExpression$slot = v;
    return this;
   };
   this.$keywordExpression = function () {
    return this.$keywordExpression$slot;
   };
   this.$init$keywordHereSend$ = function (v) {
    this.$keywordHereSend$slot = v;
    return this;
   };
   this.$keywordHereSend = function () {
    return this.$keywordHereSend$slot;
   };
   this.$init$cascadeMsg$ = function (v) {
    this.$cascadeMsg$slot = v;
    return this;
   };
   this.$cascadeMsg = function () {
    return this.$cascadeMsg$slot;
   };
   this.$init$msgCascade$ = function (v) {
    this.$msgCascade$slot = v;
    return this;
   };
   this.$msgCascade = function () {
    return this.$msgCascade$slot;
   };
   this.$init$cascadedMessageExpression$ = function (v) {
    this.$cascadedMessageExpression$slot = v;
    return this;
   };
   this.$cascadedMessageExpression = function () {
    return this.$cascadedMessageExpression$slot;
   };
   this.$init$sendExpression$ = function (v) {
    this.$sendExpression$slot = v;
    return this;
   };
   this.$sendExpression = function () {
    return this.$sendExpression$slot;
   };
   this.$init$expression$ = function (v) {
    this.$expression$slot = v;
    return this;
   };
   this.$expression = function () {
    return this.$expression$slot;
   };
   this.$init$returnStatement$ = function (v) {
    this.$returnStatement$slot = v;
    return this;
   };
   this.$returnStatement = function () {
    return this.$returnStatement$slot;
   };
   this.$init$furtherStatements$ = function (v) {
    this.$furtherStatements$slot = v;
    return this;
   };
   this.$furtherStatements = function () {
    return this.$furtherStatements$slot;
   };
   this.$init$statementSequence$ = function (v) {
    this.$statementSequence$slot = v;
    return this;
   };
   this.$statementSequence = function () {
    return this.$statementSequence$slot;
   };
   this.$init$statements$ = function (v) {
    this.$statements$slot = v;
    return this;
   };
   this.$statements = function () {
    return this.$statements$slot;
   };
   this.$init$blockParameter$ = function (v) {
    this.$blockParameter$slot = v;
    return this;
   };
   this.$blockParameter = function () {
    return this.$blockParameter$slot;
   };
   this.$init$blockParameters$ = function (v) {
    this.$blockParameters$slot = v;
    return this;
   };
   this.$blockParameters = function () {
    return this.$blockParameters$slot;
   };
   this.$init$slotDefs$ = function (v) {
    this.$slotDefs$slot = v;
    return this;
   };
   this.$slotDefs = function () {
    return this.$slotDefs$slot;
   };
   this.$init$seqSlotDecls$ = function (v) {
    this.$seqSlotDecls$slot = v;
    return this;
   };
   this.$seqSlotDecls = function () {
    return this.$seqSlotDecls$slot;
   };
   this.$init$simSlotDecls$ = function (v) {
    this.$simSlotDecls$slot = v;
    return this;
   };
   this.$simSlotDecls = function () {
    return this.$simSlotDecls$slot;
   };
   this.$init$slotDecls$ = function (v) {
    this.$slotDecls$slot = v;
    return this;
   };
   this.$slotDecls = function () {
    return this.$slotDecls$slot;
   };
   this.$init$temporaries$ = function (v) {
    this.$temporaries$slot = v;
    return this;
   };
   this.$temporaries = function () {
    return this.$temporaries$slot;
   };
   this.$init$beginNSComment$ = function (v) {
    this.$beginNSComment$slot = v;
    return this;
   };
   this.$beginNSComment = function () {
    return this.$beginNSComment$slot;
   };
   this.$init$endNSComment$ = function (v) {
    this.$endNSComment$slot = v;
    return this;
   };
   this.$endNSComment = function () {
    return this.$endNSComment$slot;
   };
   this.$init$keywordAndLiteral$ = function (v) {
    this.$keywordAndLiteral$slot = v;
    return this;
   };
   this.$keywordAndLiteral = function () {
    return this.$keywordAndLiteral$slot;
   };
   this.$init$literalMessage$ = function (v) {
    this.$literalMessage$slot = v;
    return this;
   };
   this.$literalMessage = function () {
    return this.$literalMessage$slot;
   };
   this.$init$literalMessageComment$ = function (v) {
    this.$literalMessageComment$slot = v;
    return this;
   };
   this.$literalMessageComment = function () {
    return this.$literalMessageComment$slot;
   };
   this.$init$codeBody$ = function (v) {
    this.$codeBody$slot = v;
    return this;
   };
   this.$codeBody = function () {
    return this.$codeBody$slot;
   };
   this.$init$block$ = function (v) {
    this.$block$slot = v;
    return this;
   };
   this.$block = function () {
    return this.$block$slot;
   };
   this.$init$slotDecl$ = function (v) {
    this.$slotDecl$slot = v;
    return this;
   };
   this.$slotDecl = function () {
    return this.$slotDecl$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$init$slotDef$ = function (v) {
    this.$slotDef$slot = v;
    return this;
   };
   this.$slotDef = function () {
    return this.$slotDef$slot;
   };
   this.$init$initExprs$ = function (v) {
    this.$initExprs$slot = v;
    return this;
   };
   this.$initExprs = function () {
    return this.$initExprs$slot;
   };
   this.$init$unaryMsgPattern$ = function (v) {
    this.$unaryMsgPattern$slot = v;
    return this;
   };
   this.$unaryMsgPattern = function () {
    return this.$unaryMsgPattern$slot;
   };
   this.$init$binaryMsgPattern$ = function (v) {
    this.$binaryMsgPattern$slot = v;
    return this;
   };
   this.$binaryMsgPattern = function () {
    return this.$binaryMsgPattern$slot;
   };
   this.$init$keywordMsgPattern$ = function (v) {
    this.$keywordMsgPattern$slot = v;
    return this;
   };
   this.$keywordMsgPattern = function () {
    return this.$keywordMsgPattern$slot;
   };
   this.$init$messagePattern$ = function (v) {
    this.$messagePattern$slot = v;
    return this;
   };
   this.$messagePattern = function () {
    return this.$messagePattern$slot;
   };
   this.$init$methodDecl$ = function (v) {
    this.$methodDecl$slot = v;
    return this;
   };
   this.$methodDecl = function () {
    return this.$methodDecl$slot;
   };
   this.$init$optionalFactorySection$ = function (v) {
    this.$optionalFactorySection$slot = v;
    return this;
   };
   this.$optionalFactorySection = function () {
    return this.$optionalFactorySection$slot;
   };
   this.$init$classPrefix$ = function (v) {
    this.$classPrefix$slot = v;
    return this;
   };
   this.$classPrefix = function () {
    return this.$classPrefix$slot;
   };
   this.$init$mixinApplication$ = function (v) {
    this.$mixinApplication$slot = v;
    return this;
   };
   this.$mixinApplication = function () {
    return this.$mixinApplication$slot;
   };
   this.$init$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.$category = function () {
    return this.$category$slot;
   };
   this.$init$classComment$ = function (v) {
    this.$classComment$slot = v;
    return this;
   };
   this.$classComment = function () {
    return this.$classComment$slot;
   };
   this.$init$sideDecl$ = function (v) {
    this.$sideDecl$slot = v;
    return this;
   };
   this.$sideDecl = function () {
    return this.$sideDecl$slot;
   };
   this.$init$classSideDecl$ = function (v) {
    this.$classSideDecl$slot = v;
    return this;
   };
   this.$classSideDecl = function () {
    return this.$classSideDecl$slot;
   };
   this.$init$languageId$ = function (v) {
    this.$languageId$slot = v;
    return this;
   };
   this.$languageId = function () {
    return this.$languageId$slot;
   };
   this.$init$classCategory$ = function (v) {
    this.$classCategory$slot = v;
    return this;
   };
   this.$classCategory = function () {
    return this.$classCategory$slot;
   };
   this.$init$superclassClause$ = function (v) {
    this.$superclassClause$slot = v;
    return this;
   };
   this.$superclassClause = function () {
    return this.$superclassClause$slot;
   };
   this.$init$superclassPrefix$ = function (v) {
    this.$superclassPrefix$slot = v;
    return this;
   };
   this.$superclassPrefix = function () {
    return this.$superclassPrefix$slot;
   };
   this.$init$outerReceiver$ = function (v) {
    this.$outerReceiver$slot = v;
    return this;
   };
   this.$outerReceiver = function () {
    return this.$outerReceiver$slot;
   };
   this.$init$classHeader$ = function (v) {
    this.$classHeader$slot = v;
    return this;
   };
   this.$classHeader = function () {
    return this.$classHeader$slot;
   };
   this.$init$classDeclaration$ = function (v) {
    this.$classDeclaration$slot = v;
    return this;
   };
   this.$classDeclaration = function () {
    return this.$classDeclaration$slot;
   };
   this.$init$inheritanceClause$ = function (v) {
    this.$inheritanceClause$slot = v;
    return this;
   };
   this.$inheritanceClause = function () {
    return this.$inheritanceClause$slot;
   };
   this.$init$instanceInitializer$ = function (v) {
    this.$instanceInitializer$slot = v;
    return this;
   };
   this.$instanceInitializer = function () {
    return this.$instanceInitializer$slot;
   };
   this.$init$classBody$ = function (v) {
    this.$classBody$slot = v;
    return this;
   };
   this.$classBody = function () {
    return this.$classBody$slot;
   };
   this.$init$mixinAppSuffix$ = function (v) {
    this.$mixinAppSuffix$slot = v;
    return this;
   };
   this.$mixinAppSuffix = function () {
    return this.$mixinAppSuffix$slot;
   };
   this.$init$mixinSpec$ = function (v) {
    this.$mixinSpec$slot = v;
    return this;
   };
   this.$mixinSpec = function () {
    return this.$mixinSpec$slot;
   };
   this.$init$explicitInheritanceListAndOrBody$ = function (v) {
    this.$explicitInheritanceListAndOrBody$slot = v;
    return this;
   };
   this.$explicitInheritanceListAndOrBody = function () {
    return this.$explicitInheritanceListAndOrBody$slot;
   };
   this.$init$defaultSuperclassAndBody$ = function (v) {
    this.$defaultSuperclassAndBody$slot = v;
    return this;
   };
   this.$defaultSuperclassAndBody = function () {
    return this.$defaultSuperclassAndBody$slot;
   };
   this.$init$inheritanceListAndOrBody$ = function (v) {
    this.$inheritanceListAndOrBody$slot = v;
    return this;
   };
   this.$inheritanceListAndOrBody = function () {
    return this.$inheritanceListAndOrBody$slot;
   };
   this.$init$classDecl$ = function (v) {
    this.$classDecl$slot = v;
    return this;
   };
   this.$classDecl = function () {
    return this.$classDecl$slot;
   };
   this.$init$toplevelClass$ = function (v) {
    this.$toplevelClass$slot = v;
    return this;
   };
   this.$toplevelClass = function () {
    return this.$toplevelClass$slot;
   };
   this.$init$compilationUnit$ = function (v) {
    this.$compilationUnit$slot = v;
    return this;
   };
   this.$compilationUnit = function () {
    return this.$compilationUnit$slot;
   };
   this.$init$doItExpression$ = function (v) {
    this.$doItExpression$slot = v;
    return this;
   };
   this.$doItExpression = function () {
    return this.$doItExpression$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakGrammar`NS3Grammar";
     this._$superInit$NewspeakGrammar$NS3Grammar = $.$superInit$NewspeakGrammar$NS3Grammar;
     this.$superInit$NewspeakGrammar$NS3Grammar = dnuCatcher("$superInit$NewspeakGrammar$NS3Grammar");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$_ = $.$_;
     this.$_ = dnuCatcher("$_");
     this._$stringBody = $.$stringBody;
     this.$stringBody = dnuCatcher("$stringBody");
     this._$init$whitespace$ = $.$init$whitespace$;
     this.$init$whitespace$ = dnuCatcher("$init$whitespace$");
     this._$whitespace = $.$whitespace;
     this.$whitespace = dnuCatcher("$whitespace");
     this._$init$colon$ = $.$init$colon$;
     this.$init$colon$ = dnuCatcher("$init$colon$");
     this._$colon = $.$colon;
     this.$colon = dnuCatcher("$colon");
     this._$init$comma$ = $.$init$comma$;
     this.$init$comma$ = dnuCatcher("$init$comma$");
     this._$comma = $.$comma;
     this.$comma = dnuCatcher("$comma");
     this._$init$dollar$ = $.$init$dollar$;
     this.$init$dollar$ = dnuCatcher("$init$dollar$");
     this._$dollar = $.$dollar;
     this.$dollar = dnuCatcher("$dollar");
     this._$init$dot$ = $.$init$dot$;
     this.$init$dot$ = dnuCatcher("$init$dot$");
     this._$dot = $.$dot;
     this.$dot = dnuCatcher("$dot");
     this._$init$equalSign$ = $.$init$equalSign$;
     this.$init$equalSign$ = dnuCatcher("$init$equalSign$");
     this._$equalSign = $.$equalSign;
     this.$equalSign = dnuCatcher("$equalSign");
     this._$init$hat$ = $.$init$hat$;
     this.$init$hat$ = dnuCatcher("$init$hat$");
     this._$hat = $.$hat;
     this.$hat = dnuCatcher("$hat");
     this._$init$lbracket$ = $.$init$lbracket$;
     this.$init$lbracket$ = dnuCatcher("$init$lbracket$");
     this._$lbracket = $.$lbracket;
     this.$lbracket = dnuCatcher("$lbracket");
     this._$init$lcurly$ = $.$init$lcurly$;
     this.$init$lcurly$ = dnuCatcher("$init$lcurly$");
     this._$lcurly = $.$lcurly;
     this.$lcurly = dnuCatcher("$lcurly");
     this._$init$lparen$ = $.$init$lparen$;
     this.$init$lparen$ = dnuCatcher("$init$lparen$");
     this._$lparen = $.$lparen;
     this.$lparen = dnuCatcher("$lparen");
     this._$init$langleBracket$ = $.$init$langleBracket$;
     this.$init$langleBracket$ = dnuCatcher("$init$langleBracket$");
     this._$langleBracket = $.$langleBracket;
     this.$langleBracket = dnuCatcher("$langleBracket");
     this._$init$pound$ = $.$init$pound$;
     this.$init$pound$ = dnuCatcher("$init$pound$");
     this._$pound = $.$pound;
     this.$pound = dnuCatcher("$pound");
     this._$init$rangleBracket$ = $.$init$rangleBracket$;
     this.$init$rangleBracket$ = dnuCatcher("$init$rangleBracket$");
     this._$rangleBracket = $.$rangleBracket;
     this.$rangleBracket = dnuCatcher("$rangleBracket");
     this._$init$rbracket$ = $.$init$rbracket$;
     this.$init$rbracket$ = dnuCatcher("$init$rbracket$");
     this._$rbracket = $.$rbracket;
     this.$rbracket = dnuCatcher("$rbracket");
     this._$init$rcurly$ = $.$init$rcurly$;
     this.$init$rcurly$ = dnuCatcher("$init$rcurly$");
     this._$rcurly = $.$rcurly;
     this.$rcurly = dnuCatcher("$rcurly");
     this._$init$rparen$ = $.$init$rparen$;
     this.$init$rparen$ = dnuCatcher("$init$rparen$");
     this._$rparen = $.$rparen;
     this.$rparen = dnuCatcher("$rparen");
     this._$init$semicolon$ = $.$init$semicolon$;
     this.$init$semicolon$ = dnuCatcher("$init$semicolon$");
     this._$semicolon = $.$semicolon;
     this.$semicolon = dnuCatcher("$semicolon");
     this._$init$slash$ = $.$init$slash$;
     this.$init$slash$ = dnuCatcher("$init$slash$");
     this._$slash = $.$slash;
     this.$slash = dnuCatcher("$slash");
     this._$init$vbar$ = $.$init$vbar$;
     this.$init$vbar$ = dnuCatcher("$init$vbar$");
     this._$vbar = $.$vbar;
     this.$vbar = dnuCatcher("$vbar");
     this._$init$mixinOperator$ = $.$init$mixinOperator$;
     this.$init$mixinOperator$ = dnuCatcher("$init$mixinOperator$");
     this._$mixinOperator = $.$mixinOperator;
     this.$mixinOperator = dnuCatcher("$mixinOperator");
     this._$init$inverseMixinOperator$ = $.$init$inverseMixinOperator$;
     this.$init$inverseMixinOperator$ = dnuCatcher("$init$inverseMixinOperator$");
     this._$inverseMixinOperator = $.$inverseMixinOperator;
     this.$inverseMixinOperator = dnuCatcher("$inverseMixinOperator");
     this._$init$eventualSendOperator$ = $.$init$eventualSendOperator$;
     this.$init$eventualSendOperator$ = dnuCatcher("$init$eventualSendOperator$");
     this._$eventualSendOperator = $.$eventualSendOperator;
     this.$eventualSendOperator = dnuCatcher("$eventualSendOperator");
     this._$init$digit$ = $.$init$digit$;
     this.$init$digit$ = dnuCatcher("$init$digit$");
     this._$digit = $.$digit;
     this.$digit = dnuCatcher("$digit");
     this._$init$digits$ = $.$init$digits$;
     this.$init$digits$ = dnuCatcher("$init$digits$");
     this._$digits = $.$digits;
     this.$digits = dnuCatcher("$digits");
     this._$init$uppercaseLetter$ = $.$init$uppercaseLetter$;
     this.$init$uppercaseLetter$ = dnuCatcher("$init$uppercaseLetter$");
     this._$uppercaseLetter = $.$uppercaseLetter;
     this.$uppercaseLetter = dnuCatcher("$uppercaseLetter");
     this._$init$extendedDigits$ = $.$init$extendedDigits$;
     this.$init$extendedDigits$ = dnuCatcher("$init$extendedDigits$");
     this._$extendedDigits = $.$extendedDigits;
     this.$extendedDigits = dnuCatcher("$extendedDigits");
     this._$init$radix$ = $.$init$radix$;
     this.$init$radix$ = dnuCatcher("$init$radix$");
     this._$radix = $.$radix;
     this.$radix = dnuCatcher("$radix");
     this._$init$fraction$ = $.$init$fraction$;
     this.$init$fraction$ = dnuCatcher("$init$fraction$");
     this._$fraction = $.$fraction;
     this.$fraction = dnuCatcher("$fraction");
     this._$init$extendedFraction$ = $.$init$extendedFraction$;
     this.$init$extendedFraction$ = dnuCatcher("$init$extendedFraction$");
     this._$extendedFraction = $.$extendedFraction;
     this.$extendedFraction = dnuCatcher("$extendedFraction");
     this._$init$exponent$ = $.$init$exponent$;
     this.$init$exponent$ = dnuCatcher("$init$exponent$");
     this._$exponent = $.$exponent;
     this.$exponent = dnuCatcher("$exponent");
     this._$init$decimalNum$ = $.$init$decimalNum$;
     this.$init$decimalNum$ = dnuCatcher("$init$decimalNum$");
     this._$decimalNum = $.$decimalNum;
     this.$decimalNum = dnuCatcher("$decimalNum");
     this._$init$radixNum$ = $.$init$radixNum$;
     this.$init$radixNum$ = dnuCatcher("$init$radixNum$");
     this._$radixNum = $.$radixNum;
     this.$radixNum = dnuCatcher("$radixNum");
     this._$init$num$ = $.$init$num$;
     this.$init$num$ = dnuCatcher("$init$num$");
     this._$num = $.$num;
     this.$num = dnuCatcher("$num");
     this._$init$number$ = $.$init$number$;
     this.$init$number$ = dnuCatcher("$init$number$");
     this._$number = $.$number;
     this.$number = dnuCatcher("$number");
     this._$init$letter$ = $.$init$letter$;
     this.$init$letter$ = dnuCatcher("$init$letter$");
     this._$letter = $.$letter;
     this.$letter = dnuCatcher("$letter");
     this._$init$specialCharacter$ = $.$init$specialCharacter$;
     this.$init$specialCharacter$ = dnuCatcher("$init$specialCharacter$");
     this._$specialCharacter = $.$specialCharacter;
     this.$specialCharacter = dnuCatcher("$specialCharacter");
     this._$init$character$ = $.$init$character$;
     this.$init$character$ = dnuCatcher("$init$character$");
     this._$character = $.$character;
     this.$character = dnuCatcher("$character");
     this._$init$id$ = $.$init$id$;
     this.$init$id$ = dnuCatcher("$init$id$");
     this._$id = $.$id;
     this.$id = dnuCatcher("$id");
     this.$init$identifier$ = this._$init$identifier$ = $.$init$identifier$;
     this.$identifier = this._$identifier = $.$identifier;
     this._$init$charIncludingQuotesAndSpace$ = $.$init$charIncludingQuotesAndSpace$;
     this.$init$charIncludingQuotesAndSpace$ = dnuCatcher("$init$charIncludingQuotesAndSpace$");
     this._$charIncludingQuotesAndSpace = $.$charIncludingQuotesAndSpace;
     this.$charIncludingQuotesAndSpace = dnuCatcher("$charIncludingQuotesAndSpace");
     this._$init$newChar$ = $.$init$newChar$;
     this.$init$newChar$ = dnuCatcher("$init$newChar$");
     this._$newChar = $.$newChar;
     this.$newChar = dnuCatcher("$newChar");
     this._$init$oldChar$ = $.$init$oldChar$;
     this.$init$oldChar$ = dnuCatcher("$init$oldChar$");
     this._$oldChar = $.$oldChar;
     this.$oldChar = dnuCatcher("$oldChar");
     this._$init$characterConstant$ = $.$init$characterConstant$;
     this.$init$characterConstant$ = dnuCatcher("$init$characterConstant$");
     this._$characterConstant = $.$characterConstant;
     this.$characterConstant = dnuCatcher("$characterConstant");
     this._$init$str$ = $.$init$str$;
     this.$init$str$ = dnuCatcher("$init$str$");
     this._$str = $.$str;
     this.$str = dnuCatcher("$str");
     this._$init$string$ = $.$init$string$;
     this.$init$string$ = dnuCatcher("$init$string$");
     this._$string = $.$string;
     this.$string = dnuCatcher("$string");
     this._$init$kw$ = $.$init$kw$;
     this.$init$kw$ = dnuCatcher("$init$kw$");
     this._$kw = $.$kw;
     this.$kw = dnuCatcher("$kw");
     this._$init$kwds$ = $.$init$kwds$;
     this.$init$kwds$ = dnuCatcher("$init$kwds$");
     this._$kwds = $.$kwds;
     this.$kwds = dnuCatcher("$kwds");
     this.$init$keyword$ = this._$init$keyword$ = $.$init$keyword$;
     this.$keyword = this._$keyword = $.$keyword;
     this._$init$setterKw$ = $.$init$setterKw$;
     this.$init$setterKw$ = dnuCatcher("$init$setterKw$");
     this._$setterKw = $.$setterKw;
     this.$setterKw = dnuCatcher("$setterKw");
     this._$init$setterKeyword$ = $.$init$setterKeyword$;
     this.$init$setterKeyword$ = dnuCatcher("$init$setterKeyword$");
     this._$setterKeyword = $.$setterKeyword;
     this.$setterKeyword = dnuCatcher("$setterKeyword");
     this._$init$sym$ = $.$init$sym$;
     this.$init$sym$ = dnuCatcher("$init$sym$");
     this._$sym = $.$sym;
     this.$sym = dnuCatcher("$sym");
     this._$init$symbol$ = $.$init$symbol$;
     this.$init$symbol$ = dnuCatcher("$init$symbol$");
     this._$symbol = $.$symbol;
     this.$symbol = dnuCatcher("$symbol");
     this._$init$comment$ = $.$init$comment$;
     this.$init$comment$ = dnuCatcher("$init$comment$");
     this._$comment = $.$comment;
     this.$comment = dnuCatcher("$comment");
     this._$init$binSel$ = $.$init$binSel$;
     this.$init$binSel$ = dnuCatcher("$init$binSel$");
     this._$binSel = $.$binSel;
     this.$binSel = dnuCatcher("$binSel");
     this._$init$binarySelector$ = $.$init$binarySelector$;
     this.$init$binarySelector$ = dnuCatcher("$init$binarySelector$");
     this._$binarySelector = $.$binarySelector;
     this.$binarySelector = dnuCatcher("$binarySelector");
     this._$init$symbolConstant$ = $.$init$symbolConstant$;
     this.$init$symbolConstant$ = dnuCatcher("$init$symbolConstant$");
     this._$symbolConstant = $.$symbolConstant;
     this.$symbolConstant = dnuCatcher("$symbolConstant");
     this._$init$tuple$ = $.$init$tuple$;
     this.$init$tuple$ = dnuCatcher("$init$tuple$");
     this._$tuple = $.$tuple;
     this.$tuple = dnuCatcher("$tuple");
     this._$init$literal$ = $.$init$literal$;
     this.$init$literal$ = dnuCatcher("$init$literal$");
     this._$literal = $.$literal;
     this.$literal = dnuCatcher("$literal");
     this._$init$pattern$ = $.$init$pattern$;
     this.$init$pattern$ = dnuCatcher("$init$pattern$");
     this._$pattern = $.$pattern;
     this.$pattern = dnuCatcher("$pattern");
     this._$init$patternLiteral$ = $.$init$patternLiteral$;
     this.$init$patternLiteral$ = dnuCatcher("$init$patternLiteral$");
     this._$patternLiteral = $.$patternLiteral;
     this.$patternLiteral = dnuCatcher("$patternLiteral");
     this._$init$wildcardPattern$ = $.$init$wildcardPattern$;
     this.$init$wildcardPattern$ = dnuCatcher("$init$wildcardPattern$");
     this._$wildcardPattern = $.$wildcardPattern;
     this.$wildcardPattern = dnuCatcher("$wildcardPattern");
     this._$init$literalPattern$ = $.$init$literalPattern$;
     this.$init$literalPattern$ = dnuCatcher("$init$literalPattern$");
     this._$literalPattern = $.$literalPattern;
     this.$literalPattern = dnuCatcher("$literalPattern");
     this._$init$keywordPattern$ = $.$init$keywordPattern$;
     this.$init$keywordPattern$ = dnuCatcher("$init$keywordPattern$");
     this._$keywordPattern = $.$keywordPattern;
     this.$keywordPattern = dnuCatcher("$keywordPattern");
     this._$init$kwPatternPair$ = $.$init$kwPatternPair$;
     this.$init$kwPatternPair$ = dnuCatcher("$init$kwPatternPair$");
     this._$kwPatternPair = $.$kwPatternPair;
     this.$kwPatternPair = dnuCatcher("$kwPatternPair");
     this._$init$kwPatternValue$ = $.$init$kwPatternValue$;
     this.$init$kwPatternValue$ = dnuCatcher("$init$kwPatternValue$");
     this._$kwPatternValue = $.$kwPatternValue;
     this.$kwPatternValue = dnuCatcher("$kwPatternValue");
     this._$init$variablePattern$ = $.$init$variablePattern$;
     this.$init$variablePattern$ = dnuCatcher("$init$variablePattern$");
     this._$variablePattern = $.$variablePattern;
     this.$variablePattern = dnuCatcher("$variablePattern");
     this._$init$nestedPatternLiteral$ = $.$init$nestedPatternLiteral$;
     this.$init$nestedPatternLiteral$ = dnuCatcher("$init$nestedPatternLiteral$");
     this._$nestedPatternLiteral = $.$nestedPatternLiteral;
     this.$nestedPatternLiteral = dnuCatcher("$nestedPatternLiteral");
     this._$init$slotName$ = $.$init$slotName$;
     this.$init$slotName$ = dnuCatcher("$init$slotName$");
     this._$slotName = $.$slotName;
     this.$slotName = dnuCatcher("$slotName");
     this._$init$unarySelector$ = $.$init$unarySelector$;
     this.$init$unarySelector$ = dnuCatcher("$init$unarySelector$");
     this._$unarySelector = $.$unarySelector;
     this.$unarySelector = dnuCatcher("$unarySelector");
     this._$init$parenthesizedExpression$ = $.$init$parenthesizedExpression$;
     this.$init$parenthesizedExpression$ = dnuCatcher("$init$parenthesizedExpression$");
     this._$parenthesizedExpression = $.$parenthesizedExpression;
     this.$parenthesizedExpression = dnuCatcher("$parenthesizedExpression");
     this._$init$primary$ = $.$init$primary$;
     this.$init$primary$ = dnuCatcher("$init$primary$");
     this._$primary = $.$primary;
     this.$primary = dnuCatcher("$primary");
     this._$init$unaryMsg$ = $.$init$unaryMsg$;
     this.$init$unaryMsg$ = dnuCatcher("$init$unaryMsg$");
     this._$unaryMsg = $.$unaryMsg;
     this.$unaryMsg = dnuCatcher("$unaryMsg");
     this._$init$unaryExpression$ = $.$init$unaryExpression$;
     this.$init$unaryExpression$ = dnuCatcher("$init$unaryExpression$");
     this._$unaryExpression = $.$unaryExpression;
     this.$unaryExpression = dnuCatcher("$unaryExpression");
     this._$init$binaryMsg$ = $.$init$binaryMsg$;
     this.$init$binaryMsg$ = dnuCatcher("$init$binaryMsg$");
     this._$binaryMsg = $.$binaryMsg;
     this.$binaryMsg = dnuCatcher("$binaryMsg");
     this._$init$binaryExpression$ = $.$init$binaryExpression$;
     this.$init$binaryExpression$ = dnuCatcher("$init$binaryExpression$");
     this._$binaryExpression = $.$binaryExpression;
     this.$binaryExpression = dnuCatcher("$binaryExpression");
     this._$init$keywordMsg$ = $.$init$keywordMsg$;
     this.$init$keywordMsg$ = dnuCatcher("$init$keywordMsg$");
     this._$keywordMsg = $.$keywordMsg;
     this.$keywordMsg = dnuCatcher("$keywordMsg");
     this._$init$message$ = $.$init$message$;
     this.$init$message$ = dnuCatcher("$init$message$");
     this._$message = $.$message;
     this.$message = dnuCatcher("$message");
     this._$init$nontrivialUnaryMessages$ = $.$init$nontrivialUnaryMessages$;
     this.$init$nontrivialUnaryMessages$ = dnuCatcher("$init$nontrivialUnaryMessages$");
     this._$nontrivialUnaryMessages = $.$nontrivialUnaryMessages;
     this.$nontrivialUnaryMessages = dnuCatcher("$nontrivialUnaryMessages");
     this._$init$nontrivialBinaryMessages$ = $.$init$nontrivialBinaryMessages$;
     this.$init$nontrivialBinaryMessages$ = dnuCatcher("$init$nontrivialBinaryMessages$");
     this._$nontrivialBinaryMessages = $.$nontrivialBinaryMessages;
     this.$nontrivialBinaryMessages = dnuCatcher("$nontrivialBinaryMessages");
     this._$init$keywordMessages$ = $.$init$keywordMessages$;
     this.$init$keywordMessages$ = dnuCatcher("$init$keywordMessages$");
     this._$keywordMessages = $.$keywordMessages;
     this.$keywordMessages = dnuCatcher("$keywordMessages");
     this._$init$nonEmptyMessages$ = $.$init$nonEmptyMessages$;
     this.$init$nonEmptyMessages$ = dnuCatcher("$init$nonEmptyMessages$");
     this._$nonEmptyMessages = $.$nonEmptyMessages;
     this.$nonEmptyMessages = dnuCatcher("$nonEmptyMessages");
     this._$init$keywordExpression$ = $.$init$keywordExpression$;
     this.$init$keywordExpression$ = dnuCatcher("$init$keywordExpression$");
     this._$keywordExpression = $.$keywordExpression;
     this.$keywordExpression = dnuCatcher("$keywordExpression");
     this._$init$keywordHereSend$ = $.$init$keywordHereSend$;
     this.$init$keywordHereSend$ = dnuCatcher("$init$keywordHereSend$");
     this._$keywordHereSend = $.$keywordHereSend;
     this.$keywordHereSend = dnuCatcher("$keywordHereSend");
     this._$init$cascadeMsg$ = $.$init$cascadeMsg$;
     this.$init$cascadeMsg$ = dnuCatcher("$init$cascadeMsg$");
     this._$cascadeMsg = $.$cascadeMsg;
     this.$cascadeMsg = dnuCatcher("$cascadeMsg");
     this._$init$msgCascade$ = $.$init$msgCascade$;
     this.$init$msgCascade$ = dnuCatcher("$init$msgCascade$");
     this._$msgCascade = $.$msgCascade;
     this.$msgCascade = dnuCatcher("$msgCascade");
     this._$init$cascadedMessageExpression$ = $.$init$cascadedMessageExpression$;
     this.$init$cascadedMessageExpression$ = dnuCatcher("$init$cascadedMessageExpression$");
     this._$cascadedMessageExpression = $.$cascadedMessageExpression;
     this.$cascadedMessageExpression = dnuCatcher("$cascadedMessageExpression");
     this._$init$sendExpression$ = $.$init$sendExpression$;
     this.$init$sendExpression$ = dnuCatcher("$init$sendExpression$");
     this._$sendExpression = $.$sendExpression;
     this.$sendExpression = dnuCatcher("$sendExpression");
     this._$init$expression$ = $.$init$expression$;
     this.$init$expression$ = dnuCatcher("$init$expression$");
     this._$expression = $.$expression;
     this.$expression = dnuCatcher("$expression");
     this._$init$returnStatement$ = $.$init$returnStatement$;
     this.$init$returnStatement$ = dnuCatcher("$init$returnStatement$");
     this._$returnStatement = $.$returnStatement;
     this.$returnStatement = dnuCatcher("$returnStatement");
     this._$init$furtherStatements$ = $.$init$furtherStatements$;
     this.$init$furtherStatements$ = dnuCatcher("$init$furtherStatements$");
     this._$furtherStatements = $.$furtherStatements;
     this.$furtherStatements = dnuCatcher("$furtherStatements");
     this._$init$statementSequence$ = $.$init$statementSequence$;
     this.$init$statementSequence$ = dnuCatcher("$init$statementSequence$");
     this._$statementSequence = $.$statementSequence;
     this.$statementSequence = dnuCatcher("$statementSequence");
     this._$init$statements$ = $.$init$statements$;
     this.$init$statements$ = dnuCatcher("$init$statements$");
     this._$statements = $.$statements;
     this.$statements = dnuCatcher("$statements");
     this._$init$blockParameter$ = $.$init$blockParameter$;
     this.$init$blockParameter$ = dnuCatcher("$init$blockParameter$");
     this._$blockParameter = $.$blockParameter;
     this.$blockParameter = dnuCatcher("$blockParameter");
     this._$init$blockParameters$ = $.$init$blockParameters$;
     this.$init$blockParameters$ = dnuCatcher("$init$blockParameters$");
     this._$blockParameters = $.$blockParameters;
     this.$blockParameters = dnuCatcher("$blockParameters");
     this._$init$slotDefs$ = $.$init$slotDefs$;
     this.$init$slotDefs$ = dnuCatcher("$init$slotDefs$");
     this._$slotDefs = $.$slotDefs;
     this.$slotDefs = dnuCatcher("$slotDefs");
     this._$init$seqSlotDecls$ = $.$init$seqSlotDecls$;
     this.$init$seqSlotDecls$ = dnuCatcher("$init$seqSlotDecls$");
     this._$seqSlotDecls = $.$seqSlotDecls;
     this.$seqSlotDecls = dnuCatcher("$seqSlotDecls");
     this._$init$simSlotDecls$ = $.$init$simSlotDecls$;
     this.$init$simSlotDecls$ = dnuCatcher("$init$simSlotDecls$");
     this._$simSlotDecls = $.$simSlotDecls;
     this.$simSlotDecls = dnuCatcher("$simSlotDecls");
     this._$init$slotDecls$ = $.$init$slotDecls$;
     this.$init$slotDecls$ = dnuCatcher("$init$slotDecls$");
     this._$slotDecls = $.$slotDecls;
     this.$slotDecls = dnuCatcher("$slotDecls");
     this._$init$temporaries$ = $.$init$temporaries$;
     this.$init$temporaries$ = dnuCatcher("$init$temporaries$");
     this._$temporaries = $.$temporaries;
     this.$temporaries = dnuCatcher("$temporaries");
     this._$init$beginNSComment$ = $.$init$beginNSComment$;
     this.$init$beginNSComment$ = dnuCatcher("$init$beginNSComment$");
     this._$beginNSComment = $.$beginNSComment;
     this.$beginNSComment = dnuCatcher("$beginNSComment");
     this._$init$endNSComment$ = $.$init$endNSComment$;
     this.$init$endNSComment$ = dnuCatcher("$init$endNSComment$");
     this._$endNSComment = $.$endNSComment;
     this.$endNSComment = dnuCatcher("$endNSComment");
     this._$init$keywordAndLiteral$ = $.$init$keywordAndLiteral$;
     this.$init$keywordAndLiteral$ = dnuCatcher("$init$keywordAndLiteral$");
     this._$keywordAndLiteral = $.$keywordAndLiteral;
     this.$keywordAndLiteral = dnuCatcher("$keywordAndLiteral");
     this._$init$literalMessage$ = $.$init$literalMessage$;
     this.$init$literalMessage$ = dnuCatcher("$init$literalMessage$");
     this._$literalMessage = $.$literalMessage;
     this.$literalMessage = dnuCatcher("$literalMessage");
     this._$init$literalMessageComment$ = $.$init$literalMessageComment$;
     this.$init$literalMessageComment$ = dnuCatcher("$init$literalMessageComment$");
     this._$literalMessageComment = $.$literalMessageComment;
     this.$literalMessageComment = dnuCatcher("$literalMessageComment");
     this._$init$codeBody$ = $.$init$codeBody$;
     this.$init$codeBody$ = dnuCatcher("$init$codeBody$");
     this._$codeBody = $.$codeBody;
     this.$codeBody = dnuCatcher("$codeBody");
     this._$init$block$ = $.$init$block$;
     this.$init$block$ = dnuCatcher("$init$block$");
     this._$block = $.$block;
     this.$block = dnuCatcher("$block");
     this._$init$slotDecl$ = $.$init$slotDecl$;
     this.$init$slotDecl$ = dnuCatcher("$init$slotDecl$");
     this._$slotDecl = $.$slotDecl;
     this.$slotDecl = dnuCatcher("$slotDecl");
     this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$init$accessModifier$ = dnuCatcher("$init$accessModifier$");
     this._$accessModifier = $.$accessModifier;
     this.$accessModifier = dnuCatcher("$accessModifier");
     this._$init$slotDef$ = $.$init$slotDef$;
     this.$init$slotDef$ = dnuCatcher("$init$slotDef$");
     this._$slotDef = $.$slotDef;
     this.$slotDef = dnuCatcher("$slotDef");
     this._$init$initExprs$ = $.$init$initExprs$;
     this.$init$initExprs$ = dnuCatcher("$init$initExprs$");
     this._$initExprs = $.$initExprs;
     this.$initExprs = dnuCatcher("$initExprs");
     this._$init$unaryMsgPattern$ = $.$init$unaryMsgPattern$;
     this.$init$unaryMsgPattern$ = dnuCatcher("$init$unaryMsgPattern$");
     this._$unaryMsgPattern = $.$unaryMsgPattern;
     this.$unaryMsgPattern = dnuCatcher("$unaryMsgPattern");
     this._$init$binaryMsgPattern$ = $.$init$binaryMsgPattern$;
     this.$init$binaryMsgPattern$ = dnuCatcher("$init$binaryMsgPattern$");
     this._$binaryMsgPattern = $.$binaryMsgPattern;
     this.$binaryMsgPattern = dnuCatcher("$binaryMsgPattern");
     this._$init$keywordMsgPattern$ = $.$init$keywordMsgPattern$;
     this.$init$keywordMsgPattern$ = dnuCatcher("$init$keywordMsgPattern$");
     this._$keywordMsgPattern = $.$keywordMsgPattern;
     this.$keywordMsgPattern = dnuCatcher("$keywordMsgPattern");
     this._$init$messagePattern$ = $.$init$messagePattern$;
     this.$init$messagePattern$ = dnuCatcher("$init$messagePattern$");
     this._$messagePattern = $.$messagePattern;
     this.$messagePattern = dnuCatcher("$messagePattern");
     this.$init$methodDecl$ = this._$init$methodDecl$ = $.$init$methodDecl$;
     this.$methodDecl = this._$methodDecl = $.$methodDecl;
     this._$init$optionalFactorySection$ = $.$init$optionalFactorySection$;
     this.$init$optionalFactorySection$ = dnuCatcher("$init$optionalFactorySection$");
     this._$optionalFactorySection = $.$optionalFactorySection;
     this.$optionalFactorySection = dnuCatcher("$optionalFactorySection");
     this._$init$classPrefix$ = $.$init$classPrefix$;
     this.$init$classPrefix$ = dnuCatcher("$init$classPrefix$");
     this._$classPrefix = $.$classPrefix;
     this.$classPrefix = dnuCatcher("$classPrefix");
     this._$init$mixinApplication$ = $.$init$mixinApplication$;
     this.$init$mixinApplication$ = dnuCatcher("$init$mixinApplication$");
     this._$mixinApplication = $.$mixinApplication;
     this.$mixinApplication = dnuCatcher("$mixinApplication");
     this._$init$category$ = $.$init$category$;
     this.$init$category$ = dnuCatcher("$init$category$");
     this._$category = $.$category;
     this.$category = dnuCatcher("$category");
     this._$init$classComment$ = $.$init$classComment$;
     this.$init$classComment$ = dnuCatcher("$init$classComment$");
     this._$classComment = $.$classComment;
     this.$classComment = dnuCatcher("$classComment");
     this._$init$sideDecl$ = $.$init$sideDecl$;
     this.$init$sideDecl$ = dnuCatcher("$init$sideDecl$");
     this._$sideDecl = $.$sideDecl;
     this.$sideDecl = dnuCatcher("$sideDecl");
     this._$init$classSideDecl$ = $.$init$classSideDecl$;
     this.$init$classSideDecl$ = dnuCatcher("$init$classSideDecl$");
     this._$classSideDecl = $.$classSideDecl;
     this.$classSideDecl = dnuCatcher("$classSideDecl");
     this._$init$languageId$ = $.$init$languageId$;
     this.$init$languageId$ = dnuCatcher("$init$languageId$");
     this._$languageId = $.$languageId;
     this.$languageId = dnuCatcher("$languageId");
     this._$init$classCategory$ = $.$init$classCategory$;
     this.$init$classCategory$ = dnuCatcher("$init$classCategory$");
     this._$classCategory = $.$classCategory;
     this.$classCategory = dnuCatcher("$classCategory");
     this._$init$superclassClause$ = $.$init$superclassClause$;
     this.$init$superclassClause$ = dnuCatcher("$init$superclassClause$");
     this._$superclassClause = $.$superclassClause;
     this.$superclassClause = dnuCatcher("$superclassClause");
     this._$init$superclassPrefix$ = $.$init$superclassPrefix$;
     this.$init$superclassPrefix$ = dnuCatcher("$init$superclassPrefix$");
     this._$superclassPrefix = $.$superclassPrefix;
     this.$superclassPrefix = dnuCatcher("$superclassPrefix");
     this._$init$outerReceiver$ = $.$init$outerReceiver$;
     this.$init$outerReceiver$ = dnuCatcher("$init$outerReceiver$");
     this._$outerReceiver = $.$outerReceiver;
     this.$outerReceiver = dnuCatcher("$outerReceiver");
     this.$init$classHeader$ = this._$init$classHeader$ = $.$init$classHeader$;
     this.$classHeader = this._$classHeader = $.$classHeader;
     this.$init$classDeclaration$ = this._$init$classDeclaration$ = $.$init$classDeclaration$;
     this.$classDeclaration = this._$classDeclaration = $.$classDeclaration;
     this._$init$inheritanceClause$ = $.$init$inheritanceClause$;
     this.$init$inheritanceClause$ = dnuCatcher("$init$inheritanceClause$");
     this._$inheritanceClause = $.$inheritanceClause;
     this.$inheritanceClause = dnuCatcher("$inheritanceClause");
     this._$init$instanceInitializer$ = $.$init$instanceInitializer$;
     this.$init$instanceInitializer$ = dnuCatcher("$init$instanceInitializer$");
     this._$instanceInitializer = $.$instanceInitializer;
     this.$instanceInitializer = dnuCatcher("$instanceInitializer");
     this._$init$classBody$ = $.$init$classBody$;
     this.$init$classBody$ = dnuCatcher("$init$classBody$");
     this._$classBody = $.$classBody;
     this.$classBody = dnuCatcher("$classBody");
     this._$init$mixinAppSuffix$ = $.$init$mixinAppSuffix$;
     this.$init$mixinAppSuffix$ = dnuCatcher("$init$mixinAppSuffix$");
     this._$mixinAppSuffix = $.$mixinAppSuffix;
     this.$mixinAppSuffix = dnuCatcher("$mixinAppSuffix");
     this._$init$mixinSpec$ = $.$init$mixinSpec$;
     this.$init$mixinSpec$ = dnuCatcher("$init$mixinSpec$");
     this._$mixinSpec = $.$mixinSpec;
     this.$mixinSpec = dnuCatcher("$mixinSpec");
     this._$init$explicitInheritanceListAndOrBody$ = $.$init$explicitInheritanceListAndOrBody$;
     this.$init$explicitInheritanceListAndOrBody$ = dnuCatcher("$init$explicitInheritanceListAndOrBody$");
     this._$explicitInheritanceListAndOrBody = $.$explicitInheritanceListAndOrBody;
     this.$explicitInheritanceListAndOrBody = dnuCatcher("$explicitInheritanceListAndOrBody");
     this._$init$defaultSuperclassAndBody$ = $.$init$defaultSuperclassAndBody$;
     this.$init$defaultSuperclassAndBody$ = dnuCatcher("$init$defaultSuperclassAndBody$");
     this._$defaultSuperclassAndBody = $.$defaultSuperclassAndBody;
     this.$defaultSuperclassAndBody = dnuCatcher("$defaultSuperclassAndBody");
     this._$init$inheritanceListAndOrBody$ = $.$init$inheritanceListAndOrBody$;
     this.$init$inheritanceListAndOrBody$ = dnuCatcher("$init$inheritanceListAndOrBody$");
     this._$inheritanceListAndOrBody = $.$inheritanceListAndOrBody;
     this.$inheritanceListAndOrBody = dnuCatcher("$inheritanceListAndOrBody");
     this.$init$classDecl$ = this._$init$classDecl$ = $.$init$classDecl$;
     this.$classDecl = this._$classDecl = $.$classDecl;
     this._$init$toplevelClass$ = $.$init$toplevelClass$;
     this.$init$toplevelClass$ = dnuCatcher("$init$toplevelClass$");
     this._$toplevelClass = $.$toplevelClass;
     this.$toplevelClass = dnuCatcher("$toplevelClass");
     this._$init$compilationUnit$ = $.$init$compilationUnit$;
     this.$init$compilationUnit$ = dnuCatcher("$init$compilationUnit$");
     this._$compilationUnit = $.$compilationUnit;
     this.$compilationUnit = dnuCatcher("$compilationUnit");
     this.$init$doItExpression$ = this._$init$doItExpression$ = $.$init$doItExpression$;
     this.$doItExpression = this._$doItExpression = $.$doItExpression;
     this.$enclosingObjects$NewspeakGrammar$NS3Grammar = enclosingObjects;
     this.$super$NewspeakGrammar$NS3Grammar$slot = runtimeSuperclass;
     this["NewspeakGrammar`NS3Grammar"] = function () {
      superBasicNew.call(this);
      this.$whitespace$slot = nil;
      this.$colon$slot = nil;
      this.$comma$slot = nil;
      this.$dollar$slot = nil;
      this.$dot$slot = nil;
      this.$equalSign$slot = nil;
      this.$hat$slot = nil;
      this.$lbracket$slot = nil;
      this.$lcurly$slot = nil;
      this.$lparen$slot = nil;
      this.$langleBracket$slot = nil;
      this.$pound$slot = nil;
      this.$rangleBracket$slot = nil;
      this.$rbracket$slot = nil;
      this.$rcurly$slot = nil;
      this.$rparen$slot = nil;
      this.$semicolon$slot = nil;
      this.$slash$slot = nil;
      this.$vbar$slot = nil;
      this.$mixinOperator$slot = nil;
      this.$inverseMixinOperator$slot = nil;
      this.$eventualSendOperator$slot = nil;
      this.$digit$slot = nil;
      this.$digits$slot = nil;
      this.$uppercaseLetter$slot = nil;
      this.$extendedDigits$slot = nil;
      this.$radix$slot = nil;
      this.$fraction$slot = nil;
      this.$extendedFraction$slot = nil;
      this.$exponent$slot = nil;
      this.$decimalNum$slot = nil;
      this.$radixNum$slot = nil;
      this.$num$slot = nil;
      this.$number$slot = nil;
      this.$letter$slot = nil;
      this.$specialCharacter$slot = nil;
      this.$character$slot = nil;
      this.$id$slot = nil;
      this.$identifier$slot = nil;
      this.$charIncludingQuotesAndSpace$slot = nil;
      this.$newChar$slot = nil;
      this.$oldChar$slot = nil;
      this.$characterConstant$slot = nil;
      this.$str$slot = nil;
      this.$string$slot = nil;
      this.$kw$slot = nil;
      this.$kwds$slot = nil;
      this.$keyword$slot = nil;
      this.$setterKw$slot = nil;
      this.$setterKeyword$slot = nil;
      this.$sym$slot = nil;
      this.$symbol$slot = nil;
      this.$comment$slot = nil;
      this.$binSel$slot = nil;
      this.$binarySelector$slot = nil;
      this.$symbolConstant$slot = nil;
      this.$tuple$slot = nil;
      this.$literal$slot = nil;
      this.$pattern$slot = nil;
      this.$patternLiteral$slot = nil;
      this.$wildcardPattern$slot = nil;
      this.$literalPattern$slot = nil;
      this.$keywordPattern$slot = nil;
      this.$kwPatternPair$slot = nil;
      this.$kwPatternValue$slot = nil;
      this.$variablePattern$slot = nil;
      this.$nestedPatternLiteral$slot = nil;
      this.$slotName$slot = nil;
      this.$unarySelector$slot = nil;
      this.$parenthesizedExpression$slot = nil;
      this.$primary$slot = nil;
      this.$unaryMsg$slot = nil;
      this.$unaryExpression$slot = nil;
      this.$binaryMsg$slot = nil;
      this.$binaryExpression$slot = nil;
      this.$keywordMsg$slot = nil;
      this.$message$slot = nil;
      this.$nontrivialUnaryMessages$slot = nil;
      this.$nontrivialBinaryMessages$slot = nil;
      this.$keywordMessages$slot = nil;
      this.$nonEmptyMessages$slot = nil;
      this.$keywordExpression$slot = nil;
      this.$keywordHereSend$slot = nil;
      this.$cascadeMsg$slot = nil;
      this.$msgCascade$slot = nil;
      this.$cascadedMessageExpression$slot = nil;
      this.$sendExpression$slot = nil;
      this.$expression$slot = nil;
      this.$returnStatement$slot = nil;
      this.$furtherStatements$slot = nil;
      this.$statementSequence$slot = nil;
      this.$statements$slot = nil;
      this.$blockParameter$slot = nil;
      this.$blockParameters$slot = nil;
      this.$slotDefs$slot = nil;
      this.$seqSlotDecls$slot = nil;
      this.$simSlotDecls$slot = nil;
      this.$slotDecls$slot = nil;
      this.$temporaries$slot = nil;
      this.$beginNSComment$slot = nil;
      this.$endNSComment$slot = nil;
      this.$keywordAndLiteral$slot = nil;
      this.$literalMessage$slot = nil;
      this.$literalMessageComment$slot = nil;
      this.$codeBody$slot = nil;
      this.$block$slot = nil;
      this.$slotDecl$slot = nil;
      this.$accessModifier$slot = nil;
      this.$slotDef$slot = nil;
      this.$initExprs$slot = nil;
      this.$unaryMsgPattern$slot = nil;
      this.$binaryMsgPattern$slot = nil;
      this.$keywordMsgPattern$slot = nil;
      this.$messagePattern$slot = nil;
      this.$methodDecl$slot = nil;
      this.$optionalFactorySection$slot = nil;
      this.$classPrefix$slot = nil;
      this.$mixinApplication$slot = nil;
      this.$category$slot = nil;
      this.$classComment$slot = nil;
      this.$sideDecl$slot = nil;
      this.$classSideDecl$slot = nil;
      this.$languageId$slot = nil;
      this.$classCategory$slot = nil;
      this.$superclassClause$slot = nil;
      this.$superclassPrefix$slot = nil;
      this.$outerReceiver$slot = nil;
      this.$classHeader$slot = nil;
      this.$classDeclaration$slot = nil;
      this.$inheritanceClause$slot = nil;
      this.$instanceInitializer$slot = nil;
      this.$classBody$slot = nil;
      this.$mixinAppSuffix$slot = nil;
      this.$mixinSpec$slot = nil;
      this.$explicitInheritanceListAndOrBody$slot = nil;
      this.$defaultSuperclassAndBody$slot = nil;
      this.$inheritanceListAndOrBody$slot = nil;
      this.$classDecl$slot = nil;
      this.$toplevelClass$slot = nil;
      this.$compilationUnit$slot = nil;
      this.$doItExpression$slot = nil;
     };
     this.basicNew = this["NewspeakGrammar`NS3Grammar"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakGrammar`NS3Grammar";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakGrammar`NS3Grammar";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakGrammar$NS3Grammar = enclosingObjects;
      this.$super$NewspeakGrammar$NS3Grammar = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakGrammar$NSCommentParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakGrammar`NSCommentParser";
   this.name = "NewspeakGrammar`NSCommentParser";
   this.header = 1634;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakGrammar`NSCommentParser", true, 1635),
    new MM("instance`initializer", true, 1636),
    new MM("parse:inContext:ifError:", false, 1637)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakGrammar$NSCommentParser = function () {
    var self = this;
    self.$super$NewspeakGrammar$NSCommentParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakGrammar$NSCommentParser();
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     var $pos = nil;
     var $body = nil;
     $pos = $input.$position();
     $body = $0.$OrderedCollection(self.$enclosingObjects$NewspeakGrammar$NSCommentParser[0]).$new();
     if (!($input.$atEnd().$not() && ($input.$next().$$equal(40) && ($input.$atEnd().$not() && $input.$next().$$equal(42))))) {
      $input.$position$($pos);
      return $blk.$value$value$("(* expected", $pos);
     } else {
      nil;
     };
     {
      nil;
      var $c = nil;
      if ($input.$atEnd()) {
       $input.$position$($pos);
       return $blk.$value$value$("(* expected", $pos);
      } else {
       nil;
      };
      $c = $input.$next();
      $body.$add$($c);
      if ($c.$$equal(40)) {
       var $d = nil;
       if ($input.$atEnd()) {
        $input.$position$($pos);
        return $blk.$value$value$("(* expected", $pos);
       } else {
        nil;
       };
       $d = $input.$next();
       if ($d.$$equal(42)) {
        var $res = nil;
        $body.$removeLast();
        $input.$position$($input.$position() - 2);
        $res = self._$parse$inContext$ifError$($input, $context, function ($msg, $pos2) {
         $input.$position$($pos);
         {
          NLR.value = $blk.$value$value$("(* expected 2", $pos);
          throw NLR;
         };
        });
        {
         var $$limit = nil;
         var $index = nil;
         nil;
         $index = 1;
         $$limit = $res.$token().$size();
         for (; $$limit.$$greater$equal($index); ) {
          $body.$add$($res.$token().$runeAt$($index));
          $index = (1).$$plus($index);
         };
        };
       } else {
        $body.$add$($d);
       };
      } else {
       nil;
      };
      if ($c.$$equal(42)) {
       var $d = nil;
       if ($input.$atEnd()) {
        $input.$position$($pos);
        return $blk.$value$value$("(* expected", $pos);
       } else {
        nil;
       };
       $d = $input.$next();
       if ($d.$$equal(41)) {
        $body.$removeLast();
        return $0.$Token(self.$enclosingObjects$NewspeakGrammar$NSCommentParser[0]).$new().$for$start$end$(self._$String().$fromRunes$($body), $pos, $input.$position());
       } else {
        $input.$position$($input.$position() - 1);
       };
      } else {
       nil;
      };
      if ($c.$$equal(nil)) {
       $input.$position$($pos);
       return $blk.$value$value$("(* expected", $pos);
      } else {
       nil;
      };
      for (; true; ) {
       nil;
       var $c = nil;
       if ($input.$atEnd()) {
        $input.$position$($pos);
        return $blk.$value$value$("(* expected", $pos);
       } else {
        nil;
       };
       $c = $input.$next();
       $body.$add$($c);
       if ($c.$$equal(40)) {
        var $d = nil;
        if ($input.$atEnd()) {
         $input.$position$($pos);
         return $blk.$value$value$("(* expected", $pos);
        } else {
         nil;
        };
        $d = $input.$next();
        if ($d.$$equal(42)) {
         var $res = nil;
         $body.$removeLast();
         $input.$position$($input.$position() - 2);
         $res = self._$parse$inContext$ifError$($input, $context, function ($msg, $pos2) {
          $input.$position$($pos);
          {
           NLR.value = $blk.$value$value$("(* expected 2", $pos);
           throw NLR;
          };
         });
         {
          var $$limit = nil;
          var $index = nil;
          nil;
          $index = 1;
          $$limit = $res.$token().$size();
          for (; $$limit.$$greater$equal($index); ) {
           $body.$add$($res.$token().$runeAt$($index));
           $index = (1).$$plus($index);
          };
         };
        } else {
         $body.$add$($d);
        };
       } else {
        nil;
       };
       if ($c.$$equal(42)) {
        var $d = nil;
        if ($input.$atEnd()) {
         $input.$position$($pos);
         return $blk.$value$value$("(* expected", $pos);
        } else {
         nil;
        };
        $d = $input.$next();
        if ($d.$$equal(41)) {
         $body.$removeLast();
         return $0.$Token(self.$enclosingObjects$NewspeakGrammar$NSCommentParser[0]).$new().$for$start$end$(self._$String().$fromRunes$($body), $pos, $input.$position());
        } else {
         $input.$position$($input.$position() - 1);
        };
       } else {
        nil;
       };
       if ($c.$$equal(nil)) {
        $input.$position$($pos);
        return $blk.$value$value$("(* expected", $pos);
       } else {
        nil;
       };
      };
     };
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakGrammar`NSCommentParser";
     this._$superInit$NewspeakGrammar$NSCommentParser = $.$superInit$NewspeakGrammar$NSCommentParser;
     this.$superInit$NewspeakGrammar$NSCommentParser = dnuCatcher("$superInit$NewspeakGrammar$NSCommentParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this.$enclosingObjects$NewspeakGrammar$NSCommentParser = enclosingObjects;
     this.$super$NewspeakGrammar$NSCommentParser$slot = runtimeSuperclass;
     this["NewspeakGrammar`NSCommentParser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakGrammar`NSCommentParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakGrammar`NSCommentParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakGrammar`NSCommentParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakGrammar$NSCommentParser = enclosingObjects;
      this.$super$NewspeakGrammar$NSCommentParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakGrammar$TypedNS3Grammar = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakGrammar`TypedNS3Grammar";
   this.name = "NewspeakGrammar`TypedNS3Grammar";
   this.header = 1638;
   this.slots = [
    new SM("arg", false, false),
    new SM("for", false, false),
    new SM("generic", false, false),
    new SM("inheritedTypeOf", false, false),
    new SM("is", false, false),
    new SM("mssg", false, false),
    new SM("of", false, false),
    new SM("receiverType", false, false),
    new SM("subtypeOf", false, false),
    new SM("typeArg", false, false),
    new SM("where", false, false),
    new SM("returnType", false, false),
    new SM("type", false, false),
    new SM("typePrimary", false, false),
    new SM("typeFactor", false, false),
    new SM("parenthesizedTypeExpression", false, false),
    new SM("typeTerm", false, false),
    new SM("typeExpr", false, false),
    new SM("typeArguments", false, false),
    new SM("blockType", false, false),
    new SM("tupleType", false, false),
    new SM("nonEmptyBlockTypeArgList", false, false),
    new SM("blockTypeArgList", false, false),
    new SM("blockReturnType", false, false),
    new SM("newBlockArgType", false, false),
    new SM("newBlockReturnType", false, false),
    new SM("newNonEmptyBlockArgList", false, false),
    new SM("newBlockType", false, false),
    new SM("typePattern", false, false),
    new SM("typeFormal", false, false),
    new SM("typeParamConstraint", false, false),
    new SM("typeBoundQualifier", false, false),
    new SM("inferenceClause", false, false),
    new SM("returnTypeInferenceClause", false, false),
    new SM("msgSelector", false, false),
    new SM("typeArgInferenceClause", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakGrammar`TypedNS3Grammar", true, 1639),
    new MM("instance`initializer", true, 1640),
    new MM("messagePattern", false, 1641),
    new MM("slotDecl", false, 1642),
    new MM("init`arg:", true, 0),
    new MM("arg", true, 0),
    new MM("init`for:", true, 0),
    new MM("for", true, 0),
    new MM("init`generic:", true, 0),
    new MM("generic", true, 0),
    new MM("init`inheritedTypeOf:", true, 0),
    new MM("inheritedTypeOf", true, 0),
    new MM("init`is:", true, 0),
    new MM("is", true, 0),
    new MM("init`mssg:", true, 0),
    new MM("mssg", true, 0),
    new MM("init`of:", true, 0),
    new MM("of", true, 0),
    new MM("init`receiverType:", true, 0),
    new MM("receiverType", true, 0),
    new MM("init`subtypeOf:", true, 0),
    new MM("subtypeOf", true, 0),
    new MM("init`typeArg:", true, 0),
    new MM("typeArg", true, 0),
    new MM("init`where:", true, 0),
    new MM("where", true, 0),
    new MM("init`returnType:", true, 0),
    new MM("returnType", true, 0),
    new MM("init`type:", true, 0),
    new MM("type", true, 0),
    new MM("init`typePrimary:", true, 0),
    new MM("typePrimary", true, 0),
    new MM("init`typeFactor:", true, 0),
    new MM("typeFactor", true, 0),
    new MM("init`parenthesizedTypeExpression:", true, 0),
    new MM("parenthesizedTypeExpression", true, 0),
    new MM("init`typeTerm:", true, 0),
    new MM("typeTerm", true, 0),
    new MM("init`typeExpr:", true, 0),
    new MM("typeExpr", true, 0),
    new MM("init`typeArguments:", true, 0),
    new MM("typeArguments", true, 0),
    new MM("init`blockType:", true, 0),
    new MM("blockType", true, 0),
    new MM("init`tupleType:", true, 0),
    new MM("tupleType", true, 0),
    new MM("init`nonEmptyBlockTypeArgList:", true, 0),
    new MM("nonEmptyBlockTypeArgList", true, 0),
    new MM("init`blockTypeArgList:", true, 0),
    new MM("blockTypeArgList", true, 0),
    new MM("init`blockReturnType:", true, 0),
    new MM("blockReturnType", true, 0),
    new MM("init`newBlockArgType:", true, 0),
    new MM("newBlockArgType", true, 0),
    new MM("init`newBlockReturnType:", true, 0),
    new MM("newBlockReturnType", true, 0),
    new MM("init`newNonEmptyBlockArgList:", true, 0),
    new MM("newNonEmptyBlockArgList", true, 0),
    new MM("init`newBlockType:", true, 0),
    new MM("newBlockType", true, 0),
    new MM("init`typePattern:", true, 0),
    new MM("typePattern", true, 0),
    new MM("init`typeFormal:", true, 0),
    new MM("typeFormal", true, 0),
    new MM("init`typeParamConstraint:", true, 0),
    new MM("typeParamConstraint", true, 0),
    new MM("init`typeBoundQualifier:", true, 0),
    new MM("typeBoundQualifier", true, 0),
    new MM("init`inferenceClause:", true, 0),
    new MM("inferenceClause", true, 0),
    new MM("init`returnTypeInferenceClause:", true, 0),
    new MM("returnTypeInferenceClause", true, 0),
    new MM("init`msgSelector:", true, 0),
    new MM("msgSelector", true, 0),
    new MM("init`typeArgInferenceClause:", true, 0),
    new MM("typeArgInferenceClause", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakGrammar$TypedNS3Grammar = function () {
    var self = this;
    self.$super$NewspeakGrammar$TypedNS3Grammar$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakGrammar$TypedNS3Grammar();
    self._$init$arg$(self._$tokenFromSymbol$("arg"));
    self._$init$for$(self._$tokenFromSymbol$("for"));
    self._$init$generic$(self._$tokenFromSymbol$("generic"));
    self._$init$inheritedTypeOf$(self._$tokenFromSymbol$("inheritedTypeOf"));
    self._$init$is$(self._$tokenFromSymbol$("is"));
    self._$init$mssg$(self._$tokenFromSymbol$("message"));
    self._$init$of$(self._$tokenFromSymbol$("of"));
    self._$init$receiverType$(self._$tokenFromSymbol$("receiverType"));
    self._$init$subtypeOf$(self._$tokenFromSymbol$("subtypeOf"));
    self._$init$typeArg$(self._$tokenFromSymbol$("typeArg"));
    self._$init$where$(self._$tokenFromSymbol$("where"));
    self._$init$returnType$(self._$hat().$$comma(self._$type()));
    self._$init$type$(self._$langleBracket().$$comma(self._$typeExpr()).$$comma(self._$rangleBracket()));
    self._$init$typePrimary$(self._$identifier().$$comma(self._$typeArguments().$opt()));
    self._$init$typeFactor$(self._$typePrimary().$$pipe(self._$newBlockType()).$$pipe(self._$tupleType()).$$pipe(self._$parenthesizedTypeExpression()));
    self._$init$parenthesizedTypeExpression$(self._$lparen().$$comma(self._$typeExpr()).$$comma(self._$rparen()));
    self._$init$typeTerm$(self._$typeFactor().$$comma(self._$identifier().$star()));
    self._$init$typeExpr$(self._$typeTerm().$$comma(self._$vbar().$$pipe(self._$semicolon()).$$pipe(self._$slash()).$$comma(self._$typeExpr()).$opt()));
    self._$init$typeArguments$(self._$lbracket().$$comma(self._$typeExpr().$plusSeparatedBy$(self._$comma())).$$comma(self._$rbracket()));
    self._$init$blockType$(self._$lbracket().$$comma(self._$blockTypeArgList()).$$comma(self._$rbracket()));
    self._$init$tupleType$(self._$lcurly().$$comma(self._$typeExpr().$starSeparatedBy$(self._$dot())).$$comma(self._$rcurly()));
    self._$init$nonEmptyBlockTypeArgList$(self._$typeExpr().$plusSeparatedBy$(self._$comma()).$$comma(self._$comma().$$comma(self._$blockReturnType()).$opt()));
    self._$init$blockTypeArgList$(self._$nonEmptyBlockTypeArgList().$$pipe(self._$blockReturnType().$opt()));
    self._$init$blockReturnType$(self._$hat().$$comma(self._$typeExpr()));
    self._$init$newBlockArgType$(self._$colon().$$comma(self._$typeTerm()));
    self._$init$newBlockReturnType$(self._$typeExpr());
    self._$init$newNonEmptyBlockArgList$(self._$newBlockArgType().$plus().$$comma(self._$vbar().$$comma(self._$newBlockReturnType()).$opt()));
    self._$init$newBlockType$(self._$lbracket().$$comma(self._$newNonEmptyBlockArgList().$$pipe(self._$newBlockReturnType().$opt())).$$comma(self._$rbracket()));
    self._$init$typePattern$(self._$langleBracket().$$comma(self._$typeFormal()).$$comma(self._$semicolon().$$comma(self._$typeFormal()).$star()).$$comma(self._$rangleBracket()));
    self._$init$typeFormal$(self._$where().$$comma(self._$identifier()).$$comma(self._$typeParamConstraint().$opt()).$$comma(self._$is()).$$comma(self._$inferenceClause()));
    self._$init$typeParamConstraint$(self._$langleBracket().$$comma(self._$typeBoundQualifier().$opt()).$$comma(self._$typeExpr()).$$comma(self._$rangleBracket()));
    self._$init$typeBoundQualifier$(self._$subtypeOf().$$pipe(self._$inheritedTypeOf()));
    self._$init$inferenceClause$(self._$receiverType().$$pipe(self._$returnType().$$comma(self._$returnTypeInferenceClause())).$$pipe(self._$typeArgInferenceClause()).$$pipe(self._$arg().$$comma(self._$number()).$$comma(self._$of().$$comma(self._$msgSelector()).$opt())));
    self._$init$returnTypeInferenceClause$(self._$of().$$comma(self._$msgSelector()));
    self._$init$msgSelector$(self._$symbolConstant().$$comma(self._$mssg()).$$comma(self._$of()).$$comma(self._$inferenceClause()));
    self._$init$typeArgInferenceClause$(self._$typeArg().$$comma(self._$number()).$$comma(self._$for()).$$comma(self._$generic()).$$comma(self._$symbolConstant()).$$comma(self._$of()).$$comma(self._$inferenceClause()));
    return self;
   };
   this.$messagePattern = function () {
    var self = this;
    return self.$super$NewspeakGrammar$TypedNS3Grammar$slot._$messagePattern.call(self).$$comma(self._$returnType().$opt()).$$comma(self._$typePattern().$opt());
   };
   this.$slotDecl = function () {
    var self = this;
    return self.$super$NewspeakGrammar$TypedNS3Grammar$slot._$slotDecl.call(self).$$comma(self._$type().$opt());
   };
   this.$init$arg$ = function (v) {
    this.$arg$slot = v;
    return this;
   };
   this.$arg = function () {
    return this.$arg$slot;
   };
   this.$init$for$ = function (v) {
    this.$for$slot = v;
    return this;
   };
   this.$for = function () {
    return this.$for$slot;
   };
   this.$init$generic$ = function (v) {
    this.$generic$slot = v;
    return this;
   };
   this.$generic = function () {
    return this.$generic$slot;
   };
   this.$init$inheritedTypeOf$ = function (v) {
    this.$inheritedTypeOf$slot = v;
    return this;
   };
   this.$inheritedTypeOf = function () {
    return this.$inheritedTypeOf$slot;
   };
   this.$init$is$ = function (v) {
    this.$is$slot = v;
    return this;
   };
   this.$is = function () {
    return this.$is$slot;
   };
   this.$init$mssg$ = function (v) {
    this.$mssg$slot = v;
    return this;
   };
   this.$mssg = function () {
    return this.$mssg$slot;
   };
   this.$init$of$ = function (v) {
    this.$of$slot = v;
    return this;
   };
   this.$of = function () {
    return this.$of$slot;
   };
   this.$init$receiverType$ = function (v) {
    this.$receiverType$slot = v;
    return this;
   };
   this.$receiverType = function () {
    return this.$receiverType$slot;
   };
   this.$init$subtypeOf$ = function (v) {
    this.$subtypeOf$slot = v;
    return this;
   };
   this.$subtypeOf = function () {
    return this.$subtypeOf$slot;
   };
   this.$init$typeArg$ = function (v) {
    this.$typeArg$slot = v;
    return this;
   };
   this.$typeArg = function () {
    return this.$typeArg$slot;
   };
   this.$init$where$ = function (v) {
    this.$where$slot = v;
    return this;
   };
   this.$where = function () {
    return this.$where$slot;
   };
   this.$init$returnType$ = function (v) {
    this.$returnType$slot = v;
    return this;
   };
   this.$returnType = function () {
    return this.$returnType$slot;
   };
   this.$init$type$ = function (v) {
    this.$type$slot = v;
    return this;
   };
   this.$type = function () {
    return this.$type$slot;
   };
   this.$init$typePrimary$ = function (v) {
    this.$typePrimary$slot = v;
    return this;
   };
   this.$typePrimary = function () {
    return this.$typePrimary$slot;
   };
   this.$init$typeFactor$ = function (v) {
    this.$typeFactor$slot = v;
    return this;
   };
   this.$typeFactor = function () {
    return this.$typeFactor$slot;
   };
   this.$init$parenthesizedTypeExpression$ = function (v) {
    this.$parenthesizedTypeExpression$slot = v;
    return this;
   };
   this.$parenthesizedTypeExpression = function () {
    return this.$parenthesizedTypeExpression$slot;
   };
   this.$init$typeTerm$ = function (v) {
    this.$typeTerm$slot = v;
    return this;
   };
   this.$typeTerm = function () {
    return this.$typeTerm$slot;
   };
   this.$init$typeExpr$ = function (v) {
    this.$typeExpr$slot = v;
    return this;
   };
   this.$typeExpr = function () {
    return this.$typeExpr$slot;
   };
   this.$init$typeArguments$ = function (v) {
    this.$typeArguments$slot = v;
    return this;
   };
   this.$typeArguments = function () {
    return this.$typeArguments$slot;
   };
   this.$init$blockType$ = function (v) {
    this.$blockType$slot = v;
    return this;
   };
   this.$blockType = function () {
    return this.$blockType$slot;
   };
   this.$init$tupleType$ = function (v) {
    this.$tupleType$slot = v;
    return this;
   };
   this.$tupleType = function () {
    return this.$tupleType$slot;
   };
   this.$init$nonEmptyBlockTypeArgList$ = function (v) {
    this.$nonEmptyBlockTypeArgList$slot = v;
    return this;
   };
   this.$nonEmptyBlockTypeArgList = function () {
    return this.$nonEmptyBlockTypeArgList$slot;
   };
   this.$init$blockTypeArgList$ = function (v) {
    this.$blockTypeArgList$slot = v;
    return this;
   };
   this.$blockTypeArgList = function () {
    return this.$blockTypeArgList$slot;
   };
   this.$init$blockReturnType$ = function (v) {
    this.$blockReturnType$slot = v;
    return this;
   };
   this.$blockReturnType = function () {
    return this.$blockReturnType$slot;
   };
   this.$init$newBlockArgType$ = function (v) {
    this.$newBlockArgType$slot = v;
    return this;
   };
   this.$newBlockArgType = function () {
    return this.$newBlockArgType$slot;
   };
   this.$init$newBlockReturnType$ = function (v) {
    this.$newBlockReturnType$slot = v;
    return this;
   };
   this.$newBlockReturnType = function () {
    return this.$newBlockReturnType$slot;
   };
   this.$init$newNonEmptyBlockArgList$ = function (v) {
    this.$newNonEmptyBlockArgList$slot = v;
    return this;
   };
   this.$newNonEmptyBlockArgList = function () {
    return this.$newNonEmptyBlockArgList$slot;
   };
   this.$init$newBlockType$ = function (v) {
    this.$newBlockType$slot = v;
    return this;
   };
   this.$newBlockType = function () {
    return this.$newBlockType$slot;
   };
   this.$init$typePattern$ = function (v) {
    this.$typePattern$slot = v;
    return this;
   };
   this.$typePattern = function () {
    return this.$typePattern$slot;
   };
   this.$init$typeFormal$ = function (v) {
    this.$typeFormal$slot = v;
    return this;
   };
   this.$typeFormal = function () {
    return this.$typeFormal$slot;
   };
   this.$init$typeParamConstraint$ = function (v) {
    this.$typeParamConstraint$slot = v;
    return this;
   };
   this.$typeParamConstraint = function () {
    return this.$typeParamConstraint$slot;
   };
   this.$init$typeBoundQualifier$ = function (v) {
    this.$typeBoundQualifier$slot = v;
    return this;
   };
   this.$typeBoundQualifier = function () {
    return this.$typeBoundQualifier$slot;
   };
   this.$init$inferenceClause$ = function (v) {
    this.$inferenceClause$slot = v;
    return this;
   };
   this.$inferenceClause = function () {
    return this.$inferenceClause$slot;
   };
   this.$init$returnTypeInferenceClause$ = function (v) {
    this.$returnTypeInferenceClause$slot = v;
    return this;
   };
   this.$returnTypeInferenceClause = function () {
    return this.$returnTypeInferenceClause$slot;
   };
   this.$init$msgSelector$ = function (v) {
    this.$msgSelector$slot = v;
    return this;
   };
   this.$msgSelector = function () {
    return this.$msgSelector$slot;
   };
   this.$init$typeArgInferenceClause$ = function (v) {
    this.$typeArgInferenceClause$slot = v;
    return this;
   };
   this.$typeArgInferenceClause = function () {
    return this.$typeArgInferenceClause$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakGrammar`TypedNS3Grammar";
     this._$superInit$NewspeakGrammar$TypedNS3Grammar = $.$superInit$NewspeakGrammar$TypedNS3Grammar;
     this.$superInit$NewspeakGrammar$TypedNS3Grammar = dnuCatcher("$superInit$NewspeakGrammar$TypedNS3Grammar");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$messagePattern = $.$messagePattern;
     this.$messagePattern = dnuCatcher("$messagePattern");
     this._$slotDecl = $.$slotDecl;
     this.$slotDecl = dnuCatcher("$slotDecl");
     this._$init$arg$ = $.$init$arg$;
     this.$init$arg$ = dnuCatcher("$init$arg$");
     this._$arg = $.$arg;
     this.$arg = dnuCatcher("$arg");
     this._$init$for$ = $.$init$for$;
     this.$init$for$ = dnuCatcher("$init$for$");
     this._$for = $.$for;
     this.$for = dnuCatcher("$for");
     this._$init$generic$ = $.$init$generic$;
     this.$init$generic$ = dnuCatcher("$init$generic$");
     this._$generic = $.$generic;
     this.$generic = dnuCatcher("$generic");
     this._$init$inheritedTypeOf$ = $.$init$inheritedTypeOf$;
     this.$init$inheritedTypeOf$ = dnuCatcher("$init$inheritedTypeOf$");
     this._$inheritedTypeOf = $.$inheritedTypeOf;
     this.$inheritedTypeOf = dnuCatcher("$inheritedTypeOf");
     this._$init$is$ = $.$init$is$;
     this.$init$is$ = dnuCatcher("$init$is$");
     this._$is = $.$is;
     this.$is = dnuCatcher("$is");
     this._$init$mssg$ = $.$init$mssg$;
     this.$init$mssg$ = dnuCatcher("$init$mssg$");
     this._$mssg = $.$mssg;
     this.$mssg = dnuCatcher("$mssg");
     this._$init$of$ = $.$init$of$;
     this.$init$of$ = dnuCatcher("$init$of$");
     this._$of = $.$of;
     this.$of = dnuCatcher("$of");
     this._$init$receiverType$ = $.$init$receiverType$;
     this.$init$receiverType$ = dnuCatcher("$init$receiverType$");
     this._$receiverType = $.$receiverType;
     this.$receiverType = dnuCatcher("$receiverType");
     this._$init$subtypeOf$ = $.$init$subtypeOf$;
     this.$init$subtypeOf$ = dnuCatcher("$init$subtypeOf$");
     this._$subtypeOf = $.$subtypeOf;
     this.$subtypeOf = dnuCatcher("$subtypeOf");
     this._$init$typeArg$ = $.$init$typeArg$;
     this.$init$typeArg$ = dnuCatcher("$init$typeArg$");
     this._$typeArg = $.$typeArg;
     this.$typeArg = dnuCatcher("$typeArg");
     this._$init$where$ = $.$init$where$;
     this.$init$where$ = dnuCatcher("$init$where$");
     this._$where = $.$where;
     this.$where = dnuCatcher("$where");
     this._$init$returnType$ = $.$init$returnType$;
     this.$init$returnType$ = dnuCatcher("$init$returnType$");
     this._$returnType = $.$returnType;
     this.$returnType = dnuCatcher("$returnType");
     this._$init$type$ = $.$init$type$;
     this.$init$type$ = dnuCatcher("$init$type$");
     this._$type = $.$type;
     this.$type = dnuCatcher("$type");
     this._$init$typePrimary$ = $.$init$typePrimary$;
     this.$init$typePrimary$ = dnuCatcher("$init$typePrimary$");
     this._$typePrimary = $.$typePrimary;
     this.$typePrimary = dnuCatcher("$typePrimary");
     this._$init$typeFactor$ = $.$init$typeFactor$;
     this.$init$typeFactor$ = dnuCatcher("$init$typeFactor$");
     this._$typeFactor = $.$typeFactor;
     this.$typeFactor = dnuCatcher("$typeFactor");
     this._$init$parenthesizedTypeExpression$ = $.$init$parenthesizedTypeExpression$;
     this.$init$parenthesizedTypeExpression$ = dnuCatcher("$init$parenthesizedTypeExpression$");
     this._$parenthesizedTypeExpression = $.$parenthesizedTypeExpression;
     this.$parenthesizedTypeExpression = dnuCatcher("$parenthesizedTypeExpression");
     this._$init$typeTerm$ = $.$init$typeTerm$;
     this.$init$typeTerm$ = dnuCatcher("$init$typeTerm$");
     this._$typeTerm = $.$typeTerm;
     this.$typeTerm = dnuCatcher("$typeTerm");
     this._$init$typeExpr$ = $.$init$typeExpr$;
     this.$init$typeExpr$ = dnuCatcher("$init$typeExpr$");
     this._$typeExpr = $.$typeExpr;
     this.$typeExpr = dnuCatcher("$typeExpr");
     this._$init$typeArguments$ = $.$init$typeArguments$;
     this.$init$typeArguments$ = dnuCatcher("$init$typeArguments$");
     this._$typeArguments = $.$typeArguments;
     this.$typeArguments = dnuCatcher("$typeArguments");
     this._$init$blockType$ = $.$init$blockType$;
     this.$init$blockType$ = dnuCatcher("$init$blockType$");
     this._$blockType = $.$blockType;
     this.$blockType = dnuCatcher("$blockType");
     this._$init$tupleType$ = $.$init$tupleType$;
     this.$init$tupleType$ = dnuCatcher("$init$tupleType$");
     this._$tupleType = $.$tupleType;
     this.$tupleType = dnuCatcher("$tupleType");
     this._$init$nonEmptyBlockTypeArgList$ = $.$init$nonEmptyBlockTypeArgList$;
     this.$init$nonEmptyBlockTypeArgList$ = dnuCatcher("$init$nonEmptyBlockTypeArgList$");
     this._$nonEmptyBlockTypeArgList = $.$nonEmptyBlockTypeArgList;
     this.$nonEmptyBlockTypeArgList = dnuCatcher("$nonEmptyBlockTypeArgList");
     this._$init$blockTypeArgList$ = $.$init$blockTypeArgList$;
     this.$init$blockTypeArgList$ = dnuCatcher("$init$blockTypeArgList$");
     this._$blockTypeArgList = $.$blockTypeArgList;
     this.$blockTypeArgList = dnuCatcher("$blockTypeArgList");
     this._$init$blockReturnType$ = $.$init$blockReturnType$;
     this.$init$blockReturnType$ = dnuCatcher("$init$blockReturnType$");
     this._$blockReturnType = $.$blockReturnType;
     this.$blockReturnType = dnuCatcher("$blockReturnType");
     this._$init$newBlockArgType$ = $.$init$newBlockArgType$;
     this.$init$newBlockArgType$ = dnuCatcher("$init$newBlockArgType$");
     this._$newBlockArgType = $.$newBlockArgType;
     this.$newBlockArgType = dnuCatcher("$newBlockArgType");
     this._$init$newBlockReturnType$ = $.$init$newBlockReturnType$;
     this.$init$newBlockReturnType$ = dnuCatcher("$init$newBlockReturnType$");
     this._$newBlockReturnType = $.$newBlockReturnType;
     this.$newBlockReturnType = dnuCatcher("$newBlockReturnType");
     this._$init$newNonEmptyBlockArgList$ = $.$init$newNonEmptyBlockArgList$;
     this.$init$newNonEmptyBlockArgList$ = dnuCatcher("$init$newNonEmptyBlockArgList$");
     this._$newNonEmptyBlockArgList = $.$newNonEmptyBlockArgList;
     this.$newNonEmptyBlockArgList = dnuCatcher("$newNonEmptyBlockArgList");
     this._$init$newBlockType$ = $.$init$newBlockType$;
     this.$init$newBlockType$ = dnuCatcher("$init$newBlockType$");
     this._$newBlockType = $.$newBlockType;
     this.$newBlockType = dnuCatcher("$newBlockType");
     this._$init$typePattern$ = $.$init$typePattern$;
     this.$init$typePattern$ = dnuCatcher("$init$typePattern$");
     this._$typePattern = $.$typePattern;
     this.$typePattern = dnuCatcher("$typePattern");
     this._$init$typeFormal$ = $.$init$typeFormal$;
     this.$init$typeFormal$ = dnuCatcher("$init$typeFormal$");
     this._$typeFormal = $.$typeFormal;
     this.$typeFormal = dnuCatcher("$typeFormal");
     this._$init$typeParamConstraint$ = $.$init$typeParamConstraint$;
     this.$init$typeParamConstraint$ = dnuCatcher("$init$typeParamConstraint$");
     this._$typeParamConstraint = $.$typeParamConstraint;
     this.$typeParamConstraint = dnuCatcher("$typeParamConstraint");
     this._$init$typeBoundQualifier$ = $.$init$typeBoundQualifier$;
     this.$init$typeBoundQualifier$ = dnuCatcher("$init$typeBoundQualifier$");
     this._$typeBoundQualifier = $.$typeBoundQualifier;
     this.$typeBoundQualifier = dnuCatcher("$typeBoundQualifier");
     this._$init$inferenceClause$ = $.$init$inferenceClause$;
     this.$init$inferenceClause$ = dnuCatcher("$init$inferenceClause$");
     this._$inferenceClause = $.$inferenceClause;
     this.$inferenceClause = dnuCatcher("$inferenceClause");
     this._$init$returnTypeInferenceClause$ = $.$init$returnTypeInferenceClause$;
     this.$init$returnTypeInferenceClause$ = dnuCatcher("$init$returnTypeInferenceClause$");
     this._$returnTypeInferenceClause = $.$returnTypeInferenceClause;
     this.$returnTypeInferenceClause = dnuCatcher("$returnTypeInferenceClause");
     this._$init$msgSelector$ = $.$init$msgSelector$;
     this.$init$msgSelector$ = dnuCatcher("$init$msgSelector$");
     this._$msgSelector = $.$msgSelector;
     this.$msgSelector = dnuCatcher("$msgSelector");
     this._$init$typeArgInferenceClause$ = $.$init$typeArgInferenceClause$;
     this.$init$typeArgInferenceClause$ = dnuCatcher("$init$typeArgInferenceClause$");
     this._$typeArgInferenceClause = $.$typeArgInferenceClause;
     this.$typeArgInferenceClause = dnuCatcher("$typeArgInferenceClause");
     this.$enclosingObjects$NewspeakGrammar$TypedNS3Grammar = enclosingObjects;
     this.$super$NewspeakGrammar$TypedNS3Grammar$slot = runtimeSuperclass;
     this["NewspeakGrammar`TypedNS3Grammar"] = function () {
      superBasicNew.call(this);
      this.$arg$slot = nil;
      this.$for$slot = nil;
      this.$generic$slot = nil;
      this.$inheritedTypeOf$slot = nil;
      this.$is$slot = nil;
      this.$mssg$slot = nil;
      this.$of$slot = nil;
      this.$receiverType$slot = nil;
      this.$subtypeOf$slot = nil;
      this.$typeArg$slot = nil;
      this.$where$slot = nil;
      this.$returnType$slot = nil;
      this.$type$slot = nil;
      this.$typePrimary$slot = nil;
      this.$typeFactor$slot = nil;
      this.$parenthesizedTypeExpression$slot = nil;
      this.$typeTerm$slot = nil;
      this.$typeExpr$slot = nil;
      this.$typeArguments$slot = nil;
      this.$blockType$slot = nil;
      this.$tupleType$slot = nil;
      this.$nonEmptyBlockTypeArgList$slot = nil;
      this.$blockTypeArgList$slot = nil;
      this.$blockReturnType$slot = nil;
      this.$newBlockArgType$slot = nil;
      this.$newBlockReturnType$slot = nil;
      this.$newNonEmptyBlockArgList$slot = nil;
      this.$newBlockType$slot = nil;
      this.$typePattern$slot = nil;
      this.$typeFormal$slot = nil;
      this.$typeParamConstraint$slot = nil;
      this.$typeBoundQualifier$slot = nil;
      this.$inferenceClause$slot = nil;
      this.$returnTypeInferenceClause$slot = nil;
      this.$msgSelector$slot = nil;
      this.$typeArgInferenceClause$slot = nil;
     };
     this.basicNew = this["NewspeakGrammar`TypedNS3Grammar"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakGrammar`TypedNS3Grammar";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakGrammar`TypedNS3Grammar";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakGrammar$TypedNS3Grammar = enclosingObjects;
      this.$super$NewspeakGrammar$TypedNS3Grammar = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakGrammar$UnarySelectorParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakGrammar`UnarySelectorParser";
   this.name = "NewspeakGrammar`UnarySelectorParser";
   this.header = 1643;
   this.slots = [new SM("p", true, false)];
   this.methods = [
    new MM("superInit`NewspeakGrammar`UnarySelectorParser", true, 1644),
    new MM("instance`initializer", true, 1645),
    new MM("on:", false, 1646),
    new MM("parse:inContext:ifError:", false, 1647),
    new MM("init`p:", true, 0),
    new MM("p", true, 0),
    new MM("p:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakGrammar$UnarySelectorParser = function () {
    var self = this;
    self.$super$NewspeakGrammar$UnarySelectorParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakGrammar$UnarySelectorParser();
    return self;
   };
   this.$on$ = function ($s) {
    var self = this;
    self._$p$($s);
    return self;
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     var $pos = nil;
     $pos = $input.$position();
     self._$p().$keyword().$parse$inContext$ifError$($input, $context, function ($msg, $position) {
      $input.$position$($pos);
      {
       NLR.value = self._$p().$identifier().$parse$inContext$ifError$($input, $context, $blk);
       throw NLR;
      };
     });
     $input.$position$($pos);
     $blk.$value$value$("should not print", $pos);
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$init$p$ = function (v) {
    this.$p$slot = v;
    return this;
   };
   this.$p = function () {
    return this.$p$slot;
   };
   this.$p$ = function (v) {
    this.$p$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakGrammar`UnarySelectorParser";
     this._$superInit$NewspeakGrammar$UnarySelectorParser = $.$superInit$NewspeakGrammar$UnarySelectorParser;
     this.$superInit$NewspeakGrammar$UnarySelectorParser = dnuCatcher("$superInit$NewspeakGrammar$UnarySelectorParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$on$ = this._$on$ = $.$on$;
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$init$p$ = $.$init$p$;
     this.$init$p$ = dnuCatcher("$init$p$");
     this._$p = $.$p;
     this.$p = dnuCatcher("$p");
     this._$p$ = $.$p$;
     this.$p$ = dnuCatcher("$p$");
     this.$enclosingObjects$NewspeakGrammar$UnarySelectorParser = enclosingObjects;
     this.$super$NewspeakGrammar$UnarySelectorParser$slot = runtimeSuperclass;
     this["NewspeakGrammar`UnarySelectorParser"] = function () {
      superBasicNew.call(this);
      this.$p$slot = nil;
     };
     this.basicNew = this["NewspeakGrammar`UnarySelectorParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakGrammar`UnarySelectorParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakGrammar`UnarySelectorParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakGrammar$UnarySelectorParser = enclosingObjects;
      this.$super$NewspeakGrammar$UnarySelectorParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakGrammar$NS3Grammar.enclosingMixin = this;
  this.$NewspeakGrammar$NSCommentParser.enclosingMixin = this;
  this.$NewspeakGrammar$TypedNS3Grammar.enclosingMixin = this;
  this.$NewspeakGrammar$UnarySelectorParser.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for NewspeakGrammar";
    this._$superInit$NewspeakGrammar = $.$superInit$NewspeakGrammar;
    this.$superInit$NewspeakGrammar = dnuCatcher("$superInit$NewspeakGrammar");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$NS3Grammar = $.$NS3Grammar;
    this.$NS3Grammar = dnuCatcher("$NS3Grammar");
    this._$NSCommentParser = $.$NSCommentParser;
    this.$NSCommentParser = dnuCatcher("$NSCommentParser");
    this.$TypedNS3Grammar = this._$TypedNS3Grammar = $.$TypedNS3Grammar;
    this._$UnarySelectorParser = $.$UnarySelectorParser;
    this.$UnarySelectorParser = dnuCatcher("$UnarySelectorParser");
    this.$init$ParserError$ = this._$init$ParserError$ = $.$init$ParserError$;
    this.$ParserError = this._$ParserError = $.$ParserError;
    this.$init$NewspeakGrammar$NS3Grammar$ = this._$init$NewspeakGrammar$NS3Grammar$ = $.$init$NewspeakGrammar$NS3Grammar$;
    this.$NewspeakGrammar$NS3Grammar = this._$NewspeakGrammar$NS3Grammar = $.$NewspeakGrammar$NS3Grammar;
    this.$NewspeakGrammar$NS3Grammar$ = this._$NewspeakGrammar$NS3Grammar$ = $.$NewspeakGrammar$NS3Grammar$;
    this.$init$NewspeakGrammar$NSCommentParser$ = this._$init$NewspeakGrammar$NSCommentParser$ = $.$init$NewspeakGrammar$NSCommentParser$;
    this.$NewspeakGrammar$NSCommentParser = this._$NewspeakGrammar$NSCommentParser = $.$NewspeakGrammar$NSCommentParser;
    this.$NewspeakGrammar$NSCommentParser$ = this._$NewspeakGrammar$NSCommentParser$ = $.$NewspeakGrammar$NSCommentParser$;
    this.$init$NewspeakGrammar$TypedNS3Grammar$ = this._$init$NewspeakGrammar$TypedNS3Grammar$ = $.$init$NewspeakGrammar$TypedNS3Grammar$;
    this.$NewspeakGrammar$TypedNS3Grammar = this._$NewspeakGrammar$TypedNS3Grammar = $.$NewspeakGrammar$TypedNS3Grammar;
    this.$NewspeakGrammar$TypedNS3Grammar$ = this._$NewspeakGrammar$TypedNS3Grammar$ = $.$NewspeakGrammar$TypedNS3Grammar$;
    this.$init$NewspeakGrammar$UnarySelectorParser$ = this._$init$NewspeakGrammar$UnarySelectorParser$ = $.$init$NewspeakGrammar$UnarySelectorParser$;
    this.$NewspeakGrammar$UnarySelectorParser = this._$NewspeakGrammar$UnarySelectorParser = $.$NewspeakGrammar$UnarySelectorParser;
    this.$NewspeakGrammar$UnarySelectorParser$ = this._$NewspeakGrammar$UnarySelectorParser$ = $.$NewspeakGrammar$UnarySelectorParser$;
    this.$enclosingObjects$NewspeakGrammar = enclosingObjects;
    this.$super$NewspeakGrammar$slot = runtimeSuperclass;
    this.NewspeakGrammar = function () {
     superBasicNew.call(this);
     this.$OrderedCollection$slot = nil;
     this.$ExecutableGrammar$slot = nil;
     this.$CollectingCommentParser$slot = nil;
     this.$CombinatorialParser$slot = nil;
     this.$PredicateTokenParser$slot = nil;
     this.$Token$slot = nil;
     this.$ParserError$slot = nil;
     this.$NewspeakGrammar$NS3Grammar$slot = nil;
     this.$NewspeakGrammar$NSCommentParser$slot = nil;
     this.$NewspeakGrammar$TypedNS3Grammar$slot = nil;
     this.$NewspeakGrammar$UnarySelectorParser$slot = nil;
    };
    this.basicNew = this.NewspeakGrammar;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for NewspeakGrammar";
   this.slots = [];
   this.methods = [new MM("usingPlatform:parsers:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$parsers$ = function ($p, $parsers) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p, $parsers);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for NewspeakGrammar";
     this.$usingPlatform$parsers$ = this._$usingPlatform$parsers$ = $.$usingPlatform$parsers$;
     this.$enclosingObjects$NewspeakGrammar = enclosingObjects;
     this.$super$NewspeakGrammar = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$NewspeakASTs = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for NewspeakASTs";
  this.name = "NewspeakASTs";
  this.header = 1648;
  this.slots = [
   new SM("OrderedCollection", false, false),
   new SM("NewspeakASTs`AST", true, true),
   new SM("NewspeakASTs`ASTCopier", true, true),
   new SM("NewspeakASTs`ASTTool", true, true),
   new SM("NewspeakASTs`ASTTraverser", true, true),
   new SM("NewspeakASTs`AssignmentAST", true, true),
   new SM("NewspeakASTs`BinaryTypeOpAST", true, true),
   new SM("NewspeakASTs`BlockAST", true, true),
   new SM("NewspeakASTs`BlockTypeAST", true, true),
   new SM("NewspeakASTs`CascadedSendAST", true, true),
   new SM("NewspeakASTs`CategoryAST", true, true),
   new SM("NewspeakASTs`CharAST", true, true),
   new SM("NewspeakASTs`ClassBodyAST", true, true),
   new SM("NewspeakASTs`ClassDeclarationAST", true, true),
   new SM("NewspeakASTs`ClassHeaderAST", true, true),
   new SM("NewspeakASTs`ClassPrefixAST", true, true),
   new SM("NewspeakASTs`CodeBodyAST", true, true),
   new SM("NewspeakASTs`ImmutableSlotDefAST", true, true),
   new SM("NewspeakASTs`InitializerAST", true, true),
   new SM("NewspeakASTs`KeywordPatternAST", true, true),
   new SM("NewspeakASTs`KeywordPatternPairAST", true, true),
   new SM("NewspeakASTs`LiteralAST", true, true),
   new SM("NewspeakASTs`LiteralPatternAST", true, true),
   new SM("NewspeakASTs`MessageAST", true, true),
   new SM("NewspeakASTs`MessagePatternAST", true, true),
   new SM("NewspeakASTs`MethodAST", true, true),
   new SM("NewspeakASTs`MixinApplicationAST", true, true),
   new SM("NewspeakASTs`MixinApplicationClassAST", true, true),
   new SM("NewspeakASTs`MutableSlotDefAST", true, true),
   new SM("NewspeakASTs`NSSideAST", true, true),
   new SM("NewspeakASTs`NormalSendAST", true, true),
   new SM("NewspeakASTs`NumberAST", true, true),
   new SM("NewspeakASTs`ParameterizedTypeAST", true, true),
   new SM("NewspeakASTs`PatternAST", true, true),
   new SM("NewspeakASTs`ReturnStatAST", true, true),
   new SM("NewspeakASTs`SendAST", true, true),
   new SM("NewspeakASTs`SetterSendAST", true, true),
   new SM("NewspeakASTs`SideAST", true, true),
   new SM("NewspeakASTs`SlotDefAST", true, true),
   new SM("NewspeakASTs`StringAST", true, true),
   new SM("NewspeakASTs`SymbolAST", true, true),
   new SM("NewspeakASTs`TupleAST", true, true),
   new SM("NewspeakASTs`TypeIdAST", true, true),
   new SM("NewspeakASTs`UnaryTypeOpAST", true, true),
   new SM("NewspeakASTs`VarDeclAST", true, true),
   new SM("NewspeakASTs`VariableAST", true, true),
   new SM("NewspeakASTs`VariablePatternAST", true, true),
   new SM("NewspeakASTs`WildcardPatternAST", true, true)
  ];
  this.methods = [
   new MM("superInit`NewspeakASTs", true, 1649),
   new MM("instance`initializer", true, 1650),
   new MM("AST", true, 0),
   new MM("ASTCopier", true, 0),
   new MM("ASTTool", true, 0),
   new MM("ASTTraverser", true, 0),
   new MM("AssignmentAST", true, 0),
   new MM("BinaryTypeOpAST", true, 0),
   new MM("BlockAST", true, 0),
   new MM("BlockTypeAST", true, 0),
   new MM("CascadedSendAST", true, 0),
   new MM("CategoryAST", true, 0),
   new MM("CharAST", true, 0),
   new MM("ClassBodyAST", true, 0),
   new MM("ClassDeclarationAST", true, 0),
   new MM("ClassHeaderAST", true, 0),
   new MM("ClassPrefixAST", true, 0),
   new MM("CodeBodyAST", true, 0),
   new MM("ImmutableSlotDefAST", true, 0),
   new MM("InitializerAST", true, 0),
   new MM("KeywordPatternAST", true, 0),
   new MM("KeywordPatternPairAST", true, 0),
   new MM("LiteralAST", true, 0),
   new MM("LiteralPatternAST", true, 0),
   new MM("MessageAST", true, 0),
   new MM("MessagePatternAST", true, 0),
   new MM("MethodAST", true, 0),
   new MM("MixinApplicationAST", true, 0),
   new MM("MixinApplicationClassAST", true, 0),
   new MM("MutableSlotDefAST", true, 0),
   new MM("NSSideAST", true, 0),
   new MM("NormalSendAST", true, 0),
   new MM("NumberAST", true, 0),
   new MM("ParameterizedTypeAST", true, 0),
   new MM("PatternAST", true, 0),
   new MM("ReturnStatAST", true, 0),
   new MM("SendAST", true, 0),
   new MM("SetterSendAST", true, 0),
   new MM("SideAST", true, 0),
   new MM("SlotDefAST", true, 0),
   new MM("StringAST", true, 0),
   new MM("SymbolAST", true, 0),
   new MM("TupleAST", true, 0),
   new MM("TypeIdAST", true, 0),
   new MM("UnaryTypeOpAST", true, 0),
   new MM("VarDeclAST", true, 0),
   new MM("VariableAST", true, 0),
   new MM("VariablePatternAST", true, 0),
   new MM("WildcardPatternAST", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`NewspeakASTs`AST:", true, 0),
   new MM("NewspeakASTs`AST", true, 0),
   new MM("NewspeakASTs`AST:", true, 0),
   new MM("init`NewspeakASTs`ASTCopier:", true, 0),
   new MM("NewspeakASTs`ASTCopier", true, 0),
   new MM("NewspeakASTs`ASTCopier:", true, 0),
   new MM("init`NewspeakASTs`ASTTool:", true, 0),
   new MM("NewspeakASTs`ASTTool", true, 0),
   new MM("NewspeakASTs`ASTTool:", true, 0),
   new MM("init`NewspeakASTs`ASTTraverser:", true, 0),
   new MM("NewspeakASTs`ASTTraverser", true, 0),
   new MM("NewspeakASTs`ASTTraverser:", true, 0),
   new MM("init`NewspeakASTs`AssignmentAST:", true, 0),
   new MM("NewspeakASTs`AssignmentAST", true, 0),
   new MM("NewspeakASTs`AssignmentAST:", true, 0),
   new MM("init`NewspeakASTs`BinaryTypeOpAST:", true, 0),
   new MM("NewspeakASTs`BinaryTypeOpAST", true, 0),
   new MM("NewspeakASTs`BinaryTypeOpAST:", true, 0),
   new MM("init`NewspeakASTs`BlockAST:", true, 0),
   new MM("NewspeakASTs`BlockAST", true, 0),
   new MM("NewspeakASTs`BlockAST:", true, 0),
   new MM("init`NewspeakASTs`BlockTypeAST:", true, 0),
   new MM("NewspeakASTs`BlockTypeAST", true, 0),
   new MM("NewspeakASTs`BlockTypeAST:", true, 0),
   new MM("init`NewspeakASTs`CascadedSendAST:", true, 0),
   new MM("NewspeakASTs`CascadedSendAST", true, 0),
   new MM("NewspeakASTs`CascadedSendAST:", true, 0),
   new MM("init`NewspeakASTs`CategoryAST:", true, 0),
   new MM("NewspeakASTs`CategoryAST", true, 0),
   new MM("NewspeakASTs`CategoryAST:", true, 0),
   new MM("init`NewspeakASTs`CharAST:", true, 0),
   new MM("NewspeakASTs`CharAST", true, 0),
   new MM("NewspeakASTs`CharAST:", true, 0),
   new MM("init`NewspeakASTs`ClassBodyAST:", true, 0),
   new MM("NewspeakASTs`ClassBodyAST", true, 0),
   new MM("NewspeakASTs`ClassBodyAST:", true, 0),
   new MM("init`NewspeakASTs`ClassDeclarationAST:", true, 0),
   new MM("NewspeakASTs`ClassDeclarationAST", true, 0),
   new MM("NewspeakASTs`ClassDeclarationAST:", true, 0),
   new MM("init`NewspeakASTs`ClassHeaderAST:", true, 0),
   new MM("NewspeakASTs`ClassHeaderAST", true, 0),
   new MM("NewspeakASTs`ClassHeaderAST:", true, 0),
   new MM("init`NewspeakASTs`ClassPrefixAST:", true, 0),
   new MM("NewspeakASTs`ClassPrefixAST", true, 0),
   new MM("NewspeakASTs`ClassPrefixAST:", true, 0),
   new MM("init`NewspeakASTs`CodeBodyAST:", true, 0),
   new MM("NewspeakASTs`CodeBodyAST", true, 0),
   new MM("NewspeakASTs`CodeBodyAST:", true, 0),
   new MM("init`NewspeakASTs`ImmutableSlotDefAST:", true, 0),
   new MM("NewspeakASTs`ImmutableSlotDefAST", true, 0),
   new MM("NewspeakASTs`ImmutableSlotDefAST:", true, 0),
   new MM("init`NewspeakASTs`InitializerAST:", true, 0),
   new MM("NewspeakASTs`InitializerAST", true, 0),
   new MM("NewspeakASTs`InitializerAST:", true, 0),
   new MM("init`NewspeakASTs`KeywordPatternAST:", true, 0),
   new MM("NewspeakASTs`KeywordPatternAST", true, 0),
   new MM("NewspeakASTs`KeywordPatternAST:", true, 0),
   new MM("init`NewspeakASTs`KeywordPatternPairAST:", true, 0),
   new MM("NewspeakASTs`KeywordPatternPairAST", true, 0),
   new MM("NewspeakASTs`KeywordPatternPairAST:", true, 0),
   new MM("init`NewspeakASTs`LiteralAST:", true, 0),
   new MM("NewspeakASTs`LiteralAST", true, 0),
   new MM("NewspeakASTs`LiteralAST:", true, 0),
   new MM("init`NewspeakASTs`LiteralPatternAST:", true, 0),
   new MM("NewspeakASTs`LiteralPatternAST", true, 0),
   new MM("NewspeakASTs`LiteralPatternAST:", true, 0),
   new MM("init`NewspeakASTs`MessageAST:", true, 0),
   new MM("NewspeakASTs`MessageAST", true, 0),
   new MM("NewspeakASTs`MessageAST:", true, 0),
   new MM("init`NewspeakASTs`MessagePatternAST:", true, 0),
   new MM("NewspeakASTs`MessagePatternAST", true, 0),
   new MM("NewspeakASTs`MessagePatternAST:", true, 0),
   new MM("init`NewspeakASTs`MethodAST:", true, 0),
   new MM("NewspeakASTs`MethodAST", true, 0),
   new MM("NewspeakASTs`MethodAST:", true, 0),
   new MM("init`NewspeakASTs`MixinApplicationAST:", true, 0),
   new MM("NewspeakASTs`MixinApplicationAST", true, 0),
   new MM("NewspeakASTs`MixinApplicationAST:", true, 0),
   new MM("init`NewspeakASTs`MixinApplicationClassAST:", true, 0),
   new MM("NewspeakASTs`MixinApplicationClassAST", true, 0),
   new MM("NewspeakASTs`MixinApplicationClassAST:", true, 0),
   new MM("init`NewspeakASTs`MutableSlotDefAST:", true, 0),
   new MM("NewspeakASTs`MutableSlotDefAST", true, 0),
   new MM("NewspeakASTs`MutableSlotDefAST:", true, 0),
   new MM("init`NewspeakASTs`NSSideAST:", true, 0),
   new MM("NewspeakASTs`NSSideAST", true, 0),
   new MM("NewspeakASTs`NSSideAST:", true, 0),
   new MM("init`NewspeakASTs`NormalSendAST:", true, 0),
   new MM("NewspeakASTs`NormalSendAST", true, 0),
   new MM("NewspeakASTs`NormalSendAST:", true, 0),
   new MM("init`NewspeakASTs`NumberAST:", true, 0),
   new MM("NewspeakASTs`NumberAST", true, 0),
   new MM("NewspeakASTs`NumberAST:", true, 0),
   new MM("init`NewspeakASTs`ParameterizedTypeAST:", true, 0),
   new MM("NewspeakASTs`ParameterizedTypeAST", true, 0),
   new MM("NewspeakASTs`ParameterizedTypeAST:", true, 0),
   new MM("init`NewspeakASTs`PatternAST:", true, 0),
   new MM("NewspeakASTs`PatternAST", true, 0),
   new MM("NewspeakASTs`PatternAST:", true, 0),
   new MM("init`NewspeakASTs`ReturnStatAST:", true, 0),
   new MM("NewspeakASTs`ReturnStatAST", true, 0),
   new MM("NewspeakASTs`ReturnStatAST:", true, 0),
   new MM("init`NewspeakASTs`SendAST:", true, 0),
   new MM("NewspeakASTs`SendAST", true, 0),
   new MM("NewspeakASTs`SendAST:", true, 0),
   new MM("init`NewspeakASTs`SetterSendAST:", true, 0),
   new MM("NewspeakASTs`SetterSendAST", true, 0),
   new MM("NewspeakASTs`SetterSendAST:", true, 0),
   new MM("init`NewspeakASTs`SideAST:", true, 0),
   new MM("NewspeakASTs`SideAST", true, 0),
   new MM("NewspeakASTs`SideAST:", true, 0),
   new MM("init`NewspeakASTs`SlotDefAST:", true, 0),
   new MM("NewspeakASTs`SlotDefAST", true, 0),
   new MM("NewspeakASTs`SlotDefAST:", true, 0),
   new MM("init`NewspeakASTs`StringAST:", true, 0),
   new MM("NewspeakASTs`StringAST", true, 0),
   new MM("NewspeakASTs`StringAST:", true, 0),
   new MM("init`NewspeakASTs`SymbolAST:", true, 0),
   new MM("NewspeakASTs`SymbolAST", true, 0),
   new MM("NewspeakASTs`SymbolAST:", true, 0),
   new MM("init`NewspeakASTs`TupleAST:", true, 0),
   new MM("NewspeakASTs`TupleAST", true, 0),
   new MM("NewspeakASTs`TupleAST:", true, 0),
   new MM("init`NewspeakASTs`TypeIdAST:", true, 0),
   new MM("NewspeakASTs`TypeIdAST", true, 0),
   new MM("NewspeakASTs`TypeIdAST:", true, 0),
   new MM("init`NewspeakASTs`UnaryTypeOpAST:", true, 0),
   new MM("NewspeakASTs`UnaryTypeOpAST", true, 0),
   new MM("NewspeakASTs`UnaryTypeOpAST:", true, 0),
   new MM("init`NewspeakASTs`VarDeclAST:", true, 0),
   new MM("NewspeakASTs`VarDeclAST", true, 0),
   new MM("NewspeakASTs`VarDeclAST:", true, 0),
   new MM("init`NewspeakASTs`VariableAST:", true, 0),
   new MM("NewspeakASTs`VariableAST", true, 0),
   new MM("NewspeakASTs`VariableAST:", true, 0),
   new MM("init`NewspeakASTs`VariablePatternAST:", true, 0),
   new MM("NewspeakASTs`VariablePatternAST", true, 0),
   new MM("NewspeakASTs`VariablePatternAST:", true, 0),
   new MM("init`NewspeakASTs`WildcardPatternAST:", true, 0),
   new MM("NewspeakASTs`WildcardPatternAST", true, 0),
   new MM("NewspeakASTs`WildcardPatternAST:", true, 0)
  ];
  this.nestedClasses = [
   "NewspeakASTs`AST",
   "NewspeakASTs`ASTCopier",
   "NewspeakASTs`ASTTool",
   "NewspeakASTs`ASTTraverser",
   "NewspeakASTs`AssignmentAST",
   "NewspeakASTs`BinaryTypeOpAST",
   "NewspeakASTs`BlockAST",
   "NewspeakASTs`BlockTypeAST",
   "NewspeakASTs`CascadedSendAST",
   "NewspeakASTs`CategoryAST",
   "NewspeakASTs`CharAST",
   "NewspeakASTs`ClassBodyAST",
   "NewspeakASTs`ClassDeclarationAST",
   "NewspeakASTs`ClassHeaderAST",
   "NewspeakASTs`ClassPrefixAST",
   "NewspeakASTs`CodeBodyAST",
   "NewspeakASTs`ImmutableSlotDefAST",
   "NewspeakASTs`InitializerAST",
   "NewspeakASTs`KeywordPatternAST",
   "NewspeakASTs`KeywordPatternPairAST",
   "NewspeakASTs`LiteralAST",
   "NewspeakASTs`LiteralPatternAST",
   "NewspeakASTs`MessageAST",
   "NewspeakASTs`MessagePatternAST",
   "NewspeakASTs`MethodAST",
   "NewspeakASTs`MixinApplicationAST",
   "NewspeakASTs`MixinApplicationClassAST",
   "NewspeakASTs`MutableSlotDefAST",
   "NewspeakASTs`NSSideAST",
   "NewspeakASTs`NormalSendAST",
   "NewspeakASTs`NumberAST",
   "NewspeakASTs`ParameterizedTypeAST",
   "NewspeakASTs`PatternAST",
   "NewspeakASTs`ReturnStatAST",
   "NewspeakASTs`SendAST",
   "NewspeakASTs`SetterSendAST",
   "NewspeakASTs`SideAST",
   "NewspeakASTs`SlotDefAST",
   "NewspeakASTs`StringAST",
   "NewspeakASTs`SymbolAST",
   "NewspeakASTs`TupleAST",
   "NewspeakASTs`TypeIdAST",
   "NewspeakASTs`UnaryTypeOpAST",
   "NewspeakASTs`VarDeclAST",
   "NewspeakASTs`VariableAST",
   "NewspeakASTs`VariablePatternAST",
   "NewspeakASTs`WildcardPatternAST"
  ];
  this.applications = [];
  this.$superInit$NewspeakASTs = function ($platform) {
   var self = this;
   self.$super$NewspeakASTs$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   var self = this;
   self._$superInit$NewspeakASTs($platform);
   $0.$init$OrderedCollection$(self, $platform.$collections().$OrderedCollection());
   return self;
  };
  this.$AST = function () {
   if (nil === this.$NewspeakASTs$AST$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$AST;
    this.$NewspeakASTs$AST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$AST$slot;
  };
  this.$ASTCopier = function () {
   if (nil === this.$NewspeakASTs$ASTCopier$slot) {
    var self = this;
    var superclass = self._$ASTTool();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ASTCopier;
    this.$NewspeakASTs$ASTCopier$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ASTCopier$slot;
  };
  this.$ASTTool = function () {
   if (nil === this.$NewspeakASTs$ASTTool$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ASTTool;
    this.$NewspeakASTs$ASTTool$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ASTTool$slot;
  };
  this.$ASTTraverser = function () {
   if (nil === this.$NewspeakASTs$ASTTraverser$slot) {
    var self = this;
    var superclass = self._$ASTTool();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ASTTraverser;
    this.$NewspeakASTs$ASTTraverser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ASTTraverser$slot;
  };
  this.$AssignmentAST = function () {
   if (nil === this.$NewspeakASTs$AssignmentAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$AssignmentAST;
    this.$NewspeakASTs$AssignmentAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$AssignmentAST$slot;
  };
  this.$BinaryTypeOpAST = function () {
   if (nil === this.$NewspeakASTs$BinaryTypeOpAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$BinaryTypeOpAST;
    this.$NewspeakASTs$BinaryTypeOpAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$BinaryTypeOpAST$slot;
  };
  this.$BlockAST = function () {
   if (nil === this.$NewspeakASTs$BlockAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$BlockAST;
    this.$NewspeakASTs$BlockAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$BlockAST$slot;
  };
  this.$BlockTypeAST = function () {
   if (nil === this.$NewspeakASTs$BlockTypeAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$BlockTypeAST;
    this.$NewspeakASTs$BlockTypeAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$BlockTypeAST$slot;
  };
  this.$CascadedSendAST = function () {
   if (nil === this.$NewspeakASTs$CascadedSendAST$slot) {
    var self = this;
    var superclass = self._$SendAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$CascadedSendAST;
    this.$NewspeakASTs$CascadedSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$CascadedSendAST$slot;
  };
  this.$CategoryAST = function () {
   if (nil === this.$NewspeakASTs$CategoryAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$CategoryAST;
    this.$NewspeakASTs$CategoryAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$CategoryAST$slot;
  };
  this.$CharAST = function () {
   if (nil === this.$NewspeakASTs$CharAST$slot) {
    var self = this;
    var superclass = self._$LiteralAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$CharAST;
    this.$NewspeakASTs$CharAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$CharAST$slot;
  };
  this.$ClassBodyAST = function () {
   if (nil === this.$NewspeakASTs$ClassBodyAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ClassBodyAST;
    this.$NewspeakASTs$ClassBodyAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ClassBodyAST$slot;
  };
  this.$ClassDeclarationAST = function () {
   if (nil === this.$NewspeakASTs$ClassDeclarationAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ClassDeclarationAST;
    this.$NewspeakASTs$ClassDeclarationAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ClassDeclarationAST$slot;
  };
  this.$ClassHeaderAST = function () {
   if (nil === this.$NewspeakASTs$ClassHeaderAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ClassHeaderAST;
    this.$NewspeakASTs$ClassHeaderAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ClassHeaderAST$slot;
  };
  this.$ClassPrefixAST = function () {
   if (nil === this.$NewspeakASTs$ClassPrefixAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ClassPrefixAST;
    this.$NewspeakASTs$ClassPrefixAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ClassPrefixAST$slot;
  };
  this.$CodeBodyAST = function () {
   if (nil === this.$NewspeakASTs$CodeBodyAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$CodeBodyAST;
    this.$NewspeakASTs$CodeBodyAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$CodeBodyAST$slot;
  };
  this.$ImmutableSlotDefAST = function () {
   if (nil === this.$NewspeakASTs$ImmutableSlotDefAST$slot) {
    var self = this;
    var superclass = self._$SlotDefAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ImmutableSlotDefAST;
    this.$NewspeakASTs$ImmutableSlotDefAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ImmutableSlotDefAST$slot;
  };
  this.$InitializerAST = function () {
   if (nil === this.$NewspeakASTs$InitializerAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$InitializerAST;
    this.$NewspeakASTs$InitializerAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$InitializerAST$slot;
  };
  this.$KeywordPatternAST = function () {
   if (nil === this.$NewspeakASTs$KeywordPatternAST$slot) {
    var self = this;
    var superclass = self._$PatternAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$KeywordPatternAST;
    this.$NewspeakASTs$KeywordPatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$KeywordPatternAST$slot;
  };
  this.$KeywordPatternPairAST = function () {
   if (nil === this.$NewspeakASTs$KeywordPatternPairAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$KeywordPatternPairAST;
    this.$NewspeakASTs$KeywordPatternPairAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$KeywordPatternPairAST$slot;
  };
  this.$LiteralAST = function () {
   if (nil === this.$NewspeakASTs$LiteralAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$LiteralAST;
    this.$NewspeakASTs$LiteralAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$LiteralAST$slot;
  };
  this.$LiteralPatternAST = function () {
   if (nil === this.$NewspeakASTs$LiteralPatternAST$slot) {
    var self = this;
    var superclass = self._$PatternAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$LiteralPatternAST;
    this.$NewspeakASTs$LiteralPatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$LiteralPatternAST$slot;
  };
  this.$MessageAST = function () {
   if (nil === this.$NewspeakASTs$MessageAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$MessageAST;
    this.$NewspeakASTs$MessageAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$MessageAST$slot;
  };
  this.$MessagePatternAST = function () {
   if (nil === this.$NewspeakASTs$MessagePatternAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$MessagePatternAST;
    this.$NewspeakASTs$MessagePatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$MessagePatternAST$slot;
  };
  this.$MethodAST = function () {
   if (nil === this.$NewspeakASTs$MethodAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$MethodAST;
    this.$NewspeakASTs$MethodAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$MethodAST$slot;
  };
  this.$MixinApplicationAST = function () {
   if (nil === this.$NewspeakASTs$MixinApplicationAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$MixinApplicationAST;
    this.$NewspeakASTs$MixinApplicationAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$MixinApplicationAST$slot;
  };
  this.$MixinApplicationClassAST = function () {
   if (nil === this.$NewspeakASTs$MixinApplicationClassAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$MixinApplicationClassAST;
    this.$NewspeakASTs$MixinApplicationClassAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$MixinApplicationClassAST$slot;
  };
  this.$MutableSlotDefAST = function () {
   if (nil === this.$NewspeakASTs$MutableSlotDefAST$slot) {
    var self = this;
    var superclass = self._$SlotDefAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$MutableSlotDefAST;
    this.$NewspeakASTs$MutableSlotDefAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$MutableSlotDefAST$slot;
  };
  this.$NSSideAST = function () {
   if (nil === this.$NewspeakASTs$NSSideAST$slot) {
    var self = this;
    var superclass = self._$SideAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$NSSideAST;
    this.$NewspeakASTs$NSSideAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$NSSideAST$slot;
  };
  this.$NormalSendAST = function () {
   if (nil === this.$NewspeakASTs$NormalSendAST$slot) {
    var self = this;
    var superclass = self._$SendAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$NormalSendAST;
    this.$NewspeakASTs$NormalSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$NormalSendAST$slot;
  };
  this.$NumberAST = function () {
   if (nil === this.$NewspeakASTs$NumberAST$slot) {
    var self = this;
    var superclass = self._$LiteralAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$NumberAST;
    this.$NewspeakASTs$NumberAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$NumberAST$slot;
  };
  this.$ParameterizedTypeAST = function () {
   if (nil === this.$NewspeakASTs$ParameterizedTypeAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ParameterizedTypeAST;
    this.$NewspeakASTs$ParameterizedTypeAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ParameterizedTypeAST$slot;
  };
  this.$PatternAST = function () {
   if (nil === this.$NewspeakASTs$PatternAST$slot) {
    var self = this;
    var superclass = self._$LiteralAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$PatternAST;
    this.$NewspeakASTs$PatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$PatternAST$slot;
  };
  this.$ReturnStatAST = function () {
   if (nil === this.$NewspeakASTs$ReturnStatAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$ReturnStatAST;
    this.$NewspeakASTs$ReturnStatAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$ReturnStatAST$slot;
  };
  this.$SendAST = function () {
   if (nil === this.$NewspeakASTs$SendAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$SendAST;
    this.$NewspeakASTs$SendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$SendAST$slot;
  };
  this.$SetterSendAST = function () {
   if (nil === this.$NewspeakASTs$SetterSendAST$slot) {
    var self = this;
    var superclass = self._$SendAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$SetterSendAST;
    this.$NewspeakASTs$SetterSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$SetterSendAST$slot;
  };
  this.$SideAST = function () {
   if (nil === this.$NewspeakASTs$SideAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$SideAST;
    this.$NewspeakASTs$SideAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$SideAST$slot;
  };
  this.$SlotDefAST = function () {
   if (nil === this.$NewspeakASTs$SlotDefAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$SlotDefAST;
    this.$NewspeakASTs$SlotDefAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$SlotDefAST$slot;
  };
  this.$StringAST = function () {
   if (nil === this.$NewspeakASTs$StringAST$slot) {
    var self = this;
    var superclass = self._$LiteralAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$StringAST;
    this.$NewspeakASTs$StringAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$StringAST$slot;
  };
  this.$SymbolAST = function () {
   if (nil === this.$NewspeakASTs$SymbolAST$slot) {
    var self = this;
    var superclass = self._$LiteralAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$SymbolAST;
    this.$NewspeakASTs$SymbolAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$SymbolAST$slot;
  };
  this.$TupleAST = function () {
   if (nil === this.$NewspeakASTs$TupleAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$TupleAST;
    this.$NewspeakASTs$TupleAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$TupleAST$slot;
  };
  this.$TypeIdAST = function () {
   if (nil === this.$NewspeakASTs$TypeIdAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$TypeIdAST;
    this.$NewspeakASTs$TypeIdAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$TypeIdAST$slot;
  };
  this.$UnaryTypeOpAST = function () {
   if (nil === this.$NewspeakASTs$UnaryTypeOpAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$UnaryTypeOpAST;
    this.$NewspeakASTs$UnaryTypeOpAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$UnaryTypeOpAST$slot;
  };
  this.$VarDeclAST = function () {
   if (nil === this.$NewspeakASTs$VarDeclAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$VarDeclAST;
    this.$NewspeakASTs$VarDeclAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$VarDeclAST$slot;
  };
  this.$VariableAST = function () {
   if (nil === this.$NewspeakASTs$VariableAST$slot) {
    var self = this;
    var superclass = self._$AST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$VariableAST;
    this.$NewspeakASTs$VariableAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$VariableAST$slot;
  };
  this.$VariablePatternAST = function () {
   if (nil === this.$NewspeakASTs$VariablePatternAST$slot) {
    var self = this;
    var superclass = self._$PatternAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$VariablePatternAST;
    this.$NewspeakASTs$VariablePatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$VariablePatternAST$slot;
  };
  this.$WildcardPatternAST = function () {
   if (nil === this.$NewspeakASTs$WildcardPatternAST$slot) {
    var self = this;
    var superclass = self._$PatternAST();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakASTs);
    var mixin = $.$NewspeakASTs$WildcardPatternAST;
    this.$NewspeakASTs$WildcardPatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakASTs$WildcardPatternAST$slot;
  };
  this.$init$OrderedCollection$ = function (self, v) {
   self.$OrderedCollection$slot = v;
   return self;
  };
  this.$OrderedCollection = function (self) {
   return self.$OrderedCollection$slot;
  };
  this.$init$NewspeakASTs$AST$ = function (v) {
   this.$NewspeakASTs$AST$slot = v;
   return this;
  };
  this.$NewspeakASTs$AST = function () {
   return this.$NewspeakASTs$AST$slot;
  };
  this.$NewspeakASTs$AST$ = function (v) {
   this.$NewspeakASTs$AST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ASTCopier$ = function (v) {
   this.$NewspeakASTs$ASTCopier$slot = v;
   return this;
  };
  this.$NewspeakASTs$ASTCopier = function () {
   return this.$NewspeakASTs$ASTCopier$slot;
  };
  this.$NewspeakASTs$ASTCopier$ = function (v) {
   this.$NewspeakASTs$ASTCopier$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ASTTool$ = function (v) {
   this.$NewspeakASTs$ASTTool$slot = v;
   return this;
  };
  this.$NewspeakASTs$ASTTool = function () {
   return this.$NewspeakASTs$ASTTool$slot;
  };
  this.$NewspeakASTs$ASTTool$ = function (v) {
   this.$NewspeakASTs$ASTTool$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ASTTraverser$ = function (v) {
   this.$NewspeakASTs$ASTTraverser$slot = v;
   return this;
  };
  this.$NewspeakASTs$ASTTraverser = function () {
   return this.$NewspeakASTs$ASTTraverser$slot;
  };
  this.$NewspeakASTs$ASTTraverser$ = function (v) {
   this.$NewspeakASTs$ASTTraverser$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$AssignmentAST$ = function (v) {
   this.$NewspeakASTs$AssignmentAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$AssignmentAST = function () {
   return this.$NewspeakASTs$AssignmentAST$slot;
  };
  this.$NewspeakASTs$AssignmentAST$ = function (v) {
   this.$NewspeakASTs$AssignmentAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$BinaryTypeOpAST$ = function (v) {
   this.$NewspeakASTs$BinaryTypeOpAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$BinaryTypeOpAST = function () {
   return this.$NewspeakASTs$BinaryTypeOpAST$slot;
  };
  this.$NewspeakASTs$BinaryTypeOpAST$ = function (v) {
   this.$NewspeakASTs$BinaryTypeOpAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$BlockAST$ = function (v) {
   this.$NewspeakASTs$BlockAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$BlockAST = function () {
   return this.$NewspeakASTs$BlockAST$slot;
  };
  this.$NewspeakASTs$BlockAST$ = function (v) {
   this.$NewspeakASTs$BlockAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$BlockTypeAST$ = function (v) {
   this.$NewspeakASTs$BlockTypeAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$BlockTypeAST = function () {
   return this.$NewspeakASTs$BlockTypeAST$slot;
  };
  this.$NewspeakASTs$BlockTypeAST$ = function (v) {
   this.$NewspeakASTs$BlockTypeAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$CascadedSendAST$ = function (v) {
   this.$NewspeakASTs$CascadedSendAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$CascadedSendAST = function () {
   return this.$NewspeakASTs$CascadedSendAST$slot;
  };
  this.$NewspeakASTs$CascadedSendAST$ = function (v) {
   this.$NewspeakASTs$CascadedSendAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$CategoryAST$ = function (v) {
   this.$NewspeakASTs$CategoryAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$CategoryAST = function () {
   return this.$NewspeakASTs$CategoryAST$slot;
  };
  this.$NewspeakASTs$CategoryAST$ = function (v) {
   this.$NewspeakASTs$CategoryAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$CharAST$ = function (v) {
   this.$NewspeakASTs$CharAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$CharAST = function () {
   return this.$NewspeakASTs$CharAST$slot;
  };
  this.$NewspeakASTs$CharAST$ = function (v) {
   this.$NewspeakASTs$CharAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ClassBodyAST$ = function (v) {
   this.$NewspeakASTs$ClassBodyAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ClassBodyAST = function () {
   return this.$NewspeakASTs$ClassBodyAST$slot;
  };
  this.$NewspeakASTs$ClassBodyAST$ = function (v) {
   this.$NewspeakASTs$ClassBodyAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ClassDeclarationAST$ = function (v) {
   this.$NewspeakASTs$ClassDeclarationAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ClassDeclarationAST = function () {
   return this.$NewspeakASTs$ClassDeclarationAST$slot;
  };
  this.$NewspeakASTs$ClassDeclarationAST$ = function (v) {
   this.$NewspeakASTs$ClassDeclarationAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ClassHeaderAST$ = function (v) {
   this.$NewspeakASTs$ClassHeaderAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ClassHeaderAST = function () {
   return this.$NewspeakASTs$ClassHeaderAST$slot;
  };
  this.$NewspeakASTs$ClassHeaderAST$ = function (v) {
   this.$NewspeakASTs$ClassHeaderAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ClassPrefixAST$ = function (v) {
   this.$NewspeakASTs$ClassPrefixAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ClassPrefixAST = function () {
   return this.$NewspeakASTs$ClassPrefixAST$slot;
  };
  this.$NewspeakASTs$ClassPrefixAST$ = function (v) {
   this.$NewspeakASTs$ClassPrefixAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$CodeBodyAST$ = function (v) {
   this.$NewspeakASTs$CodeBodyAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$CodeBodyAST = function () {
   return this.$NewspeakASTs$CodeBodyAST$slot;
  };
  this.$NewspeakASTs$CodeBodyAST$ = function (v) {
   this.$NewspeakASTs$CodeBodyAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ImmutableSlotDefAST$ = function (v) {
   this.$NewspeakASTs$ImmutableSlotDefAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ImmutableSlotDefAST = function () {
   return this.$NewspeakASTs$ImmutableSlotDefAST$slot;
  };
  this.$NewspeakASTs$ImmutableSlotDefAST$ = function (v) {
   this.$NewspeakASTs$ImmutableSlotDefAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$InitializerAST$ = function (v) {
   this.$NewspeakASTs$InitializerAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$InitializerAST = function () {
   return this.$NewspeakASTs$InitializerAST$slot;
  };
  this.$NewspeakASTs$InitializerAST$ = function (v) {
   this.$NewspeakASTs$InitializerAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$KeywordPatternAST$ = function (v) {
   this.$NewspeakASTs$KeywordPatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$KeywordPatternAST = function () {
   return this.$NewspeakASTs$KeywordPatternAST$slot;
  };
  this.$NewspeakASTs$KeywordPatternAST$ = function (v) {
   this.$NewspeakASTs$KeywordPatternAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$KeywordPatternPairAST$ = function (v) {
   this.$NewspeakASTs$KeywordPatternPairAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$KeywordPatternPairAST = function () {
   return this.$NewspeakASTs$KeywordPatternPairAST$slot;
  };
  this.$NewspeakASTs$KeywordPatternPairAST$ = function (v) {
   this.$NewspeakASTs$KeywordPatternPairAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$LiteralAST$ = function (v) {
   this.$NewspeakASTs$LiteralAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$LiteralAST = function () {
   return this.$NewspeakASTs$LiteralAST$slot;
  };
  this.$NewspeakASTs$LiteralAST$ = function (v) {
   this.$NewspeakASTs$LiteralAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$LiteralPatternAST$ = function (v) {
   this.$NewspeakASTs$LiteralPatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$LiteralPatternAST = function () {
   return this.$NewspeakASTs$LiteralPatternAST$slot;
  };
  this.$NewspeakASTs$LiteralPatternAST$ = function (v) {
   this.$NewspeakASTs$LiteralPatternAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$MessageAST$ = function (v) {
   this.$NewspeakASTs$MessageAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$MessageAST = function () {
   return this.$NewspeakASTs$MessageAST$slot;
  };
  this.$NewspeakASTs$MessageAST$ = function (v) {
   this.$NewspeakASTs$MessageAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$MessagePatternAST$ = function (v) {
   this.$NewspeakASTs$MessagePatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$MessagePatternAST = function () {
   return this.$NewspeakASTs$MessagePatternAST$slot;
  };
  this.$NewspeakASTs$MessagePatternAST$ = function (v) {
   this.$NewspeakASTs$MessagePatternAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$MethodAST$ = function (v) {
   this.$NewspeakASTs$MethodAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$MethodAST = function () {
   return this.$NewspeakASTs$MethodAST$slot;
  };
  this.$NewspeakASTs$MethodAST$ = function (v) {
   this.$NewspeakASTs$MethodAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$MixinApplicationAST$ = function (v) {
   this.$NewspeakASTs$MixinApplicationAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$MixinApplicationAST = function () {
   return this.$NewspeakASTs$MixinApplicationAST$slot;
  };
  this.$NewspeakASTs$MixinApplicationAST$ = function (v) {
   this.$NewspeakASTs$MixinApplicationAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$MixinApplicationClassAST$ = function (v) {
   this.$NewspeakASTs$MixinApplicationClassAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$MixinApplicationClassAST = function () {
   return this.$NewspeakASTs$MixinApplicationClassAST$slot;
  };
  this.$NewspeakASTs$MixinApplicationClassAST$ = function (v) {
   this.$NewspeakASTs$MixinApplicationClassAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$MutableSlotDefAST$ = function (v) {
   this.$NewspeakASTs$MutableSlotDefAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$MutableSlotDefAST = function () {
   return this.$NewspeakASTs$MutableSlotDefAST$slot;
  };
  this.$NewspeakASTs$MutableSlotDefAST$ = function (v) {
   this.$NewspeakASTs$MutableSlotDefAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$NSSideAST$ = function (v) {
   this.$NewspeakASTs$NSSideAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$NSSideAST = function () {
   return this.$NewspeakASTs$NSSideAST$slot;
  };
  this.$NewspeakASTs$NSSideAST$ = function (v) {
   this.$NewspeakASTs$NSSideAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$NormalSendAST$ = function (v) {
   this.$NewspeakASTs$NormalSendAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$NormalSendAST = function () {
   return this.$NewspeakASTs$NormalSendAST$slot;
  };
  this.$NewspeakASTs$NormalSendAST$ = function (v) {
   this.$NewspeakASTs$NormalSendAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$NumberAST$ = function (v) {
   this.$NewspeakASTs$NumberAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$NumberAST = function () {
   return this.$NewspeakASTs$NumberAST$slot;
  };
  this.$NewspeakASTs$NumberAST$ = function (v) {
   this.$NewspeakASTs$NumberAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ParameterizedTypeAST$ = function (v) {
   this.$NewspeakASTs$ParameterizedTypeAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ParameterizedTypeAST = function () {
   return this.$NewspeakASTs$ParameterizedTypeAST$slot;
  };
  this.$NewspeakASTs$ParameterizedTypeAST$ = function (v) {
   this.$NewspeakASTs$ParameterizedTypeAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$PatternAST$ = function (v) {
   this.$NewspeakASTs$PatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$PatternAST = function () {
   return this.$NewspeakASTs$PatternAST$slot;
  };
  this.$NewspeakASTs$PatternAST$ = function (v) {
   this.$NewspeakASTs$PatternAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$ReturnStatAST$ = function (v) {
   this.$NewspeakASTs$ReturnStatAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$ReturnStatAST = function () {
   return this.$NewspeakASTs$ReturnStatAST$slot;
  };
  this.$NewspeakASTs$ReturnStatAST$ = function (v) {
   this.$NewspeakASTs$ReturnStatAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$SendAST$ = function (v) {
   this.$NewspeakASTs$SendAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$SendAST = function () {
   return this.$NewspeakASTs$SendAST$slot;
  };
  this.$NewspeakASTs$SendAST$ = function (v) {
   this.$NewspeakASTs$SendAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$SetterSendAST$ = function (v) {
   this.$NewspeakASTs$SetterSendAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$SetterSendAST = function () {
   return this.$NewspeakASTs$SetterSendAST$slot;
  };
  this.$NewspeakASTs$SetterSendAST$ = function (v) {
   this.$NewspeakASTs$SetterSendAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$SideAST$ = function (v) {
   this.$NewspeakASTs$SideAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$SideAST = function () {
   return this.$NewspeakASTs$SideAST$slot;
  };
  this.$NewspeakASTs$SideAST$ = function (v) {
   this.$NewspeakASTs$SideAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$SlotDefAST$ = function (v) {
   this.$NewspeakASTs$SlotDefAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$SlotDefAST = function () {
   return this.$NewspeakASTs$SlotDefAST$slot;
  };
  this.$NewspeakASTs$SlotDefAST$ = function (v) {
   this.$NewspeakASTs$SlotDefAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$StringAST$ = function (v) {
   this.$NewspeakASTs$StringAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$StringAST = function () {
   return this.$NewspeakASTs$StringAST$slot;
  };
  this.$NewspeakASTs$StringAST$ = function (v) {
   this.$NewspeakASTs$StringAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$SymbolAST$ = function (v) {
   this.$NewspeakASTs$SymbolAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$SymbolAST = function () {
   return this.$NewspeakASTs$SymbolAST$slot;
  };
  this.$NewspeakASTs$SymbolAST$ = function (v) {
   this.$NewspeakASTs$SymbolAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$TupleAST$ = function (v) {
   this.$NewspeakASTs$TupleAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$TupleAST = function () {
   return this.$NewspeakASTs$TupleAST$slot;
  };
  this.$NewspeakASTs$TupleAST$ = function (v) {
   this.$NewspeakASTs$TupleAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$TypeIdAST$ = function (v) {
   this.$NewspeakASTs$TypeIdAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$TypeIdAST = function () {
   return this.$NewspeakASTs$TypeIdAST$slot;
  };
  this.$NewspeakASTs$TypeIdAST$ = function (v) {
   this.$NewspeakASTs$TypeIdAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$UnaryTypeOpAST$ = function (v) {
   this.$NewspeakASTs$UnaryTypeOpAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$UnaryTypeOpAST = function () {
   return this.$NewspeakASTs$UnaryTypeOpAST$slot;
  };
  this.$NewspeakASTs$UnaryTypeOpAST$ = function (v) {
   this.$NewspeakASTs$UnaryTypeOpAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$VarDeclAST$ = function (v) {
   this.$NewspeakASTs$VarDeclAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$VarDeclAST = function () {
   return this.$NewspeakASTs$VarDeclAST$slot;
  };
  this.$NewspeakASTs$VarDeclAST$ = function (v) {
   this.$NewspeakASTs$VarDeclAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$VariableAST$ = function (v) {
   this.$NewspeakASTs$VariableAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$VariableAST = function () {
   return this.$NewspeakASTs$VariableAST$slot;
  };
  this.$NewspeakASTs$VariableAST$ = function (v) {
   this.$NewspeakASTs$VariableAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$VariablePatternAST$ = function (v) {
   this.$NewspeakASTs$VariablePatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$VariablePatternAST = function () {
   return this.$NewspeakASTs$VariablePatternAST$slot;
  };
  this.$NewspeakASTs$VariablePatternAST$ = function (v) {
   this.$NewspeakASTs$VariablePatternAST$slot = v;
   return this;
  };
  this.$init$NewspeakASTs$WildcardPatternAST$ = function (v) {
   this.$NewspeakASTs$WildcardPatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$WildcardPatternAST = function () {
   return this.$NewspeakASTs$WildcardPatternAST$slot;
  };
  this.$NewspeakASTs$WildcardPatternAST$ = function (v) {
   this.$NewspeakASTs$WildcardPatternAST$slot = v;
   return this;
  };
  this.$NewspeakASTs$AST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`AST";
   this.name = "NewspeakASTs`AST";
   this.header = 1651;
   this.slots = [
    new SM("start", true, false),
    new SM("end", true, false),
    new SM("_concreteStart", true, false),
    new SM("_concreteEnd", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`AST", true, 1652),
    new MM("instance`initializer", true, 1653),
    new MM("assert:", false, 1654),
    new MM("copyPositionFrom:", false, 1655),
    new MM("concreteEnd", false, 1656),
    new MM("concreteEnd:", false, 1657),
    new MM("concreteStart", false, 1658),
    new MM("concreteStart:", false, 1659),
    new MM("left:", false, 1660),
    new MM("right:", false, 1661),
    new MM("isAST", false, 1662),
    new MM("apply:", false, 1663),
    new MM("init`start:", true, 0),
    new MM("start", true, 0),
    new MM("start:", true, 0),
    new MM("init`end:", true, 0),
    new MM("end", true, 0),
    new MM("end:", true, 0),
    new MM("init`_concreteStart:", true, 0),
    new MM("_concreteStart", true, 0),
    new MM("_concreteStart:", true, 0),
    new MM("init`_concreteEnd:", true, 0),
    new MM("_concreteEnd", true, 0),
    new MM("_concreteEnd:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$AST = function () {
    var self = this;
    self.$super$NewspeakASTs$AST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$AST();
    self._$init$start$(0);
    self._$init$end$(0);
    return self;
   };
   this.$assert$ = function ($block) {
    var self = this;
    self._$assert$message$($block, "Assert failed");
    return self;
   };
   this.$copyPositionFrom$ = function ($other) {
    var self = this;
    self._$start$($other.$start());
    self._$end$($other.$end());
    return self;
   };
   this.$concreteEnd = function () {
    var self = this;
    return self._$_concreteEnd().$isNil().$ifTrue$ifFalse$(function () {
     return self._$end();
    }, function () {
     return self._$_concreteEnd();
    });
   };
   this.$concreteEnd$ = function ($position) {
    var self = this;
    self._$_concreteEnd$($position);
    return self;
   };
   this.$concreteStart = function () {
    var self = this;
    return self._$_concreteStart().$isNil().$ifTrue$ifFalse$(function () {
     return self._$start();
    }, function () {
     return self._$_concreteStart();
    });
   };
   this.$concreteStart$ = function ($position) {
    var self = this;
    self._$_concreteStart$($position);
    return self;
   };
   this.$left$ = function ($leftmostSubtree) {
    var self = this;
    if (self._$_concreteStart().$isNil()) {
     self._$_concreteStart$($leftmostSubtree.$concreteStart());
    } else {
     nil;
    };
    if (self._$start().$$equal(0)) {
     self._$start$(self._$_concreteStart());
    } else {
     nil;
    };
    return self;
   };
   this.$right$ = function ($rightmostSubtree) {
    var self = this;
    if (self._$_concreteEnd().$isNil()) {
     self._$_concreteEnd$($rightmostSubtree.$concreteEnd());
    } else {
     nil;
    };
    if (self._$end().$$equal(0)) {
     self._$end$(self._$_concreteEnd());
    } else {
     nil;
    };
    return self;
   };
   this.$isAST = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return self._$subclassResponsibility();
   };
   this.$init$start$ = function (v) {
    this.$start$slot = v;
    return this;
   };
   this.$start = function () {
    return this.$start$slot;
   };
   this.$start$ = function (v) {
    this.$start$slot = v;
    return this;
   };
   this.$init$end$ = function (v) {
    this.$end$slot = v;
    return this;
   };
   this.$end = function () {
    return this.$end$slot;
   };
   this.$end$ = function (v) {
    this.$end$slot = v;
    return this;
   };
   this.$init$_concreteStart$ = function (v) {
    this.$_concreteStart$slot = v;
    return this;
   };
   this.$_concreteStart = function () {
    return this.$_concreteStart$slot;
   };
   this.$_concreteStart$ = function (v) {
    this.$_concreteStart$slot = v;
    return this;
   };
   this.$init$_concreteEnd$ = function (v) {
    this.$_concreteEnd$slot = v;
    return this;
   };
   this.$_concreteEnd = function () {
    return this.$_concreteEnd$slot;
   };
   this.$_concreteEnd$ = function (v) {
    this.$_concreteEnd$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`AST";
     this._$superInit$NewspeakASTs$AST = $.$superInit$NewspeakASTs$AST;
     this.$superInit$NewspeakASTs$AST = dnuCatcher("$superInit$NewspeakASTs$AST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$assert$ = $.$assert$;
     this.$assert$ = dnuCatcher("$assert$");
     this.$copyPositionFrom$ = this._$copyPositionFrom$ = $.$copyPositionFrom$;
     this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
     this.$concreteEnd$ = this._$concreteEnd$ = $.$concreteEnd$;
     this.$concreteStart = this._$concreteStart = $.$concreteStart;
     this.$concreteStart$ = this._$concreteStart$ = $.$concreteStart$;
     this.$left$ = this._$left$ = $.$left$;
     this.$right$ = this._$right$ = $.$right$;
     this.$isAST = this._$isAST = $.$isAST;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$start$ = this._$init$start$ = $.$init$start$;
     this.$start = this._$start = $.$start;
     this.$start$ = this._$start$ = $.$start$;
     this.$init$end$ = this._$init$end$ = $.$init$end$;
     this.$end = this._$end = $.$end;
     this.$end$ = this._$end$ = $.$end$;
     this._$init$_concreteStart$ = $.$init$_concreteStart$;
     this.$init$_concreteStart$ = dnuCatcher("$init$_concreteStart$");
     this._$_concreteStart = $.$_concreteStart;
     this.$_concreteStart = dnuCatcher("$_concreteStart");
     this._$_concreteStart$ = $.$_concreteStart$;
     this.$_concreteStart$ = dnuCatcher("$_concreteStart$");
     this._$init$_concreteEnd$ = $.$init$_concreteEnd$;
     this.$init$_concreteEnd$ = dnuCatcher("$init$_concreteEnd$");
     this._$_concreteEnd = $.$_concreteEnd;
     this.$_concreteEnd = dnuCatcher("$_concreteEnd");
     this._$_concreteEnd$ = $.$_concreteEnd$;
     this.$_concreteEnd$ = dnuCatcher("$_concreteEnd$");
     this.$enclosingObjects$NewspeakASTs$AST = enclosingObjects;
     this.$super$NewspeakASTs$AST$slot = runtimeSuperclass;
     this["NewspeakASTs`AST"] = function () {
      superBasicNew.call(this);
      this.$start$slot = nil;
      this.$end$slot = nil;
      this.$_concreteStart$slot = nil;
      this.$_concreteEnd$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`AST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`AST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`AST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$AST = enclosingObjects;
      this.$super$NewspeakASTs$AST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ASTCopier = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ASTCopier";
   this.name = "NewspeakASTs`ASTCopier";
   this.header = 1664;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`ASTCopier", true, 1665),
    new MM("instance`initializer", true, 1666),
    new MM("assignmentNode:", false, 1667),
    new MM("binaryTypeOpNode:", false, 1668),
    new MM("blockNode:", false, 1669),
    new MM("blockTypeNode:", false, 1670),
    new MM("cascadedSendNode:", false, 1671),
    new MM("categoryNode:", false, 1672),
    new MM("charNode:", false, 1673),
    new MM("classHeaderNode:", false, 1674),
    new MM("classNode:", false, 1675),
    new MM("classPrefix:", false, 1676),
    new MM("codeBodyNode:", false, 1677),
    new MM("genericInvocationNode:", false, 1678),
    new MM("messageNode:", false, 1679),
    new MM("messagePatternNode:", false, 1680),
    new MM("methodNode:", false, 1681),
    new MM("mixinApplication:", false, 1682),
    new MM("mixinApplicationClass:", false, 1683),
    new MM("normalSendNode:", false, 1684),
    new MM("numberNode:", false, 1685),
    new MM("returnStatNode:", false, 1686),
    new MM("setterSendNode:", false, 1687),
    new MM("sideNode:", false, 1688),
    new MM("slotDefNode:", false, 1689),
    new MM("stringNode:", false, 1690),
    new MM("symbolNode:", false, 1691),
    new MM("tupleNode:", false, 1692),
    new MM("typeIdNode:", false, 1693),
    new MM("typePatternNode:", false, 1694),
    new MM("unaryTypeOpNode:", false, 1695),
    new MM("varDeclNode:", false, 1696),
    new MM("variableNode:", false, 1697)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ASTCopier = function () {
    var self = this;
    self.$super$NewspeakASTs$ASTCopier$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ASTCopier();
    return self;
   };
   this.$assignmentNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$to$send$($aNode.$var().$apply$(self), $aNode.$expression().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$AssignmentAST().$new());
   };
   this.$binaryTypeOpNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$leftOperand$($aNode.$leftOperand().$apply$(self));
     cascadeReceiver.$operator$($aNode.$operator());
     cascadeReceiver.$rightOperand$($aNode.$rightOperand().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$BinaryTypeOpAST().$new());
   };
   this.$blockNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$body$($aNode.$body().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$BlockAST().$new());
   };
   this.$blockTypeNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$BlockTypeAST().$formals$return$($aNode.$formals().$collect$(function ($f) {
     return $f.$apply$(self);
    }), nil.$$equal($aNode.$return()).$ifFalse$(function () {
     return $aNode.$return().$apply$(self);
    })));
   };
   this.$cascadedSendNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$to$cascade$($aNode.$previousSend().$apply$(self), $aNode.$message().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CascadedSendAST().$new());
   };
   this.$categoryNode$ = function ($node) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$($node.$name());
     return cascadeReceiver.$methods$($node.$methods().$collect$(function ($m) {
      return $m.$apply$(self);
     }));
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CategoryAST().$new());
   };
   this.$charNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$value$($aNode.$value());
     return cascadeReceiver.$copyPositionFrom$($aNode);
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CharAST().$new());
   };
   this.$classHeaderNode$ = function ($node) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$($node.$name());
     cascadeReceiver.$constructor$($node.$constructor().$apply$(self));
     cascadeReceiver.$superclassName$($node.$superclassName());
     cascadeReceiver.$superclassCall$($node.$superclassCall());
     cascadeReceiver.$superConstructorCall$($node.$superConstructorCall().$apply$(self));
     cascadeReceiver.$slots$($node.$slots().$collect$(function ($slt) {
      return $slt.$apply$(self);
     }));
     cascadeReceiver.$isSeq$($node.$isSeq());
     cascadeReceiver.$classComment$($node.$classComment());
     cascadeReceiver.$category$($node.$category());
     cascadeReceiver.$inheritanceChain$($node.$inheritanceChain().$collect$(function ($send) {
      return $send.$apply$(self);
     }));
     return cascadeReceiver.$initExprs$($node.$initExprs().$collect$(function ($ie) {
      return $ie.$apply$(self);
     }));
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ClassHeaderAST().$new());
   };
   this.$classNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$header$($aNode.$header().$apply$(self));
     cascadeReceiver.$instanceSide$($aNode.$instanceSide().$apply$(self));
     cascadeReceiver.$classSide$($aNode.$classSide().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ClassDeclarationAST().$new());
   };
   this.$classPrefix$ = function ($node) {
    var self = this;
    return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ClassPrefixAST().$name$constructor$superclassName$superclassCall$superConstructorCall$($node.$name().$apply$(self), $node.$constructor().$apply$(self), $node.$superclassName().$apply$(self), $node.$superclassCall().$apply$(self), $node.$superConstructorCall().$apply$(self));
   };
   this.$codeBodyNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$parameters$temporaries$statements$($aNode.$parameters().$collect$(function ($p) {
      return $p.$apply$(self);
     }), $aNode.$temporaries().$collect$(function ($t) {
      return $t.$apply$(self);
     }), $aNode.$statements().$collect$(function ($s) {
      return $s.$apply$(self);
     }));
     cascadeReceiver.$isSeq$($aNode.$isSeq());
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CodeBodyAST().$new());
   };
   this.$genericInvocationNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$generic$($aNode.$generic().$apply$(self));
     cascadeReceiver.$arguments$($aNode.$arguments().$collect$(function ($a) {
      return $a.$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ParameterizedTypeAST().$new());
   };
   this.$messageNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$send$with$($aNode.$selector(), $aNode.$arguments().$collect$(function ($a) {
      return $a.$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MessageAST().$new());
   };
   this.$messagePatternNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$selector$parameters$returnType$typePattern$($aNode.$selector(), $aNode.$parameters().$collect$(function ($p) {
      return $p.$apply$(self);
     }), nil.$$equal($aNode.$returnType()).$ifFalse$(function () {
      return $aNode.$returnType().$apply$(self);
     }), nil.$$equal($aNode.$typePattern()).$ifFalse$(function () {
      return $aNode.$typePattern().$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MessagePatternAST().$new());
   };
   this.$methodNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$pattern$body$accessModifier$($aNode.$pattern().$apply$(self), $aNode.$body().$apply$(self), $aNode.$accessModifier());
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MethodAST().$new());
   };
   this.$mixinApplication$ = function ($node) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$mixinExpr$($node.$mixinExpr().$apply$(self));
     cascadeReceiver.$superclassExpr$($node.$superclassExpr().$apply$(self));
     cascadeReceiver.$classPrefix$(nil.$$equal($node.$classPrefix()).$ifFalse$(function () {
      return $node.$classPrefix().$apply$(self);
     }));
     cascadeReceiver.$start$($node.$start());
     cascadeReceiver.$end$($node.$end());
     cascadeReceiver.$concreteStart$($node.$concreteStart());
     return cascadeReceiver.$concreteEnd$($node.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MixinApplicationAST().$new());
   };
   this.$mixinApplicationClass$ = function ($node) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$start$($node.$start());
     cascadeReceiver.$end$($node.$end());
     cascadeReceiver.$concreteStart$($node.$concreteStart());
     return cascadeReceiver.$concreteEnd$($node.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MixinApplicationClassAST().$named$factoryMsg$inheriting$($node.$name(), $node.$constructor().$apply$(self), $node.$inheritanceChain().$collect$(function ($ic) {
     return $ic.$apply$(self);
    })));
   };
   this.$normalSendNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$to$send$($aNode.$receiver().$apply$(self), $aNode.$message().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$NormalSendAST().$new());
   };
   this.$numberNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$value$($aNode.$value());
     return cascadeReceiver.$copyPositionFrom$($aNode);
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$NumberAST().$new());
   };
   this.$returnStatNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$expression$($aNode.$expression().$apply$(self));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ReturnStatAST().$new());
   };
   this.$setterSendNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$SetterSendAST().$to$send$start$end$($aNode.$receiver().$apply$(self), $aNode.$message().$apply$(self), $aNode.$start(), $aNode.$end()));
   };
   this.$sideNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$variables$categories$($aNode.$vars().$collect$(function ($v) {
      return $v.$apply$(self);
     }), $aNode.$categories().$collect$(function ($c) {
      return $c.$apply$(self);
     }));
     cascadeReceiver.$nestedClasses$($aNode.$nestedClasses().$collect$(function ($nc) {
      return $nc.$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$NSSideAST().$new());
   };
   this.$slotDefNode$ = function ($aNode) {
    var self = this;
    var $slotDefClass = nil;
    $slotDefClass = $aNode.$isMutable().$ifTrue$ifFalse$(function () {
     return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MutableSlotDefAST();
    }, function () {
     return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ImmutableSlotDefAST();
    });
    return (function (cascadeReceiver) {
     cascadeReceiver.$slotDecl$($aNode.$slotDecl().$apply$(self));
     cascadeReceiver.$initializer$(nil.$$equal($aNode.$initializer()).$ifFalse$(function () {
      return $aNode.$initializer().$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })($slotDefClass.$new());
   };
   this.$stringNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$value$($aNode.$value());
     return cascadeReceiver.$copyPositionFrom$($aNode);
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$StringAST().$new());
   };
   this.$symbolNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$value$($aNode.$value());
     return cascadeReceiver.$copyPositionFrom$($aNode);
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$SymbolAST().$new());
   };
   this.$tupleNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$elements$($aNode.$elements().$collect$(function ($e) {
      return $e.$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$TupleAST().$new());
   };
   this.$typeIdNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$($aNode.$name());
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$TypeIdAST().$new());
   };
   this.$typePatternNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$formals$($aNode.$formals().$collect$(function ($f) {
      return $f.$apply$(self);
     }));
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self._$TypePatternAST().$new());
   };
   this.$unaryTypeOpNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$operand$($aNode.$operand().$apply$(self));
     cascadeReceiver.$operator$($aNode.$operator());
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$UnaryTypeOpAST().$new());
   };
   this.$varDeclNode$ = function ($aNode) {
    var self = this;
    return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$VarDeclAST().$name$type$($aNode.$name(), nil.$$equal($aNode.$type()).$ifFalse$(function () {
     return $aNode.$type().$apply$(self);
    }));
   };
   this.$variableNode$ = function ($aNode) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$($aNode.$name());
     cascadeReceiver.$start$($aNode.$start());
     cascadeReceiver.$end$($aNode.$end());
     cascadeReceiver.$concreteStart$($aNode.$concreteStart());
     return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
    })(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$VariableAST().$new());
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ASTCopier";
     this._$superInit$NewspeakASTs$ASTCopier = $.$superInit$NewspeakASTs$ASTCopier;
     this.$superInit$NewspeakASTs$ASTCopier = dnuCatcher("$superInit$NewspeakASTs$ASTCopier");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$assignmentNode$ = this._$assignmentNode$ = $.$assignmentNode$;
     this.$binaryTypeOpNode$ = this._$binaryTypeOpNode$ = $.$binaryTypeOpNode$;
     this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
     this.$blockTypeNode$ = this._$blockTypeNode$ = $.$blockTypeNode$;
     this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
     this.$categoryNode$ = this._$categoryNode$ = $.$categoryNode$;
     this.$charNode$ = this._$charNode$ = $.$charNode$;
     this.$classHeaderNode$ = this._$classHeaderNode$ = $.$classHeaderNode$;
     this.$classNode$ = this._$classNode$ = $.$classNode$;
     this.$classPrefix$ = this._$classPrefix$ = $.$classPrefix$;
     this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
     this.$genericInvocationNode$ = this._$genericInvocationNode$ = $.$genericInvocationNode$;
     this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
     this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
     this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
     this.$mixinApplication$ = this._$mixinApplication$ = $.$mixinApplication$;
     this.$mixinApplicationClass$ = this._$mixinApplicationClass$ = $.$mixinApplicationClass$;
     this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
     this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
     this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
     this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
     this.$sideNode$ = this._$sideNode$ = $.$sideNode$;
     this.$slotDefNode$ = this._$slotDefNode$ = $.$slotDefNode$;
     this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
     this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
     this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
     this.$typeIdNode$ = this._$typeIdNode$ = $.$typeIdNode$;
     this.$typePatternNode$ = this._$typePatternNode$ = $.$typePatternNode$;
     this.$unaryTypeOpNode$ = this._$unaryTypeOpNode$ = $.$unaryTypeOpNode$;
     this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
     this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
     this.$enclosingObjects$NewspeakASTs$ASTCopier = enclosingObjects;
     this.$super$NewspeakASTs$ASTCopier$slot = runtimeSuperclass;
     this["NewspeakASTs`ASTCopier"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`ASTCopier"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ASTCopier";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ASTCopier";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ASTCopier = enclosingObjects;
      this.$super$NewspeakASTs$ASTCopier = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ASTTool = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ASTTool";
   this.name = "NewspeakASTs`ASTTool";
   this.header = 1698;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`ASTTool", true, 1699),
    new MM("instance`initializer", true, 1700),
    new MM("blockNode:", false, 1701),
    new MM("cascadedSendNode:", false, 1702),
    new MM("charNode:", false, 1703),
    new MM("classNode:", false, 1704),
    new MM("codeBodyNode:", false, 1705),
    new MM("messageNode:", false, 1706),
    new MM("messagePatternNode:", false, 1707),
    new MM("methodNode:", false, 1708),
    new MM("mixinApplication:", false, 1709),
    new MM("mixinApplicationClass:", false, 1710),
    new MM("normalSendNode:", false, 1711),
    new MM("numberNode:", false, 1712),
    new MM("returnStatNode:", false, 1713),
    new MM("setterSendNode:", false, 1714),
    new MM("sideNode:", false, 1715),
    new MM("stringNode:", false, 1716),
    new MM("symbolNode:", false, 1717),
    new MM("tupleNode:", false, 1718),
    new MM("varDeclNode:", false, 1719),
    new MM("variableNode:", false, 1720)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ASTTool = function () {
    var self = this;
    self.$super$NewspeakASTs$ASTTool$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ASTTool();
    return self;
   };
   this.$blockNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$cascadedSendNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$charNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$classNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$codeBodyNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$messageNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$messagePatternNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$methodNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$mixinApplication$ = function ($node) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$mixinApplicationClass$ = function ($node) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$normalSendNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$numberNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$returnStatNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$setterSendNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$sideNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$stringNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$symbolNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$tupleNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$varDeclNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$variableNode$ = function ($aNode) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ASTTool";
     this._$superInit$NewspeakASTs$ASTTool = $.$superInit$NewspeakASTs$ASTTool;
     this.$superInit$NewspeakASTs$ASTTool = dnuCatcher("$superInit$NewspeakASTs$ASTTool");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
     this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
     this.$charNode$ = this._$charNode$ = $.$charNode$;
     this.$classNode$ = this._$classNode$ = $.$classNode$;
     this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
     this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
     this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
     this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
     this.$mixinApplication$ = this._$mixinApplication$ = $.$mixinApplication$;
     this.$mixinApplicationClass$ = this._$mixinApplicationClass$ = $.$mixinApplicationClass$;
     this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
     this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
     this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
     this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
     this.$sideNode$ = this._$sideNode$ = $.$sideNode$;
     this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
     this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
     this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
     this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
     this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
     this.$enclosingObjects$NewspeakASTs$ASTTool = enclosingObjects;
     this.$super$NewspeakASTs$ASTTool$slot = runtimeSuperclass;
     this["NewspeakASTs`ASTTool"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`ASTTool"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ASTTool";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ASTTool";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ASTTool = enclosingObjects;
      this.$super$NewspeakASTs$ASTTool = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ASTTraverser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ASTTraverser";
   this.name = "NewspeakASTs`ASTTraverser";
   this.header = 1721;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`ASTTraverser", true, 1722),
    new MM("instance`initializer", true, 1723),
    new MM("blockNode:", false, 1724),
    new MM("cascadedSendNode:", false, 1725),
    new MM("charNode:", false, 1726),
    new MM("keywordPatternNode:", false, 1727),
    new MM("literalPatternNode:", false, 1728),
    new MM("messageNode:", false, 1729),
    new MM("mixinClassNode:", false, 1730),
    new MM("normalSendNode:", false, 1731),
    new MM("numberNode:", false, 1732),
    new MM("returnStatNode:", false, 1733),
    new MM("setterSendNode:", false, 1734),
    new MM("stringNode:", false, 1735),
    new MM("symbolNode:", false, 1736),
    new MM("tupleNode:", false, 1737),
    new MM("variablePatternNode:", false, 1738),
    new MM("wildcardPatternNode:", false, 1739)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ASTTraverser = function () {
    var self = this;
    self.$super$NewspeakASTs$ASTTraverser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ASTTraverser();
    return self;
   };
   this.$blockNode$ = function ($node) {
    var self = this;
    $node.$body().$apply$(self);
    return self;
   };
   this.$cascadedSendNode$ = function ($node) {
    var self = this;
    $node.$previousSend().$apply$(self);
    $node.$message().$apply$(self);
    return self;
   };
   this.$charNode$ = function ($node) {
    var self = this;
    return self;
   };
   this.$keywordPatternNode$ = function ($aNode) {
    var self = this;
    "BOGUS".$yourself();
    return self;
   };
   this.$literalPatternNode$ = function ($node) {
    var self = this;
    $node.$literal().$apply$(self);
    return self;
   };
   this.$messageNode$ = function ($node) {
    var self = this;
    $node.$arguments().$do$(function ($each) {
     return $each.$apply$(self);
    });
    return self;
   };
   this.$mixinClassNode$ = function ($node) {
    var self = this;
    return self;
   };
   this.$normalSendNode$ = function ($node) {
    var self = this;
    $node.$receiver().$apply$(self);
    $node.$message().$apply$(self);
    return self;
   };
   this.$numberNode$ = function ($node) {
    var self = this;
    return self;
   };
   this.$returnStatNode$ = function ($node) {
    var self = this;
    $node.$expression().$apply$(self);
    return self;
   };
   this.$setterSendNode$ = function ($node) {
    var self = this;
    $node.$receiver().$apply$(self);
    $node.$message().$apply$(self);
    return self;
   };
   this.$stringNode$ = function ($node) {
    var self = this;
    return self;
   };
   this.$symbolNode$ = function ($node) {
    var self = this;
    return self;
   };
   this.$tupleNode$ = function ($node) {
    var self = this;
    $node.$elements().$do$(function ($each) {
     return $each.$apply$(self);
    });
    return self;
   };
   this.$variablePatternNode$ = function ($node) {
    var self = this;
    "BOGUS".$yourself();
    return self;
   };
   this.$wildcardPatternNode$ = function ($aNode) {
    var self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ASTTraverser";
     this._$superInit$NewspeakASTs$ASTTraverser = $.$superInit$NewspeakASTs$ASTTraverser;
     this.$superInit$NewspeakASTs$ASTTraverser = dnuCatcher("$superInit$NewspeakASTs$ASTTraverser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
     this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
     this.$charNode$ = this._$charNode$ = $.$charNode$;
     this.$keywordPatternNode$ = this._$keywordPatternNode$ = $.$keywordPatternNode$;
     this.$literalPatternNode$ = this._$literalPatternNode$ = $.$literalPatternNode$;
     this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
     this.$mixinClassNode$ = this._$mixinClassNode$ = $.$mixinClassNode$;
     this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
     this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
     this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
     this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
     this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
     this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
     this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
     this.$variablePatternNode$ = this._$variablePatternNode$ = $.$variablePatternNode$;
     this.$wildcardPatternNode$ = this._$wildcardPatternNode$ = $.$wildcardPatternNode$;
     this.$enclosingObjects$NewspeakASTs$ASTTraverser = enclosingObjects;
     this.$super$NewspeakASTs$ASTTraverser$slot = runtimeSuperclass;
     this["NewspeakASTs`ASTTraverser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`ASTTraverser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ASTTraverser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ASTTraverser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ASTTraverser = enclosingObjects;
      this.$super$NewspeakASTs$ASTTraverser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$AssignmentAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`AssignmentAST";
   this.name = "NewspeakASTs`AssignmentAST";
   this.header = 1740;
   this.slots = [
    new SM("variable", true, false),
    new SM("expression", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`AssignmentAST", true, 1741),
    new MM("instance`initializer", true, 1742),
    new MM("to:assign:", false, 1743),
    new MM("isAssignmentNode", false, 1744),
    new MM("isExpressionNode", false, 1745),
    new MM("apply:", false, 1746),
    new MM("init`variable:", true, 0),
    new MM("variable", true, 0),
    new MM("variable:", true, 0),
    new MM("init`expression:", true, 0),
    new MM("expression", true, 0),
    new MM("expression:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$AssignmentAST = function () {
    var self = this;
    self.$super$NewspeakASTs$AssignmentAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$AssignmentAST();
    return self;
   };
   this.$to$assign$ = function ($aVar, $anExpr) {
    var self = this;
    self._$assert$(function () {
     return $aVar.$isVariableNode();
    });
    self._$assert$(function () {
     return $anExpr.$isExpressionNode();
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$variable$($aVar);
     return cascadeReceiver.$expression$($anExpr);
    })(self);
    self._$start$(self._$var().$start());
    self._$end$($anExpr.$end());
    return self;
   };
   this.$isAssignmentNode = function () {
    var self = this;
    return true;
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$assignmentNode$(self);
   };
   this.$init$variable$ = function (v) {
    this.$variable$slot = v;
    return this;
   };
   this.$variable = function () {
    return this.$variable$slot;
   };
   this.$variable$ = function (v) {
    this.$variable$slot = v;
    return this;
   };
   this.$init$expression$ = function (v) {
    this.$expression$slot = v;
    return this;
   };
   this.$expression = function () {
    return this.$expression$slot;
   };
   this.$expression$ = function (v) {
    this.$expression$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`AssignmentAST";
     this._$superInit$NewspeakASTs$AssignmentAST = $.$superInit$NewspeakASTs$AssignmentAST;
     this.$superInit$NewspeakASTs$AssignmentAST = dnuCatcher("$superInit$NewspeakASTs$AssignmentAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$to$assign$ = this._$to$assign$ = $.$to$assign$;
     this.$isAssignmentNode = this._$isAssignmentNode = $.$isAssignmentNode;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$variable$ = this._$init$variable$ = $.$init$variable$;
     this.$variable = this._$variable = $.$variable;
     this.$variable$ = this._$variable$ = $.$variable$;
     this.$init$expression$ = this._$init$expression$ = $.$init$expression$;
     this.$expression = this._$expression = $.$expression;
     this.$expression$ = this._$expression$ = $.$expression$;
     this.$enclosingObjects$NewspeakASTs$AssignmentAST = enclosingObjects;
     this.$super$NewspeakASTs$AssignmentAST$slot = runtimeSuperclass;
     this["NewspeakASTs`AssignmentAST"] = function () {
      superBasicNew.call(this);
      this.$variable$slot = nil;
      this.$expression$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`AssignmentAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`AssignmentAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`AssignmentAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$AssignmentAST = enclosingObjects;
      this.$super$NewspeakASTs$AssignmentAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$BinaryTypeOpAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`BinaryTypeOpAST";
   this.name = "NewspeakASTs`BinaryTypeOpAST";
   this.header = 1747;
   this.slots = [
    new SM("leftOperand", true, false),
    new SM("rightOperand", true, false),
    new SM("operator", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`BinaryTypeOpAST", true, 1748),
    new MM("instance`initializer", true, 1749),
    new MM("apply:", false, 1750),
    new MM("init`leftOperand:", true, 0),
    new MM("leftOperand", true, 0),
    new MM("leftOperand:", true, 0),
    new MM("init`rightOperand:", true, 0),
    new MM("rightOperand", true, 0),
    new MM("rightOperand:", true, 0),
    new MM("init`operator:", true, 0),
    new MM("operator", true, 0),
    new MM("operator:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$BinaryTypeOpAST = function () {
    var self = this;
    self.$super$NewspeakASTs$BinaryTypeOpAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$BinaryTypeOpAST();
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$binaryTypeOpNode$(self);
   };
   this.$init$leftOperand$ = function (v) {
    this.$leftOperand$slot = v;
    return this;
   };
   this.$leftOperand = function () {
    return this.$leftOperand$slot;
   };
   this.$leftOperand$ = function (v) {
    this.$leftOperand$slot = v;
    return this;
   };
   this.$init$rightOperand$ = function (v) {
    this.$rightOperand$slot = v;
    return this;
   };
   this.$rightOperand = function () {
    return this.$rightOperand$slot;
   };
   this.$rightOperand$ = function (v) {
    this.$rightOperand$slot = v;
    return this;
   };
   this.$init$operator$ = function (v) {
    this.$operator$slot = v;
    return this;
   };
   this.$operator = function () {
    return this.$operator$slot;
   };
   this.$operator$ = function (v) {
    this.$operator$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`BinaryTypeOpAST";
     this._$superInit$NewspeakASTs$BinaryTypeOpAST = $.$superInit$NewspeakASTs$BinaryTypeOpAST;
     this.$superInit$NewspeakASTs$BinaryTypeOpAST = dnuCatcher("$superInit$NewspeakASTs$BinaryTypeOpAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$leftOperand$ = this._$init$leftOperand$ = $.$init$leftOperand$;
     this.$leftOperand = this._$leftOperand = $.$leftOperand;
     this.$leftOperand$ = this._$leftOperand$ = $.$leftOperand$;
     this.$init$rightOperand$ = this._$init$rightOperand$ = $.$init$rightOperand$;
     this.$rightOperand = this._$rightOperand = $.$rightOperand;
     this.$rightOperand$ = this._$rightOperand$ = $.$rightOperand$;
     this.$init$operator$ = this._$init$operator$ = $.$init$operator$;
     this.$operator = this._$operator = $.$operator;
     this.$operator$ = this._$operator$ = $.$operator$;
     this.$enclosingObjects$NewspeakASTs$BinaryTypeOpAST = enclosingObjects;
     this.$super$NewspeakASTs$BinaryTypeOpAST$slot = runtimeSuperclass;
     this["NewspeakASTs`BinaryTypeOpAST"] = function () {
      superBasicNew.call(this);
      this.$leftOperand$slot = nil;
      this.$rightOperand$slot = nil;
      this.$operator$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`BinaryTypeOpAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`BinaryTypeOpAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`BinaryTypeOpAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$BinaryTypeOpAST = enclosingObjects;
      this.$super$NewspeakASTs$BinaryTypeOpAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$BlockAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`BlockAST";
   this.name = "NewspeakASTs`BlockAST";
   this.header = 1751;
   this.slots = [new SM("body", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`BlockAST", true, 1752),
    new MM("instance`initializer", true, 1753),
    new MM("parameters", false, 1754),
    new MM("isBlockNode", false, 1755),
    new MM("isExpressionNode", false, 1756),
    new MM("apply:", false, 1757),
    new MM("init`body:", true, 0),
    new MM("body", true, 0),
    new MM("body:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$BlockAST = function () {
    var self = this;
    self.$super$NewspeakASTs$BlockAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$BlockAST();
    return self;
   };
   this.$parameters = function () {
    var self = this;
    return self._$body().$parameters();
   };
   this.$isBlockNode = function () {
    var self = this;
    return true;
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$blockNode$(self);
   };
   this.$init$body$ = function (v) {
    this.$body$slot = v;
    return this;
   };
   this.$body = function () {
    return this.$body$slot;
   };
   this.$body$ = function (v) {
    this.$body$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`BlockAST";
     this._$superInit$NewspeakASTs$BlockAST = $.$superInit$NewspeakASTs$BlockAST;
     this.$superInit$NewspeakASTs$BlockAST = dnuCatcher("$superInit$NewspeakASTs$BlockAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$parameters = this._$parameters = $.$parameters;
     this.$isBlockNode = this._$isBlockNode = $.$isBlockNode;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$body$ = this._$init$body$ = $.$init$body$;
     this.$body = this._$body = $.$body;
     this.$body$ = this._$body$ = $.$body$;
     this.$enclosingObjects$NewspeakASTs$BlockAST = enclosingObjects;
     this.$super$NewspeakASTs$BlockAST$slot = runtimeSuperclass;
     this["NewspeakASTs`BlockAST"] = function () {
      superBasicNew.call(this);
      this.$body$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`BlockAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`BlockAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`BlockAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$BlockAST = enclosingObjects;
      this.$super$NewspeakASTs$BlockAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$BlockTypeAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`BlockTypeAST";
   this.name = "NewspeakASTs`BlockTypeAST";
   this.header = 1758;
   this.slots = [
    new SM("formals", false, false),
    new SM("return", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`BlockTypeAST", true, 1759),
    new MM("instance`initializer", true, 1760),
    new MM("apply:", false, 1761),
    new MM("isTypeNode", false, 1762),
    new MM("init`formals:", true, 0),
    new MM("formals", true, 0),
    new MM("init`return:", true, 0),
    new MM("return", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$BlockTypeAST = function ($f, $r) {
    var self = this;
    self.$super$NewspeakASTs$BlockTypeAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($f, $r) {
    var self = this;
    self._$superInit$NewspeakASTs$BlockTypeAST($f, $r);
    self._$init$formals$($f);
    self._$init$return$($r);
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$blockTypeNode$(self);
   };
   this.$isTypeNode = function () {
    var self = this;
    return true;
   };
   this.$init$formals$ = function (v) {
    this.$formals$slot = v;
    return this;
   };
   this.$formals = function () {
    return this.$formals$slot;
   };
   this.$init$return$ = function (v) {
    this.$return$slot = v;
    return this;
   };
   this.$return = function () {
    return this.$return$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`BlockTypeAST";
     this._$superInit$NewspeakASTs$BlockTypeAST = $.$superInit$NewspeakASTs$BlockTypeAST;
     this.$superInit$NewspeakASTs$BlockTypeAST = dnuCatcher("$superInit$NewspeakASTs$BlockTypeAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isTypeNode = this._$isTypeNode = $.$isTypeNode;
     this.$init$formals$ = this._$init$formals$ = $.$init$formals$;
     this.$formals = this._$formals = $.$formals;
     this.$init$return$ = this._$init$return$ = $.$init$return$;
     this.$return = this._$return = $.$return;
     this.$enclosingObjects$NewspeakASTs$BlockTypeAST = enclosingObjects;
     this.$super$NewspeakASTs$BlockTypeAST$slot = runtimeSuperclass;
     this["NewspeakASTs`BlockTypeAST"] = function () {
      superBasicNew.call(this);
      this.$formals$slot = nil;
      this.$return$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`BlockTypeAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`BlockTypeAST";
    this.slots = [];
    this.methods = [new MM("formals:return:", true, 0)];
    this.nestedClasses = [];
    this.$formals$return$ = function ($f, $r) {
     return (new this.nonMeta.basicNew()).$instance$initializer($f, $r);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`BlockTypeAST";
      this.$formals$return$ = this._$formals$return$ = $.$formals$return$;
      this.$enclosingObjects$NewspeakASTs$BlockTypeAST = enclosingObjects;
      this.$super$NewspeakASTs$BlockTypeAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$CascadedSendAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`CascadedSendAST";
   this.name = "NewspeakASTs`CascadedSendAST";
   this.header = 1763;
   this.slots = [new SM("previousSend", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`CascadedSendAST", true, 1764),
    new MM("instance`initializer", true, 1765),
    new MM("receiver", false, 1766),
    new MM("end", false, 1767),
    new MM("start", false, 1768),
    new MM("to:cascade:", false, 1769),
    new MM("isCascadedSendNode", false, 1770),
    new MM("apply:", false, 1771),
    new MM("init`previousSend:", true, 0),
    new MM("previousSend", true, 0),
    new MM("previousSend:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$CascadedSendAST = function () {
    var self = this;
    self.$super$NewspeakASTs$CascadedSendAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$CascadedSendAST();
    return self;
   };
   this.$receiver = function () {
    var self = this;
    return self._$previousSend().$receiver();
   };
   this.$end = function () {
    var self = this;
    return self.$super$NewspeakASTs$CascadedSendAST$slot._$end.call(self).$$equal(0).$ifFalse$ifTrue$(function () {
     return self.$super$NewspeakASTs$CascadedSendAST$slot._$end.call(self);
    }, function () {
     return self._$message().$end();
    });
   };
   this.$start = function () {
    var self = this;
    return self.$super$NewspeakASTs$CascadedSendAST$slot._$start.call(self).$$equal(0).$ifFalse$ifTrue$(function () {
     return self.$super$NewspeakASTs$CascadedSendAST$slot._$start.call(self);
    }, function () {
     return self._$previousSend().$start();
    });
   };
   this.$to$cascade$ = function ($aSend, $aMessage) {
    var self = this;
    self._$assert$(function () {
     return $aSend.$isSendNode();
    });
    self._$assert$(function () {
     return $aMessage.$isMessageNode();
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$previousSend$($aSend);
     return cascadeReceiver.$message$($aMessage);
    })(self);
    return self;
   };
   this.$isCascadedSendNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$cascadedSendNode$(self);
   };
   this.$init$previousSend$ = function (v) {
    this.$previousSend$slot = v;
    return this;
   };
   this.$previousSend = function () {
    return this.$previousSend$slot;
   };
   this.$previousSend$ = function (v) {
    this.$previousSend$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`CascadedSendAST";
     this._$superInit$NewspeakASTs$CascadedSendAST = $.$superInit$NewspeakASTs$CascadedSendAST;
     this.$superInit$NewspeakASTs$CascadedSendAST = dnuCatcher("$superInit$NewspeakASTs$CascadedSendAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$receiver = this._$receiver = $.$receiver;
     this.$end = this._$end = $.$end;
     this.$start = this._$start = $.$start;
     this.$to$cascade$ = this._$to$cascade$ = $.$to$cascade$;
     this.$isCascadedSendNode = this._$isCascadedSendNode = $.$isCascadedSendNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$previousSend$ = this._$init$previousSend$ = $.$init$previousSend$;
     this.$previousSend = this._$previousSend = $.$previousSend;
     this.$previousSend$ = this._$previousSend$ = $.$previousSend$;
     this.$enclosingObjects$NewspeakASTs$CascadedSendAST = enclosingObjects;
     this.$super$NewspeakASTs$CascadedSendAST$slot = runtimeSuperclass;
     this["NewspeakASTs`CascadedSendAST"] = function () {
      superBasicNew.call(this);
      this.$previousSend$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`CascadedSendAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`CascadedSendAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`CascadedSendAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$CascadedSendAST = enclosingObjects;
      this.$super$NewspeakASTs$CascadedSendAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$CategoryAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`CategoryAST";
   this.name = "NewspeakASTs`CategoryAST";
   this.header = 1772;
   this.slots = [
    new SM("name", true, false),
    new SM("methods", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`CategoryAST", true, 1773),
    new MM("instance`initializer", true, 1774),
    new MM("apply:", false, 1775),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0),
    new MM("init`methods:", true, 0),
    new MM("methods", true, 0),
    new MM("methods:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$CategoryAST = function () {
    var self = this;
    self.$super$NewspeakASTs$CategoryAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$CategoryAST();
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$categoryNode$(self);
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$init$methods$ = function (v) {
    this.$methods$slot = v;
    return this;
   };
   this.$methods = function () {
    return this.$methods$slot;
   };
   this.$methods$ = function (v) {
    this.$methods$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`CategoryAST";
     this._$superInit$NewspeakASTs$CategoryAST = $.$superInit$NewspeakASTs$CategoryAST;
     this.$superInit$NewspeakASTs$CategoryAST = dnuCatcher("$superInit$NewspeakASTs$CategoryAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$init$methods$ = this._$init$methods$ = $.$init$methods$;
     this.$methods = this._$methods = $.$methods;
     this.$methods$ = this._$methods$ = $.$methods$;
     this.$enclosingObjects$NewspeakASTs$CategoryAST = enclosingObjects;
     this.$super$NewspeakASTs$CategoryAST$slot = runtimeSuperclass;
     this["NewspeakASTs`CategoryAST"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$methods$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`CategoryAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`CategoryAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`CategoryAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$CategoryAST = enclosingObjects;
      this.$super$NewspeakASTs$CategoryAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$CharAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`CharAST";
   this.name = "NewspeakASTs`CharAST";
   this.header = 1776;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`CharAST", true, 1777),
    new MM("instance`initializer", true, 1778),
    new MM("isCharNode", false, 1779),
    new MM("apply:", false, 1780)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$CharAST = function () {
    var self = this;
    self.$super$NewspeakASTs$CharAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$CharAST();
    return self;
   };
   this.$isCharNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($tool) {
    var self = this;
    return $tool.$charNode$(self);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`CharAST";
     this._$superInit$NewspeakASTs$CharAST = $.$superInit$NewspeakASTs$CharAST;
     this.$superInit$NewspeakASTs$CharAST = dnuCatcher("$superInit$NewspeakASTs$CharAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isCharNode = this._$isCharNode = $.$isCharNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$enclosingObjects$NewspeakASTs$CharAST = enclosingObjects;
     this.$super$NewspeakASTs$CharAST$slot = runtimeSuperclass;
     this["NewspeakASTs`CharAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`CharAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`CharAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`CharAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$CharAST = enclosingObjects;
      this.$super$NewspeakASTs$CharAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ClassBodyAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ClassBodyAST";
   this.name = "NewspeakASTs`ClassBodyAST";
   this.header = 1781;
   this.slots = [
    new SM("instanceInitializer", false, false),
    new SM("instanceSide", false, false),
    new SM("classSide", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`ClassBodyAST", true, 1782),
    new MM("instance`initializer", true, 1783),
    new MM("init`instanceInitializer:", true, 0),
    new MM("instanceInitializer", true, 0),
    new MM("init`instanceSide:", true, 0),
    new MM("instanceSide", true, 0),
    new MM("init`classSide:", true, 0),
    new MM("classSide", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ClassBodyAST = function ($init, $iSide, $cSide) {
    var self = this;
    self.$super$NewspeakASTs$ClassBodyAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($init, $iSide, $cSide) {
    var self = this;
    self._$superInit$NewspeakASTs$ClassBodyAST($init, $iSide, $cSide);
    self._$init$instanceInitializer$($init);
    self._$init$instanceSide$($iSide);
    self._$init$classSide$($cSide);
    self._$start$(self._$instanceInitializer().$start());
    self._$end$(self._$classSide().$end().$max$(self._$instanceSide().$end()));
    return self;
   };
   this.$init$instanceInitializer$ = function (v) {
    this.$instanceInitializer$slot = v;
    return this;
   };
   this.$instanceInitializer = function () {
    return this.$instanceInitializer$slot;
   };
   this.$init$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$instanceSide = function () {
    return this.$instanceSide$slot;
   };
   this.$init$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.$classSide = function () {
    return this.$classSide$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ClassBodyAST";
     this._$superInit$NewspeakASTs$ClassBodyAST = $.$superInit$NewspeakASTs$ClassBodyAST;
     this.$superInit$NewspeakASTs$ClassBodyAST = dnuCatcher("$superInit$NewspeakASTs$ClassBodyAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$instanceInitializer$ = this._$init$instanceInitializer$ = $.$init$instanceInitializer$;
     this.$instanceInitializer = this._$instanceInitializer = $.$instanceInitializer;
     this.$init$instanceSide$ = this._$init$instanceSide$ = $.$init$instanceSide$;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$init$classSide$ = this._$init$classSide$ = $.$init$classSide$;
     this.$classSide = this._$classSide = $.$classSide;
     this.$enclosingObjects$NewspeakASTs$ClassBodyAST = enclosingObjects;
     this.$super$NewspeakASTs$ClassBodyAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ClassBodyAST"] = function () {
      superBasicNew.call(this);
      this.$instanceInitializer$slot = nil;
      this.$instanceSide$slot = nil;
      this.$classSide$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`ClassBodyAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ClassBodyAST";
    this.slots = [];
    this.methods = [new MM("initializer:instanceSide:classSide:", true, 0)];
    this.nestedClasses = [];
    this.$initializer$instanceSide$classSide$ = function ($init, $iSide, $cSide) {
     return (new this.nonMeta.basicNew()).$instance$initializer($init, $iSide, $cSide);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ClassBodyAST";
      this.$initializer$instanceSide$classSide$ = this._$initializer$instanceSide$classSide$ = $.$initializer$instanceSide$classSide$;
      this.$enclosingObjects$NewspeakASTs$ClassBodyAST = enclosingObjects;
      this.$super$NewspeakASTs$ClassBodyAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ClassDeclarationAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ClassDeclarationAST";
   this.name = "NewspeakASTs`ClassDeclarationAST";
   this.header = 1784;
   this.slots = [
    new SM("header", true, false),
    new SM("instanceSide", true, false),
    new SM("classSide", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`ClassDeclarationAST", true, 1785),
    new MM("instance`initializer", true, 1786),
    new MM("accessModifier", false, 1787),
    new MM("apply:", false, 1788),
    new MM("category:", false, 1789),
    new MM("clone", false, 1790),
    new MM("isClassDeclarationNode", false, 1791),
    new MM("category", false, 1792),
    new MM("classComment", false, 1793),
    new MM("name", false, 1794),
    new MM("superclassName", false, 1795),
    new MM("init`header:", true, 0),
    new MM("header", true, 0),
    new MM("header:", true, 0),
    new MM("init`instanceSide:", true, 0),
    new MM("instanceSide", true, 0),
    new MM("instanceSide:", true, 0),
    new MM("init`classSide:", true, 0),
    new MM("classSide", true, 0),
    new MM("classSide:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ClassDeclarationAST = function () {
    var self = this;
    self.$super$NewspeakASTs$ClassDeclarationAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ClassDeclarationAST();
    return self;
   };
   this.$accessModifier = function () {
    var self = this;
    return self._$header().$accessModifier();
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$classNode$(self);
   };
   this.$category$ = function ($cat) {
    var self = this;
    self._$header().$category$($cat);
    return self;
   };
   this.$clone = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$start$(self._$start());
     cascadeReceiver.$end$(self._$end());
     cascadeReceiver.$concreteStart$(self._$concreteStart());
     cascadeReceiver.$concreteEnd$(self._$concreteEnd());
     cascadeReceiver.$header$(self._$header());
     cascadeReceiver.$instanceSide$(self._$instanceSide());
     return cascadeReceiver.$classSide$(self._$classSide());
    })(self.$enclosingObjects$NewspeakASTs$ClassDeclarationAST[0]._$ClassDeclarationAST().$new());
   };
   this.$isClassDeclarationNode = function () {
    var self = this;
    return true;
   };
   this.$category = function () {
    var self = this;
    return self._$header().$category();
   };
   this.$classComment = function () {
    var self = this;
    return self._$header().$classComment();
   };
   this.$name = function () {
    var self = this;
    return self._$header().$name();
   };
   this.$superclassName = function () {
    var self = this;
    return self._$header().$superclassName();
   };
   this.$init$header$ = function (v) {
    this.$header$slot = v;
    return this;
   };
   this.$header = function () {
    return this.$header$slot;
   };
   this.$header$ = function (v) {
    this.$header$slot = v;
    return this;
   };
   this.$init$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$instanceSide = function () {
    return this.$instanceSide$slot;
   };
   this.$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$init$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.$classSide = function () {
    return this.$classSide$slot;
   };
   this.$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ClassDeclarationAST";
     this._$superInit$NewspeakASTs$ClassDeclarationAST = $.$superInit$NewspeakASTs$ClassDeclarationAST;
     this.$superInit$NewspeakASTs$ClassDeclarationAST = dnuCatcher("$superInit$NewspeakASTs$ClassDeclarationAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$category$ = this._$category$ = $.$category$;
     this.$clone = this._$clone = $.$clone;
     this.$isClassDeclarationNode = this._$isClassDeclarationNode = $.$isClassDeclarationNode;
     this.$category = this._$category = $.$category;
     this.$classComment = this._$classComment = $.$classComment;
     this.$name = this._$name = $.$name;
     this.$superclassName = this._$superclassName = $.$superclassName;
     this.$init$header$ = this._$init$header$ = $.$init$header$;
     this.$header = this._$header = $.$header;
     this.$header$ = this._$header$ = $.$header$;
     this.$init$instanceSide$ = this._$init$instanceSide$ = $.$init$instanceSide$;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$instanceSide$ = this._$instanceSide$ = $.$instanceSide$;
     this.$init$classSide$ = this._$init$classSide$ = $.$init$classSide$;
     this.$classSide = this._$classSide = $.$classSide;
     this.$classSide$ = this._$classSide$ = $.$classSide$;
     this.$enclosingObjects$NewspeakASTs$ClassDeclarationAST = enclosingObjects;
     this.$super$NewspeakASTs$ClassDeclarationAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ClassDeclarationAST"] = function () {
      superBasicNew.call(this);
      this.$header$slot = nil;
      this.$instanceSide$slot = nil;
      this.$classSide$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`ClassDeclarationAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ClassDeclarationAST";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("makeMixinNamed:factoryMsg:inheriting:body:", false, 1796),
     new MM("named:factoryMsg:inheriting:body:", false, 1797)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$makeMixinNamed$factoryMsg$inheriting$body$ = function ($klassName, $cons, $iList, $body) {
     var self = this;
     var $superCall = nil;
     var $instanceInitializer = nil;
     var $header = nil;
     $superCall = $iList.$first();
     $instanceInitializer = $body.$instanceInitializer();
     $header = (function (cascadeReceiver) {
      cascadeReceiver.$name$($klassName.$token());
      cascadeReceiver.$constructor$($cons);
      cascadeReceiver.$superclassName$($superCall.$receiver().$message().$selector());
      cascadeReceiver.$superclassCall$($superCall.$receiver());
      cascadeReceiver.$superConstructorCall$($superCall.$message());
      cascadeReceiver.$slots$($instanceInitializer.$slots());
      cascadeReceiver.$isSeq$($instanceInitializer.$isSeq());
      cascadeReceiver.$initExprs$($instanceInitializer.$initializationExpressions());
      cascadeReceiver.$inheritanceChain$($iList);
      cascadeReceiver.$classComment$($body.$instanceInitializer().$classComment());
      cascadeReceiver.$start$($klassName.$start());
      return cascadeReceiver.$end$($instanceInitializer.$end());
     })(self.$enclosingObjects$NewspeakASTs$ClassDeclarationAST[0]._$ClassHeaderAST().$new());
     return (function (cascadeReceiver) {
      cascadeReceiver.$header$($header);
      cascadeReceiver.$instanceSide$($body.$instanceSide());
      return cascadeReceiver.$classSide$($body.$classSide());
     })(self._$new());
    };
    this.$named$factoryMsg$inheriting$body$ = function ($klassName, $cons, $iList, $body) {
     var self = this;
     return $body.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakASTs$ClassDeclarationAST[0]._$MixinApplicationClassAST().$named$factoryMsg$inheriting$($klassName.$token(), $cons, $iList);
     }, function () {
      return self._$makeMixinNamed$factoryMsg$inheriting$body$($klassName, $cons, $iList, $body);
     });
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ClassDeclarationAST";
      this.$new = this._$new = $.$new;
      this.$makeMixinNamed$factoryMsg$inheriting$body$ = this._$makeMixinNamed$factoryMsg$inheriting$body$ = $.$makeMixinNamed$factoryMsg$inheriting$body$;
      this.$named$factoryMsg$inheriting$body$ = this._$named$factoryMsg$inheriting$body$ = $.$named$factoryMsg$inheriting$body$;
      this.$enclosingObjects$NewspeakASTs$ClassDeclarationAST = enclosingObjects;
      this.$super$NewspeakASTs$ClassDeclarationAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ClassHeaderAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ClassHeaderAST";
   this.name = "NewspeakASTs`ClassHeaderAST";
   this.header = 1798;
   this.slots = [
    new SM("accessModifier", true, false),
    new SM("name", true, false),
    new SM("constructor", true, false),
    new SM("superclassName", true, false),
    new SM("superclassCall", true, false),
    new SM("superConstructorCall", true, false),
    new SM("slots", true, false),
    new SM("isSeq", true, false),
    new SM("classComment", true, false),
    new SM("category", true, false),
    new SM("initExprs", true, false),
    new SM("inheritanceChain", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`ClassHeaderAST", true, 1799),
    new MM("instance`initializer", true, 1800),
    new MM("clone", false, 1801),
    new MM("superCall", false, 1802),
    new MM("apply:", false, 1803),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("accessModifier:", true, 0),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0),
    new MM("init`constructor:", true, 0),
    new MM("constructor", true, 0),
    new MM("constructor:", true, 0),
    new MM("init`superclassName:", true, 0),
    new MM("superclassName", true, 0),
    new MM("superclassName:", true, 0),
    new MM("init`superclassCall:", true, 0),
    new MM("superclassCall", true, 0),
    new MM("superclassCall:", true, 0),
    new MM("init`superConstructorCall:", true, 0),
    new MM("superConstructorCall", true, 0),
    new MM("superConstructorCall:", true, 0),
    new MM("init`slots:", true, 0),
    new MM("slots", true, 0),
    new MM("slots:", true, 0),
    new MM("init`isSeq:", true, 0),
    new MM("isSeq", true, 0),
    new MM("isSeq:", true, 0),
    new MM("init`classComment:", true, 0),
    new MM("classComment", true, 0),
    new MM("classComment:", true, 0),
    new MM("init`category:", true, 0),
    new MM("category", true, 0),
    new MM("category:", true, 0),
    new MM("init`initExprs:", true, 0),
    new MM("initExprs", true, 0),
    new MM("initExprs:", true, 0),
    new MM("init`inheritanceChain:", true, 0),
    new MM("inheritanceChain", true, 0),
    new MM("inheritanceChain:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ClassHeaderAST = function () {
    var self = this;
    self.$super$NewspeakASTs$ClassHeaderAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ClassHeaderAST();
    return self;
   };
   this.$clone = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$start$(self._$start());
     cascadeReceiver.$end$(self._$end());
     cascadeReceiver.$concreteStart$(self._$concreteStart());
     cascadeReceiver.$concreteEnd$(self._$concreteEnd());
     cascadeReceiver.$accessModifier$(self._$accessModifier());
     cascadeReceiver.$name$(self._$name());
     cascadeReceiver.$constructor$(self._$constructor());
     cascadeReceiver.$superclassName$(self._$superclassName());
     cascadeReceiver.$superclassCall$(self._$superclassCall());
     cascadeReceiver.$superConstructorCall$(self._$superConstructorCall());
     cascadeReceiver.$slots$(self._$slots());
     cascadeReceiver.$isSeq$(self._$isSeq());
     cascadeReceiver.$classComment$(self._$classComment());
     cascadeReceiver.$category$(self._$category());
     cascadeReceiver.$initExprs$(self._$initExprs());
     return cascadeReceiver.$inheritanceChain$(self._$inheritanceChain());
    })(self.$enclosingObjects$NewspeakASTs$ClassHeaderAST[0]._$ClassHeaderAST().$new());
   };
   this.$superCall = function () {
    var self = this;
    return self._$inheritanceChain().$first();
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return $visitor.$classHeaderNode$(self);
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$init$constructor$ = function (v) {
    this.$constructor$slot = v;
    return this;
   };
   this.$constructor = function () {
    return this.$constructor$slot;
   };
   this.$constructor$ = function (v) {
    this.$constructor$slot = v;
    return this;
   };
   this.$init$superclassName$ = function (v) {
    this.$superclassName$slot = v;
    return this;
   };
   this.$superclassName = function () {
    return this.$superclassName$slot;
   };
   this.$superclassName$ = function (v) {
    this.$superclassName$slot = v;
    return this;
   };
   this.$init$superclassCall$ = function (v) {
    this.$superclassCall$slot = v;
    return this;
   };
   this.$superclassCall = function () {
    return this.$superclassCall$slot;
   };
   this.$superclassCall$ = function (v) {
    this.$superclassCall$slot = v;
    return this;
   };
   this.$init$superConstructorCall$ = function (v) {
    this.$superConstructorCall$slot = v;
    return this;
   };
   this.$superConstructorCall = function () {
    return this.$superConstructorCall$slot;
   };
   this.$superConstructorCall$ = function (v) {
    this.$superConstructorCall$slot = v;
    return this;
   };
   this.$init$slots$ = function (v) {
    this.$slots$slot = v;
    return this;
   };
   this.$slots = function () {
    return this.$slots$slot;
   };
   this.$slots$ = function (v) {
    this.$slots$slot = v;
    return this;
   };
   this.$init$isSeq$ = function (v) {
    this.$isSeq$slot = v;
    return this;
   };
   this.$isSeq = function () {
    return this.$isSeq$slot;
   };
   this.$isSeq$ = function (v) {
    this.$isSeq$slot = v;
    return this;
   };
   this.$init$classComment$ = function (v) {
    this.$classComment$slot = v;
    return this;
   };
   this.$classComment = function () {
    return this.$classComment$slot;
   };
   this.$classComment$ = function (v) {
    this.$classComment$slot = v;
    return this;
   };
   this.$init$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.$category = function () {
    return this.$category$slot;
   };
   this.$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.$init$initExprs$ = function (v) {
    this.$initExprs$slot = v;
    return this;
   };
   this.$initExprs = function () {
    return this.$initExprs$slot;
   };
   this.$initExprs$ = function (v) {
    this.$initExprs$slot = v;
    return this;
   };
   this.$init$inheritanceChain$ = function (v) {
    this.$inheritanceChain$slot = v;
    return this;
   };
   this.$inheritanceChain = function () {
    return this.$inheritanceChain$slot;
   };
   this.$inheritanceChain$ = function (v) {
    this.$inheritanceChain$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ClassHeaderAST";
     this._$superInit$NewspeakASTs$ClassHeaderAST = $.$superInit$NewspeakASTs$ClassHeaderAST;
     this.$superInit$NewspeakASTs$ClassHeaderAST = dnuCatcher("$superInit$NewspeakASTs$ClassHeaderAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$clone = this._$clone = $.$clone;
     this.$superCall = this._$superCall = $.$superCall;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$init$constructor$ = this._$init$constructor$ = $.$init$constructor$;
     this.$constructor = this._$constructor = $.$constructor;
     this.$constructor$ = this._$constructor$ = $.$constructor$;
     this.$init$superclassName$ = this._$init$superclassName$ = $.$init$superclassName$;
     this.$superclassName = this._$superclassName = $.$superclassName;
     this.$superclassName$ = this._$superclassName$ = $.$superclassName$;
     this.$init$superclassCall$ = this._$init$superclassCall$ = $.$init$superclassCall$;
     this.$superclassCall = this._$superclassCall = $.$superclassCall;
     this.$superclassCall$ = this._$superclassCall$ = $.$superclassCall$;
     this.$init$superConstructorCall$ = this._$init$superConstructorCall$ = $.$init$superConstructorCall$;
     this.$superConstructorCall = this._$superConstructorCall = $.$superConstructorCall;
     this.$superConstructorCall$ = this._$superConstructorCall$ = $.$superConstructorCall$;
     this.$init$slots$ = this._$init$slots$ = $.$init$slots$;
     this.$slots = this._$slots = $.$slots;
     this.$slots$ = this._$slots$ = $.$slots$;
     this.$init$isSeq$ = this._$init$isSeq$ = $.$init$isSeq$;
     this.$isSeq = this._$isSeq = $.$isSeq;
     this.$isSeq$ = this._$isSeq$ = $.$isSeq$;
     this.$init$classComment$ = this._$init$classComment$ = $.$init$classComment$;
     this.$classComment = this._$classComment = $.$classComment;
     this.$classComment$ = this._$classComment$ = $.$classComment$;
     this.$init$category$ = this._$init$category$ = $.$init$category$;
     this.$category = this._$category = $.$category;
     this.$category$ = this._$category$ = $.$category$;
     this.$init$initExprs$ = this._$init$initExprs$ = $.$init$initExprs$;
     this.$initExprs = this._$initExprs = $.$initExprs;
     this.$initExprs$ = this._$initExprs$ = $.$initExprs$;
     this.$init$inheritanceChain$ = this._$init$inheritanceChain$ = $.$init$inheritanceChain$;
     this.$inheritanceChain = this._$inheritanceChain = $.$inheritanceChain;
     this.$inheritanceChain$ = this._$inheritanceChain$ = $.$inheritanceChain$;
     this.$enclosingObjects$NewspeakASTs$ClassHeaderAST = enclosingObjects;
     this.$super$NewspeakASTs$ClassHeaderAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ClassHeaderAST"] = function () {
      superBasicNew.call(this);
      this.$accessModifier$slot = nil;
      this.$name$slot = nil;
      this.$constructor$slot = nil;
      this.$superclassName$slot = nil;
      this.$superclassCall$slot = nil;
      this.$superConstructorCall$slot = nil;
      this.$slots$slot = nil;
      this.$isSeq$slot = nil;
      this.$classComment$slot = nil;
      this.$category$slot = nil;
      this.$initExprs$slot = nil;
      this.$inheritanceChain$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`ClassHeaderAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ClassHeaderAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ClassHeaderAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ClassHeaderAST = enclosingObjects;
      this.$super$NewspeakASTs$ClassHeaderAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ClassPrefixAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ClassPrefixAST";
   this.name = "NewspeakASTs`ClassPrefixAST";
   this.header = 1804;
   this.slots = [
    new SM("name", false, false),
    new SM("constructor", false, false),
    new SM("superclassName", false, false),
    new SM("superclassCall", false, false),
    new SM("superConstructorCall", false, false),
    new SM("category", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`ClassPrefixAST", true, 1805),
    new MM("instance`initializer", true, 1806),
    new MM("apply:", false, 1807),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`constructor:", true, 0),
    new MM("constructor", true, 0),
    new MM("init`superclassName:", true, 0),
    new MM("superclassName", true, 0),
    new MM("init`superclassCall:", true, 0),
    new MM("superclassCall", true, 0),
    new MM("init`superConstructorCall:", true, 0),
    new MM("superConstructorCall", true, 0),
    new MM("init`category:", true, 0),
    new MM("category", true, 0),
    new MM("category:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ClassPrefixAST = function ($n, $k, $sn, $scc, $sk) {
    var self = this;
    self.$super$NewspeakASTs$ClassPrefixAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n, $k, $sn, $scc, $sk) {
    var self = this;
    self._$superInit$NewspeakASTs$ClassPrefixAST($n, $k, $sn, $scc, $sk);
    self._$init$name$($n);
    self._$init$constructor$($k);
    self._$init$superclassName$($sn);
    self._$init$superclassCall$($scc);
    self._$init$superConstructorCall$($sk);
    return self;
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return $visitor.$classPrefix$(self);
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$constructor$ = function (v) {
    this.$constructor$slot = v;
    return this;
   };
   this.$constructor = function () {
    return this.$constructor$slot;
   };
   this.$init$superclassName$ = function (v) {
    this.$superclassName$slot = v;
    return this;
   };
   this.$superclassName = function () {
    return this.$superclassName$slot;
   };
   this.$init$superclassCall$ = function (v) {
    this.$superclassCall$slot = v;
    return this;
   };
   this.$superclassCall = function () {
    return this.$superclassCall$slot;
   };
   this.$init$superConstructorCall$ = function (v) {
    this.$superConstructorCall$slot = v;
    return this;
   };
   this.$superConstructorCall = function () {
    return this.$superConstructorCall$slot;
   };
   this.$init$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.$category = function () {
    return this.$category$slot;
   };
   this.$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ClassPrefixAST";
     this._$superInit$NewspeakASTs$ClassPrefixAST = $.$superInit$NewspeakASTs$ClassPrefixAST;
     this.$superInit$NewspeakASTs$ClassPrefixAST = dnuCatcher("$superInit$NewspeakASTs$ClassPrefixAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$constructor$ = this._$init$constructor$ = $.$init$constructor$;
     this.$constructor = this._$constructor = $.$constructor;
     this.$init$superclassName$ = this._$init$superclassName$ = $.$init$superclassName$;
     this.$superclassName = this._$superclassName = $.$superclassName;
     this.$init$superclassCall$ = this._$init$superclassCall$ = $.$init$superclassCall$;
     this.$superclassCall = this._$superclassCall = $.$superclassCall;
     this.$init$superConstructorCall$ = this._$init$superConstructorCall$ = $.$init$superConstructorCall$;
     this.$superConstructorCall = this._$superConstructorCall = $.$superConstructorCall;
     this.$init$category$ = this._$init$category$ = $.$init$category$;
     this.$category = this._$category = $.$category;
     this.$category$ = this._$category$ = $.$category$;
     this.$enclosingObjects$NewspeakASTs$ClassPrefixAST = enclosingObjects;
     this.$super$NewspeakASTs$ClassPrefixAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ClassPrefixAST"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$constructor$slot = nil;
      this.$superclassName$slot = nil;
      this.$superclassCall$slot = nil;
      this.$superConstructorCall$slot = nil;
      this.$category$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`ClassPrefixAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ClassPrefixAST";
    this.slots = [];
    this.methods = [new MM("name:constructor:superclassName:superclassCall:superConstructorCall:", true, 0)];
    this.nestedClasses = [];
    this.$name$constructor$superclassName$superclassCall$superConstructorCall$ = function ($n, $k, $sn, $scc, $sk) {
     return (new this.nonMeta.basicNew()).$instance$initializer($n, $k, $sn, $scc, $sk);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ClassPrefixAST";
      this.$name$constructor$superclassName$superclassCall$superConstructorCall$ = this._$name$constructor$superclassName$superclassCall$superConstructorCall$ = $.$name$constructor$superclassName$superclassCall$superConstructorCall$;
      this.$enclosingObjects$NewspeakASTs$ClassPrefixAST = enclosingObjects;
      this.$super$NewspeakASTs$ClassPrefixAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$CodeBodyAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`CodeBodyAST";
   this.name = "NewspeakASTs`CodeBodyAST";
   this.header = 1808;
   this.slots = [
    new SM("parameters", true, false),
    new SM("temporaries", true, false),
    new SM("statements", true, false),
    new SM("isSeq", true, false),
    new SM("literalMessages", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`CodeBodyAST", true, 1809),
    new MM("instance`initializer", true, 1810),
    new MM("isExpressionNode", false, 1811),
    new MM("parameters:temporaries:statements:", false, 1812),
    new MM("temporaries:statements:", false, 1813),
    new MM("isCodeBodyNode", false, 1814),
    new MM("apply:", false, 1815),
    new MM("init`parameters:", true, 0),
    new MM("parameters", true, 0),
    new MM("parameters:", true, 0),
    new MM("init`temporaries:", true, 0),
    new MM("temporaries", true, 0),
    new MM("temporaries:", true, 0),
    new MM("init`statements:", true, 0),
    new MM("statements", true, 0),
    new MM("statements:", true, 0),
    new MM("init`isSeq:", true, 0),
    new MM("isSeq", true, 0),
    new MM("isSeq:", true, 0),
    new MM("init`literalMessages:", true, 0),
    new MM("literalMessages", true, 0),
    new MM("literalMessages:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$CodeBodyAST = function () {
    var self = this;
    self.$super$NewspeakASTs$CodeBodyAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$CodeBodyAST();
    self._$init$isSeq$(true);
    return self;
   };
   this.$isExpressionNode = function () {
    var self = this;
    "BOGUS";
    return true;
   };
   this.$parameters$temporaries$statements$ = function ($pars, $temps, $stats) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$parameters$($pars);
     cascadeReceiver.$temporaries$($temps);
     return cascadeReceiver.$statements$($stats);
    })(self);
    return self;
   };
   this.$temporaries$statements$ = function ($temps, $stats) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$parameters$($0.$OrderedCollection(self.$enclosingObjects$NewspeakASTs$CodeBodyAST[0]).$new());
     cascadeReceiver.$temporaries$($temps);
     return cascadeReceiver.$statements$($stats);
    })(self);
    return self;
   };
   this.$isCodeBodyNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$codeBodyNode$(self);
   };
   this.$init$parameters$ = function (v) {
    this.$parameters$slot = v;
    return this;
   };
   this.$parameters = function () {
    return this.$parameters$slot;
   };
   this.$parameters$ = function (v) {
    this.$parameters$slot = v;
    return this;
   };
   this.$init$temporaries$ = function (v) {
    this.$temporaries$slot = v;
    return this;
   };
   this.$temporaries = function () {
    return this.$temporaries$slot;
   };
   this.$temporaries$ = function (v) {
    this.$temporaries$slot = v;
    return this;
   };
   this.$init$statements$ = function (v) {
    this.$statements$slot = v;
    return this;
   };
   this.$statements = function () {
    return this.$statements$slot;
   };
   this.$statements$ = function (v) {
    this.$statements$slot = v;
    return this;
   };
   this.$init$isSeq$ = function (v) {
    this.$isSeq$slot = v;
    return this;
   };
   this.$isSeq = function () {
    return this.$isSeq$slot;
   };
   this.$isSeq$ = function (v) {
    this.$isSeq$slot = v;
    return this;
   };
   this.$init$literalMessages$ = function (v) {
    this.$literalMessages$slot = v;
    return this;
   };
   this.$literalMessages = function () {
    return this.$literalMessages$slot;
   };
   this.$literalMessages$ = function (v) {
    this.$literalMessages$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`CodeBodyAST";
     this._$superInit$NewspeakASTs$CodeBodyAST = $.$superInit$NewspeakASTs$CodeBodyAST;
     this.$superInit$NewspeakASTs$CodeBodyAST = dnuCatcher("$superInit$NewspeakASTs$CodeBodyAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$parameters$temporaries$statements$ = this._$parameters$temporaries$statements$ = $.$parameters$temporaries$statements$;
     this.$temporaries$statements$ = this._$temporaries$statements$ = $.$temporaries$statements$;
     this.$isCodeBodyNode = this._$isCodeBodyNode = $.$isCodeBodyNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$parameters$ = this._$init$parameters$ = $.$init$parameters$;
     this.$parameters = this._$parameters = $.$parameters;
     this.$parameters$ = this._$parameters$ = $.$parameters$;
     this.$init$temporaries$ = this._$init$temporaries$ = $.$init$temporaries$;
     this.$temporaries = this._$temporaries = $.$temporaries;
     this.$temporaries$ = this._$temporaries$ = $.$temporaries$;
     this.$init$statements$ = this._$init$statements$ = $.$init$statements$;
     this.$statements = this._$statements = $.$statements;
     this.$statements$ = this._$statements$ = $.$statements$;
     this.$init$isSeq$ = this._$init$isSeq$ = $.$init$isSeq$;
     this.$isSeq = this._$isSeq = $.$isSeq;
     this.$isSeq$ = this._$isSeq$ = $.$isSeq$;
     this.$init$literalMessages$ = this._$init$literalMessages$ = $.$init$literalMessages$;
     this.$literalMessages = this._$literalMessages = $.$literalMessages;
     this.$literalMessages$ = this._$literalMessages$ = $.$literalMessages$;
     this.$enclosingObjects$NewspeakASTs$CodeBodyAST = enclosingObjects;
     this.$super$NewspeakASTs$CodeBodyAST$slot = runtimeSuperclass;
     this["NewspeakASTs`CodeBodyAST"] = function () {
      superBasicNew.call(this);
      this.$parameters$slot = nil;
      this.$temporaries$slot = nil;
      this.$statements$slot = nil;
      this.$isSeq$slot = nil;
      this.$literalMessages$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`CodeBodyAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`CodeBodyAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`CodeBodyAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$CodeBodyAST = enclosingObjects;
      this.$super$NewspeakASTs$CodeBodyAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ImmutableSlotDefAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ImmutableSlotDefAST";
   this.name = "NewspeakASTs`ImmutableSlotDefAST";
   this.header = 1816;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`ImmutableSlotDefAST", true, 1817),
    new MM("instance`initializer", true, 1818),
    new MM("isMutable", false, 1819)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ImmutableSlotDefAST = function () {
    var self = this;
    self.$super$NewspeakASTs$ImmutableSlotDefAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ImmutableSlotDefAST();
    return self;
   };
   this.$isMutable = function () {
    var self = this;
    return false;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ImmutableSlotDefAST";
     this._$superInit$NewspeakASTs$ImmutableSlotDefAST = $.$superInit$NewspeakASTs$ImmutableSlotDefAST;
     this.$superInit$NewspeakASTs$ImmutableSlotDefAST = dnuCatcher("$superInit$NewspeakASTs$ImmutableSlotDefAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isMutable = this._$isMutable = $.$isMutable;
     this.$enclosingObjects$NewspeakASTs$ImmutableSlotDefAST = enclosingObjects;
     this.$super$NewspeakASTs$ImmutableSlotDefAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ImmutableSlotDefAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`ImmutableSlotDefAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ImmutableSlotDefAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ImmutableSlotDefAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ImmutableSlotDefAST = enclosingObjects;
      this.$super$NewspeakASTs$ImmutableSlotDefAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$InitializerAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`InitializerAST";
   this.name = "NewspeakASTs`InitializerAST";
   this.header = 1820;
   this.slots = [
    new SM("slots", false, false),
    new SM("initializationExpressions", false, false),
    new SM("classComment", false, false),
    new SM("isSeq", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`InitializerAST", true, 1821),
    new MM("instance`initializer", true, 1822),
    new MM("init`slots:", true, 0),
    new MM("slots", true, 0),
    new MM("init`initializationExpressions:", true, 0),
    new MM("initializationExpressions", true, 0),
    new MM("init`classComment:", true, 0),
    new MM("classComment", true, 0),
    new MM("init`isSeq:", true, 0),
    new MM("isSeq", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$InitializerAST = function ($s, $es, $c, $seq) {
    var self = this;
    self.$super$NewspeakASTs$InitializerAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $es, $c, $seq) {
    var self = this;
    self._$superInit$NewspeakASTs$InitializerAST($s, $es, $c, $seq);
    self._$init$slots$($s);
    self._$init$initializationExpressions$($es);
    self._$init$classComment$($c);
    self._$init$isSeq$($seq);
    return self;
   };
   this.$init$slots$ = function (v) {
    this.$slots$slot = v;
    return this;
   };
   this.$slots = function () {
    return this.$slots$slot;
   };
   this.$init$initializationExpressions$ = function (v) {
    this.$initializationExpressions$slot = v;
    return this;
   };
   this.$initializationExpressions = function () {
    return this.$initializationExpressions$slot;
   };
   this.$init$classComment$ = function (v) {
    this.$classComment$slot = v;
    return this;
   };
   this.$classComment = function () {
    return this.$classComment$slot;
   };
   this.$init$isSeq$ = function (v) {
    this.$isSeq$slot = v;
    return this;
   };
   this.$isSeq = function () {
    return this.$isSeq$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`InitializerAST";
     this._$superInit$NewspeakASTs$InitializerAST = $.$superInit$NewspeakASTs$InitializerAST;
     this.$superInit$NewspeakASTs$InitializerAST = dnuCatcher("$superInit$NewspeakASTs$InitializerAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$slots$ = this._$init$slots$ = $.$init$slots$;
     this.$slots = this._$slots = $.$slots;
     this.$init$initializationExpressions$ = this._$init$initializationExpressions$ = $.$init$initializationExpressions$;
     this.$initializationExpressions = this._$initializationExpressions = $.$initializationExpressions;
     this.$init$classComment$ = this._$init$classComment$ = $.$init$classComment$;
     this.$classComment = this._$classComment = $.$classComment;
     this.$init$isSeq$ = this._$init$isSeq$ = $.$init$isSeq$;
     this.$isSeq = this._$isSeq = $.$isSeq;
     this.$enclosingObjects$NewspeakASTs$InitializerAST = enclosingObjects;
     this.$super$NewspeakASTs$InitializerAST$slot = runtimeSuperclass;
     this["NewspeakASTs`InitializerAST"] = function () {
      superBasicNew.call(this);
      this.$slots$slot = nil;
      this.$initializationExpressions$slot = nil;
      this.$classComment$slot = nil;
      this.$isSeq$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`InitializerAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`InitializerAST";
    this.slots = [];
    this.methods = [new MM("slots:initializerExpressions:comment:slotsAreSequential:", true, 0)];
    this.nestedClasses = [];
    this.$slots$initializerExpressions$comment$slotsAreSequential$ = function ($s, $es, $c, $seq) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s, $es, $c, $seq);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`InitializerAST";
      this.$slots$initializerExpressions$comment$slotsAreSequential$ = this._$slots$initializerExpressions$comment$slotsAreSequential$ = $.$slots$initializerExpressions$comment$slotsAreSequential$;
      this.$enclosingObjects$NewspeakASTs$InitializerAST = enclosingObjects;
      this.$super$NewspeakASTs$InitializerAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$KeywordPatternAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`KeywordPatternAST";
   this.name = "NewspeakASTs`KeywordPatternAST";
   this.header = 1823;
   this.slots = [
    new SM("keywords", true, false),
    new SM("patterns", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`KeywordPatternAST", true, 1824),
    new MM("instance`initializer", true, 1825),
    new MM("apply:", false, 1826),
    new MM("isKeywordPatternNode", false, 1827),
    new MM("init`keywords:", true, 0),
    new MM("keywords", true, 0),
    new MM("keywords:", true, 0),
    new MM("init`patterns:", true, 0),
    new MM("patterns", true, 0),
    new MM("patterns:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$KeywordPatternAST = function () {
    var self = this;
    self.$super$NewspeakASTs$KeywordPatternAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$KeywordPatternAST();
    return self;
   };
   this.$apply$ = function ($tool) {
    var self = this;
    return $tool.$keywordPatternNode$(self);
   };
   this.$isKeywordPatternNode = function () {
    var self = this;
    return true;
   };
   this.$init$keywords$ = function (v) {
    this.$keywords$slot = v;
    return this;
   };
   this.$keywords = function () {
    return this.$keywords$slot;
   };
   this.$keywords$ = function (v) {
    this.$keywords$slot = v;
    return this;
   };
   this.$init$patterns$ = function (v) {
    this.$patterns$slot = v;
    return this;
   };
   this.$patterns = function () {
    return this.$patterns$slot;
   };
   this.$patterns$ = function (v) {
    this.$patterns$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`KeywordPatternAST";
     this._$superInit$NewspeakASTs$KeywordPatternAST = $.$superInit$NewspeakASTs$KeywordPatternAST;
     this.$superInit$NewspeakASTs$KeywordPatternAST = dnuCatcher("$superInit$NewspeakASTs$KeywordPatternAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isKeywordPatternNode = this._$isKeywordPatternNode = $.$isKeywordPatternNode;
     this.$init$keywords$ = this._$init$keywords$ = $.$init$keywords$;
     this.$keywords = this._$keywords = $.$keywords;
     this.$keywords$ = this._$keywords$ = $.$keywords$;
     this.$init$patterns$ = this._$init$patterns$ = $.$init$patterns$;
     this.$patterns = this._$patterns = $.$patterns;
     this.$patterns$ = this._$patterns$ = $.$patterns$;
     this.$enclosingObjects$NewspeakASTs$KeywordPatternAST = enclosingObjects;
     this.$super$NewspeakASTs$KeywordPatternAST$slot = runtimeSuperclass;
     this["NewspeakASTs`KeywordPatternAST"] = function () {
      superBasicNew.call(this);
      this.$keywords$slot = nil;
      this.$patterns$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`KeywordPatternAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`KeywordPatternAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`KeywordPatternAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$KeywordPatternAST = enclosingObjects;
      this.$super$NewspeakASTs$KeywordPatternAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$KeywordPatternPairAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`KeywordPatternPairAST";
   this.name = "NewspeakASTs`KeywordPatternPairAST";
   this.header = 1828;
   this.slots = [
    new SM("keyword", true, false),
    new SM("pattern", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`KeywordPatternPairAST", true, 1829),
    new MM("instance`initializer", true, 1830),
    new MM("isKeywordPatternPairNode", false, 1831),
    new MM("init`keyword:", true, 0),
    new MM("keyword", true, 0),
    new MM("keyword:", true, 0),
    new MM("init`pattern:", true, 0),
    new MM("pattern", true, 0),
    new MM("pattern:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$KeywordPatternPairAST = function () {
    var self = this;
    self.$super$NewspeakASTs$KeywordPatternPairAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$KeywordPatternPairAST();
    return self;
   };
   this.$isKeywordPatternPairNode = function () {
    var self = this;
    return true;
   };
   this.$init$keyword$ = function (v) {
    this.$keyword$slot = v;
    return this;
   };
   this.$keyword = function () {
    return this.$keyword$slot;
   };
   this.$keyword$ = function (v) {
    this.$keyword$slot = v;
    return this;
   };
   this.$init$pattern$ = function (v) {
    this.$pattern$slot = v;
    return this;
   };
   this.$pattern = function () {
    return this.$pattern$slot;
   };
   this.$pattern$ = function (v) {
    this.$pattern$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`KeywordPatternPairAST";
     this._$superInit$NewspeakASTs$KeywordPatternPairAST = $.$superInit$NewspeakASTs$KeywordPatternPairAST;
     this.$superInit$NewspeakASTs$KeywordPatternPairAST = dnuCatcher("$superInit$NewspeakASTs$KeywordPatternPairAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKeywordPatternPairNode = this._$isKeywordPatternPairNode = $.$isKeywordPatternPairNode;
     this._$init$keyword$ = $.$init$keyword$;
     this.$init$keyword$ = dnuCatcher("$init$keyword$");
     this._$keyword = $.$keyword;
     this.$keyword = dnuCatcher("$keyword");
     this._$keyword$ = $.$keyword$;
     this.$keyword$ = dnuCatcher("$keyword$");
     this._$init$pattern$ = $.$init$pattern$;
     this.$init$pattern$ = dnuCatcher("$init$pattern$");
     this._$pattern = $.$pattern;
     this.$pattern = dnuCatcher("$pattern");
     this._$pattern$ = $.$pattern$;
     this.$pattern$ = dnuCatcher("$pattern$");
     this.$enclosingObjects$NewspeakASTs$KeywordPatternPairAST = enclosingObjects;
     this.$super$NewspeakASTs$KeywordPatternPairAST$slot = runtimeSuperclass;
     this["NewspeakASTs`KeywordPatternPairAST"] = function () {
      superBasicNew.call(this);
      this.$keyword$slot = nil;
      this.$pattern$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`KeywordPatternPairAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`KeywordPatternPairAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`KeywordPatternPairAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$KeywordPatternPairAST = enclosingObjects;
      this.$super$NewspeakASTs$KeywordPatternPairAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$LiteralAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`LiteralAST";
   this.name = "NewspeakASTs`LiteralAST";
   this.header = 1832;
   this.slots = [new SM("value", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`LiteralAST", true, 1833),
    new MM("instance`initializer", true, 1834),
    new MM("isExpressionNode", false, 1835),
    new MM("isLiteralNode", false, 1836),
    new MM("init`value:", true, 0),
    new MM("value", true, 0),
    new MM("value:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$LiteralAST = function () {
    var self = this;
    self.$super$NewspeakASTs$LiteralAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$LiteralAST();
    return self;
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$isLiteralNode = function () {
    var self = this;
    return true;
   };
   this.$init$value$ = function (v) {
    this.$value$slot = v;
    return this;
   };
   this.$value = function () {
    return this.$value$slot;
   };
   this.$value$ = function (v) {
    this.$value$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`LiteralAST";
     this._$superInit$NewspeakASTs$LiteralAST = $.$superInit$NewspeakASTs$LiteralAST;
     this.$superInit$NewspeakASTs$LiteralAST = dnuCatcher("$superInit$NewspeakASTs$LiteralAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$isLiteralNode = this._$isLiteralNode = $.$isLiteralNode;
     this.$init$value$ = this._$init$value$ = $.$init$value$;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$enclosingObjects$NewspeakASTs$LiteralAST = enclosingObjects;
     this.$super$NewspeakASTs$LiteralAST$slot = runtimeSuperclass;
     this["NewspeakASTs`LiteralAST"] = function () {
      superBasicNew.call(this);
      this.$value$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`LiteralAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`LiteralAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`LiteralAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$LiteralAST = enclosingObjects;
      this.$super$NewspeakASTs$LiteralAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$LiteralPatternAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`LiteralPatternAST";
   this.name = "NewspeakASTs`LiteralPatternAST";
   this.header = 1837;
   this.slots = [new SM("literal", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`LiteralPatternAST", true, 1838),
    new MM("instance`initializer", true, 1839),
    new MM("apply:", false, 1840),
    new MM("isLiteralPatternNode", false, 1841),
    new MM("init`literal:", true, 0),
    new MM("literal", true, 0),
    new MM("literal:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$LiteralPatternAST = function () {
    var self = this;
    self.$super$NewspeakASTs$LiteralPatternAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$LiteralPatternAST();
    return self;
   };
   this.$apply$ = function ($tool) {
    var self = this;
    return $tool.$literalPatternNode$(self);
   };
   this.$isLiteralPatternNode = function () {
    var self = this;
    return true;
   };
   this.$init$literal$ = function (v) {
    this.$literal$slot = v;
    return this;
   };
   this.$literal = function () {
    return this.$literal$slot;
   };
   this.$literal$ = function (v) {
    this.$literal$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`LiteralPatternAST";
     this._$superInit$NewspeakASTs$LiteralPatternAST = $.$superInit$NewspeakASTs$LiteralPatternAST;
     this.$superInit$NewspeakASTs$LiteralPatternAST = dnuCatcher("$superInit$NewspeakASTs$LiteralPatternAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isLiteralPatternNode = this._$isLiteralPatternNode = $.$isLiteralPatternNode;
     this.$init$literal$ = this._$init$literal$ = $.$init$literal$;
     this.$literal = this._$literal = $.$literal;
     this.$literal$ = this._$literal$ = $.$literal$;
     this.$enclosingObjects$NewspeakASTs$LiteralPatternAST = enclosingObjects;
     this.$super$NewspeakASTs$LiteralPatternAST$slot = runtimeSuperclass;
     this["NewspeakASTs`LiteralPatternAST"] = function () {
      superBasicNew.call(this);
      this.$literal$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`LiteralPatternAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`LiteralPatternAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`LiteralPatternAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$LiteralPatternAST = enclosingObjects;
      this.$super$NewspeakASTs$LiteralPatternAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$MessageAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`MessageAST";
   this.name = "NewspeakASTs`MessageAST";
   this.header = 1842;
   this.slots = [
    new SM("selector", true, false),
    new SM("arguments", true, false),
    new SM("isEventual", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`MessageAST", true, 1843),
    new MM("instance`initializer", true, 1844),
    new MM("send:with:", false, 1845),
    new MM("isMessageNode", false, 1846),
    new MM("apply:", false, 1847),
    new MM("init`selector:", true, 0),
    new MM("selector", true, 0),
    new MM("selector:", true, 0),
    new MM("init`arguments:", true, 0),
    new MM("arguments", true, 0),
    new MM("arguments:", true, 0),
    new MM("init`isEventual:", true, 0),
    new MM("isEventual", true, 0),
    new MM("isEventual:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$MessageAST = function () {
    var self = this;
    self.$super$NewspeakASTs$MessageAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$MessageAST();
    self._$init$isEventual$(false);
    return self;
   };
   this.$send$with$ = function ($sel, $args) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$selector$($sel);
     return cascadeReceiver.$arguments$($args);
    })(self);
    return self;
   };
   this.$isMessageNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$messageNode$(self);
   };
   this.$init$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$selector = function () {
    return this.$selector$slot;
   };
   this.$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$init$isEventual$ = function (v) {
    this.$isEventual$slot = v;
    return this;
   };
   this.$isEventual = function () {
    return this.$isEventual$slot;
   };
   this.$isEventual$ = function (v) {
    this.$isEventual$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`MessageAST";
     this._$superInit$NewspeakASTs$MessageAST = $.$superInit$NewspeakASTs$MessageAST;
     this.$superInit$NewspeakASTs$MessageAST = dnuCatcher("$superInit$NewspeakASTs$MessageAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$send$with$ = this._$send$with$ = $.$send$with$;
     this.$isMessageNode = this._$isMessageNode = $.$isMessageNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$selector$ = this._$init$selector$ = $.$init$selector$;
     this.$selector = this._$selector = $.$selector;
     this.$selector$ = this._$selector$ = $.$selector$;
     this.$init$arguments$ = this._$init$arguments$ = $.$init$arguments$;
     this.$arguments = this._$arguments = $.$arguments;
     this.$arguments$ = this._$arguments$ = $.$arguments$;
     this.$init$isEventual$ = this._$init$isEventual$ = $.$init$isEventual$;
     this.$isEventual = this._$isEventual = $.$isEventual;
     this.$isEventual$ = this._$isEventual$ = $.$isEventual$;
     this.$enclosingObjects$NewspeakASTs$MessageAST = enclosingObjects;
     this.$super$NewspeakASTs$MessageAST$slot = runtimeSuperclass;
     this["NewspeakASTs`MessageAST"] = function () {
      superBasicNew.call(this);
      this.$selector$slot = nil;
      this.$arguments$slot = nil;
      this.$isEventual$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`MessageAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`MessageAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`MessageAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$MessageAST = enclosingObjects;
      this.$super$NewspeakASTs$MessageAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$MessagePatternAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`MessagePatternAST";
   this.name = "NewspeakASTs`MessagePatternAST";
   this.header = 1848;
   this.slots = [
    new SM("selector", true, false),
    new SM("parameters", true, false),
    new SM("returnType", true, false),
    new SM("typePattern", true, false),
    new SM("accessModifier", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`MessagePatternAST", true, 1849),
    new MM("instance`initializer", true, 1850),
    new MM("selector:parameters:", false, 1851),
    new MM("selector:parameters:returnType:", false, 1852),
    new MM("selector:parameters:returnType:typePattern:", false, 1853),
    new MM("selector:returnType:", false, 1854),
    new MM("concreteEnd", false, 1855),
    new MM("isMessagePatternNode", false, 1856),
    new MM("apply:", false, 1857),
    new MM("init`selector:", true, 0),
    new MM("selector", true, 0),
    new MM("selector:", true, 0),
    new MM("init`parameters:", true, 0),
    new MM("parameters", true, 0),
    new MM("parameters:", true, 0),
    new MM("init`returnType:", true, 0),
    new MM("returnType", true, 0),
    new MM("returnType:", true, 0),
    new MM("init`typePattern:", true, 0),
    new MM("typePattern", true, 0),
    new MM("typePattern:", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("accessModifier:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$MessagePatternAST = function () {
    var self = this;
    self.$super$NewspeakASTs$MessagePatternAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$MessagePatternAST();
    return self;
   };
   this.$selector$parameters$ = function ($s, $p) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$selector$($s);
     return cascadeReceiver.$parameters$($p);
    })(self);
    return self;
   };
   this.$selector$parameters$returnType$ = function ($s, $p, $t) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$selector$($s);
     cascadeReceiver.$parameters$($p);
     return cascadeReceiver.$returnType$($t);
    })(self);
    return self;
   };
   this.$selector$parameters$returnType$typePattern$ = function ($s, $p, $t, $tp) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$selector$($s);
     cascadeReceiver.$parameters$($p);
     cascadeReceiver.$returnType$($t);
     return cascadeReceiver.$typePattern$($tp);
    })(self);
    return self;
   };
   this.$selector$returnType$ = function ($s, $t) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$selector$($s);
     return cascadeReceiver.$returnType$($t);
    })(self);
    return self;
   };
   this.$concreteEnd = function () {
    var self = this;
    if (!self._$typePattern().$isNil()) {
     return self._$typePattern().$concreteEnd();
    } else {
     nil;
    };
    if (!self._$returnType().$isNil()) {
     return self._$returnType().$concreteEnd();
    } else {
     nil;
    };
    if (!self._$parameters().$isEmpty()) {
     return self._$parameters().$last().$concreteEnd();
    } else {
     nil;
    };
    return self.$super$NewspeakASTs$MessagePatternAST$slot._$concreteEnd.call(self);
   };
   this.$isMessagePatternNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$messagePatternNode$(self);
   };
   this.$init$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$selector = function () {
    return this.$selector$slot;
   };
   this.$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$init$parameters$ = function (v) {
    this.$parameters$slot = v;
    return this;
   };
   this.$parameters = function () {
    return this.$parameters$slot;
   };
   this.$parameters$ = function (v) {
    this.$parameters$slot = v;
    return this;
   };
   this.$init$returnType$ = function (v) {
    this.$returnType$slot = v;
    return this;
   };
   this.$returnType = function () {
    return this.$returnType$slot;
   };
   this.$returnType$ = function (v) {
    this.$returnType$slot = v;
    return this;
   };
   this.$init$typePattern$ = function (v) {
    this.$typePattern$slot = v;
    return this;
   };
   this.$typePattern = function () {
    return this.$typePattern$slot;
   };
   this.$typePattern$ = function (v) {
    this.$typePattern$slot = v;
    return this;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`MessagePatternAST";
     this._$superInit$NewspeakASTs$MessagePatternAST = $.$superInit$NewspeakASTs$MessagePatternAST;
     this.$superInit$NewspeakASTs$MessagePatternAST = dnuCatcher("$superInit$NewspeakASTs$MessagePatternAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$selector$parameters$ = this._$selector$parameters$ = $.$selector$parameters$;
     this.$selector$parameters$returnType$ = this._$selector$parameters$returnType$ = $.$selector$parameters$returnType$;
     this.$selector$parameters$returnType$typePattern$ = this._$selector$parameters$returnType$typePattern$ = $.$selector$parameters$returnType$typePattern$;
     this.$selector$returnType$ = this._$selector$returnType$ = $.$selector$returnType$;
     this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
     this.$isMessagePatternNode = this._$isMessagePatternNode = $.$isMessagePatternNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$selector$ = this._$init$selector$ = $.$init$selector$;
     this.$selector = this._$selector = $.$selector;
     this.$selector$ = this._$selector$ = $.$selector$;
     this.$init$parameters$ = this._$init$parameters$ = $.$init$parameters$;
     this.$parameters = this._$parameters = $.$parameters;
     this.$parameters$ = this._$parameters$ = $.$parameters$;
     this.$init$returnType$ = this._$init$returnType$ = $.$init$returnType$;
     this.$returnType = this._$returnType = $.$returnType;
     this.$returnType$ = this._$returnType$ = $.$returnType$;
     this.$init$typePattern$ = this._$init$typePattern$ = $.$init$typePattern$;
     this.$typePattern = this._$typePattern = $.$typePattern;
     this.$typePattern$ = this._$typePattern$ = $.$typePattern$;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
     this.$enclosingObjects$NewspeakASTs$MessagePatternAST = enclosingObjects;
     this.$super$NewspeakASTs$MessagePatternAST$slot = runtimeSuperclass;
     this["NewspeakASTs`MessagePatternAST"] = function () {
      superBasicNew.call(this);
      this.$selector$slot = nil;
      this.$parameters$slot = nil;
      this.$returnType$slot = nil;
      this.$typePattern$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`MessagePatternAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`MessagePatternAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`MessagePatternAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$MessagePatternAST = enclosingObjects;
      this.$super$NewspeakASTs$MessagePatternAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$MethodAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`MethodAST";
   this.name = "NewspeakASTs`MethodAST";
   this.header = 1858;
   this.slots = [
    new SM("pattern", true, false),
    new SM("body", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`MethodAST", true, 1859),
    new MM("instance`initializer", true, 1860),
    new MM("selector", false, 1861),
    new MM("accessModifier", false, 1862),
    new MM("accessModifier:", false, 1863),
    new MM("pattern:body:accessModifier:", false, 1864),
    new MM("isMethodNode", false, 1865),
    new MM("apply:", false, 1866),
    new MM("init`pattern:", true, 0),
    new MM("pattern", true, 0),
    new MM("pattern:", true, 0),
    new MM("init`body:", true, 0),
    new MM("body", true, 0),
    new MM("body:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$MethodAST = function () {
    var self = this;
    self.$super$NewspeakASTs$MethodAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$MethodAST();
    return self;
   };
   this.$selector = function () {
    var self = this;
    return self._$pattern().$selector();
   };
   this.$accessModifier = function () {
    var self = this;
    return self._$pattern().$accessModifier();
   };
   this.$accessModifier$ = function ($am) {
    var self = this;
    self._$pattern().$accessModifier$($am);
    return self;
   };
   this.$pattern$body$accessModifier$ = function ($p, $b, $am) {
    var self = this;
    self._$assert$(function () {
     return $p.$isMessagePatternNode();
    });
    self._$assert$(function () {
     return $b.$isCodeBodyNode();
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$pattern$($p);
     return cascadeReceiver.$body$($b);
    })(self);
    self._$pattern().$accessModifier$($am);
    return self;
   };
   this.$isMethodNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$methodNode$(self);
   };
   this.$init$pattern$ = function (v) {
    this.$pattern$slot = v;
    return this;
   };
   this.$pattern = function () {
    return this.$pattern$slot;
   };
   this.$pattern$ = function (v) {
    this.$pattern$slot = v;
    return this;
   };
   this.$init$body$ = function (v) {
    this.$body$slot = v;
    return this;
   };
   this.$body = function () {
    return this.$body$slot;
   };
   this.$body$ = function (v) {
    this.$body$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`MethodAST";
     this._$superInit$NewspeakASTs$MethodAST = $.$superInit$NewspeakASTs$MethodAST;
     this.$superInit$NewspeakASTs$MethodAST = dnuCatcher("$superInit$NewspeakASTs$MethodAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$selector = this._$selector = $.$selector;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
     this.$pattern$body$accessModifier$ = this._$pattern$body$accessModifier$ = $.$pattern$body$accessModifier$;
     this.$isMethodNode = this._$isMethodNode = $.$isMethodNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$pattern$ = this._$init$pattern$ = $.$init$pattern$;
     this.$pattern = this._$pattern = $.$pattern;
     this.$pattern$ = this._$pattern$ = $.$pattern$;
     this.$init$body$ = this._$init$body$ = $.$init$body$;
     this.$body = this._$body = $.$body;
     this.$body$ = this._$body$ = $.$body$;
     this.$enclosingObjects$NewspeakASTs$MethodAST = enclosingObjects;
     this.$super$NewspeakASTs$MethodAST$slot = runtimeSuperclass;
     this["NewspeakASTs`MethodAST"] = function () {
      superBasicNew.call(this);
      this.$pattern$slot = nil;
      this.$body$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`MethodAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`MethodAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`MethodAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$MethodAST = enclosingObjects;
      this.$super$NewspeakASTs$MethodAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$MixinApplicationAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`MixinApplicationAST";
   this.name = "NewspeakASTs`MixinApplicationAST";
   this.header = 1867;
   this.slots = [
    new SM("mixinExpression", true, false),
    new SM("superclassExpression", true, false),
    new SM("classPrefix", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`MixinApplicationAST", true, 1868),
    new MM("instance`initializer", true, 1869),
    new MM("isExpressionNode", false, 1870),
    new MM("apply:", false, 1871),
    new MM("init`mixinExpression:", true, 0),
    new MM("mixinExpression", true, 0),
    new MM("mixinExpression:", true, 0),
    new MM("init`superclassExpression:", true, 0),
    new MM("superclassExpression", true, 0),
    new MM("superclassExpression:", true, 0),
    new MM("init`classPrefix:", true, 0),
    new MM("classPrefix", true, 0),
    new MM("classPrefix:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$MixinApplicationAST = function () {
    var self = this;
    self.$super$NewspeakASTs$MixinApplicationAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$MixinApplicationAST();
    return self;
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return $visitor.$mixinApplication$(self);
   };
   this.$init$mixinExpression$ = function (v) {
    this.$mixinExpression$slot = v;
    return this;
   };
   this.$mixinExpression = function () {
    return this.$mixinExpression$slot;
   };
   this.$mixinExpression$ = function (v) {
    this.$mixinExpression$slot = v;
    return this;
   };
   this.$init$superclassExpression$ = function (v) {
    this.$superclassExpression$slot = v;
    return this;
   };
   this.$superclassExpression = function () {
    return this.$superclassExpression$slot;
   };
   this.$superclassExpression$ = function (v) {
    this.$superclassExpression$slot = v;
    return this;
   };
   this.$init$classPrefix$ = function (v) {
    this.$classPrefix$slot = v;
    return this;
   };
   this.$classPrefix = function () {
    return this.$classPrefix$slot;
   };
   this.$classPrefix$ = function (v) {
    this.$classPrefix$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`MixinApplicationAST";
     this._$superInit$NewspeakASTs$MixinApplicationAST = $.$superInit$NewspeakASTs$MixinApplicationAST;
     this.$superInit$NewspeakASTs$MixinApplicationAST = dnuCatcher("$superInit$NewspeakASTs$MixinApplicationAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$mixinExpression$ = this._$init$mixinExpression$ = $.$init$mixinExpression$;
     this.$mixinExpression = this._$mixinExpression = $.$mixinExpression;
     this.$mixinExpression$ = this._$mixinExpression$ = $.$mixinExpression$;
     this.$init$superclassExpression$ = this._$init$superclassExpression$ = $.$init$superclassExpression$;
     this.$superclassExpression = this._$superclassExpression = $.$superclassExpression;
     this.$superclassExpression$ = this._$superclassExpression$ = $.$superclassExpression$;
     this.$init$classPrefix$ = this._$init$classPrefix$ = $.$init$classPrefix$;
     this.$classPrefix = this._$classPrefix = $.$classPrefix;
     this.$classPrefix$ = this._$classPrefix$ = $.$classPrefix$;
     this.$enclosingObjects$NewspeakASTs$MixinApplicationAST = enclosingObjects;
     this.$super$NewspeakASTs$MixinApplicationAST$slot = runtimeSuperclass;
     this["NewspeakASTs`MixinApplicationAST"] = function () {
      superBasicNew.call(this);
      this.$mixinExpression$slot = nil;
      this.$superclassExpression$slot = nil;
      this.$classPrefix$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`MixinApplicationAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`MixinApplicationAST";
    this.slots = [];
    this.methods = [
     new MM("new", true, 0),
     new MM("prefix:mixin:", false, 1872)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.$prefix$mixin$ = function ($cp, $me) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$classPrefix$($cp);
      cascadeReceiver.$mixinExpr$($me);
      cascadeReceiver.$superclassExpr$($cp.$superclassCall());
      return cascadeReceiver.$yourself();
     })(self._$new());
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`MixinApplicationAST";
      this.$new = this._$new = $.$new;
      this.$prefix$mixin$ = this._$prefix$mixin$ = $.$prefix$mixin$;
      this.$enclosingObjects$NewspeakASTs$MixinApplicationAST = enclosingObjects;
      this.$super$NewspeakASTs$MixinApplicationAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$MixinApplicationClassAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`MixinApplicationClassAST";
   this.name = "NewspeakASTs`MixinApplicationClassAST";
   this.header = 1873;
   this.slots = [
    new SM("accessModifier", true, false),
    new SM("name", false, false),
    new SM("constructor", false, false),
    new SM("inheritanceChain", false, false),
    new SM("category", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`MixinApplicationClassAST", true, 1874),
    new MM("instance`initializer", true, 1875),
    new MM("apply:", false, 1876),
    new MM("isMixinApplicationClassAST", false, 1877),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("accessModifier:", true, 0),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`constructor:", true, 0),
    new MM("constructor", true, 0),
    new MM("init`inheritanceChain:", true, 0),
    new MM("inheritanceChain", true, 0),
    new MM("init`category:", true, 0),
    new MM("category", true, 0),
    new MM("category:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$MixinApplicationClassAST = function ($klassName, $cons, $iList) {
    var self = this;
    self.$super$NewspeakASTs$MixinApplicationClassAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($klassName, $cons, $iList) {
    var self = this;
    self._$superInit$NewspeakASTs$MixinApplicationClassAST($klassName, $cons, $iList);
    self._$init$name$($klassName.$asSymbol());
    self._$init$constructor$($cons);
    self._$init$inheritanceChain$($iList);
    return self;
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return $visitor.$mixinApplicationClass$(self);
   };
   this.$isMixinApplicationClassAST = function () {
    var self = this;
    return true;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$constructor$ = function (v) {
    this.$constructor$slot = v;
    return this;
   };
   this.$constructor = function () {
    return this.$constructor$slot;
   };
   this.$init$inheritanceChain$ = function (v) {
    this.$inheritanceChain$slot = v;
    return this;
   };
   this.$inheritanceChain = function () {
    return this.$inheritanceChain$slot;
   };
   this.$init$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.$category = function () {
    return this.$category$slot;
   };
   this.$category$ = function (v) {
    this.$category$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`MixinApplicationClassAST";
     this._$superInit$NewspeakASTs$MixinApplicationClassAST = $.$superInit$NewspeakASTs$MixinApplicationClassAST;
     this.$superInit$NewspeakASTs$MixinApplicationClassAST = dnuCatcher("$superInit$NewspeakASTs$MixinApplicationClassAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isMixinApplicationClassAST = this._$isMixinApplicationClassAST = $.$isMixinApplicationClassAST;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$constructor$ = this._$init$constructor$ = $.$init$constructor$;
     this.$constructor = this._$constructor = $.$constructor;
     this.$init$inheritanceChain$ = this._$init$inheritanceChain$ = $.$init$inheritanceChain$;
     this.$inheritanceChain = this._$inheritanceChain = $.$inheritanceChain;
     this.$init$category$ = this._$init$category$ = $.$init$category$;
     this.$category = this._$category = $.$category;
     this.$category$ = this._$category$ = $.$category$;
     this.$enclosingObjects$NewspeakASTs$MixinApplicationClassAST = enclosingObjects;
     this.$super$NewspeakASTs$MixinApplicationClassAST$slot = runtimeSuperclass;
     this["NewspeakASTs`MixinApplicationClassAST"] = function () {
      superBasicNew.call(this);
      this.$accessModifier$slot = nil;
      this.$name$slot = nil;
      this.$constructor$slot = nil;
      this.$inheritanceChain$slot = nil;
      this.$category$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`MixinApplicationClassAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`MixinApplicationClassAST";
    this.slots = [];
    this.methods = [new MM("named:factoryMsg:inheriting:", true, 0)];
    this.nestedClasses = [];
    this.$named$factoryMsg$inheriting$ = function ($klassName, $cons, $iList) {
     return (new this.nonMeta.basicNew()).$instance$initializer($klassName, $cons, $iList);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`MixinApplicationClassAST";
      this.$named$factoryMsg$inheriting$ = this._$named$factoryMsg$inheriting$ = $.$named$factoryMsg$inheriting$;
      this.$enclosingObjects$NewspeakASTs$MixinApplicationClassAST = enclosingObjects;
      this.$super$NewspeakASTs$MixinApplicationClassAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$MutableSlotDefAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`MutableSlotDefAST";
   this.name = "NewspeakASTs`MutableSlotDefAST";
   this.header = 1878;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`MutableSlotDefAST", true, 1879),
    new MM("instance`initializer", true, 1880),
    new MM("isMutable", false, 1881)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$MutableSlotDefAST = function () {
    var self = this;
    self.$super$NewspeakASTs$MutableSlotDefAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$MutableSlotDefAST();
    return self;
   };
   this.$isMutable = function () {
    var self = this;
    return true;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`MutableSlotDefAST";
     this._$superInit$NewspeakASTs$MutableSlotDefAST = $.$superInit$NewspeakASTs$MutableSlotDefAST;
     this.$superInit$NewspeakASTs$MutableSlotDefAST = dnuCatcher("$superInit$NewspeakASTs$MutableSlotDefAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isMutable = this._$isMutable = $.$isMutable;
     this.$enclosingObjects$NewspeakASTs$MutableSlotDefAST = enclosingObjects;
     this.$super$NewspeakASTs$MutableSlotDefAST$slot = runtimeSuperclass;
     this["NewspeakASTs`MutableSlotDefAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`MutableSlotDefAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`MutableSlotDefAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`MutableSlotDefAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$MutableSlotDefAST = enclosingObjects;
      this.$super$NewspeakASTs$MutableSlotDefAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$NSSideAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`NSSideAST";
   this.name = "NewspeakASTs`NSSideAST";
   this.header = 1882;
   this.slots = [new SM("nestedClasses", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`NSSideAST", true, 1883),
    new MM("instance`initializer", true, 1884),
    new MM("init`nestedClasses:", true, 0),
    new MM("nestedClasses", true, 0),
    new MM("nestedClasses:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$NSSideAST = function () {
    var self = this;
    self.$super$NewspeakASTs$NSSideAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$NSSideAST();
    return self;
   };
   this.$init$nestedClasses$ = function (v) {
    this.$nestedClasses$slot = v;
    return this;
   };
   this.$nestedClasses = function () {
    return this.$nestedClasses$slot;
   };
   this.$nestedClasses$ = function (v) {
    this.$nestedClasses$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`NSSideAST";
     this._$superInit$NewspeakASTs$NSSideAST = $.$superInit$NewspeakASTs$NSSideAST;
     this.$superInit$NewspeakASTs$NSSideAST = dnuCatcher("$superInit$NewspeakASTs$NSSideAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$nestedClasses$ = this._$init$nestedClasses$ = $.$init$nestedClasses$;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$nestedClasses$ = this._$nestedClasses$ = $.$nestedClasses$;
     this.$enclosingObjects$NewspeakASTs$NSSideAST = enclosingObjects;
     this.$super$NewspeakASTs$NSSideAST$slot = runtimeSuperclass;
     this["NewspeakASTs`NSSideAST"] = function () {
      superBasicNew.call(this);
      this.$nestedClasses$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`NSSideAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`NSSideAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`NSSideAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$NSSideAST = enclosingObjects;
      this.$super$NewspeakASTs$NSSideAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$NormalSendAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`NormalSendAST";
   this.name = "NewspeakASTs`NormalSendAST";
   this.header = 1885;
   this.slots = [new SM("receiver", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`NormalSendAST", true, 1886),
    new MM("instance`initializer", true, 1887),
    new MM("to:send:with:", false, 1888),
    new MM("to:send:", false, 1889),
    new MM("isNormalSendNode", false, 1890),
    new MM("apply:", false, 1891),
    new MM("init`receiver:", true, 0),
    new MM("receiver", true, 0),
    new MM("receiver:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$NormalSendAST = function () {
    var self = this;
    self.$super$NewspeakASTs$NormalSendAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$NormalSendAST();
    return self;
   };
   this.$to$send$with$ = function ($receiver, $selector, $arguments) {
    var self = this;
    self._$to$send$($receiver, self.$enclosingObjects$NewspeakASTs$NormalSendAST[0]._$MessageAST().$new().$send$with$($selector, $arguments));
    return self;
   };
   this.$to$send$ = function ($anExpression, $aMessage) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$receiver$($anExpression);
     return cascadeReceiver.$message$($aMessage);
    })(self);
    return self;
   };
   this.$isNormalSendNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$normalSendNode$(self);
   };
   this.$init$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.$receiver = function () {
    return this.$receiver$slot;
   };
   this.$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`NormalSendAST";
     this._$superInit$NewspeakASTs$NormalSendAST = $.$superInit$NewspeakASTs$NormalSendAST;
     this.$superInit$NewspeakASTs$NormalSendAST = dnuCatcher("$superInit$NewspeakASTs$NormalSendAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$to$send$with$ = this._$to$send$with$ = $.$to$send$with$;
     this.$to$send$ = this._$to$send$ = $.$to$send$;
     this.$isNormalSendNode = this._$isNormalSendNode = $.$isNormalSendNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$receiver$ = this._$init$receiver$ = $.$init$receiver$;
     this.$receiver = this._$receiver = $.$receiver;
     this.$receiver$ = this._$receiver$ = $.$receiver$;
     this.$enclosingObjects$NewspeakASTs$NormalSendAST = enclosingObjects;
     this.$super$NewspeakASTs$NormalSendAST$slot = runtimeSuperclass;
     this["NewspeakASTs`NormalSendAST"] = function () {
      superBasicNew.call(this);
      this.$receiver$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`NormalSendAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`NormalSendAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`NormalSendAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$NormalSendAST = enclosingObjects;
      this.$super$NewspeakASTs$NormalSendAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$NumberAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`NumberAST";
   this.name = "NewspeakASTs`NumberAST";
   this.header = 1892;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`NumberAST", true, 1893),
    new MM("instance`initializer", true, 1894),
    new MM("isNumberNode", false, 1895),
    new MM("apply:", false, 1896)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$NumberAST = function () {
    var self = this;
    self.$super$NewspeakASTs$NumberAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$NumberAST();
    return self;
   };
   this.$isNumberNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$numberNode$(self);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`NumberAST";
     this._$superInit$NewspeakASTs$NumberAST = $.$superInit$NewspeakASTs$NumberAST;
     this.$superInit$NewspeakASTs$NumberAST = dnuCatcher("$superInit$NewspeakASTs$NumberAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isNumberNode = this._$isNumberNode = $.$isNumberNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$enclosingObjects$NewspeakASTs$NumberAST = enclosingObjects;
     this.$super$NewspeakASTs$NumberAST$slot = runtimeSuperclass;
     this["NewspeakASTs`NumberAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`NumberAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`NumberAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`NumberAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$NumberAST = enclosingObjects;
      this.$super$NewspeakASTs$NumberAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ParameterizedTypeAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ParameterizedTypeAST";
   this.name = "NewspeakASTs`ParameterizedTypeAST";
   this.header = 1897;
   this.slots = [
    new SM("generic", true, false),
    new SM("arguments", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`ParameterizedTypeAST", true, 1898),
    new MM("instance`initializer", true, 1899),
    new MM("apply:", false, 1900),
    new MM("isTypeNode", false, 1901),
    new MM("init`generic:", true, 0),
    new MM("generic", true, 0),
    new MM("generic:", true, 0),
    new MM("init`arguments:", true, 0),
    new MM("arguments", true, 0),
    new MM("arguments:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ParameterizedTypeAST = function () {
    var self = this;
    self.$super$NewspeakASTs$ParameterizedTypeAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ParameterizedTypeAST();
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$genericInvocationNode$(self);
   };
   this.$isTypeNode = function () {
    var self = this;
    return true;
   };
   this.$init$generic$ = function (v) {
    this.$generic$slot = v;
    return this;
   };
   this.$generic = function () {
    return this.$generic$slot;
   };
   this.$generic$ = function (v) {
    this.$generic$slot = v;
    return this;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ParameterizedTypeAST";
     this._$superInit$NewspeakASTs$ParameterizedTypeAST = $.$superInit$NewspeakASTs$ParameterizedTypeAST;
     this.$superInit$NewspeakASTs$ParameterizedTypeAST = dnuCatcher("$superInit$NewspeakASTs$ParameterizedTypeAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isTypeNode = this._$isTypeNode = $.$isTypeNode;
     this.$init$generic$ = this._$init$generic$ = $.$init$generic$;
     this.$generic = this._$generic = $.$generic;
     this.$generic$ = this._$generic$ = $.$generic$;
     this.$init$arguments$ = this._$init$arguments$ = $.$init$arguments$;
     this.$arguments = this._$arguments = $.$arguments;
     this.$arguments$ = this._$arguments$ = $.$arguments$;
     this.$enclosingObjects$NewspeakASTs$ParameterizedTypeAST = enclosingObjects;
     this.$super$NewspeakASTs$ParameterizedTypeAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ParameterizedTypeAST"] = function () {
      superBasicNew.call(this);
      this.$generic$slot = nil;
      this.$arguments$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`ParameterizedTypeAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ParameterizedTypeAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ParameterizedTypeAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ParameterizedTypeAST = enclosingObjects;
      this.$super$NewspeakASTs$ParameterizedTypeAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$PatternAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`PatternAST";
   this.name = "NewspeakASTs`PatternAST";
   this.header = 1902;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`PatternAST", true, 1903),
    new MM("instance`initializer", true, 1904),
    new MM("isPatternNode", false, 1905)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$PatternAST = function () {
    var self = this;
    self.$super$NewspeakASTs$PatternAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$PatternAST();
    return self;
   };
   this.$isPatternNode = function () {
    var self = this;
    return true;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`PatternAST";
     this._$superInit$NewspeakASTs$PatternAST = $.$superInit$NewspeakASTs$PatternAST;
     this.$superInit$NewspeakASTs$PatternAST = dnuCatcher("$superInit$NewspeakASTs$PatternAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isPatternNode = this._$isPatternNode = $.$isPatternNode;
     this.$enclosingObjects$NewspeakASTs$PatternAST = enclosingObjects;
     this.$super$NewspeakASTs$PatternAST$slot = runtimeSuperclass;
     this["NewspeakASTs`PatternAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`PatternAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`PatternAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`PatternAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$PatternAST = enclosingObjects;
      this.$super$NewspeakASTs$PatternAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$ReturnStatAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`ReturnStatAST";
   this.name = "NewspeakASTs`ReturnStatAST";
   this.header = 1906;
   this.slots = [new SM("expression", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`ReturnStatAST", true, 1907),
    new MM("instance`initializer", true, 1908),
    new MM("isReturnStatNode", false, 1909),
    new MM("apply:", false, 1910),
    new MM("init`expression:", true, 0),
    new MM("expression", true, 0),
    new MM("expression:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$ReturnStatAST = function () {
    var self = this;
    self.$super$NewspeakASTs$ReturnStatAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$ReturnStatAST();
    return self;
   };
   this.$isReturnStatNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$returnStatNode$(self);
   };
   this.$init$expression$ = function (v) {
    this.$expression$slot = v;
    return this;
   };
   this.$expression = function () {
    return this.$expression$slot;
   };
   this.$expression$ = function (v) {
    this.$expression$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`ReturnStatAST";
     this._$superInit$NewspeakASTs$ReturnStatAST = $.$superInit$NewspeakASTs$ReturnStatAST;
     this.$superInit$NewspeakASTs$ReturnStatAST = dnuCatcher("$superInit$NewspeakASTs$ReturnStatAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isReturnStatNode = this._$isReturnStatNode = $.$isReturnStatNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$expression$ = this._$init$expression$ = $.$init$expression$;
     this.$expression = this._$expression = $.$expression;
     this.$expression$ = this._$expression$ = $.$expression$;
     this.$enclosingObjects$NewspeakASTs$ReturnStatAST = enclosingObjects;
     this.$super$NewspeakASTs$ReturnStatAST$slot = runtimeSuperclass;
     this["NewspeakASTs`ReturnStatAST"] = function () {
      superBasicNew.call(this);
      this.$expression$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`ReturnStatAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`ReturnStatAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`ReturnStatAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$ReturnStatAST = enclosingObjects;
      this.$super$NewspeakASTs$ReturnStatAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$SendAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`SendAST";
   this.name = "NewspeakASTs`SendAST";
   this.header = 1911;
   this.slots = [new SM("message", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`SendAST", true, 1912),
    new MM("instance`initializer", true, 1913),
    new MM("receiver", false, 1914),
    new MM("isExpressionNode", false, 1915),
    new MM("isSendNode", false, 1916),
    new MM("init`message:", true, 0),
    new MM("message", true, 0),
    new MM("message:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$SendAST = function ($aMsg) {
    var self = this;
    self.$super$NewspeakASTs$SendAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($aMsg) {
    var self = this;
    self._$superInit$NewspeakASTs$SendAST($aMsg);
    self._$init$message$($aMsg);
    return self;
   };
   this.$receiver = function () {
    var self = this;
    return self._$subclassResponsibility();
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$isSendNode = function () {
    var self = this;
    return true;
   };
   this.$init$message$ = function (v) {
    this.$message$slot = v;
    return this;
   };
   this.$message = function () {
    return this.$message$slot;
   };
   this.$message$ = function (v) {
    this.$message$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`SendAST";
     this._$superInit$NewspeakASTs$SendAST = $.$superInit$NewspeakASTs$SendAST;
     this.$superInit$NewspeakASTs$SendAST = dnuCatcher("$superInit$NewspeakASTs$SendAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$receiver = this._$receiver = $.$receiver;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$isSendNode = this._$isSendNode = $.$isSendNode;
     this.$init$message$ = this._$init$message$ = $.$init$message$;
     this.$message = this._$message = $.$message;
     this.$message$ = this._$message$ = $.$message$;
     this.$enclosingObjects$NewspeakASTs$SendAST = enclosingObjects;
     this.$super$NewspeakASTs$SendAST$slot = runtimeSuperclass;
     this["NewspeakASTs`SendAST"] = function () {
      superBasicNew.call(this);
      this.$message$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`SendAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`SendAST";
    this.slots = [];
    this.methods = [new MM("send:", true, 0)];
    this.nestedClasses = [];
    this.$send$ = function ($aMsg) {
     return (new this.nonMeta.basicNew()).$instance$initializer($aMsg);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`SendAST";
      this.$send$ = this._$send$ = $.$send$;
      this.$enclosingObjects$NewspeakASTs$SendAST = enclosingObjects;
      this.$super$NewspeakASTs$SendAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$SetterSendAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`SetterSendAST";
   this.name = "NewspeakASTs`SetterSendAST";
   this.header = 1917;
   this.slots = [new SM("receiver", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`SetterSendAST", true, 1918),
    new MM("instance`initializer", true, 1919),
    new MM("apply:", false, 1920),
    new MM("isSetterSendNode", false, 1921),
    new MM("init`receiver:", true, 0),
    new MM("receiver", true, 0),
    new MM("receiver:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$SetterSendAST = function ($r, $m, $s, $e) {
    var self = this;
    self.$super$NewspeakASTs$SetterSendAST$slot._$instance$initializer.call(self, $m);
    return self;
   };
   this.$instance$initializer = function ($r, $m, $s, $e) {
    var self = this;
    self._$superInit$NewspeakASTs$SetterSendAST($r, $m, $s, $e);
    self._$init$receiver$($r);
    self._$assert$message$(function () {
     return $r.$isExpressionNode();
    }, "Receiver of setter send should be an expression");
    self._$start$($s);
    self._$end$($e);
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$setterSendNode$(self);
   };
   this.$isSetterSendNode = function () {
    var self = this;
    return true;
   };
   this.$init$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.$receiver = function () {
    return this.$receiver$slot;
   };
   this.$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`SetterSendAST";
     this._$superInit$NewspeakASTs$SetterSendAST = $.$superInit$NewspeakASTs$SetterSendAST;
     this.$superInit$NewspeakASTs$SetterSendAST = dnuCatcher("$superInit$NewspeakASTs$SetterSendAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isSetterSendNode = this._$isSetterSendNode = $.$isSetterSendNode;
     this.$init$receiver$ = this._$init$receiver$ = $.$init$receiver$;
     this.$receiver = this._$receiver = $.$receiver;
     this.$receiver$ = this._$receiver$ = $.$receiver$;
     this.$enclosingObjects$NewspeakASTs$SetterSendAST = enclosingObjects;
     this.$super$NewspeakASTs$SetterSendAST$slot = runtimeSuperclass;
     this["NewspeakASTs`SetterSendAST"] = function () {
      superBasicNew.call(this);
      this.$receiver$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`SetterSendAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`SetterSendAST";
    this.slots = [];
    this.methods = [new MM("to:send:start:end:", true, 0)];
    this.nestedClasses = [];
    this.$to$send$start$end$ = function ($r, $m, $s, $e) {
     return (new this.nonMeta.basicNew()).$instance$initializer($r, $m, $s, $e);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`SetterSendAST";
      this.$to$send$start$end$ = this._$to$send$start$end$ = $.$to$send$start$end$;
      this.$enclosingObjects$NewspeakASTs$SetterSendAST = enclosingObjects;
      this.$super$NewspeakASTs$SetterSendAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$SideAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`SideAST";
   this.name = "NewspeakASTs`SideAST";
   this.header = 1922;
   this.slots = [
    new SM("variables", true, false),
    new SM("categories", true, false),
    new SM("classComment", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`SideAST", true, 1923),
    new MM("instance`initializer", true, 1924),
    new MM("nestedClasses", false, 1925),
    new MM("variables:categories:", false, 1926),
    new MM("isSideNode", false, 1927),
    new MM("apply:", false, 1928),
    new MM("init`variables:", true, 0),
    new MM("variables", true, 0),
    new MM("variables:", true, 0),
    new MM("init`categories:", true, 0),
    new MM("categories", true, 0),
    new MM("categories:", true, 0),
    new MM("init`classComment:", true, 0),
    new MM("classComment", true, 0),
    new MM("classComment:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$SideAST = function () {
    var self = this;
    self.$super$NewspeakASTs$SideAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$SideAST();
    return self;
   };
   this.$nestedClasses = function () {
    var self = this;
    return [];
   };
   this.$variables$categories$ = function ($vs, $cs) {
    var self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$variables$($vs);
     return cascadeReceiver.$categories$($cs);
    })(self);
    return self;
   };
   this.$isSideNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$sideNode$(self);
   };
   this.$init$variables$ = function (v) {
    this.$variables$slot = v;
    return this;
   };
   this.$variables = function () {
    return this.$variables$slot;
   };
   this.$variables$ = function (v) {
    this.$variables$slot = v;
    return this;
   };
   this.$init$categories$ = function (v) {
    this.$categories$slot = v;
    return this;
   };
   this.$categories = function () {
    return this.$categories$slot;
   };
   this.$categories$ = function (v) {
    this.$categories$slot = v;
    return this;
   };
   this.$init$classComment$ = function (v) {
    this.$classComment$slot = v;
    return this;
   };
   this.$classComment = function () {
    return this.$classComment$slot;
   };
   this.$classComment$ = function (v) {
    this.$classComment$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`SideAST";
     this._$superInit$NewspeakASTs$SideAST = $.$superInit$NewspeakASTs$SideAST;
     this.$superInit$NewspeakASTs$SideAST = dnuCatcher("$superInit$NewspeakASTs$SideAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$variables$categories$ = this._$variables$categories$ = $.$variables$categories$;
     this.$isSideNode = this._$isSideNode = $.$isSideNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$variables$ = this._$init$variables$ = $.$init$variables$;
     this.$variables = this._$variables = $.$variables;
     this.$variables$ = this._$variables$ = $.$variables$;
     this.$init$categories$ = this._$init$categories$ = $.$init$categories$;
     this.$categories = this._$categories = $.$categories;
     this.$categories$ = this._$categories$ = $.$categories$;
     this.$init$classComment$ = this._$init$classComment$ = $.$init$classComment$;
     this.$classComment = this._$classComment = $.$classComment;
     this.$classComment$ = this._$classComment$ = $.$classComment$;
     this.$enclosingObjects$NewspeakASTs$SideAST = enclosingObjects;
     this.$super$NewspeakASTs$SideAST$slot = runtimeSuperclass;
     this["NewspeakASTs`SideAST"] = function () {
      superBasicNew.call(this);
      this.$variables$slot = nil;
      this.$categories$slot = nil;
      this.$classComment$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`SideAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`SideAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`SideAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$SideAST = enclosingObjects;
      this.$super$NewspeakASTs$SideAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$SlotDefAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`SlotDefAST";
   this.name = "NewspeakASTs`SlotDefAST";
   this.header = 1929;
   this.slots = [
    new SM("slotDecl", true, false),
    new SM("initializer", true, false),
    new SM("accessModifier", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`SlotDefAST", true, 1930),
    new MM("instance`initializer", true, 1931),
    new MM("isMutable", false, 1932),
    new MM("name", false, 1933),
    new MM("isSlotDefNode", false, 1934),
    new MM("type", false, 1935),
    new MM("apply:", false, 1936),
    new MM("init`slotDecl:", true, 0),
    new MM("slotDecl", true, 0),
    new MM("slotDecl:", true, 0),
    new MM("init`initializer:", true, 0),
    new MM("initializer", true, 0),
    new MM("initializer:", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("accessModifier:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$SlotDefAST = function () {
    var self = this;
    self.$super$NewspeakASTs$SlotDefAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$SlotDefAST();
    return self;
   };
   this.$isMutable = function () {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$name = function () {
    var self = this;
    return self._$slotDecl().$name();
   };
   this.$isSlotDefNode = function () {
    var self = this;
    return true;
   };
   this.$type = function () {
    var self = this;
    return self._$slotDecl().$type();
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return $visitor.$slotDefNode$(self);
   };
   this.$init$slotDecl$ = function (v) {
    this.$slotDecl$slot = v;
    return this;
   };
   this.$slotDecl = function () {
    return this.$slotDecl$slot;
   };
   this.$slotDecl$ = function (v) {
    this.$slotDecl$slot = v;
    return this;
   };
   this.$init$initializer$ = function (v) {
    this.$initializer$slot = v;
    return this;
   };
   this.$initializer = function () {
    return this.$initializer$slot;
   };
   this.$initializer$ = function (v) {
    this.$initializer$slot = v;
    return this;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`SlotDefAST";
     this._$superInit$NewspeakASTs$SlotDefAST = $.$superInit$NewspeakASTs$SlotDefAST;
     this.$superInit$NewspeakASTs$SlotDefAST = dnuCatcher("$superInit$NewspeakASTs$SlotDefAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isMutable = this._$isMutable = $.$isMutable;
     this.$name = this._$name = $.$name;
     this.$isSlotDefNode = this._$isSlotDefNode = $.$isSlotDefNode;
     this.$type = this._$type = $.$type;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$slotDecl$ = this._$init$slotDecl$ = $.$init$slotDecl$;
     this.$slotDecl = this._$slotDecl = $.$slotDecl;
     this.$slotDecl$ = this._$slotDecl$ = $.$slotDecl$;
     this.$init$initializer$ = this._$init$initializer$ = $.$init$initializer$;
     this.$initializer = this._$initializer = $.$initializer;
     this.$initializer$ = this._$initializer$ = $.$initializer$;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
     this.$enclosingObjects$NewspeakASTs$SlotDefAST = enclosingObjects;
     this.$super$NewspeakASTs$SlotDefAST$slot = runtimeSuperclass;
     this["NewspeakASTs`SlotDefAST"] = function () {
      superBasicNew.call(this);
      this.$slotDecl$slot = nil;
      this.$initializer$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`SlotDefAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`SlotDefAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`SlotDefAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$SlotDefAST = enclosingObjects;
      this.$super$NewspeakASTs$SlotDefAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$StringAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`StringAST";
   this.name = "NewspeakASTs`StringAST";
   this.header = 1937;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`StringAST", true, 1938),
    new MM("instance`initializer", true, 1939),
    new MM("isStringNode", false, 1940),
    new MM("apply:", false, 1941)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$StringAST = function () {
    var self = this;
    self.$super$NewspeakASTs$StringAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$StringAST();
    return self;
   };
   this.$isStringNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$stringNode$(self);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`StringAST";
     this._$superInit$NewspeakASTs$StringAST = $.$superInit$NewspeakASTs$StringAST;
     this.$superInit$NewspeakASTs$StringAST = dnuCatcher("$superInit$NewspeakASTs$StringAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isStringNode = this._$isStringNode = $.$isStringNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$enclosingObjects$NewspeakASTs$StringAST = enclosingObjects;
     this.$super$NewspeakASTs$StringAST$slot = runtimeSuperclass;
     this["NewspeakASTs`StringAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`StringAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`StringAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`StringAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$StringAST = enclosingObjects;
      this.$super$NewspeakASTs$StringAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$SymbolAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`SymbolAST";
   this.name = "NewspeakASTs`SymbolAST";
   this.header = 1942;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`SymbolAST", true, 1943),
    new MM("instance`initializer", true, 1944),
    new MM("isSymbolNode", false, 1945),
    new MM("apply:", false, 1946)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$SymbolAST = function () {
    var self = this;
    self.$super$NewspeakASTs$SymbolAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$SymbolAST();
    return self;
   };
   this.$isSymbolNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$symbolNode$(self);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`SymbolAST";
     this._$superInit$NewspeakASTs$SymbolAST = $.$superInit$NewspeakASTs$SymbolAST;
     this.$superInit$NewspeakASTs$SymbolAST = dnuCatcher("$superInit$NewspeakASTs$SymbolAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isSymbolNode = this._$isSymbolNode = $.$isSymbolNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$enclosingObjects$NewspeakASTs$SymbolAST = enclosingObjects;
     this.$super$NewspeakASTs$SymbolAST$slot = runtimeSuperclass;
     this["NewspeakASTs`SymbolAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`SymbolAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`SymbolAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`SymbolAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$SymbolAST = enclosingObjects;
      this.$super$NewspeakASTs$SymbolAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$TupleAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`TupleAST";
   this.name = "NewspeakASTs`TupleAST";
   this.header = 1947;
   this.slots = [new SM("elements", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`TupleAST", true, 1948),
    new MM("instance`initializer", true, 1949),
    new MM("isExpressionNode", false, 1950),
    new MM("isArrayNode", false, 1951),
    new MM("isTupleNode", false, 1952),
    new MM("apply:", false, 1953),
    new MM("init`elements:", true, 0),
    new MM("elements", true, 0),
    new MM("elements:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$TupleAST = function () {
    var self = this;
    self.$super$NewspeakASTs$TupleAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$TupleAST();
    return self;
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$isArrayNode = function () {
    var self = this;
    return false;
   };
   this.$isTupleNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$tupleNode$(self);
   };
   this.$init$elements$ = function (v) {
    this.$elements$slot = v;
    return this;
   };
   this.$elements = function () {
    return this.$elements$slot;
   };
   this.$elements$ = function (v) {
    this.$elements$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`TupleAST";
     this._$superInit$NewspeakASTs$TupleAST = $.$superInit$NewspeakASTs$TupleAST;
     this.$superInit$NewspeakASTs$TupleAST = dnuCatcher("$superInit$NewspeakASTs$TupleAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$isArrayNode = this._$isArrayNode = $.$isArrayNode;
     this.$isTupleNode = this._$isTupleNode = $.$isTupleNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$elements$ = this._$init$elements$ = $.$init$elements$;
     this.$elements = this._$elements = $.$elements;
     this.$elements$ = this._$elements$ = $.$elements$;
     this.$enclosingObjects$NewspeakASTs$TupleAST = enclosingObjects;
     this.$super$NewspeakASTs$TupleAST$slot = runtimeSuperclass;
     this["NewspeakASTs`TupleAST"] = function () {
      superBasicNew.call(this);
      this.$elements$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`TupleAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`TupleAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`TupleAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$TupleAST = enclosingObjects;
      this.$super$NewspeakASTs$TupleAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$TypeIdAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`TypeIdAST";
   this.name = "NewspeakASTs`TypeIdAST";
   this.header = 1954;
   this.slots = [new SM("name", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`TypeIdAST", true, 1955),
    new MM("instance`initializer", true, 1956),
    new MM("isTypeNode", false, 1957),
    new MM("apply:", false, 1958),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$TypeIdAST = function () {
    var self = this;
    self.$super$NewspeakASTs$TypeIdAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$TypeIdAST();
    return self;
   };
   this.$isTypeNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($visitor) {
    var self = this;
    return $visitor.$typeIdNode$(self);
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`TypeIdAST";
     this._$superInit$NewspeakASTs$TypeIdAST = $.$superInit$NewspeakASTs$TypeIdAST;
     this.$superInit$NewspeakASTs$TypeIdAST = dnuCatcher("$superInit$NewspeakASTs$TypeIdAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isTypeNode = this._$isTypeNode = $.$isTypeNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$enclosingObjects$NewspeakASTs$TypeIdAST = enclosingObjects;
     this.$super$NewspeakASTs$TypeIdAST$slot = runtimeSuperclass;
     this["NewspeakASTs`TypeIdAST"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`TypeIdAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`TypeIdAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`TypeIdAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$TypeIdAST = enclosingObjects;
      this.$super$NewspeakASTs$TypeIdAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$UnaryTypeOpAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`UnaryTypeOpAST";
   this.name = "NewspeakASTs`UnaryTypeOpAST";
   this.header = 1959;
   this.slots = [
    new SM("operand", true, false),
    new SM("operator", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`UnaryTypeOpAST", true, 1960),
    new MM("instance`initializer", true, 1961),
    new MM("apply:", false, 1962),
    new MM("init`operand:", true, 0),
    new MM("operand", true, 0),
    new MM("operand:", true, 0),
    new MM("init`operator:", true, 0),
    new MM("operator", true, 0),
    new MM("operator:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$UnaryTypeOpAST = function () {
    var self = this;
    self.$super$NewspeakASTs$UnaryTypeOpAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$UnaryTypeOpAST();
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$unaryTypeOpNode$(self);
   };
   this.$init$operand$ = function (v) {
    this.$operand$slot = v;
    return this;
   };
   this.$operand = function () {
    return this.$operand$slot;
   };
   this.$operand$ = function (v) {
    this.$operand$slot = v;
    return this;
   };
   this.$init$operator$ = function (v) {
    this.$operator$slot = v;
    return this;
   };
   this.$operator = function () {
    return this.$operator$slot;
   };
   this.$operator$ = function (v) {
    this.$operator$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`UnaryTypeOpAST";
     this._$superInit$NewspeakASTs$UnaryTypeOpAST = $.$superInit$NewspeakASTs$UnaryTypeOpAST;
     this.$superInit$NewspeakASTs$UnaryTypeOpAST = dnuCatcher("$superInit$NewspeakASTs$UnaryTypeOpAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$operand$ = this._$init$operand$ = $.$init$operand$;
     this.$operand = this._$operand = $.$operand;
     this.$operand$ = this._$operand$ = $.$operand$;
     this.$init$operator$ = this._$init$operator$ = $.$init$operator$;
     this.$operator = this._$operator = $.$operator;
     this.$operator$ = this._$operator$ = $.$operator$;
     this.$enclosingObjects$NewspeakASTs$UnaryTypeOpAST = enclosingObjects;
     this.$super$NewspeakASTs$UnaryTypeOpAST$slot = runtimeSuperclass;
     this["NewspeakASTs`UnaryTypeOpAST"] = function () {
      superBasicNew.call(this);
      this.$operand$slot = nil;
      this.$operator$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`UnaryTypeOpAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`UnaryTypeOpAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`UnaryTypeOpAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$UnaryTypeOpAST = enclosingObjects;
      this.$super$NewspeakASTs$UnaryTypeOpAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$VarDeclAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`VarDeclAST";
   this.name = "NewspeakASTs`VarDeclAST";
   this.header = 1963;
   this.slots = [
    new SM("name", false, false),
    new SM("type", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakASTs`VarDeclAST", true, 1964),
    new MM("instance`initializer", true, 1965),
    new MM("isTemporaryAST", false, 1966),
    new MM("concreteEnd", false, 1967),
    new MM("isVarDeclNode", false, 1968),
    new MM("apply:", false, 1969),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`type:", true, 0),
    new MM("type", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$VarDeclAST = function ($aName, $aType) {
    var self = this;
    self.$super$NewspeakASTs$VarDeclAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($aName, $aType) {
    var self = this;
    self._$superInit$NewspeakASTs$VarDeclAST($aName, $aType);
    self._$init$name$($aName);
    self._$init$type$($aType);
    return self;
   };
   this.$isTemporaryAST = function () {
    var self = this;
    return false;
   };
   this.$concreteEnd = function () {
    var self = this;
    if (!self._$type().$isNil()) {
     return self._$type().$concreteEnd();
    } else {
     nil;
    };
    return self.$super$NewspeakASTs$VarDeclAST$slot._$concreteEnd.call(self);
   };
   this.$isVarDeclNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$varDeclNode$(self);
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$type$ = function (v) {
    this.$type$slot = v;
    return this;
   };
   this.$type = function () {
    return this.$type$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`VarDeclAST";
     this._$superInit$NewspeakASTs$VarDeclAST = $.$superInit$NewspeakASTs$VarDeclAST;
     this.$superInit$NewspeakASTs$VarDeclAST = dnuCatcher("$superInit$NewspeakASTs$VarDeclAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isTemporaryAST = this._$isTemporaryAST = $.$isTemporaryAST;
     this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
     this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$type$ = this._$init$type$ = $.$init$type$;
     this.$type = this._$type = $.$type;
     this.$enclosingObjects$NewspeakASTs$VarDeclAST = enclosingObjects;
     this.$super$NewspeakASTs$VarDeclAST$slot = runtimeSuperclass;
     this["NewspeakASTs`VarDeclAST"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$type$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`VarDeclAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`VarDeclAST";
    this.slots = [];
    this.methods = [new MM("name:type:", true, 0)];
    this.nestedClasses = [];
    this.$name$type$ = function ($aName, $aType) {
     return (new this.nonMeta.basicNew()).$instance$initializer($aName, $aType);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`VarDeclAST";
      this.$name$type$ = this._$name$type$ = $.$name$type$;
      this.$enclosingObjects$NewspeakASTs$VarDeclAST = enclosingObjects;
      this.$super$NewspeakASTs$VarDeclAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$VariableAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`VariableAST";
   this.name = "NewspeakASTs`VariableAST";
   this.header = 1970;
   this.slots = [new SM("name", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`VariableAST", true, 1971),
    new MM("instance`initializer", true, 1972),
    new MM("isExpressionNode", false, 1973),
    new MM("isVariableNode", false, 1974),
    new MM("apply:", false, 1975),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("name:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$VariableAST = function () {
    var self = this;
    self.$super$NewspeakASTs$VariableAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$VariableAST();
    return self;
   };
   this.$isExpressionNode = function () {
    var self = this;
    return true;
   };
   this.$isVariableNode = function () {
    var self = this;
    return true;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$variableNode$(self);
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`VariableAST";
     this._$superInit$NewspeakASTs$VariableAST = $.$superInit$NewspeakASTs$VariableAST;
     this.$superInit$NewspeakASTs$VariableAST = dnuCatcher("$superInit$NewspeakASTs$VariableAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
     this.$isVariableNode = this._$isVariableNode = $.$isVariableNode;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$enclosingObjects$NewspeakASTs$VariableAST = enclosingObjects;
     this.$super$NewspeakASTs$VariableAST$slot = runtimeSuperclass;
     this["NewspeakASTs`VariableAST"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`VariableAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`VariableAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`VariableAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$VariableAST = enclosingObjects;
      this.$super$NewspeakASTs$VariableAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$VariablePatternAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`VariablePatternAST";
   this.name = "NewspeakASTs`VariablePatternAST";
   this.header = 1976;
   this.slots = [new SM("variableName", true, false)];
   this.methods = [
    new MM("superInit`NewspeakASTs`VariablePatternAST", true, 1977),
    new MM("instance`initializer", true, 1978),
    new MM("apply:", false, 1979),
    new MM("isVariablePatternNode", false, 1980),
    new MM("init`variableName:", true, 0),
    new MM("variableName", true, 0),
    new MM("variableName:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$VariablePatternAST = function () {
    var self = this;
    self.$super$NewspeakASTs$VariablePatternAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$VariablePatternAST();
    return self;
   };
   this.$apply$ = function ($aTool) {
    var self = this;
    return $aTool.$variablePatternNode$(self);
   };
   this.$isVariablePatternNode = function () {
    var self = this;
    return true;
   };
   this.$init$variableName$ = function (v) {
    this.$variableName$slot = v;
    return this;
   };
   this.$variableName = function () {
    return this.$variableName$slot;
   };
   this.$variableName$ = function (v) {
    this.$variableName$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`VariablePatternAST";
     this._$superInit$NewspeakASTs$VariablePatternAST = $.$superInit$NewspeakASTs$VariablePatternAST;
     this.$superInit$NewspeakASTs$VariablePatternAST = dnuCatcher("$superInit$NewspeakASTs$VariablePatternAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isVariablePatternNode = this._$isVariablePatternNode = $.$isVariablePatternNode;
     this._$init$variableName$ = $.$init$variableName$;
     this.$init$variableName$ = dnuCatcher("$init$variableName$");
     this._$variableName = $.$variableName;
     this.$variableName = dnuCatcher("$variableName");
     this._$variableName$ = $.$variableName$;
     this.$variableName$ = dnuCatcher("$variableName$");
     this.$enclosingObjects$NewspeakASTs$VariablePatternAST = enclosingObjects;
     this.$super$NewspeakASTs$VariablePatternAST$slot = runtimeSuperclass;
     this["NewspeakASTs`VariablePatternAST"] = function () {
      superBasicNew.call(this);
      this.$variableName$slot = nil;
     };
     this.basicNew = this["NewspeakASTs`VariablePatternAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`VariablePatternAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`VariablePatternAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$VariablePatternAST = enclosingObjects;
      this.$super$NewspeakASTs$VariablePatternAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$WildcardPatternAST = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakASTs`WildcardPatternAST";
   this.name = "NewspeakASTs`WildcardPatternAST";
   this.header = 1981;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakASTs`WildcardPatternAST", true, 1982),
    new MM("instance`initializer", true, 1983),
    new MM("apply:", false, 1984),
    new MM("isWildcardPatternNode", false, 1985)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakASTs$WildcardPatternAST = function () {
    var self = this;
    self.$super$NewspeakASTs$WildcardPatternAST$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakASTs$WildcardPatternAST();
    return self;
   };
   this.$apply$ = function ($tool) {
    var self = this;
    return $tool.$wildcardPatternNode$(self);
   };
   this.$isWildcardPatternNode = function () {
    var self = this;
    return true;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakASTs`WildcardPatternAST";
     this._$superInit$NewspeakASTs$WildcardPatternAST = $.$superInit$NewspeakASTs$WildcardPatternAST;
     this.$superInit$NewspeakASTs$WildcardPatternAST = dnuCatcher("$superInit$NewspeakASTs$WildcardPatternAST");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$ = this._$apply$ = $.$apply$;
     this.$isWildcardPatternNode = this._$isWildcardPatternNode = $.$isWildcardPatternNode;
     this.$enclosingObjects$NewspeakASTs$WildcardPatternAST = enclosingObjects;
     this.$super$NewspeakASTs$WildcardPatternAST$slot = runtimeSuperclass;
     this["NewspeakASTs`WildcardPatternAST"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakASTs`WildcardPatternAST"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakASTs`WildcardPatternAST";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakASTs`WildcardPatternAST";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakASTs$WildcardPatternAST = enclosingObjects;
      this.$super$NewspeakASTs$WildcardPatternAST = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakASTs$AST.enclosingMixin = this;
  this.$NewspeakASTs$ASTCopier.enclosingMixin = this;
  this.$NewspeakASTs$ASTTool.enclosingMixin = this;
  this.$NewspeakASTs$ASTTraverser.enclosingMixin = this;
  this.$NewspeakASTs$AssignmentAST.enclosingMixin = this;
  this.$NewspeakASTs$BinaryTypeOpAST.enclosingMixin = this;
  this.$NewspeakASTs$BlockAST.enclosingMixin = this;
  this.$NewspeakASTs$BlockTypeAST.enclosingMixin = this;
  this.$NewspeakASTs$CascadedSendAST.enclosingMixin = this;
  this.$NewspeakASTs$CategoryAST.enclosingMixin = this;
  this.$NewspeakASTs$CharAST.enclosingMixin = this;
  this.$NewspeakASTs$ClassBodyAST.enclosingMixin = this;
  this.$NewspeakASTs$ClassDeclarationAST.enclosingMixin = this;
  this.$NewspeakASTs$ClassHeaderAST.enclosingMixin = this;
  this.$NewspeakASTs$ClassPrefixAST.enclosingMixin = this;
  this.$NewspeakASTs$CodeBodyAST.enclosingMixin = this;
  this.$NewspeakASTs$ImmutableSlotDefAST.enclosingMixin = this;
  this.$NewspeakASTs$InitializerAST.enclosingMixin = this;
  this.$NewspeakASTs$KeywordPatternAST.enclosingMixin = this;
  this.$NewspeakASTs$KeywordPatternPairAST.enclosingMixin = this;
  this.$NewspeakASTs$LiteralAST.enclosingMixin = this;
  this.$NewspeakASTs$LiteralPatternAST.enclosingMixin = this;
  this.$NewspeakASTs$MessageAST.enclosingMixin = this;
  this.$NewspeakASTs$MessagePatternAST.enclosingMixin = this;
  this.$NewspeakASTs$MethodAST.enclosingMixin = this;
  this.$NewspeakASTs$MixinApplicationAST.enclosingMixin = this;
  this.$NewspeakASTs$MixinApplicationClassAST.enclosingMixin = this;
  this.$NewspeakASTs$MutableSlotDefAST.enclosingMixin = this;
  this.$NewspeakASTs$NSSideAST.enclosingMixin = this;
  this.$NewspeakASTs$NormalSendAST.enclosingMixin = this;
  this.$NewspeakASTs$NumberAST.enclosingMixin = this;
  this.$NewspeakASTs$ParameterizedTypeAST.enclosingMixin = this;
  this.$NewspeakASTs$PatternAST.enclosingMixin = this;
  this.$NewspeakASTs$ReturnStatAST.enclosingMixin = this;
  this.$NewspeakASTs$SendAST.enclosingMixin = this;
  this.$NewspeakASTs$SetterSendAST.enclosingMixin = this;
  this.$NewspeakASTs$SideAST.enclosingMixin = this;
  this.$NewspeakASTs$SlotDefAST.enclosingMixin = this;
  this.$NewspeakASTs$StringAST.enclosingMixin = this;
  this.$NewspeakASTs$SymbolAST.enclosingMixin = this;
  this.$NewspeakASTs$TupleAST.enclosingMixin = this;
  this.$NewspeakASTs$TypeIdAST.enclosingMixin = this;
  this.$NewspeakASTs$UnaryTypeOpAST.enclosingMixin = this;
  this.$NewspeakASTs$VarDeclAST.enclosingMixin = this;
  this.$NewspeakASTs$VariableAST.enclosingMixin = this;
  this.$NewspeakASTs$VariablePatternAST.enclosingMixin = this;
  this.$NewspeakASTs$WildcardPatternAST.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for NewspeakASTs";
    this._$superInit$NewspeakASTs = $.$superInit$NewspeakASTs;
    this.$superInit$NewspeakASTs = dnuCatcher("$superInit$NewspeakASTs");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$AST = this._$AST = $.$AST;
    this.$ASTCopier = this._$ASTCopier = $.$ASTCopier;
    this.$ASTTool = this._$ASTTool = $.$ASTTool;
    this.$ASTTraverser = this._$ASTTraverser = $.$ASTTraverser;
    this.$AssignmentAST = this._$AssignmentAST = $.$AssignmentAST;
    this.$BinaryTypeOpAST = this._$BinaryTypeOpAST = $.$BinaryTypeOpAST;
    this.$BlockAST = this._$BlockAST = $.$BlockAST;
    this.$BlockTypeAST = this._$BlockTypeAST = $.$BlockTypeAST;
    this.$CascadedSendAST = this._$CascadedSendAST = $.$CascadedSendAST;
    this.$CategoryAST = this._$CategoryAST = $.$CategoryAST;
    this.$CharAST = this._$CharAST = $.$CharAST;
    this.$ClassBodyAST = this._$ClassBodyAST = $.$ClassBodyAST;
    this.$ClassDeclarationAST = this._$ClassDeclarationAST = $.$ClassDeclarationAST;
    this.$ClassHeaderAST = this._$ClassHeaderAST = $.$ClassHeaderAST;
    this.$ClassPrefixAST = this._$ClassPrefixAST = $.$ClassPrefixAST;
    this.$CodeBodyAST = this._$CodeBodyAST = $.$CodeBodyAST;
    this.$ImmutableSlotDefAST = this._$ImmutableSlotDefAST = $.$ImmutableSlotDefAST;
    this.$InitializerAST = this._$InitializerAST = $.$InitializerAST;
    this.$KeywordPatternAST = this._$KeywordPatternAST = $.$KeywordPatternAST;
    this.$KeywordPatternPairAST = this._$KeywordPatternPairAST = $.$KeywordPatternPairAST;
    this.$LiteralAST = this._$LiteralAST = $.$LiteralAST;
    this.$LiteralPatternAST = this._$LiteralPatternAST = $.$LiteralPatternAST;
    this.$MessageAST = this._$MessageAST = $.$MessageAST;
    this.$MessagePatternAST = this._$MessagePatternAST = $.$MessagePatternAST;
    this.$MethodAST = this._$MethodAST = $.$MethodAST;
    this.$MixinApplicationAST = this._$MixinApplicationAST = $.$MixinApplicationAST;
    this.$MixinApplicationClassAST = this._$MixinApplicationClassAST = $.$MixinApplicationClassAST;
    this.$MutableSlotDefAST = this._$MutableSlotDefAST = $.$MutableSlotDefAST;
    this.$NSSideAST = this._$NSSideAST = $.$NSSideAST;
    this.$NormalSendAST = this._$NormalSendAST = $.$NormalSendAST;
    this.$NumberAST = this._$NumberAST = $.$NumberAST;
    this.$ParameterizedTypeAST = this._$ParameterizedTypeAST = $.$ParameterizedTypeAST;
    this.$PatternAST = this._$PatternAST = $.$PatternAST;
    this.$ReturnStatAST = this._$ReturnStatAST = $.$ReturnStatAST;
    this.$SendAST = this._$SendAST = $.$SendAST;
    this.$SetterSendAST = this._$SetterSendAST = $.$SetterSendAST;
    this.$SideAST = this._$SideAST = $.$SideAST;
    this.$SlotDefAST = this._$SlotDefAST = $.$SlotDefAST;
    this.$StringAST = this._$StringAST = $.$StringAST;
    this.$SymbolAST = this._$SymbolAST = $.$SymbolAST;
    this.$TupleAST = this._$TupleAST = $.$TupleAST;
    this.$TypeIdAST = this._$TypeIdAST = $.$TypeIdAST;
    this.$UnaryTypeOpAST = this._$UnaryTypeOpAST = $.$UnaryTypeOpAST;
    this.$VarDeclAST = this._$VarDeclAST = $.$VarDeclAST;
    this.$VariableAST = this._$VariableAST = $.$VariableAST;
    this.$VariablePatternAST = this._$VariablePatternAST = $.$VariablePatternAST;
    this.$WildcardPatternAST = this._$WildcardPatternAST = $.$WildcardPatternAST;
    this.$init$NewspeakASTs$AST$ = this._$init$NewspeakASTs$AST$ = $.$init$NewspeakASTs$AST$;
    this.$NewspeakASTs$AST = this._$NewspeakASTs$AST = $.$NewspeakASTs$AST;
    this.$NewspeakASTs$AST$ = this._$NewspeakASTs$AST$ = $.$NewspeakASTs$AST$;
    this.$init$NewspeakASTs$ASTCopier$ = this._$init$NewspeakASTs$ASTCopier$ = $.$init$NewspeakASTs$ASTCopier$;
    this.$NewspeakASTs$ASTCopier = this._$NewspeakASTs$ASTCopier = $.$NewspeakASTs$ASTCopier;
    this.$NewspeakASTs$ASTCopier$ = this._$NewspeakASTs$ASTCopier$ = $.$NewspeakASTs$ASTCopier$;
    this.$init$NewspeakASTs$ASTTool$ = this._$init$NewspeakASTs$ASTTool$ = $.$init$NewspeakASTs$ASTTool$;
    this.$NewspeakASTs$ASTTool = this._$NewspeakASTs$ASTTool = $.$NewspeakASTs$ASTTool;
    this.$NewspeakASTs$ASTTool$ = this._$NewspeakASTs$ASTTool$ = $.$NewspeakASTs$ASTTool$;
    this.$init$NewspeakASTs$ASTTraverser$ = this._$init$NewspeakASTs$ASTTraverser$ = $.$init$NewspeakASTs$ASTTraverser$;
    this.$NewspeakASTs$ASTTraverser = this._$NewspeakASTs$ASTTraverser = $.$NewspeakASTs$ASTTraverser;
    this.$NewspeakASTs$ASTTraverser$ = this._$NewspeakASTs$ASTTraverser$ = $.$NewspeakASTs$ASTTraverser$;
    this.$init$NewspeakASTs$AssignmentAST$ = this._$init$NewspeakASTs$AssignmentAST$ = $.$init$NewspeakASTs$AssignmentAST$;
    this.$NewspeakASTs$AssignmentAST = this._$NewspeakASTs$AssignmentAST = $.$NewspeakASTs$AssignmentAST;
    this.$NewspeakASTs$AssignmentAST$ = this._$NewspeakASTs$AssignmentAST$ = $.$NewspeakASTs$AssignmentAST$;
    this.$init$NewspeakASTs$BinaryTypeOpAST$ = this._$init$NewspeakASTs$BinaryTypeOpAST$ = $.$init$NewspeakASTs$BinaryTypeOpAST$;
    this.$NewspeakASTs$BinaryTypeOpAST = this._$NewspeakASTs$BinaryTypeOpAST = $.$NewspeakASTs$BinaryTypeOpAST;
    this.$NewspeakASTs$BinaryTypeOpAST$ = this._$NewspeakASTs$BinaryTypeOpAST$ = $.$NewspeakASTs$BinaryTypeOpAST$;
    this.$init$NewspeakASTs$BlockAST$ = this._$init$NewspeakASTs$BlockAST$ = $.$init$NewspeakASTs$BlockAST$;
    this.$NewspeakASTs$BlockAST = this._$NewspeakASTs$BlockAST = $.$NewspeakASTs$BlockAST;
    this.$NewspeakASTs$BlockAST$ = this._$NewspeakASTs$BlockAST$ = $.$NewspeakASTs$BlockAST$;
    this.$init$NewspeakASTs$BlockTypeAST$ = this._$init$NewspeakASTs$BlockTypeAST$ = $.$init$NewspeakASTs$BlockTypeAST$;
    this.$NewspeakASTs$BlockTypeAST = this._$NewspeakASTs$BlockTypeAST = $.$NewspeakASTs$BlockTypeAST;
    this.$NewspeakASTs$BlockTypeAST$ = this._$NewspeakASTs$BlockTypeAST$ = $.$NewspeakASTs$BlockTypeAST$;
    this.$init$NewspeakASTs$CascadedSendAST$ = this._$init$NewspeakASTs$CascadedSendAST$ = $.$init$NewspeakASTs$CascadedSendAST$;
    this.$NewspeakASTs$CascadedSendAST = this._$NewspeakASTs$CascadedSendAST = $.$NewspeakASTs$CascadedSendAST;
    this.$NewspeakASTs$CascadedSendAST$ = this._$NewspeakASTs$CascadedSendAST$ = $.$NewspeakASTs$CascadedSendAST$;
    this.$init$NewspeakASTs$CategoryAST$ = this._$init$NewspeakASTs$CategoryAST$ = $.$init$NewspeakASTs$CategoryAST$;
    this.$NewspeakASTs$CategoryAST = this._$NewspeakASTs$CategoryAST = $.$NewspeakASTs$CategoryAST;
    this.$NewspeakASTs$CategoryAST$ = this._$NewspeakASTs$CategoryAST$ = $.$NewspeakASTs$CategoryAST$;
    this.$init$NewspeakASTs$CharAST$ = this._$init$NewspeakASTs$CharAST$ = $.$init$NewspeakASTs$CharAST$;
    this.$NewspeakASTs$CharAST = this._$NewspeakASTs$CharAST = $.$NewspeakASTs$CharAST;
    this.$NewspeakASTs$CharAST$ = this._$NewspeakASTs$CharAST$ = $.$NewspeakASTs$CharAST$;
    this.$init$NewspeakASTs$ClassBodyAST$ = this._$init$NewspeakASTs$ClassBodyAST$ = $.$init$NewspeakASTs$ClassBodyAST$;
    this.$NewspeakASTs$ClassBodyAST = this._$NewspeakASTs$ClassBodyAST = $.$NewspeakASTs$ClassBodyAST;
    this.$NewspeakASTs$ClassBodyAST$ = this._$NewspeakASTs$ClassBodyAST$ = $.$NewspeakASTs$ClassBodyAST$;
    this.$init$NewspeakASTs$ClassDeclarationAST$ = this._$init$NewspeakASTs$ClassDeclarationAST$ = $.$init$NewspeakASTs$ClassDeclarationAST$;
    this.$NewspeakASTs$ClassDeclarationAST = this._$NewspeakASTs$ClassDeclarationAST = $.$NewspeakASTs$ClassDeclarationAST;
    this.$NewspeakASTs$ClassDeclarationAST$ = this._$NewspeakASTs$ClassDeclarationAST$ = $.$NewspeakASTs$ClassDeclarationAST$;
    this.$init$NewspeakASTs$ClassHeaderAST$ = this._$init$NewspeakASTs$ClassHeaderAST$ = $.$init$NewspeakASTs$ClassHeaderAST$;
    this.$NewspeakASTs$ClassHeaderAST = this._$NewspeakASTs$ClassHeaderAST = $.$NewspeakASTs$ClassHeaderAST;
    this.$NewspeakASTs$ClassHeaderAST$ = this._$NewspeakASTs$ClassHeaderAST$ = $.$NewspeakASTs$ClassHeaderAST$;
    this.$init$NewspeakASTs$ClassPrefixAST$ = this._$init$NewspeakASTs$ClassPrefixAST$ = $.$init$NewspeakASTs$ClassPrefixAST$;
    this.$NewspeakASTs$ClassPrefixAST = this._$NewspeakASTs$ClassPrefixAST = $.$NewspeakASTs$ClassPrefixAST;
    this.$NewspeakASTs$ClassPrefixAST$ = this._$NewspeakASTs$ClassPrefixAST$ = $.$NewspeakASTs$ClassPrefixAST$;
    this.$init$NewspeakASTs$CodeBodyAST$ = this._$init$NewspeakASTs$CodeBodyAST$ = $.$init$NewspeakASTs$CodeBodyAST$;
    this.$NewspeakASTs$CodeBodyAST = this._$NewspeakASTs$CodeBodyAST = $.$NewspeakASTs$CodeBodyAST;
    this.$NewspeakASTs$CodeBodyAST$ = this._$NewspeakASTs$CodeBodyAST$ = $.$NewspeakASTs$CodeBodyAST$;
    this.$init$NewspeakASTs$ImmutableSlotDefAST$ = this._$init$NewspeakASTs$ImmutableSlotDefAST$ = $.$init$NewspeakASTs$ImmutableSlotDefAST$;
    this.$NewspeakASTs$ImmutableSlotDefAST = this._$NewspeakASTs$ImmutableSlotDefAST = $.$NewspeakASTs$ImmutableSlotDefAST;
    this.$NewspeakASTs$ImmutableSlotDefAST$ = this._$NewspeakASTs$ImmutableSlotDefAST$ = $.$NewspeakASTs$ImmutableSlotDefAST$;
    this.$init$NewspeakASTs$InitializerAST$ = this._$init$NewspeakASTs$InitializerAST$ = $.$init$NewspeakASTs$InitializerAST$;
    this.$NewspeakASTs$InitializerAST = this._$NewspeakASTs$InitializerAST = $.$NewspeakASTs$InitializerAST;
    this.$NewspeakASTs$InitializerAST$ = this._$NewspeakASTs$InitializerAST$ = $.$NewspeakASTs$InitializerAST$;
    this.$init$NewspeakASTs$KeywordPatternAST$ = this._$init$NewspeakASTs$KeywordPatternAST$ = $.$init$NewspeakASTs$KeywordPatternAST$;
    this.$NewspeakASTs$KeywordPatternAST = this._$NewspeakASTs$KeywordPatternAST = $.$NewspeakASTs$KeywordPatternAST;
    this.$NewspeakASTs$KeywordPatternAST$ = this._$NewspeakASTs$KeywordPatternAST$ = $.$NewspeakASTs$KeywordPatternAST$;
    this.$init$NewspeakASTs$KeywordPatternPairAST$ = this._$init$NewspeakASTs$KeywordPatternPairAST$ = $.$init$NewspeakASTs$KeywordPatternPairAST$;
    this.$NewspeakASTs$KeywordPatternPairAST = this._$NewspeakASTs$KeywordPatternPairAST = $.$NewspeakASTs$KeywordPatternPairAST;
    this.$NewspeakASTs$KeywordPatternPairAST$ = this._$NewspeakASTs$KeywordPatternPairAST$ = $.$NewspeakASTs$KeywordPatternPairAST$;
    this.$init$NewspeakASTs$LiteralAST$ = this._$init$NewspeakASTs$LiteralAST$ = $.$init$NewspeakASTs$LiteralAST$;
    this.$NewspeakASTs$LiteralAST = this._$NewspeakASTs$LiteralAST = $.$NewspeakASTs$LiteralAST;
    this.$NewspeakASTs$LiteralAST$ = this._$NewspeakASTs$LiteralAST$ = $.$NewspeakASTs$LiteralAST$;
    this.$init$NewspeakASTs$LiteralPatternAST$ = this._$init$NewspeakASTs$LiteralPatternAST$ = $.$init$NewspeakASTs$LiteralPatternAST$;
    this.$NewspeakASTs$LiteralPatternAST = this._$NewspeakASTs$LiteralPatternAST = $.$NewspeakASTs$LiteralPatternAST;
    this.$NewspeakASTs$LiteralPatternAST$ = this._$NewspeakASTs$LiteralPatternAST$ = $.$NewspeakASTs$LiteralPatternAST$;
    this.$init$NewspeakASTs$MessageAST$ = this._$init$NewspeakASTs$MessageAST$ = $.$init$NewspeakASTs$MessageAST$;
    this.$NewspeakASTs$MessageAST = this._$NewspeakASTs$MessageAST = $.$NewspeakASTs$MessageAST;
    this.$NewspeakASTs$MessageAST$ = this._$NewspeakASTs$MessageAST$ = $.$NewspeakASTs$MessageAST$;
    this.$init$NewspeakASTs$MessagePatternAST$ = this._$init$NewspeakASTs$MessagePatternAST$ = $.$init$NewspeakASTs$MessagePatternAST$;
    this.$NewspeakASTs$MessagePatternAST = this._$NewspeakASTs$MessagePatternAST = $.$NewspeakASTs$MessagePatternAST;
    this.$NewspeakASTs$MessagePatternAST$ = this._$NewspeakASTs$MessagePatternAST$ = $.$NewspeakASTs$MessagePatternAST$;
    this.$init$NewspeakASTs$MethodAST$ = this._$init$NewspeakASTs$MethodAST$ = $.$init$NewspeakASTs$MethodAST$;
    this.$NewspeakASTs$MethodAST = this._$NewspeakASTs$MethodAST = $.$NewspeakASTs$MethodAST;
    this.$NewspeakASTs$MethodAST$ = this._$NewspeakASTs$MethodAST$ = $.$NewspeakASTs$MethodAST$;
    this.$init$NewspeakASTs$MixinApplicationAST$ = this._$init$NewspeakASTs$MixinApplicationAST$ = $.$init$NewspeakASTs$MixinApplicationAST$;
    this.$NewspeakASTs$MixinApplicationAST = this._$NewspeakASTs$MixinApplicationAST = $.$NewspeakASTs$MixinApplicationAST;
    this.$NewspeakASTs$MixinApplicationAST$ = this._$NewspeakASTs$MixinApplicationAST$ = $.$NewspeakASTs$MixinApplicationAST$;
    this.$init$NewspeakASTs$MixinApplicationClassAST$ = this._$init$NewspeakASTs$MixinApplicationClassAST$ = $.$init$NewspeakASTs$MixinApplicationClassAST$;
    this.$NewspeakASTs$MixinApplicationClassAST = this._$NewspeakASTs$MixinApplicationClassAST = $.$NewspeakASTs$MixinApplicationClassAST;
    this.$NewspeakASTs$MixinApplicationClassAST$ = this._$NewspeakASTs$MixinApplicationClassAST$ = $.$NewspeakASTs$MixinApplicationClassAST$;
    this.$init$NewspeakASTs$MutableSlotDefAST$ = this._$init$NewspeakASTs$MutableSlotDefAST$ = $.$init$NewspeakASTs$MutableSlotDefAST$;
    this.$NewspeakASTs$MutableSlotDefAST = this._$NewspeakASTs$MutableSlotDefAST = $.$NewspeakASTs$MutableSlotDefAST;
    this.$NewspeakASTs$MutableSlotDefAST$ = this._$NewspeakASTs$MutableSlotDefAST$ = $.$NewspeakASTs$MutableSlotDefAST$;
    this.$init$NewspeakASTs$NSSideAST$ = this._$init$NewspeakASTs$NSSideAST$ = $.$init$NewspeakASTs$NSSideAST$;
    this.$NewspeakASTs$NSSideAST = this._$NewspeakASTs$NSSideAST = $.$NewspeakASTs$NSSideAST;
    this.$NewspeakASTs$NSSideAST$ = this._$NewspeakASTs$NSSideAST$ = $.$NewspeakASTs$NSSideAST$;
    this.$init$NewspeakASTs$NormalSendAST$ = this._$init$NewspeakASTs$NormalSendAST$ = $.$init$NewspeakASTs$NormalSendAST$;
    this.$NewspeakASTs$NormalSendAST = this._$NewspeakASTs$NormalSendAST = $.$NewspeakASTs$NormalSendAST;
    this.$NewspeakASTs$NormalSendAST$ = this._$NewspeakASTs$NormalSendAST$ = $.$NewspeakASTs$NormalSendAST$;
    this.$init$NewspeakASTs$NumberAST$ = this._$init$NewspeakASTs$NumberAST$ = $.$init$NewspeakASTs$NumberAST$;
    this.$NewspeakASTs$NumberAST = this._$NewspeakASTs$NumberAST = $.$NewspeakASTs$NumberAST;
    this.$NewspeakASTs$NumberAST$ = this._$NewspeakASTs$NumberAST$ = $.$NewspeakASTs$NumberAST$;
    this.$init$NewspeakASTs$ParameterizedTypeAST$ = this._$init$NewspeakASTs$ParameterizedTypeAST$ = $.$init$NewspeakASTs$ParameterizedTypeAST$;
    this.$NewspeakASTs$ParameterizedTypeAST = this._$NewspeakASTs$ParameterizedTypeAST = $.$NewspeakASTs$ParameterizedTypeAST;
    this.$NewspeakASTs$ParameterizedTypeAST$ = this._$NewspeakASTs$ParameterizedTypeAST$ = $.$NewspeakASTs$ParameterizedTypeAST$;
    this.$init$NewspeakASTs$PatternAST$ = this._$init$NewspeakASTs$PatternAST$ = $.$init$NewspeakASTs$PatternAST$;
    this.$NewspeakASTs$PatternAST = this._$NewspeakASTs$PatternAST = $.$NewspeakASTs$PatternAST;
    this.$NewspeakASTs$PatternAST$ = this._$NewspeakASTs$PatternAST$ = $.$NewspeakASTs$PatternAST$;
    this.$init$NewspeakASTs$ReturnStatAST$ = this._$init$NewspeakASTs$ReturnStatAST$ = $.$init$NewspeakASTs$ReturnStatAST$;
    this.$NewspeakASTs$ReturnStatAST = this._$NewspeakASTs$ReturnStatAST = $.$NewspeakASTs$ReturnStatAST;
    this.$NewspeakASTs$ReturnStatAST$ = this._$NewspeakASTs$ReturnStatAST$ = $.$NewspeakASTs$ReturnStatAST$;
    this.$init$NewspeakASTs$SendAST$ = this._$init$NewspeakASTs$SendAST$ = $.$init$NewspeakASTs$SendAST$;
    this.$NewspeakASTs$SendAST = this._$NewspeakASTs$SendAST = $.$NewspeakASTs$SendAST;
    this.$NewspeakASTs$SendAST$ = this._$NewspeakASTs$SendAST$ = $.$NewspeakASTs$SendAST$;
    this.$init$NewspeakASTs$SetterSendAST$ = this._$init$NewspeakASTs$SetterSendAST$ = $.$init$NewspeakASTs$SetterSendAST$;
    this.$NewspeakASTs$SetterSendAST = this._$NewspeakASTs$SetterSendAST = $.$NewspeakASTs$SetterSendAST;
    this.$NewspeakASTs$SetterSendAST$ = this._$NewspeakASTs$SetterSendAST$ = $.$NewspeakASTs$SetterSendAST$;
    this.$init$NewspeakASTs$SideAST$ = this._$init$NewspeakASTs$SideAST$ = $.$init$NewspeakASTs$SideAST$;
    this.$NewspeakASTs$SideAST = this._$NewspeakASTs$SideAST = $.$NewspeakASTs$SideAST;
    this.$NewspeakASTs$SideAST$ = this._$NewspeakASTs$SideAST$ = $.$NewspeakASTs$SideAST$;
    this.$init$NewspeakASTs$SlotDefAST$ = this._$init$NewspeakASTs$SlotDefAST$ = $.$init$NewspeakASTs$SlotDefAST$;
    this.$NewspeakASTs$SlotDefAST = this._$NewspeakASTs$SlotDefAST = $.$NewspeakASTs$SlotDefAST;
    this.$NewspeakASTs$SlotDefAST$ = this._$NewspeakASTs$SlotDefAST$ = $.$NewspeakASTs$SlotDefAST$;
    this.$init$NewspeakASTs$StringAST$ = this._$init$NewspeakASTs$StringAST$ = $.$init$NewspeakASTs$StringAST$;
    this.$NewspeakASTs$StringAST = this._$NewspeakASTs$StringAST = $.$NewspeakASTs$StringAST;
    this.$NewspeakASTs$StringAST$ = this._$NewspeakASTs$StringAST$ = $.$NewspeakASTs$StringAST$;
    this.$init$NewspeakASTs$SymbolAST$ = this._$init$NewspeakASTs$SymbolAST$ = $.$init$NewspeakASTs$SymbolAST$;
    this.$NewspeakASTs$SymbolAST = this._$NewspeakASTs$SymbolAST = $.$NewspeakASTs$SymbolAST;
    this.$NewspeakASTs$SymbolAST$ = this._$NewspeakASTs$SymbolAST$ = $.$NewspeakASTs$SymbolAST$;
    this.$init$NewspeakASTs$TupleAST$ = this._$init$NewspeakASTs$TupleAST$ = $.$init$NewspeakASTs$TupleAST$;
    this.$NewspeakASTs$TupleAST = this._$NewspeakASTs$TupleAST = $.$NewspeakASTs$TupleAST;
    this.$NewspeakASTs$TupleAST$ = this._$NewspeakASTs$TupleAST$ = $.$NewspeakASTs$TupleAST$;
    this.$init$NewspeakASTs$TypeIdAST$ = this._$init$NewspeakASTs$TypeIdAST$ = $.$init$NewspeakASTs$TypeIdAST$;
    this.$NewspeakASTs$TypeIdAST = this._$NewspeakASTs$TypeIdAST = $.$NewspeakASTs$TypeIdAST;
    this.$NewspeakASTs$TypeIdAST$ = this._$NewspeakASTs$TypeIdAST$ = $.$NewspeakASTs$TypeIdAST$;
    this.$init$NewspeakASTs$UnaryTypeOpAST$ = this._$init$NewspeakASTs$UnaryTypeOpAST$ = $.$init$NewspeakASTs$UnaryTypeOpAST$;
    this.$NewspeakASTs$UnaryTypeOpAST = this._$NewspeakASTs$UnaryTypeOpAST = $.$NewspeakASTs$UnaryTypeOpAST;
    this.$NewspeakASTs$UnaryTypeOpAST$ = this._$NewspeakASTs$UnaryTypeOpAST$ = $.$NewspeakASTs$UnaryTypeOpAST$;
    this.$init$NewspeakASTs$VarDeclAST$ = this._$init$NewspeakASTs$VarDeclAST$ = $.$init$NewspeakASTs$VarDeclAST$;
    this.$NewspeakASTs$VarDeclAST = this._$NewspeakASTs$VarDeclAST = $.$NewspeakASTs$VarDeclAST;
    this.$NewspeakASTs$VarDeclAST$ = this._$NewspeakASTs$VarDeclAST$ = $.$NewspeakASTs$VarDeclAST$;
    this.$init$NewspeakASTs$VariableAST$ = this._$init$NewspeakASTs$VariableAST$ = $.$init$NewspeakASTs$VariableAST$;
    this.$NewspeakASTs$VariableAST = this._$NewspeakASTs$VariableAST = $.$NewspeakASTs$VariableAST;
    this.$NewspeakASTs$VariableAST$ = this._$NewspeakASTs$VariableAST$ = $.$NewspeakASTs$VariableAST$;
    this.$init$NewspeakASTs$VariablePatternAST$ = this._$init$NewspeakASTs$VariablePatternAST$ = $.$init$NewspeakASTs$VariablePatternAST$;
    this.$NewspeakASTs$VariablePatternAST = this._$NewspeakASTs$VariablePatternAST = $.$NewspeakASTs$VariablePatternAST;
    this.$NewspeakASTs$VariablePatternAST$ = this._$NewspeakASTs$VariablePatternAST$ = $.$NewspeakASTs$VariablePatternAST$;
    this.$init$NewspeakASTs$WildcardPatternAST$ = this._$init$NewspeakASTs$WildcardPatternAST$ = $.$init$NewspeakASTs$WildcardPatternAST$;
    this.$NewspeakASTs$WildcardPatternAST = this._$NewspeakASTs$WildcardPatternAST = $.$NewspeakASTs$WildcardPatternAST;
    this.$NewspeakASTs$WildcardPatternAST$ = this._$NewspeakASTs$WildcardPatternAST$ = $.$NewspeakASTs$WildcardPatternAST$;
    this.$enclosingObjects$NewspeakASTs = enclosingObjects;
    this.$super$NewspeakASTs$slot = runtimeSuperclass;
    this.NewspeakASTs = function () {
     superBasicNew.call(this);
     this.$OrderedCollection$slot = nil;
     this.$NewspeakASTs$AST$slot = nil;
     this.$NewspeakASTs$ASTCopier$slot = nil;
     this.$NewspeakASTs$ASTTool$slot = nil;
     this.$NewspeakASTs$ASTTraverser$slot = nil;
     this.$NewspeakASTs$AssignmentAST$slot = nil;
     this.$NewspeakASTs$BinaryTypeOpAST$slot = nil;
     this.$NewspeakASTs$BlockAST$slot = nil;
     this.$NewspeakASTs$BlockTypeAST$slot = nil;
     this.$NewspeakASTs$CascadedSendAST$slot = nil;
     this.$NewspeakASTs$CategoryAST$slot = nil;
     this.$NewspeakASTs$CharAST$slot = nil;
     this.$NewspeakASTs$ClassBodyAST$slot = nil;
     this.$NewspeakASTs$ClassDeclarationAST$slot = nil;
     this.$NewspeakASTs$ClassHeaderAST$slot = nil;
     this.$NewspeakASTs$ClassPrefixAST$slot = nil;
     this.$NewspeakASTs$CodeBodyAST$slot = nil;
     this.$NewspeakASTs$ImmutableSlotDefAST$slot = nil;
     this.$NewspeakASTs$InitializerAST$slot = nil;
     this.$NewspeakASTs$KeywordPatternAST$slot = nil;
     this.$NewspeakASTs$KeywordPatternPairAST$slot = nil;
     this.$NewspeakASTs$LiteralAST$slot = nil;
     this.$NewspeakASTs$LiteralPatternAST$slot = nil;
     this.$NewspeakASTs$MessageAST$slot = nil;
     this.$NewspeakASTs$MessagePatternAST$slot = nil;
     this.$NewspeakASTs$MethodAST$slot = nil;
     this.$NewspeakASTs$MixinApplicationAST$slot = nil;
     this.$NewspeakASTs$MixinApplicationClassAST$slot = nil;
     this.$NewspeakASTs$MutableSlotDefAST$slot = nil;
     this.$NewspeakASTs$NSSideAST$slot = nil;
     this.$NewspeakASTs$NormalSendAST$slot = nil;
     this.$NewspeakASTs$NumberAST$slot = nil;
     this.$NewspeakASTs$ParameterizedTypeAST$slot = nil;
     this.$NewspeakASTs$PatternAST$slot = nil;
     this.$NewspeakASTs$ReturnStatAST$slot = nil;
     this.$NewspeakASTs$SendAST$slot = nil;
     this.$NewspeakASTs$SetterSendAST$slot = nil;
     this.$NewspeakASTs$SideAST$slot = nil;
     this.$NewspeakASTs$SlotDefAST$slot = nil;
     this.$NewspeakASTs$StringAST$slot = nil;
     this.$NewspeakASTs$SymbolAST$slot = nil;
     this.$NewspeakASTs$TupleAST$slot = nil;
     this.$NewspeakASTs$TypeIdAST$slot = nil;
     this.$NewspeakASTs$UnaryTypeOpAST$slot = nil;
     this.$NewspeakASTs$VarDeclAST$slot = nil;
     this.$NewspeakASTs$VariableAST$slot = nil;
     this.$NewspeakASTs$VariablePatternAST$slot = nil;
     this.$NewspeakASTs$WildcardPatternAST$slot = nil;
    };
    this.basicNew = this.NewspeakASTs;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for NewspeakASTs";
   this.slots = [];
   this.methods = [new MM("usingLib:", true, 0)];
   this.nestedClasses = [];
   this.$usingLib$ = function ($platform) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for NewspeakASTs";
     this.$usingLib$ = this._$usingLib$ = $.$usingLib$;
     this.$enclosingObjects$NewspeakASTs = enclosingObjects;
     this.$super$NewspeakASTs = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$NewspeakParsing = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for NewspeakParsing";
  this.name = "NewspeakParsing";
  this.header = 1986;
  this.slots = [
   new SM("OrderedCollection", false, false),
   new SM("TypedGrammar", false, false),
   new SM("ParserError", false, false),
   new SM("ASTModule", false, false),
   new SM("BinaryTypeOpAST", false, false),
   new SM("BlockAST", false, false),
   new SM("BlockTypeAST", false, false),
   new SM("CascadedSendAST", false, false),
   new SM("CategoryAST", false, false),
   new SM("CharAST", false, false),
   new SM("ClassBodyAST", false, false),
   new SM("ClassDeclarationAST", false, false),
   new SM("ClassHeaderAST", false, false),
   new SM("ClassPrefixAST", false, false),
   new SM("CodeBodyAST", false, false),
   new SM("ImmutableSlotDefAST", false, false),
   new SM("InitializerAST", false, false),
   new SM("ParameterizedTypeAST", false, false),
   new SM("MessageAST", false, false),
   new SM("MessagePatternAST", false, false),
   new SM("MethodAST", false, false),
   new SM("MixinApplicationClassAST", false, false),
   new SM("MutableSlotDefAST", false, false),
   new SM("NormalSendAST", false, false),
   new SM("NSSideAST", false, false),
   new SM("NumberAST", false, false),
   new SM("ReturnStatAST", false, false),
   new SM("SetterSendAST", false, false),
   new SM("SideAST", false, false),
   new SM("StringAST", false, false),
   new SM("SymbolAST", false, false),
   new SM("TupleAST", false, false),
   new SM("TypeIdAST", false, false),
   new SM("UnaryTypeOpAST", false, false),
   new SM("VarDeclAST", false, false),
   new SM("VariableAST", false, false),
   new SM("MixinApplicationAST", false, false),
   new SM("KeywordPatternAST", false, false),
   new SM("KeywordPatternPairAST", false, false),
   new SM("WildcardPatternAST", false, false),
   new SM("LiteralPatternAST", false, false),
   new SM("VariablePatternAST", false, false),
   new SM("NewspeakParsing`InternalParser", true, true),
   new SM("NewspeakParsing`Parser", true, true)
  ];
  this.methods = [
   new MM("superInit`NewspeakParsing", true, 1987),
   new MM("instance`initializer", true, 1988),
   new MM("InternalParser", true, 0),
   new MM("Parser", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`TypedGrammar:", true, 0),
   new MM("TypedGrammar", true, 0),
   new MM("init`ParserError:", true, 0),
   new MM("ParserError", true, 0),
   new MM("init`ASTModule:", true, 0),
   new MM("ASTModule", true, 0),
   new MM("init`BinaryTypeOpAST:", true, 0),
   new MM("BinaryTypeOpAST", true, 0),
   new MM("init`BlockAST:", true, 0),
   new MM("BlockAST", true, 0),
   new MM("init`BlockTypeAST:", true, 0),
   new MM("BlockTypeAST", true, 0),
   new MM("init`CascadedSendAST:", true, 0),
   new MM("CascadedSendAST", true, 0),
   new MM("init`CategoryAST:", true, 0),
   new MM("CategoryAST", true, 0),
   new MM("init`CharAST:", true, 0),
   new MM("CharAST", true, 0),
   new MM("init`ClassBodyAST:", true, 0),
   new MM("ClassBodyAST", true, 0),
   new MM("init`ClassDeclarationAST:", true, 0),
   new MM("ClassDeclarationAST", true, 0),
   new MM("init`ClassHeaderAST:", true, 0),
   new MM("ClassHeaderAST", true, 0),
   new MM("init`ClassPrefixAST:", true, 0),
   new MM("ClassPrefixAST", true, 0),
   new MM("init`CodeBodyAST:", true, 0),
   new MM("CodeBodyAST", true, 0),
   new MM("init`ImmutableSlotDefAST:", true, 0),
   new MM("ImmutableSlotDefAST", true, 0),
   new MM("init`InitializerAST:", true, 0),
   new MM("InitializerAST", true, 0),
   new MM("init`ParameterizedTypeAST:", true, 0),
   new MM("ParameterizedTypeAST", true, 0),
   new MM("init`MessageAST:", true, 0),
   new MM("MessageAST", true, 0),
   new MM("init`MessagePatternAST:", true, 0),
   new MM("MessagePatternAST", true, 0),
   new MM("init`MethodAST:", true, 0),
   new MM("MethodAST", true, 0),
   new MM("init`MixinApplicationClassAST:", true, 0),
   new MM("MixinApplicationClassAST", true, 0),
   new MM("init`MutableSlotDefAST:", true, 0),
   new MM("MutableSlotDefAST", true, 0),
   new MM("init`NormalSendAST:", true, 0),
   new MM("NormalSendAST", true, 0),
   new MM("init`NSSideAST:", true, 0),
   new MM("NSSideAST", true, 0),
   new MM("init`NumberAST:", true, 0),
   new MM("NumberAST", true, 0),
   new MM("init`ReturnStatAST:", true, 0),
   new MM("ReturnStatAST", true, 0),
   new MM("init`SetterSendAST:", true, 0),
   new MM("SetterSendAST", true, 0),
   new MM("init`SideAST:", true, 0),
   new MM("SideAST", true, 0),
   new MM("init`StringAST:", true, 0),
   new MM("StringAST", true, 0),
   new MM("init`SymbolAST:", true, 0),
   new MM("SymbolAST", true, 0),
   new MM("init`TupleAST:", true, 0),
   new MM("TupleAST", true, 0),
   new MM("init`TypeIdAST:", true, 0),
   new MM("TypeIdAST", true, 0),
   new MM("init`UnaryTypeOpAST:", true, 0),
   new MM("UnaryTypeOpAST", true, 0),
   new MM("init`VarDeclAST:", true, 0),
   new MM("VarDeclAST", true, 0),
   new MM("init`VariableAST:", true, 0),
   new MM("VariableAST", true, 0),
   new MM("init`MixinApplicationAST:", true, 0),
   new MM("MixinApplicationAST", true, 0),
   new MM("init`KeywordPatternAST:", true, 0),
   new MM("KeywordPatternAST", true, 0),
   new MM("init`KeywordPatternPairAST:", true, 0),
   new MM("KeywordPatternPairAST", true, 0),
   new MM("init`WildcardPatternAST:", true, 0),
   new MM("WildcardPatternAST", true, 0),
   new MM("init`LiteralPatternAST:", true, 0),
   new MM("LiteralPatternAST", true, 0),
   new MM("init`VariablePatternAST:", true, 0),
   new MM("VariablePatternAST", true, 0),
   new MM("init`NewspeakParsing`InternalParser:", true, 0),
   new MM("NewspeakParsing`InternalParser", true, 0),
   new MM("NewspeakParsing`InternalParser:", true, 0),
   new MM("init`NewspeakParsing`Parser:", true, 0),
   new MM("NewspeakParsing`Parser", true, 0),
   new MM("NewspeakParsing`Parser:", true, 0)
  ];
  this.nestedClasses = [
   "NewspeakParsing`InternalParser",
   "NewspeakParsing`Parser"
  ];
  this.applications = [];
  this.$superInit$NewspeakParsing = function ($platform, $grammar, $asts) {
   var self = this;
   self.$super$NewspeakParsing$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform, $grammar, $asts) {
   var self = this;
   self._$superInit$NewspeakParsing($platform, $grammar, $asts);
   self._$init$OrderedCollection$($platform.$collections().$OrderedCollection());
   self._$init$TypedGrammar$($grammar.$TypedNS3Grammar());
   self._$init$ParserError$($grammar.$ParserError());
   self._$init$ASTModule$($asts);
   self._$init$BinaryTypeOpAST$($asts.$BinaryTypeOpAST());
   self._$init$BlockAST$($asts.$BlockAST());
   self._$init$BlockTypeAST$($asts.$BlockTypeAST());
   self._$init$CascadedSendAST$($asts.$CascadedSendAST());
   self._$init$CategoryAST$($asts.$CategoryAST());
   self._$init$CharAST$($asts.$CharAST());
   self._$init$ClassBodyAST$($asts.$ClassBodyAST());
   self._$init$ClassDeclarationAST$($asts.$ClassDeclarationAST());
   self._$init$ClassHeaderAST$($asts.$ClassHeaderAST());
   self._$init$ClassPrefixAST$($asts.$ClassPrefixAST());
   self._$init$CodeBodyAST$($asts.$CodeBodyAST());
   self._$init$ImmutableSlotDefAST$($asts.$ImmutableSlotDefAST());
   self._$init$InitializerAST$($asts.$InitializerAST());
   self._$init$ParameterizedTypeAST$($asts.$ParameterizedTypeAST());
   self._$init$MessageAST$($asts.$MessageAST());
   self._$init$MessagePatternAST$($asts.$MessagePatternAST());
   self._$init$MethodAST$($asts.$MethodAST());
   self._$init$MixinApplicationClassAST$($asts.$MixinApplicationClassAST());
   self._$init$MutableSlotDefAST$($asts.$MutableSlotDefAST());
   self._$init$NormalSendAST$($asts.$NormalSendAST());
   self._$init$NSSideAST$($asts.$NSSideAST());
   self._$init$NumberAST$($asts.$NumberAST());
   self._$init$ReturnStatAST$($asts.$ReturnStatAST());
   self._$init$SetterSendAST$($asts.$SetterSendAST());
   self._$init$SideAST$($asts.$SideAST());
   self._$init$StringAST$($asts.$StringAST());
   self._$init$SymbolAST$($asts.$SymbolAST());
   self._$init$TupleAST$($asts.$TupleAST());
   self._$init$TypeIdAST$($asts.$TypeIdAST());
   self._$init$UnaryTypeOpAST$($asts.$UnaryTypeOpAST());
   self._$init$VarDeclAST$($asts.$VarDeclAST());
   self._$init$VariableAST$($asts.$VariableAST());
   self._$init$MixinApplicationAST$($asts.$MixinApplicationAST());
   self._$init$KeywordPatternAST$($asts.$KeywordPatternAST());
   self._$init$KeywordPatternPairAST$($asts.$KeywordPatternPairAST());
   self._$init$WildcardPatternAST$($asts.$WildcardPatternAST());
   self._$init$LiteralPatternAST$($asts.$LiteralPatternAST());
   self._$init$VariablePatternAST$($asts.$VariablePatternAST());
   return self;
  };
  this.$InternalParser = function () {
   if (nil === this.$NewspeakParsing$InternalParser$slot) {
    var self = this;
    var superclass = self._$Parser();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakParsing);
    var mixin = $.$NewspeakParsing$InternalParser;
    this.$NewspeakParsing$InternalParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakParsing$InternalParser$slot;
  };
  this.$Parser = function () {
   if (nil === this.$NewspeakParsing$Parser$slot) {
    var self = this;
    var superclass = self._$TypedGrammar();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakParsing);
    var mixin = $.$NewspeakParsing$Parser;
    this.$NewspeakParsing$Parser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakParsing$Parser$slot;
  };
  this.$init$OrderedCollection$ = function (v) {
   this.$OrderedCollection$slot = v;
   return this;
  };
  this.$OrderedCollection = function () {
   return this.$OrderedCollection$slot;
  };
  this.$init$TypedGrammar$ = function (v) {
   this.$TypedGrammar$slot = v;
   return this;
  };
  this.$TypedGrammar = function () {
   return this.$TypedGrammar$slot;
  };
  this.$init$ParserError$ = function (v) {
   this.$ParserError$slot = v;
   return this;
  };
  this.$ParserError = function () {
   return this.$ParserError$slot;
  };
  this.$init$ASTModule$ = function (v) {
   this.$ASTModule$slot = v;
   return this;
  };
  this.$ASTModule = function () {
   return this.$ASTModule$slot;
  };
  this.$init$BinaryTypeOpAST$ = function (v) {
   this.$BinaryTypeOpAST$slot = v;
   return this;
  };
  this.$BinaryTypeOpAST = function () {
   return this.$BinaryTypeOpAST$slot;
  };
  this.$init$BlockAST$ = function (v) {
   this.$BlockAST$slot = v;
   return this;
  };
  this.$BlockAST = function () {
   return this.$BlockAST$slot;
  };
  this.$init$BlockTypeAST$ = function (v) {
   this.$BlockTypeAST$slot = v;
   return this;
  };
  this.$BlockTypeAST = function () {
   return this.$BlockTypeAST$slot;
  };
  this.$init$CascadedSendAST$ = function (v) {
   this.$CascadedSendAST$slot = v;
   return this;
  };
  this.$CascadedSendAST = function () {
   return this.$CascadedSendAST$slot;
  };
  this.$init$CategoryAST$ = function (v) {
   this.$CategoryAST$slot = v;
   return this;
  };
  this.$CategoryAST = function () {
   return this.$CategoryAST$slot;
  };
  this.$init$CharAST$ = function (v) {
   this.$CharAST$slot = v;
   return this;
  };
  this.$CharAST = function () {
   return this.$CharAST$slot;
  };
  this.$init$ClassBodyAST$ = function (v) {
   this.$ClassBodyAST$slot = v;
   return this;
  };
  this.$ClassBodyAST = function () {
   return this.$ClassBodyAST$slot;
  };
  this.$init$ClassDeclarationAST$ = function (v) {
   this.$ClassDeclarationAST$slot = v;
   return this;
  };
  this.$ClassDeclarationAST = function () {
   return this.$ClassDeclarationAST$slot;
  };
  this.$init$ClassHeaderAST$ = function (v) {
   this.$ClassHeaderAST$slot = v;
   return this;
  };
  this.$ClassHeaderAST = function () {
   return this.$ClassHeaderAST$slot;
  };
  this.$init$ClassPrefixAST$ = function (v) {
   this.$ClassPrefixAST$slot = v;
   return this;
  };
  this.$ClassPrefixAST = function () {
   return this.$ClassPrefixAST$slot;
  };
  this.$init$CodeBodyAST$ = function (v) {
   this.$CodeBodyAST$slot = v;
   return this;
  };
  this.$CodeBodyAST = function () {
   return this.$CodeBodyAST$slot;
  };
  this.$init$ImmutableSlotDefAST$ = function (v) {
   this.$ImmutableSlotDefAST$slot = v;
   return this;
  };
  this.$ImmutableSlotDefAST = function () {
   return this.$ImmutableSlotDefAST$slot;
  };
  this.$init$InitializerAST$ = function (v) {
   this.$InitializerAST$slot = v;
   return this;
  };
  this.$InitializerAST = function () {
   return this.$InitializerAST$slot;
  };
  this.$init$ParameterizedTypeAST$ = function (v) {
   this.$ParameterizedTypeAST$slot = v;
   return this;
  };
  this.$ParameterizedTypeAST = function () {
   return this.$ParameterizedTypeAST$slot;
  };
  this.$init$MessageAST$ = function (v) {
   this.$MessageAST$slot = v;
   return this;
  };
  this.$MessageAST = function () {
   return this.$MessageAST$slot;
  };
  this.$init$MessagePatternAST$ = function (v) {
   this.$MessagePatternAST$slot = v;
   return this;
  };
  this.$MessagePatternAST = function () {
   return this.$MessagePatternAST$slot;
  };
  this.$init$MethodAST$ = function (v) {
   this.$MethodAST$slot = v;
   return this;
  };
  this.$MethodAST = function () {
   return this.$MethodAST$slot;
  };
  this.$init$MixinApplicationClassAST$ = function (v) {
   this.$MixinApplicationClassAST$slot = v;
   return this;
  };
  this.$MixinApplicationClassAST = function () {
   return this.$MixinApplicationClassAST$slot;
  };
  this.$init$MutableSlotDefAST$ = function (v) {
   this.$MutableSlotDefAST$slot = v;
   return this;
  };
  this.$MutableSlotDefAST = function () {
   return this.$MutableSlotDefAST$slot;
  };
  this.$init$NormalSendAST$ = function (v) {
   this.$NormalSendAST$slot = v;
   return this;
  };
  this.$NormalSendAST = function () {
   return this.$NormalSendAST$slot;
  };
  this.$init$NSSideAST$ = function (v) {
   this.$NSSideAST$slot = v;
   return this;
  };
  this.$NSSideAST = function () {
   return this.$NSSideAST$slot;
  };
  this.$init$NumberAST$ = function (v) {
   this.$NumberAST$slot = v;
   return this;
  };
  this.$NumberAST = function () {
   return this.$NumberAST$slot;
  };
  this.$init$ReturnStatAST$ = function (v) {
   this.$ReturnStatAST$slot = v;
   return this;
  };
  this.$ReturnStatAST = function () {
   return this.$ReturnStatAST$slot;
  };
  this.$init$SetterSendAST$ = function (v) {
   this.$SetterSendAST$slot = v;
   return this;
  };
  this.$SetterSendAST = function () {
   return this.$SetterSendAST$slot;
  };
  this.$init$SideAST$ = function (v) {
   this.$SideAST$slot = v;
   return this;
  };
  this.$SideAST = function () {
   return this.$SideAST$slot;
  };
  this.$init$StringAST$ = function (v) {
   this.$StringAST$slot = v;
   return this;
  };
  this.$StringAST = function () {
   return this.$StringAST$slot;
  };
  this.$init$SymbolAST$ = function (v) {
   this.$SymbolAST$slot = v;
   return this;
  };
  this.$SymbolAST = function () {
   return this.$SymbolAST$slot;
  };
  this.$init$TupleAST$ = function (v) {
   this.$TupleAST$slot = v;
   return this;
  };
  this.$TupleAST = function () {
   return this.$TupleAST$slot;
  };
  this.$init$TypeIdAST$ = function (v) {
   this.$TypeIdAST$slot = v;
   return this;
  };
  this.$TypeIdAST = function () {
   return this.$TypeIdAST$slot;
  };
  this.$init$UnaryTypeOpAST$ = function (v) {
   this.$UnaryTypeOpAST$slot = v;
   return this;
  };
  this.$UnaryTypeOpAST = function () {
   return this.$UnaryTypeOpAST$slot;
  };
  this.$init$VarDeclAST$ = function (v) {
   this.$VarDeclAST$slot = v;
   return this;
  };
  this.$VarDeclAST = function () {
   return this.$VarDeclAST$slot;
  };
  this.$init$VariableAST$ = function (v) {
   this.$VariableAST$slot = v;
   return this;
  };
  this.$VariableAST = function () {
   return this.$VariableAST$slot;
  };
  this.$init$MixinApplicationAST$ = function (v) {
   this.$MixinApplicationAST$slot = v;
   return this;
  };
  this.$MixinApplicationAST = function () {
   return this.$MixinApplicationAST$slot;
  };
  this.$init$KeywordPatternAST$ = function (v) {
   this.$KeywordPatternAST$slot = v;
   return this;
  };
  this.$KeywordPatternAST = function () {
   return this.$KeywordPatternAST$slot;
  };
  this.$init$KeywordPatternPairAST$ = function (v) {
   this.$KeywordPatternPairAST$slot = v;
   return this;
  };
  this.$KeywordPatternPairAST = function () {
   return this.$KeywordPatternPairAST$slot;
  };
  this.$init$WildcardPatternAST$ = function (v) {
   this.$WildcardPatternAST$slot = v;
   return this;
  };
  this.$WildcardPatternAST = function () {
   return this.$WildcardPatternAST$slot;
  };
  this.$init$LiteralPatternAST$ = function (v) {
   this.$LiteralPatternAST$slot = v;
   return this;
  };
  this.$LiteralPatternAST = function () {
   return this.$LiteralPatternAST$slot;
  };
  this.$init$VariablePatternAST$ = function (v) {
   this.$VariablePatternAST$slot = v;
   return this;
  };
  this.$VariablePatternAST = function () {
   return this.$VariablePatternAST$slot;
  };
  this.$init$NewspeakParsing$InternalParser$ = function (v) {
   this.$NewspeakParsing$InternalParser$slot = v;
   return this;
  };
  this.$NewspeakParsing$InternalParser = function () {
   return this.$NewspeakParsing$InternalParser$slot;
  };
  this.$NewspeakParsing$InternalParser$ = function (v) {
   this.$NewspeakParsing$InternalParser$slot = v;
   return this;
  };
  this.$init$NewspeakParsing$Parser$ = function (v) {
   this.$NewspeakParsing$Parser$slot = v;
   return this;
  };
  this.$NewspeakParsing$Parser = function () {
   return this.$NewspeakParsing$Parser$slot;
  };
  this.$NewspeakParsing$Parser$ = function (v) {
   this.$NewspeakParsing$Parser$slot = v;
   return this;
  };
  this.$NewspeakParsing$InternalParser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakParsing`InternalParser";
   this.name = "NewspeakParsing`InternalParser";
   this.header = 1989;
   this.slots = [
    new SM("backTick", false, false),
    new SM("backTickIdentifier", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakParsing`InternalParser", true, 1990),
    new MM("instance`initializer", true, 1991),
    new MM("identifier", false, 1992),
    new MM("init`backTick:", true, 0),
    new MM("backTick", true, 0),
    new MM("init`backTickIdentifier:", true, 0),
    new MM("backTickIdentifier", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakParsing$InternalParser = function () {
    var self = this;
    self.$super$NewspeakParsing$InternalParser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakParsing$InternalParser();
    self._$init$backTick$(self._$char$("`"));
    self._$init$backTickIdentifier$(self._$tokenFor$(self._$letter().$$pipe(self._$_()).$$pipe(self._$backTick()).$$comma(self._$letter().$$pipe(self._$digit()).$$pipe(self._$_()).$$pipe(self._$backTick()).$star()).$wrapper$(function ($fst, $snd) {
     return self._$String().$fromRunes$([$fst].$$comma($snd));
    })));
    return self;
   };
   this.$identifier = function () {
    var self = this;
    return self._$backTickIdentifier();
   };
   this.$init$backTick$ = function (v) {
    this.$backTick$slot = v;
    return this;
   };
   this.$backTick = function () {
    return this.$backTick$slot;
   };
   this.$init$backTickIdentifier$ = function (v) {
    this.$backTickIdentifier$slot = v;
    return this;
   };
   this.$backTickIdentifier = function () {
    return this.$backTickIdentifier$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakParsing`InternalParser";
     this._$superInit$NewspeakParsing$InternalParser = $.$superInit$NewspeakParsing$InternalParser;
     this.$superInit$NewspeakParsing$InternalParser = dnuCatcher("$superInit$NewspeakParsing$InternalParser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$identifier = this._$identifier = $.$identifier;
     this._$init$backTick$ = $.$init$backTick$;
     this.$init$backTick$ = dnuCatcher("$init$backTick$");
     this._$backTick = $.$backTick;
     this.$backTick = dnuCatcher("$backTick");
     this._$init$backTickIdentifier$ = $.$init$backTickIdentifier$;
     this.$init$backTickIdentifier$ = dnuCatcher("$init$backTickIdentifier$");
     this._$backTickIdentifier = $.$backTickIdentifier;
     this.$backTickIdentifier = dnuCatcher("$backTickIdentifier");
     this.$enclosingObjects$NewspeakParsing$InternalParser = enclosingObjects;
     this.$super$NewspeakParsing$InternalParser$slot = runtimeSuperclass;
     this["NewspeakParsing`InternalParser"] = function () {
      superBasicNew.call(this);
      this.$backTick$slot = nil;
      this.$backTickIdentifier$slot = nil;
     };
     this.basicNew = this["NewspeakParsing`InternalParser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakParsing`InternalParser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakParsing`InternalParser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakParsing$InternalParser = enclosingObjects;
      this.$super$NewspeakParsing$InternalParser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakParsing$Parser = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakParsing`Parser";
   this.name = "NewspeakParsing`Parser";
   this.header = 1993;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakParsing`Parser", true, 1994),
    new MM("instance`initializer", true, 1995),
    new MM("blockTypeArgList", false, 1996),
    new MM("classBody", false, 1997),
    new MM("classComment", false, 1998),
    new MM("classDecl", false, 1999),
    new MM("classPrefix", false, 2000),
    new MM("computeDigits:radix:", false, 2001),
    new MM("computeFraction:radix:", false, 2002),
    new MM("defaultSuperclassAndBody", false, 2003),
    new MM("explicitInheritanceListAndOrBody", false, 2004),
    new MM("hereSetterSendFromMsg:", false, 2005),
    new MM("instanceInitializer", false, 2006),
    new MM("keywordMessages", false, 2007),
    new MM("keywordPattern", false, 2008),
    new MM("kwPatternPair", false, 2009),
    new MM("literalMessage", false, 2010),
    new MM("literalMessageComment", false, 2011),
    new MM("literalPattern", false, 2012),
    new MM("nestedPatternLiteral", false, 2013),
    new MM("newBlockArgType", false, 2014),
    new MM("newBlockType", false, 2015),
    new MM("newChar", false, 2016),
    new MM("newNonEmptyBlockArgList", false, 2017),
    new MM("nontrivialBinaryMessages", false, 2018),
    new MM("oldChar", false, 2019),
    new MM("outerReceiver", false, 2020),
    new MM("pattern", false, 2021),
    new MM("sendMessages:to:", false, 2022),
    new MM("seqSlotDecls", false, 2023),
    new MM("simSlotDecls", false, 2024),
    new MM("superclassPrefix", false, 2025),
    new MM("tupleType", false, 2026),
    new MM("unaryMsg", false, 2027),
    new MM("variablePattern", false, 2028),
    new MM("wildcardPattern", false, 2029),
    new MM("binaryExpression", false, 2030),
    new MM("binaryMsg", false, 2031),
    new MM("binaryMsgPattern", false, 2032),
    new MM("block", false, 2033),
    new MM("blockParameter", false, 2034),
    new MM("blockParameters", false, 2035),
    new MM("cascadeMsg", false, 2036),
    new MM("cascadedMessageExpression", false, 2037),
    new MM("category", false, 2038),
    new MM("classDeclaration", false, 2039),
    new MM("classDefinition", false, 2040),
    new MM("classHeader", false, 2041),
    new MM("classSideDecl", false, 2042),
    new MM("codeBody", false, 2043),
    new MM("compilationUnit", false, 2044),
    new MM("doItExpression", false, 2045),
    new MM("expression", false, 2046),
    new MM("furtherStatements", false, 2047),
    new MM("keywordExpression", false, 2048),
    new MM("keywordHereSend", false, 2049),
    new MM("keywordMsg", false, 2050),
    new MM("keywordMsgPattern", false, 2051),
    new MM("messagePattern", false, 2052),
    new MM("method", false, 2053),
    new MM("methodDecl", false, 2054),
    new MM("mixinApplication", false, 2055),
    new MM("nestedClassDecl", false, 2056),
    new MM("parenthesizedExpression", false, 2057),
    new MM("returnStatement", false, 2058),
    new MM("sideDecl", false, 2059),
    new MM("slotDecl", false, 2060),
    new MM("slotDef", false, 2061),
    new MM("slotName", false, 2062),
    new MM("statementSequence", false, 2063),
    new MM("superclassClause", false, 2064),
    new MM("symbolConstant", false, 2065),
    new MM("toplevelClass", false, 2066),
    new MM("tuple", false, 2067),
    new MM("unaryExpression", false, 2068),
    new MM("unaryMsgPattern", false, 2069),
    new MM("accessModifier", false, 2070),
    new MM("decimalNum", false, 2071),
    new MM("exponent", false, 2072),
    new MM("extendedFraction", false, 2073),
    new MM("fraction", false, 2074),
    new MM("number", false, 2075),
    new MM("radix", false, 2076),
    new MM("radixNum", false, 2077),
    new MM("string", false, 2078),
    new MM("symbol", false, 2079),
    new MM("parse:inContext:ifError:", false, 2080),
    new MM("computeDigits:", false, 2081),
    new MM("computeFraction:", false, 2082),
    new MM("defaultConstructorCall", false, 2083),
    new MM("defaultConstructorPattern", false, 2084),
    new MM("defaultConstructorSelector", false, 2085),
    new MM("defaultSuperCallAt:ending:", false, 2086),
    new MM("hereNode", false, 2087),
    new MM("hereSendFromMsg:", false, 2088),
    new MM("pseudoVariableNode:", false, 2089),
    new MM("blockReturnType", false, 2090),
    new MM("blockType", false, 2091),
    new MM("newBlockTypeArgList", false, 2092),
    new MM("nonEmptyBlockTypeArgList", false, 2093),
    new MM("parenthesizedTypeExpression", false, 2094),
    new MM("returnType", false, 2095),
    new MM("type", false, 2096),
    new MM("typeArguments", false, 2097),
    new MM("typeExpr", false, 2098),
    new MM("typePrimary", false, 2099),
    new MM("typeTerm", false, 2100)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakParsing$Parser = function () {
    var self = this;
    self.$super$NewspeakParsing$Parser$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakParsing$Parser();
    return self;
   };
   this.$blockTypeArgList = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$blockTypeArgList.call(self).$wrap$(function ($bta) {
     return $bta.$isNil().$ifTrue$ifFalse$(function () {
      return [];
     }, function () {
      return $bta.$isKindOfCollection().$ifFalse$ifTrue$(function () {
       return [$bta];
      }, function () {
       return $bta;
      });
     });
    });
   };
   this.$classBody = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classBody.call(self).$wrapper$(function ($instInit, $instanceSide, $classSide) {
     var $klassSide = nil;
     $klassSide = $classSide.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$SideAST().$new().$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     }, function () {
      return $classSide;
     });
     return self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassBodyAST().$initializer$instanceSide$classSide$($instInit, $instanceSide, $klassSide);
    });
   };
   this.$classComment = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classComment.call(self).$wrapper$(function ($ws, $c) {
     return $c.$token();
    });
   };
   this.$classDecl = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classDecl.call(self).$wrapper$(function ($am, $ckw, $klassName, $cons, $eq, $listAndBody) {
     var $start = nil;
     var $konstruktor = nil;
     var $bodyOrDot = nil;
     var $iList = nil;
     var $end = nil;
     $start = $am.$isNil().$ifTrue$ifFalse$(function () {
      return $ckw.$start();
     }, function () {
      return $am.$start();
     });
     $konstruktor = $cons.$isNil().$ifTrue$ifFalse$(function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($klassName.$end() + 1);
       return cascadeReceiver.$end$($klassName.$end());
      })(self._$defaultConstructorPattern());
     }, function () {
      return $cons;
     });
     $bodyOrDot = $listAndBody.$last();
     $iList = $listAndBody.$first();
     $end = $bodyOrDot.$end();
     return $bodyOrDot.$isAST().$ifTrue$ifFalse$(function () {
      var $c = nil;
      $c = (function (cascadeReceiver) {
       cascadeReceiver.$start$($start);
       return cascadeReceiver.$end$($end);
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassDeclarationAST().$named$factoryMsg$inheriting$body$($klassName, $konstruktor, $iList, $bodyOrDot));
      $c.$header().$accessModifier$($am.$isNil().$ifTrue$ifFalse$(function () {
       return "protected";
      }, function () {
       return $am.$token();
      }));
      $c.$header().$start$($start);
      return $c;
     }, function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MixinApplicationClassAST().$named$factoryMsg$inheriting$($klassName.$token(), $konstruktor, $iList).$accessModifier$($am.$isNil().$ifTrue$ifFalse$(function () {
       return "protected";
      }, function () {
       return $am.$token();
      }));
     });
    });
   };
   this.$classPrefix = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classPrefix.call(self).$wrapper$(function ($klassName, $cons, $eq, $superClause) {
     var $start = nil;
     var $konstruktor = nil;
     var $superCall = nil;
     $start = $klassName.$start();
     $konstruktor = $cons.$isNil().$ifTrue$ifFalse$(function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($klassName.$end() + 1);
       return cascadeReceiver.$end$($klassName.$end());
      })(self._$defaultConstructorPattern());
     }, function () {
      return $cons;
     });
     $superCall = $superClause.$isNil().$ifTrue$ifFalse$(function () {
      return self._$defaultSuperCallAt$ending$($eq.$end() + 1, $eq.$end());
     }, function () {
      return $superClause;
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($start);
      return cascadeReceiver.$end$($superCall.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassPrefixAST().$name$constructor$superclassName$superclassCall$superConstructorCall$($klassName.$token().$asSymbol(), $konstruktor, $superCall.$receiver().$message().$selector(), $superCall.$receiver(), $superCall.$message()));
    });
   };
   this.$computeDigits$radix$ = function ($digitCharCodes, $radixValue) {
    var self = this;
    var $sum = nil;
    $sum = 0;
    $digitCharCodes.$do$(function ($digitCharCode) {
     var $digitValue = nil;
     if (($digitCharCode > 47) && ($digitCharCode < 58)) {
      $digitValue = $digitCharCode - 48;
     } else {
      if (($digitCharCode > 64) && ($digitCharCode < 71)) {
       $digitValue = $digitCharCode - 55;
      } else {
       self._$assert$message$(function () {
        return ($digitCharCode > 96) && ($digitCharCode < 123);
       }, "Internal error - illegal character in radix number");
       $digitValue = $digitCharCode - 87;
      };
     };
     self._$assert$message$(function () {
      return $digitValue.$$less($radixValue);
     }, "Malformed number: digit exceeds radix");
     return $sum = ($radixValue * $sum) + $digitValue;
    });
    return $sum;
   };
   this.$computeFraction$radix$ = function ($digitCharCodes, $radixValue) {
    var self = this;
    var $numerator = nil;
    var $denominator = nil;
    $numerator = 0;
    $denominator = 1;
    $digitCharCodes.$do$(function ($digitCharCode) {
     var $digitValue = nil;
     if (($digitCharCode > 47) && ($digitCharCode < 58)) {
      $digitValue = $digitCharCode - 48;
     } else {
      if (($digitCharCode > 64) && ($digitCharCode < 71)) {
       $digitValue = $digitCharCode - 55;
      } else {
       self._$assert$message$(function () {
        return ($digitCharCode > 96) && ($digitCharCode < 123);
       }, "Internal error - illegal character in radix number");
       $digitValue = $digitCharCode - 87;
      };
     };
     self._$assert$message$(function () {
      return $digitValue.$$less($radixValue);
     }, "Malformed number: digit exceeds radix");
     $numerator = ($radixValue * $numerator) + $digitValue;
     return $denominator = $radixValue * $denominator;
    });
    return $numerator / $denominator;
   };
   this.$defaultSuperclassAndBody = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$defaultSuperclassAndBody.call(self).$wrapper$(function ($body) {
     return [
      [self._$defaultSuperCallAt$ending$($body.$start() - 1, $body.$start() - 1)],
      $body
     ];
    });
   };
   this.$explicitInheritanceListAndOrBody = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$explicitInheritanceListAndOrBody.call(self).$wrapper$(function ($ic, $ms) {
     return $ms.$isCollection().$ifFalse$ifTrue$(function () {
      return [
       [$ic],
       $ms
      ];
     }, function () {
      var $iList = nil;
      $iList = (function (cascadeReceiver) {
       cascadeReceiver.$addFirst$($ic);
       return cascadeReceiver.$yourself();
      })($ms.$first().$collect$(function ($p) {
       return $p.$last();
      }));
      return [
       $iList,
       $ms.$last()
      ];
     });
    });
   };
   this.$hereSetterSendFromMsg$ = function ($msg) {
    var self = this;
    return self.$enclosingObjects$NewspeakParsing$Parser[0]._$SetterSendAST().$to$send$start$end$(self._$hereNode(), $msg, $msg.$start(), $msg.$end());
   };
   this.$instanceInitializer = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$instanceInitializer.call(self).$wrapper$(function ($lp, $cmnt, $instVars, $inits, $rp) {
     var $vs = nil;
     var $isSeq = nil;
     $isSeq = true;
     $vs = $instVars.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     }, function () {
      $isSeq = $instVars.$first();
      return $instVars.$last();
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($lp.$start());
      return cascadeReceiver.$end$($rp.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$InitializerAST().$slots$initializerExpressions$comment$slotsAreSequential$($vs, $inits, $cmnt, $isSeq));
    });
   };
   this.$keywordMessages = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$keywordMessages.call(self).$wrapper$(function ($kwMsg) {
     return [
      [],
      [],
      $kwMsg
     ];
    });
   };
   this.$keywordPattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$keywordPattern.call(self).$wrap$(function ($pairs) {
     var $kws = nil;
     var $kwsAST = nil;
     var $pats = nil;
     var $patsAST = nil;
     var $st = nil;
     var $ed = nil;
     $st = $pairs.$first().$start();
     $ed = $pairs.$last().$end();
     $kws = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     $pats = $pairs.$inject$into$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), function ($m, $p) {
      var $kwAST = nil;
      $kwAST = (function (cascadeReceiver) {
       cascadeReceiver.$val$($p.$keyword().$token().$asSymbol());
       cascadeReceiver.$start$($p.$keyword().$start());
       return cascadeReceiver.$end$($p.$keyword().$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$SymbolAST().$new());
      $kws.$add$($kwAST);
      return (function (cascadeReceiver) {
       cascadeReceiver.$add$($p.$pattern());
       return cascadeReceiver.$yourself();
      })($m);
     });
     $kwsAST = (function (cascadeReceiver) {
      cascadeReceiver.$elements$($kws);
      cascadeReceiver.$start$($st);
      return cascadeReceiver.$end$($ed);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TupleAST().$new());
     $patsAST = (function (cascadeReceiver) {
      cascadeReceiver.$elements$($pats);
      cascadeReceiver.$start$($st);
      return cascadeReceiver.$end$($ed);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TupleAST().$new());
     return (function (cascadeReceiver) {
      cascadeReceiver.$keywords$($kwsAST);
      cascadeReceiver.$patterns$($patsAST);
      cascadeReceiver.$start$($st);
      return cascadeReceiver.$end$($ed);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$KeywordPatternAST().$new());
    });
   };
   this.$kwPatternPair = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$kwPatternPair.call(self).$wrapper$(function ($keyw, $val) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$keyword$($keyw);
      cascadeReceiver.$pattern$($val.$isNil().$ifTrue$ifFalse$(function () {
       return (function (cascadeReceiver) {
        cascadeReceiver.$start$($keyw.$end());
        return cascadeReceiver.$end$($keyw.$end());
       })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$WildcardPatternAST().$new());
      }, function () {
       return $val;
      }));
      cascadeReceiver.$start$($keyw.$start());
      return cascadeReceiver.$end$($val.$isNil().$ifTrue$ifFalse$(function () {
       return $keyw.$end();
      }, function () {
       return $val.$end();
      }));
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$KeywordPatternPairAST().$new());
    });
   };
   this.$literalMessage = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$literalMessage.call(self).$wrap$(function ($kwsOrMsg) {
     return $kwsOrMsg.$isCollection().$ifTrue$ifFalse$(function () {
      var $sel = nil;
      var $args = nil;
      $args = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
      $sel = $kwsOrMsg.$inject$into$("", function ($s, $kwd) {
       $args.$add$($kwd.$at$(2));
       return $s.$$comma($kwd.$at$(1).$token());
      });
      return (function (cascadeReceiver) {
       cascadeReceiver.$send$with$($sel.$asSymbol(), $args);
       cascadeReceiver.$start$($kwsOrMsg.$first().$first().$concreteStart());
       return cascadeReceiver.$end$($args.$last().$concreteEnd());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
     }, function () {
      return $kwsOrMsg;
     });
    });
   };
   this.$literalMessageComment = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$literalMessageComment.call(self).$wrap$(function ($tokens) {
     return $tokens.$at$(5);
    });
   };
   this.$literalPattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$literalPattern.call(self).$wrap$(function ($litTok) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$literal$($litTok.$token());
      cascadeReceiver.$start$($litTok.$start());
      return cascadeReceiver.$end$($litTok.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$LiteralPatternAST().$new());
    });
   };
   this.$nestedPatternLiteral = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$nestedPatternLiteral.call(self).$wrap$(function ($nestedTok) {
     return $nestedTok.$token();
    });
   };
   this.$newBlockArgType = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$newBlockArgType.call(self).$wrapper$(function ($c, $rt) {
     $rt.$concreteStart$($c.$start());
     return $rt;
    });
   };
   this.$newBlockType = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$newBlockType.call(self).$wrapper$(function ($lb, $tas, $rb) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($lb.$start());
      return cascadeReceiver.$end$($rb.$end());
     })($tas.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$([], self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
     }, function () {
      var $fs = nil;
      var $r = nil;
      if ($tas.$isCollection()) {
       $fs = $tas;
       $r = $fs.$removeLast();
      } else {
       $fs = [];
       $r = $tas;
      };
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$($fs, $r);
     }));
    });
   };
   this.$newChar = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$newChar.call(self).$wrap$(function ($t) {
     var $v = nil;
     $v = self._$Character().$fromRune$($t.$token().$at$(2));
     if ($v.$isString()) {
      $v = $v.$asSymbol();
     } else {
      nil;
     };
     return (function (cascadeReceiver) {
      cascadeReceiver.$value$($v);
      cascadeReceiver.$start$($t.$start());
      return cascadeReceiver.$end$($t.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CharAST().$new());
    });
   };
   this.$newNonEmptyBlockArgList = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$newNonEmptyBlockArgList.call(self).$wrapper$(function ($ats, $vbarreturnt) {
     var $targs = nil;
     $targs = (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($ats);
      return cascadeReceiver.$yourself();
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     if ($vbarreturnt.$isNil()) {
      $targs.$addLast$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
     } else {
      $targs.$add$($vbarreturnt.$at$(2));
     };
     return $targs;
    });
   };
   this.$nontrivialBinaryMessages = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$nontrivialBinaryMessages.call(self).$wrapper$(function ($bmsgs, $kwMsg) {
     self._$assert$(function () {
      return $bmsgs.$isEmpty().$not();
     });
     return [
      [],
      $bmsgs,
      $kwMsg
     ];
    });
   };
   this.$oldChar = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$oldChar.call(self).$wrap$(function ($t) {
     var $v = nil;
     $v = self._$Character().$fromRune$($t.$token().$at$(2));
     if ($v.$isString()) {
      $v = $v.$asSymbol();
     } else {
      nil;
     };
     return (function (cascadeReceiver) {
      cascadeReceiver.$value$($v);
      cascadeReceiver.$start$($t.$start());
      return cascadeReceiver.$end$($t.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CharAST().$new());
    });
   };
   this.$outerReceiver = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$outerReceiver.call(self).$wrapper$(function ($okw, $idn) {
     var $osend = nil;
     $osend = (function (cascadeReceiver) {
      cascadeReceiver.$start$($okw.$start());
      return cascadeReceiver.$end$($okw.$end());
     })(self._$pseudoVariableNode$($okw.$token().$asSymbol()));
     return (function (cascadeReceiver) {
      cascadeReceiver.$receiver$($osend);
      cascadeReceiver.$message$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new().$send$with$($idn.$token().$asSymbol(), []));
      cascadeReceiver.$start$($osend.$start());
      return cascadeReceiver.$end$($idn.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
    });
   };
   this.$pattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$pattern.call(self).$wrapper$(function ($del1, $pat, $del2) {
     return $pat;
    });
   };
   this.$sendMessages$to$ = function ($msgs, $receiver) {
    var self = this;
    return $msgs.$inject$into$($receiver, function ($r, $msg) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$to$send$($r, $msg);
      cascadeReceiver.$left$($r);
      return cascadeReceiver.$right$($msg);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
    });
   };
   this.$seqSlotDecls = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$seqSlotDecls.call(self).$wrapper$(function ($vb1, $sds, $vb2) {
     if (!$sds.$isEmpty()) {
      $sds.$first().$concreteStart$($vb1.$start());
      $sds.$last().$concreteEnd$($vb2.$end());
     } else {
      nil;
     };
     return [
      true,
      $sds
     ];
    });
   };
   this.$simSlotDecls = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$simSlotDecls.call(self).$wrapper$(function ($vb1, $vb2, $sds, $vb3, $vb4) {
     if (!$sds.$isEmpty()) {
      $sds.$first().$concreteStart$($vb1.$start());
      $sds.$last().$concreteEnd$($vb4.$end());
     } else {
      nil;
     };
     return [
      false,
      $sds
     ];
    });
   };
   this.$superclassPrefix = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$superclassPrefix.call(self).$wrapper$(function ($p) {
     var $sp = nil;
     $sp = $p.$isNormalSendNode().$ifTrue$ifFalse$(function () {
      return $p;
     }, function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($p.$start());
       return cascadeReceiver.$end$($p.$end());
      })(self._$pseudoVariableNode$($p.$token().$asSymbol()));
     });
     return $sp;
    });
   };
   this.$tupleType = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$tupleType.call(self).$wrapper$(function ($lc, $es, $rc) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$generic$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Tuple"));
      cascadeReceiver.$arguments$($es);
      cascadeReceiver.$start$($lc.$start());
      return cascadeReceiver.$end$($rc.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ParameterizedTypeAST().$new());
    });
   };
   this.$unaryMsg = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$unaryMsg.call(self).$wrapper$(function ($esend, $u) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$send$with$($u.$token().$asSymbol(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
      cascadeReceiver.$isEventual$(nil.$$equal($esend).$not());
      cascadeReceiver.$start$($u.$start());
      return cascadeReceiver.$end$($u.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
    });
   };
   this.$variablePattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$variablePattern.call(self).$wrapper$(function ($varTok) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$variableName$($varTok.$token().$at$(2));
      cascadeReceiver.$start$($varTok.$start());
      return cascadeReceiver.$end$($varTok.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VariablePatternAST().$new());
    });
   };
   this.$wildcardPattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$wildcardPattern.call(self).$wrap$(function ($wcTok) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($wcTok.$start());
      return cascadeReceiver.$end$($wcTok.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$WildcardPatternAST().$new());
    });
   };
   this.$binaryExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$binaryExpression.call(self).$wrapper$(function ($ue, $bmsgs) {
     return $bmsgs.$inject$into$($ue, function ($receiverExpr, $b) {
      return (function (cascadeReceiver) {
       cascadeReceiver.$to$send$($receiverExpr, $b);
       cascadeReceiver.$left$($receiverExpr);
       return cascadeReceiver.$right$($b);
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
     });
    });
   };
   this.$binaryMsg = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$binaryMsg.call(self).$wrapper$(function ($esend, $b, $e) {
     var $args = nil;
     $args = [$e];
     return (function (cascadeReceiver) {
      cascadeReceiver.$send$with$($b.$token(), $args);
      cascadeReceiver.$isEventual$(nil.$$equal($esend).$not());
      cascadeReceiver.$start$($b.$start());
      return cascadeReceiver.$right$($e);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
    });
   };
   this.$binaryMsgPattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$binaryMsgPattern.call(self).$wrapper$(function ($sel, $p) {
     var $params = nil;
     $params = (function (cascadeReceiver) {
      cascadeReceiver.$add$($p);
      return cascadeReceiver.$yourself();
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     return (function (cascadeReceiver) {
      cascadeReceiver.$selector$parameters$($sel.$token(), $params);
      cascadeReceiver.$start$($sel.$start());
      return cascadeReceiver.$right$($p);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new());
    });
   };
   this.$block = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$block.call(self).$wrapper$(function ($lb, $params, $cb, $rb) {
     var $ps = nil;
     $ps = $params.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     }, function () {
      return $params;
     });
     $cb.$parameters$($ps);
     return (function (cascadeReceiver) {
      cascadeReceiver.$body$($cb);
      cascadeReceiver.$start$($lb.$start());
      return cascadeReceiver.$end$($rb.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockAST().$new());
    });
   };
   this.$blockParameter = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$blockParameter.call(self).$wrapper$(function ($c, $v) {
     $v.$concreteStart$($c.$start());
     return $v;
    });
   };
   this.$blockParameters = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$blockParameters.call(self).$wrapper$(function ($params, $vb) {
     self._$assert$message$(function () {
      return $params.$isEmpty().$not();
     }, "Assert failed");
     $params.$last().$concreteEnd$($vb.$end());
     return $params;
    });
   };
   this.$cascadeMsg = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$cascadeMsg.call(self).$wrapper$(function ($sm, $msg) {
     return $msg;
    });
   };
   this.$cascadedMessageExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$cascadedMessageExpression.call(self).$wrapper$(function ($p, $msgs) {
     var $se = nil;
     var $unaries = nil;
     var $binaries = nil;
     var $kwMsg = nil;
     var $cascade = nil;
     var $unarySend = nil;
     var $binarySend = nil;
     return $msgs.$isNil().$ifTrue$ifFalse$(function () {
      return $p;
     }, function () {
      $unaries = $msgs.$first().$first();
      $binaries = $msgs.$first().$at$(2);
      $kwMsg = $msgs.$first().$last();
      $cascade = $msgs.$last();
      $unarySend = self._$sendMessages$to$($unaries, $p);
      $binarySend = self._$sendMessages$to$($binaries, $unarySend);
      $se = $kwMsg.$isNil().$ifTrue$ifFalse$(function () {
       return $binarySend;
      }, function () {
       return self._$sendMessages$to$([$kwMsg], $binarySend);
      });
      return $cascade.$inject$into$($se, function ($e, $m) {
       return (function (cascadeReceiver) {
        cascadeReceiver.$to$cascade$($e, $m);
        cascadeReceiver.$left$($e);
        return cascadeReceiver.$right$($m);
       })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CascadedSendAST().$new());
      });
     });
    });
   };
   this.$category = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$category.call(self).$wrapper$(function ($cn, $ms) {
     var $end = nil;
     $end = $ms.$isEmpty().$ifTrue$ifFalse$(function () {
      return $cn.$end();
     }, function () {
      return $ms.$last().$end();
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$name$($cn.$value().$asSymbol());
      cascadeReceiver.$methods$($ms);
      cascadeReceiver.$start$($cn.$start());
      return cascadeReceiver.$end$($end);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CategoryAST().$new());
    });
   };
   this.$classDeclaration = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classDeclaration.call(self).$wrapper$(function ($hdr, $instSide, $classSide) {
     var $klassSide = nil;
     var $kat = nil;
     $klassSide = $classSide.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$SideAST().$new().$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     }, function () {
      return $classSide;
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$header$($hdr);
      cascadeReceiver.$instanceSide$($instSide);
      cascadeReceiver.$classSide$($klassSide);
      cascadeReceiver.$start$($hdr.$start());
      return cascadeReceiver.$end$($classSide.$isNil().$ifTrue$ifFalse$(function () {
       return $instSide.$end();
      }, function () {
       return $classSide.$end();
      }));
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassDeclarationAST().$new());
    });
   };
   this.$classDefinition = function () {
    var self = this;
    self._$halt();
    return self._$compilationUnit();
   };
   this.$classHeader = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classHeader.call(self).$wrapper$(function ($am, $ckw, $klassName, $cons, $eq, $superClause, $lp, $cmnt, $instVars, $inits, $rp) {
     var $vs = nil;
     var $kat = nil;
     var $start = nil;
     var $konstruktor = nil;
     var $superCall = nil;
     var $isSeq = nil;
     $isSeq = true;
     $kat = nil;
     $start = $am.$isNil().$ifTrue$ifFalse$(function () {
      return $ckw.$start();
     }, function () {
      return $am.$start();
     });
     $konstruktor = $cons.$isNil().$ifTrue$ifFalse$(function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($klassName.$end() + 1);
       return cascadeReceiver.$end$($klassName.$end());
      })(self._$defaultConstructorPattern());
     }, function () {
      return $cons;
     });
     $superCall = $superClause.$isNil().$ifTrue$ifFalse$(function () {
      return self._$defaultSuperCallAt$ending$($eq.$end() + 1, $eq.$end());
     }, function () {
      return $superClause;
     });
     $vs = $instVars.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     }, function () {
      $isSeq = $instVars.$first();
      return $instVars.$last();
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$name$($klassName.$token().$asSymbol());
      cascadeReceiver.$constructor$($konstruktor);
      cascadeReceiver.$superclassName$($superCall.$receiver().$message().$selector());
      cascadeReceiver.$superclassCall$($superCall.$receiver());
      cascadeReceiver.$superConstructorCall$($superCall.$message());
      cascadeReceiver.$slots$($vs);
      cascadeReceiver.$isSeq$($isSeq);
      cascadeReceiver.$initExprs$($inits);
      cascadeReceiver.$category$($kat);
      cascadeReceiver.$classComment$($cmnt);
      cascadeReceiver.$inheritanceChain$([$superCall]);
      cascadeReceiver.$accessModifier$($am.$isNil().$ifTrue$ifFalse$(function () {
       return "protected";
      }, function () {
       return $am.$token();
      }));
      cascadeReceiver.$start$($start);
      return cascadeReceiver.$end$($rp.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassHeaderAST().$new());
    });
   };
   this.$classSideDecl = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$classSideDecl.call(self).$wrapper$(function ($cn, $lp, $cats, $rp) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), $cats);
      cascadeReceiver.$start$($cn.$start());
      return cascadeReceiver.$end$($rp.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$SideAST().$new());
    });
   };
   this.$codeBody = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$codeBody.call(self).$wrapper$(function ($litMsgs, $tmps, $stmts) {
     var $ts = nil;
     var $ss = nil;
     var $start = nil;
     var $end = nil;
     var $cstart = nil;
     var $cend = nil;
     var $isSeq = nil;
     $isSeq = true;
     $end = nil;
     $start = $end;
     $ts = $tmps.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     }, function () {
      $isSeq = $tmps.$first();
      return $tmps.$last();
     });
     $ss = $stmts.$isNil().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     }, function () {
      return $stmts;
     });
     if (!$ts.$isEmpty()) {
      $cstart = $ts.$first().$concreteStart();
      $start = $ts.$first().$start();
      $cend = $ts.$last().$concreteEnd();
      $end = $ts.$last().$end();
     } else {
      nil;
     };
     if (!$ss.$isEmpty()) {
      if ($start.$isNil()) {
       $start = $ss.$first().$start();
      } else {
       nil;
      };
      $end = $ss.$last().$end();
      $cend = $ss.$last().$concreteEnd();
     } else {
      nil;
     };
     return (function (cascadeReceiver) {
      cascadeReceiver.$temporaries$statements$($ts, $ss);
      cascadeReceiver.$literalMessages$($litMsgs.$select$(function ($e) {
       return $e.$isMessageNode();
      }));
      cascadeReceiver.$isSeq$($isSeq);
      cascadeReceiver.$start$($start);
      cascadeReceiver.$end$($end);
      cascadeReceiver.$concreteStart$($cstart);
      return cascadeReceiver.$concreteEnd$($cend);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CodeBodyAST().$new());
    });
   };
   this.$compilationUnit = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$compilationUnit.call(self).$wrapper$(function ($lid, $u, $e) {
     return $u;
    });
   };
   this.$doItExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$doItExpression.call(self).$wrapper$(function ($cb, $end) {
     return $cb;
    });
   };
   this.$expression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$expression.call(self).$wrapper$(function ($setters, $msg) {
     var $e = nil;
     var $setSend = nil;
     var $args = nil;
     var $setSelector = nil;
     $e = $msg;
     if (!$setters.$isNil()) {
      {
       var $index = nil;
       nil;
       $index = $setters.$size();
       for (; (1).$$less$equal($index); ) {
        var $setter = nil;
        $setter = $setters.$at$($index);
        $args = (function (cascadeReceiver) {
         cascadeReceiver.$add$($e);
         return cascadeReceiver.$yourself();
        })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
        $setSelector = $setter.$token().$asString();
        $setSend = (function (cascadeReceiver) {
         cascadeReceiver.$send$with$($setSelector.$copyFrom$to$(1, $setSelector.$size() - 1).$asSymbol(), $args);
         cascadeReceiver.$start$($setter.$start());
         cascadeReceiver.$end$($setter.$end());
         return cascadeReceiver.$right$($e);
        })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
        $e = self._$hereSetterSendFromMsg$($setSend);
        $index = (-1).$$plus($index);
       };
      };
     } else {
      nil;
     };
     return $e;
    });
   };
   this.$furtherStatements = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$furtherStatements.call(self).$wrapper$(function ($d, $stmts) {
     return $stmts;
    });
   };
   this.$keywordExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$keywordExpression.call(self).$wrapper$(function ($bo, $msg) {
     return $msg.$isNil().$ifTrue$ifFalse$(function () {
      return $bo;
     }, function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$to$send$($bo, $msg);
       cascadeReceiver.$left$($bo);
       return cascadeReceiver.$right$($msg);
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
     });
    });
   };
   this.$keywordHereSend = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$keywordHereSend.call(self).$wrap$(function ($msg) {
     return self._$hereSendFromMsg$($msg);
    });
   };
   this.$keywordMsg = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$keywordMsg.call(self).$wrapper$(function ($esend, $kws) {
     var $sel = nil;
     var $args = nil;
     $args = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     $sel = $kws.$inject$into$("", function ($s, $kwd) {
      $args.$add$($kwd.$at$(2));
      return $s.$$comma($kwd.$at$(1).$token());
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$send$with$($sel.$asSymbol(), $args);
      cascadeReceiver.$isEventual$(nil.$$equal($esend).$not());
      cascadeReceiver.$start$($kws.$first().$first().$start());
      return cascadeReceiver.$right$($args.$last());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
    });
   };
   this.$keywordMsgPattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$keywordMsgPattern.call(self).$wrap$(function ($kws) {
     var $sel = nil;
     var $params = nil;
     $params = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
     self._$assert$message$(function () {
      return $kws.$isEmpty().$not();
     }, "Assert failed");
     $sel = $kws.$inject$into$("", function ($s, $kwp) {
      $params.$add$($kwp.$last());
      return $s.$$comma($kwp.$first().$token());
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$selector$parameters$($sel.$asSymbol(), $params);
      cascadeReceiver.$start$($kws.$first().$first().$start());
      return cascadeReceiver.$right$($params.$last());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new());
    });
   };
   this.$messagePattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$messagePattern.call(self).$wrapper$(function ($pt, $rt, $tp) {
     if ($tp.$isNil()) {
      if (!$rt.$isNil()) {
       $pt.$end$($rt.$concreteEnd());
      } else {
       nil;
      };
     } else {
      $pt.$end$($tp.$concreteEnd());
     };
     return (function (cascadeReceiver) {
      cascadeReceiver.$returnType$($rt);
      return cascadeReceiver.$typePattern$($tp);
     })($pt);
    });
   };
   this.$method = function () {
    var self = this;
    self._$halt();
    return self.$super$NewspeakParsing$Parser$slot._$method.call(self).$wrapper$(function ($msg, $cb, $ei) {
     $cb.$parameters$($msg.$parameters());
     return (function (cascadeReceiver) {
      cascadeReceiver.$pattern$body$accessModifier$($msg, $cb, "public");
      cascadeReceiver.$start$($msg.$start());
      return cascadeReceiver.$right$($cb);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MethodAST().$new());
    });
   };
   this.$methodDecl = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$methodDecl.call(self).$wrapper$(function ($am, $msg, $eq, $lp, $cb, $rp) {
     $cb.$parameters$($msg.$parameters());
     return (function (cascadeReceiver) {
      cascadeReceiver.$pattern$body$accessModifier$($msg, $cb, nil.$$equal($am).$ifTrue$ifFalse$(function () {
       return "protected";
      }, function () {
       return $am.$token();
      }));
      cascadeReceiver.$start$(nil.$$equal($am).$ifTrue$ifFalse$(function () {
       return $msg.$start();
      }, function () {
       return $am.$start();
      }));
      return cascadeReceiver.$end$($rp.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MethodAST().$new());
    });
   };
   this.$mixinApplication = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$mixinApplication.call(self).$wrapper$(function ($cp, $mixinOp, $me) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$left$($cp);
      return cascadeReceiver.$right$($me);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MixinApplicationAST().$prefix$mixin$($cp, $me));
    });
   };
   this.$nestedClassDecl = function () {
    var self = this;
    self._$halt();
    return self.$super$NewspeakParsing$Parser$slot._$nestedClassDecl.call(self).$wrapper$(function ($accessModifier, $classDeclaration) {
     $accessModifier.$ifNil$ifNotNil$(function () {
      return $classDeclaration.$accessModifier$("protected");
     }, function () {
      return $classDeclaration.$accessModifier$($accessModifier.$first().$token());
     });
     return $classDeclaration;
    });
   };
   this.$parenthesizedExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$parenthesizedExpression.call(self).$wrapper$(function ($l, $e, $r) {
     (function (cascadeReceiver) {
      cascadeReceiver.$concreteStart$($l.$start());
      return cascadeReceiver.$concreteEnd$($r.$end());
     })($e);
     return $e;
    });
   };
   this.$returnStatement = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$returnStatement.call(self).$wrapper$(function ($r, $e, $od) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$((function (cascadeReceiver) {
       cascadeReceiver.$expression$($e);
       cascadeReceiver.$start$($r.$start());
       return cascadeReceiver.$right$($e);
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ReturnStatAST().$new()));
      return cascadeReceiver.$yourself();
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
    });
   };
   this.$sideDecl = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$sideDecl.call(self).$wrapper$(function ($lp, $classes, $categories, $rp) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), $categories);
      cascadeReceiver.$nestedClasses$($classes);
      cascadeReceiver.$start$($lp.$start());
      return cascadeReceiver.$end$($rp.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NSSideAST().$new());
    });
   };
   this.$slotDecl = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$slotDecl.call(self).$wrapper$(function ($n, $t) {
     var $end = nil;
     $end = $t.$isNil().$ifTrue$ifFalse$(function () {
      return $n.$end();
     }, function () {
      return $t.$concreteEnd();
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($n.$start());
      return cascadeReceiver.$end$($end);
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VarDeclAST().$name$type$($n.$token().$asSymbol(), $t));
    });
   };
   this.$slotDef = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$slotDef.call(self).$wrapper$(function ($am, $sd, $init) {
     var $start = nil;
     var $end = nil;
     var $slotClass = nil;
     var $expr = nil;
     var $msg = nil;
     $start = $am.$isNil().$ifTrue$ifFalse$(function () {
      return $sd.$start();
     }, function () {
      return $am.$start();
     });
     if ($init.$isNil()) {
      $end = $sd.$end();
      $slotClass = self.$enclosingObjects$NewspeakParsing$Parser[0]._$MutableSlotDefAST();
     } else {
      $end = $init.$last().$concreteEnd();
      $expr = $init.$at$(2);
      $slotClass = $init.$at$(1).$token().$$equal("::=").$ifTrue$ifFalse$(function () {
       return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MutableSlotDefAST();
      }, function () {
       return self.$enclosingObjects$NewspeakParsing$Parser[0]._$ImmutableSlotDefAST();
      });
     };
     return (function (cascadeReceiver) {
      cascadeReceiver.$accessModifier$($am.$isNil().$ifTrue$ifFalse$(function () {
       return "protected";
      }, function () {
       return $am.$token();
      }));
      cascadeReceiver.$slotDecl$($sd);
      cascadeReceiver.$initializer$($expr);
      cascadeReceiver.$start$($start);
      return cascadeReceiver.$end$($end);
     })($slotClass.$new());
    });
   };
   this.$slotName = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$slotName.call(self).$wrap$(function ($n) {
     var $msg = nil;
     var $sn = nil;
     $sn = $n.$token().$asSymbol();
     return ($sn.$$equal("self") || ($sn.$$equal("super") || $sn.$$equal("outer"))).$ifTrue$ifFalse$(function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($n.$start());
       return cascadeReceiver.$end$($n.$end());
      })(self._$pseudoVariableNode$($sn));
     }, function () {
      $msg = (function (cascadeReceiver) {
       cascadeReceiver.$send$with$($sn, self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
       cascadeReceiver.$start$($n.$start());
       return cascadeReceiver.$end$($n.$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
      return self._$hereSendFromMsg$($msg);
     });
    });
   };
   this.$statementSequence = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$statementSequence.call(self).$wrapper$(function ($e, $rst) {
     return $rst.$isNil().$ifTrue$ifFalse$(function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$add$($e);
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     }, function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$add$($e);
       cascadeReceiver.$addAll$($rst);
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     });
    });
   };
   this.$superclassClause = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$superclassClause.call(self).$wrapper$(function ($sp, $sn, $msg) {
     var $constructorCall = nil;
     var $sc = nil;
     $sc = $sp.$isNil().$ifTrue$ifFalse$(function () {
      return self._$hereSendFromMsg$($sn);
     }, function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$receiver$($sp);
       cascadeReceiver.$message$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new().$send$with$($sn.$selector(), []));
       cascadeReceiver.$start$($sp.$start());
       return cascadeReceiver.$end$($sn.$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
     });
     $constructorCall = $msg.$isNil().$ifTrue$ifFalse$(function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($sn.$start());
       return cascadeReceiver.$end$($sn.$end());
      })(self._$defaultConstructorCall());
     }, function () {
      return $msg;
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$receiver$($sc);
      cascadeReceiver.$message$($constructorCall);
      cascadeReceiver.$start$($sc.$start());
      return cascadeReceiver.$end$($constructorCall.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
    });
   };
   this.$symbolConstant = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$symbolConstant.call(self).$wrapper$(function ($h, $s) {
     return $s.$start$($h.$start());
    });
   };
   this.$toplevelClass = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$toplevelClass.call(self).$wrapper$(function ($cat, $cd) {
     var $kat = nil;
     if (!$cat.$isNil()) {
      $cd.$header().$category$($cat.$value());
      $cd.$start$($cat.$start());
     } else {
      nil;
     };
     return $cd;
    });
   };
   this.$tuple = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$tuple.call(self).$wrapper$(function ($lc, $es, $rc) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$elements$($es);
      cascadeReceiver.$start$($lc.$start());
      return cascadeReceiver.$end$($rc.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TupleAST().$new());
    });
   };
   this.$unaryExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$unaryExpression.call(self).$wrapper$(function ($o, $s) {
     self._$assert$message$(function () {
      return $s.$isNil().$not();
     }, "Assert failed");
     return $s.$inject$into$($o, function ($e, $umsg) {
      return (function (cascadeReceiver) {
       cascadeReceiver.$to$send$($e, $umsg);
       cascadeReceiver.$start$($e.$start());
       return cascadeReceiver.$end$($umsg.$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
     });
    });
   };
   this.$unaryMsgPattern = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$unaryMsgPattern.call(self).$wrap$(function ($sel) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$selector$parameters$($sel.$token().$asSymbol(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
      cascadeReceiver.$start$($sel.$start());
      return cascadeReceiver.$end$($sel.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new());
    });
   };
   this.$accessModifier = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$accessModifier.call(self).$wrapper$(function ($am, $ws) {
     return $am;
    });
   };
   this.$decimalNum = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$decimalNum.call(self).$wrapper$(function ($sgn, $ip, $fp, $ep) {
     var $sum = nil;
     $sum = self._$computeDigits$($ip);
     if (!nil.$$equal($fp)) {
      $sum = $sum + $fp;
     } else {
      nil;
     };
     if (!nil.$$equal($sgn)) {
      $sum = -1 * $sum;
     } else {
      nil;
     };
     if (!nil.$$equal($ep)) {
      $sum = $sum * (10).$$times$times($ep);
     } else {
      nil;
     };
     return $sum;
    });
   };
   this.$exponent = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$exponent.call(self).$wrapper$(function ($e, $sgn, $ds) {
     var $exp = nil;
     $exp = self._$computeDigits$($ds);
     return $sgn.$isNil().$ifTrue$ifFalse$(function () {
      return $exp;
     }, function () {
      return -1 * $exp;
     });
    });
   };
   this.$extendedFraction = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$extendedFraction.call(self).$wrapper$(function ($period, $ds) {
     return $ds;
    });
   };
   this.$fraction = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$fraction.call(self).$wrapper$(function ($period, $ds) {
     return self._$computeFraction$($ds);
    });
   };
   this.$number = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$number.call(self).$wrap$(function ($t) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$value$($t.$token());
      cascadeReceiver.$start$($t.$start());
      return cascadeReceiver.$end$($t.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NumberAST().$new());
    });
   };
   this.$radix = function () {
    var self = this;
    var $exp = nil;
    return self.$super$NewspeakParsing$Parser$slot._$radix.call(self).$wrapper$(function ($ds, $r) {
     return self._$computeDigits$($ds);
    });
   };
   this.$radixNum = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$radixNum.call(self).$wrapper$(function ($r, $sgn, $ip, $fp, $ep) {
     var $sum = nil;
     self._$assert$message$(function () {
      return $ip.$isEmpty().$not();
     }, "internal error: integer part is empty");
     $sum = self._$computeDigits$radix$($ip, $r);
     if (!nil.$$equal($fp)) {
      $sum = $sum + self._$computeFraction$radix$($fp, $r);
     } else {
      nil;
     };
     if (!nil.$$equal($sgn)) {
      $sum = -1 * $sum;
     } else {
      nil;
     };
     if (!nil.$$equal($ep)) {
      $sum = $sum * (10).$$times$times($ep);
     } else {
      nil;
     };
     return $sum;
    });
   };
   this.$string = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$string.call(self).$wrap$(function ($t) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$value$($t.$token());
      cascadeReceiver.$start$($t.$start());
      return cascadeReceiver.$end$($t.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$StringAST().$new());
    });
   };
   this.$symbol = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$symbol.call(self).$wrap$(function ($t) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$value$($t.$token().$asSymbol());
      cascadeReceiver.$start$($t.$start());
      return cascadeReceiver.$end$($t.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$SymbolAST().$new());
    });
   };
   this.$parse$inContext$ifError$ = function ($input, $context, $blk) {
    var self = this;
    var NLR = new Object();
    try {
     (function () {
      return self.$super$NewspeakParsing$Parser$slot._$parse$inContext$ifError$.call(self, $input, $context, $blk);
     }).$on$do$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ParserError(), function ($ex) {
      {
       NLR.value = $blk.$value$with$($ex.$message(), $ex.$position());
       throw NLR;
      };
     });
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$computeDigits$ = function ($ds) {
    var self = this;
    var $s = nil;
    $s = 0;
    $ds.$do$(function ($d) {
     return $s = (10 * $s) + ($d - 48);
    });
    return $s;
   };
   this.$computeFraction$ = function ($ds) {
    var self = this;
    var $numerator = nil;
    var $denominator = nil;
    $numerator = 0;
    $denominator = 1;
    $ds.$do$(function ($d) {
     $numerator = (10 * $numerator) + ($d - 48);
     return $denominator = 10 * $denominator;
    });
    return $numerator / $denominator;
   };
   this.$defaultConstructorCall = function () {
    var self = this;
    return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new().$send$with$(self._$defaultConstructorSelector(), []);
   };
   this.$defaultConstructorPattern = function () {
    var self = this;
    return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new().$selector$parameters$(self._$defaultConstructorSelector(), []);
   };
   this.$defaultConstructorSelector = function () {
    var self = this;
    return "new";
   };
   this.$defaultSuperCallAt$ending$ = function ($start, $end) {
    var self = this;
    var $objId = nil;
    $objId = self._$hereSendFromMsg$((function (cascadeReceiver) {
     cascadeReceiver.$send$with$("Object", []);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new()));
    return (function (cascadeReceiver) {
     cascadeReceiver.$receiver$($objId);
     return cascadeReceiver.$message$((function (cascadeReceiver) {
      cascadeReceiver.$start$($start);
      return cascadeReceiver.$end$($end);
     })(self._$defaultConstructorCall()));
    })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
   };
   this.$hereNode = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$("@here");
     cascadeReceiver.$start$(0);
     return cascadeReceiver.$end$(0);
    })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VariableAST().$new());
   };
   this.$hereSendFromMsg$ = function ($msg) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$to$send$(self._$hereNode(), $msg);
     cascadeReceiver.$start$($msg.$start());
     return cascadeReceiver.$end$($msg.$end());
    })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
   };
   this.$pseudoVariableNode$ = function ($psvName) {
    var self = this;
    self._$assert$message$(function () {
     return [
      "self",
      "super",
      "outer"
     ].$includes$($psvName);
    }, "Assert failed");
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$($psvName.$asSymbol());
     cascadeReceiver.$start$(0);
     return cascadeReceiver.$end$(0);
    })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VariableAST().$new());
   };
   this.$blockReturnType = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$blockReturnType.call(self).$wrapper$(function ($h, $rt) {
     return $rt;
    });
   };
   this.$blockType = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$blockType.call(self).$wrapper$(function ($lb, $tas, $rb) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($lb.$start());
      return cascadeReceiver.$end$($rb.$end());
     })($tas.$isEmpty().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$([], nil);
     }, function () {
      return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$($tas.$asArray().$allButLast$(1), $tas.$last());
     }));
    });
   };
   this.$newBlockTypeArgList = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$newBlockTypeArgList.call(self).$wrapper$(function ($tas, $rt) {
     var $targs = nil;
     $targs = $tas.$collect$(function ($p) {
      return $p.$last();
     });
     if ($rt.$isNil()) {
      $targs.$addLast$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
     } else {
      $targs.$add$($rt);
     };
     return $targs;
    });
   };
   this.$nonEmptyBlockTypeArgList = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$nonEmptyBlockTypeArgList.call(self).$wrapper$(function ($tas, $rt) {
     var $targs = nil;
     $targs = (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($tas);
      return cascadeReceiver.$yourself();
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
     if ($rt.$isNil()) {
      $targs.$addLast$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
     } else {
      $targs.$add$($rt.$last());
     };
     return $targs;
    });
   };
   this.$parenthesizedTypeExpression = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$parenthesizedTypeExpression.call(self).$wrapper$(function ($lp, $te, $rp) {
     (function (cascadeReceiver) {
      cascadeReceiver.$concreteStart$($lp.$start());
      return cascadeReceiver.$concreteEnd$($rp.$end());
     })($te);
     return $te;
    });
   };
   this.$returnType = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$returnType.call(self).$wrapper$(function ($h, $rt) {
     $rt.$concreteStart$($h.$start());
     return $rt;
    });
   };
   this.$type = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$type.call(self).$wrapper$(function ($lb, $te, $rb) {
     (function (cascadeReceiver) {
      cascadeReceiver.$concreteStart$($lb.$start());
      return cascadeReceiver.$concreteEnd$($rb.$end());
     })($te);
     return $te;
    });
   };
   this.$typeArguments = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$typeArguments.call(self).$wrapper$(function ($lb, $tas, $rb) {
     return [
      $tas,
      $rb
     ];
    });
   };
   this.$typeExpr = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$typeExpr.call(self).$wrapper$(function ($lOperand, $msg) {
     var $operator = nil;
     var $rOperand = nil;
     return $msg.$isNil().$ifTrue$ifFalse$(function () {
      return $lOperand;
     }, function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$leftOperand$($lOperand);
       cascadeReceiver.$operator$($msg.$first().$token());
       cascadeReceiver.$rightOperand$($msg.$last());
       cascadeReceiver.$start$($lOperand.$start());
       return cascadeReceiver.$end$($msg.$last().$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$BinaryTypeOpAST().$new());
     });
    });
   };
   this.$typePrimary = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$typePrimary.call(self).$wrapper$(function ($g, $tas) {
     var $tid = nil;
     $tid = (function (cascadeReceiver) {
      cascadeReceiver.$name$($g.$token());
      cascadeReceiver.$start$($g.$start());
      return cascadeReceiver.$end$($g.$end());
     })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new());
     return $tas.$isNil().$ifTrue$ifFalse$(function () {
      return $tid;
     }, function () {
      return (function (cascadeReceiver) {
       cascadeReceiver.$generic$($tid);
       cascadeReceiver.$arguments$($tas.$first());
       cascadeReceiver.$start$($g.$start());
       return cascadeReceiver.$end$($tas.$last().$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ParameterizedTypeAST().$new());
     });
    });
   };
   this.$typeTerm = function () {
    var self = this;
    return self.$super$NewspeakParsing$Parser$slot._$typeTerm.call(self).$wrapper$(function ($operand, $operators) {
     return $operators.$inject$into$($operand, function ($te, $op) {
      return (function (cascadeReceiver) {
       cascadeReceiver.$operand$($te);
       cascadeReceiver.$operator$($op.$token());
       cascadeReceiver.$start$($te.$start());
       return cascadeReceiver.$end$($op.$end());
      })(self.$enclosingObjects$NewspeakParsing$Parser[0]._$UnaryTypeOpAST().$new());
     });
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakParsing`Parser";
     this._$superInit$NewspeakParsing$Parser = $.$superInit$NewspeakParsing$Parser;
     this.$superInit$NewspeakParsing$Parser = dnuCatcher("$superInit$NewspeakParsing$Parser");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$blockTypeArgList = $.$blockTypeArgList;
     this.$blockTypeArgList = dnuCatcher("$blockTypeArgList");
     this._$classBody = $.$classBody;
     this.$classBody = dnuCatcher("$classBody");
     this.$classComment = this._$classComment = $.$classComment;
     this.$classDecl = this._$classDecl = $.$classDecl;
     this._$classPrefix = $.$classPrefix;
     this.$classPrefix = dnuCatcher("$classPrefix");
     this._$computeDigits$radix$ = $.$computeDigits$radix$;
     this.$computeDigits$radix$ = dnuCatcher("$computeDigits$radix$");
     this._$computeFraction$radix$ = $.$computeFraction$radix$;
     this.$computeFraction$radix$ = dnuCatcher("$computeFraction$radix$");
     this._$defaultSuperclassAndBody = $.$defaultSuperclassAndBody;
     this.$defaultSuperclassAndBody = dnuCatcher("$defaultSuperclassAndBody");
     this._$explicitInheritanceListAndOrBody = $.$explicitInheritanceListAndOrBody;
     this.$explicitInheritanceListAndOrBody = dnuCatcher("$explicitInheritanceListAndOrBody");
     this._$hereSetterSendFromMsg$ = $.$hereSetterSendFromMsg$;
     this.$hereSetterSendFromMsg$ = dnuCatcher("$hereSetterSendFromMsg$");
     this._$instanceInitializer = $.$instanceInitializer;
     this.$instanceInitializer = dnuCatcher("$instanceInitializer");
     this._$keywordMessages = $.$keywordMessages;
     this.$keywordMessages = dnuCatcher("$keywordMessages");
     this._$keywordPattern = $.$keywordPattern;
     this.$keywordPattern = dnuCatcher("$keywordPattern");
     this._$kwPatternPair = $.$kwPatternPair;
     this.$kwPatternPair = dnuCatcher("$kwPatternPair");
     this._$literalMessage = $.$literalMessage;
     this.$literalMessage = dnuCatcher("$literalMessage");
     this._$literalMessageComment = $.$literalMessageComment;
     this.$literalMessageComment = dnuCatcher("$literalMessageComment");
     this._$literalPattern = $.$literalPattern;
     this.$literalPattern = dnuCatcher("$literalPattern");
     this._$nestedPatternLiteral = $.$nestedPatternLiteral;
     this.$nestedPatternLiteral = dnuCatcher("$nestedPatternLiteral");
     this._$newBlockArgType = $.$newBlockArgType;
     this.$newBlockArgType = dnuCatcher("$newBlockArgType");
     this._$newBlockType = $.$newBlockType;
     this.$newBlockType = dnuCatcher("$newBlockType");
     this._$newChar = $.$newChar;
     this.$newChar = dnuCatcher("$newChar");
     this._$newNonEmptyBlockArgList = $.$newNonEmptyBlockArgList;
     this.$newNonEmptyBlockArgList = dnuCatcher("$newNonEmptyBlockArgList");
     this._$nontrivialBinaryMessages = $.$nontrivialBinaryMessages;
     this.$nontrivialBinaryMessages = dnuCatcher("$nontrivialBinaryMessages");
     this._$oldChar = $.$oldChar;
     this.$oldChar = dnuCatcher("$oldChar");
     this._$outerReceiver = $.$outerReceiver;
     this.$outerReceiver = dnuCatcher("$outerReceiver");
     this._$pattern = $.$pattern;
     this.$pattern = dnuCatcher("$pattern");
     this._$sendMessages$to$ = $.$sendMessages$to$;
     this.$sendMessages$to$ = dnuCatcher("$sendMessages$to$");
     this._$seqSlotDecls = $.$seqSlotDecls;
     this.$seqSlotDecls = dnuCatcher("$seqSlotDecls");
     this._$simSlotDecls = $.$simSlotDecls;
     this.$simSlotDecls = dnuCatcher("$simSlotDecls");
     this._$superclassPrefix = $.$superclassPrefix;
     this.$superclassPrefix = dnuCatcher("$superclassPrefix");
     this._$tupleType = $.$tupleType;
     this.$tupleType = dnuCatcher("$tupleType");
     this._$unaryMsg = $.$unaryMsg;
     this.$unaryMsg = dnuCatcher("$unaryMsg");
     this._$variablePattern = $.$variablePattern;
     this.$variablePattern = dnuCatcher("$variablePattern");
     this._$wildcardPattern = $.$wildcardPattern;
     this.$wildcardPattern = dnuCatcher("$wildcardPattern");
     this._$binaryExpression = $.$binaryExpression;
     this.$binaryExpression = dnuCatcher("$binaryExpression");
     this._$binaryMsg = $.$binaryMsg;
     this.$binaryMsg = dnuCatcher("$binaryMsg");
     this._$binaryMsgPattern = $.$binaryMsgPattern;
     this.$binaryMsgPattern = dnuCatcher("$binaryMsgPattern");
     this._$block = $.$block;
     this.$block = dnuCatcher("$block");
     this._$blockParameter = $.$blockParameter;
     this.$blockParameter = dnuCatcher("$blockParameter");
     this._$blockParameters = $.$blockParameters;
     this.$blockParameters = dnuCatcher("$blockParameters");
     this._$cascadeMsg = $.$cascadeMsg;
     this.$cascadeMsg = dnuCatcher("$cascadeMsg");
     this._$cascadedMessageExpression = $.$cascadedMessageExpression;
     this.$cascadedMessageExpression = dnuCatcher("$cascadedMessageExpression");
     this._$category = $.$category;
     this.$category = dnuCatcher("$category");
     this._$classDeclaration = $.$classDeclaration;
     this.$classDeclaration = dnuCatcher("$classDeclaration");
     this._$classDefinition = $.$classDefinition;
     this.$classDefinition = dnuCatcher("$classDefinition");
     this.$classHeader = this._$classHeader = $.$classHeader;
     this._$classSideDecl = $.$classSideDecl;
     this.$classSideDecl = dnuCatcher("$classSideDecl");
     this._$codeBody = $.$codeBody;
     this.$codeBody = dnuCatcher("$codeBody");
     this.$compilationUnit = this._$compilationUnit = $.$compilationUnit;
     this.$doItExpression = this._$doItExpression = $.$doItExpression;
     this._$expression = $.$expression;
     this.$expression = dnuCatcher("$expression");
     this._$furtherStatements = $.$furtherStatements;
     this.$furtherStatements = dnuCatcher("$furtherStatements");
     this._$keywordExpression = $.$keywordExpression;
     this.$keywordExpression = dnuCatcher("$keywordExpression");
     this._$keywordHereSend = $.$keywordHereSend;
     this.$keywordHereSend = dnuCatcher("$keywordHereSend");
     this._$keywordMsg = $.$keywordMsg;
     this.$keywordMsg = dnuCatcher("$keywordMsg");
     this._$keywordMsgPattern = $.$keywordMsgPattern;
     this.$keywordMsgPattern = dnuCatcher("$keywordMsgPattern");
     this._$messagePattern = $.$messagePattern;
     this.$messagePattern = dnuCatcher("$messagePattern");
     this._$method = $.$method;
     this.$method = dnuCatcher("$method");
     this.$methodDecl = this._$methodDecl = $.$methodDecl;
     this._$mixinApplication = $.$mixinApplication;
     this.$mixinApplication = dnuCatcher("$mixinApplication");
     this._$nestedClassDecl = $.$nestedClassDecl;
     this.$nestedClassDecl = dnuCatcher("$nestedClassDecl");
     this._$parenthesizedExpression = $.$parenthesizedExpression;
     this.$parenthesizedExpression = dnuCatcher("$parenthesizedExpression");
     this._$returnStatement = $.$returnStatement;
     this.$returnStatement = dnuCatcher("$returnStatement");
     this._$sideDecl = $.$sideDecl;
     this.$sideDecl = dnuCatcher("$sideDecl");
     this._$slotDecl = $.$slotDecl;
     this.$slotDecl = dnuCatcher("$slotDecl");
     this._$slotDef = $.$slotDef;
     this.$slotDef = dnuCatcher("$slotDef");
     this._$slotName = $.$slotName;
     this.$slotName = dnuCatcher("$slotName");
     this._$statementSequence = $.$statementSequence;
     this.$statementSequence = dnuCatcher("$statementSequence");
     this._$superclassClause = $.$superclassClause;
     this.$superclassClause = dnuCatcher("$superclassClause");
     this._$symbolConstant = $.$symbolConstant;
     this.$symbolConstant = dnuCatcher("$symbolConstant");
     this._$toplevelClass = $.$toplevelClass;
     this.$toplevelClass = dnuCatcher("$toplevelClass");
     this._$tuple = $.$tuple;
     this.$tuple = dnuCatcher("$tuple");
     this._$unaryExpression = $.$unaryExpression;
     this.$unaryExpression = dnuCatcher("$unaryExpression");
     this._$unaryMsgPattern = $.$unaryMsgPattern;
     this.$unaryMsgPattern = dnuCatcher("$unaryMsgPattern");
     this._$accessModifier = $.$accessModifier;
     this.$accessModifier = dnuCatcher("$accessModifier");
     this._$decimalNum = $.$decimalNum;
     this.$decimalNum = dnuCatcher("$decimalNum");
     this._$exponent = $.$exponent;
     this.$exponent = dnuCatcher("$exponent");
     this._$extendedFraction = $.$extendedFraction;
     this.$extendedFraction = dnuCatcher("$extendedFraction");
     this._$fraction = $.$fraction;
     this.$fraction = dnuCatcher("$fraction");
     this._$number = $.$number;
     this.$number = dnuCatcher("$number");
     this._$radix = $.$radix;
     this.$radix = dnuCatcher("$radix");
     this._$radixNum = $.$radixNum;
     this.$radixNum = dnuCatcher("$radixNum");
     this.$string = this._$string = $.$string;
     this._$symbol = $.$symbol;
     this.$symbol = dnuCatcher("$symbol");
     this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
     this._$computeDigits$ = $.$computeDigits$;
     this.$computeDigits$ = dnuCatcher("$computeDigits$");
     this._$computeFraction$ = $.$computeFraction$;
     this.$computeFraction$ = dnuCatcher("$computeFraction$");
     this._$defaultConstructorCall = $.$defaultConstructorCall;
     this.$defaultConstructorCall = dnuCatcher("$defaultConstructorCall");
     this._$defaultConstructorPattern = $.$defaultConstructorPattern;
     this.$defaultConstructorPattern = dnuCatcher("$defaultConstructorPattern");
     this._$defaultConstructorSelector = $.$defaultConstructorSelector;
     this.$defaultConstructorSelector = dnuCatcher("$defaultConstructorSelector");
     this._$defaultSuperCallAt$ending$ = $.$defaultSuperCallAt$ending$;
     this.$defaultSuperCallAt$ending$ = dnuCatcher("$defaultSuperCallAt$ending$");
     this._$hereNode = $.$hereNode;
     this.$hereNode = dnuCatcher("$hereNode");
     this._$hereSendFromMsg$ = $.$hereSendFromMsg$;
     this.$hereSendFromMsg$ = dnuCatcher("$hereSendFromMsg$");
     this._$pseudoVariableNode$ = $.$pseudoVariableNode$;
     this.$pseudoVariableNode$ = dnuCatcher("$pseudoVariableNode$");
     this._$blockReturnType = $.$blockReturnType;
     this.$blockReturnType = dnuCatcher("$blockReturnType");
     this._$blockType = $.$blockType;
     this.$blockType = dnuCatcher("$blockType");
     this._$newBlockTypeArgList = $.$newBlockTypeArgList;
     this.$newBlockTypeArgList = dnuCatcher("$newBlockTypeArgList");
     this._$nonEmptyBlockTypeArgList = $.$nonEmptyBlockTypeArgList;
     this.$nonEmptyBlockTypeArgList = dnuCatcher("$nonEmptyBlockTypeArgList");
     this._$parenthesizedTypeExpression = $.$parenthesizedTypeExpression;
     this.$parenthesizedTypeExpression = dnuCatcher("$parenthesizedTypeExpression");
     this._$returnType = $.$returnType;
     this.$returnType = dnuCatcher("$returnType");
     this._$type = $.$type;
     this.$type = dnuCatcher("$type");
     this._$typeArguments = $.$typeArguments;
     this.$typeArguments = dnuCatcher("$typeArguments");
     this._$typeExpr = $.$typeExpr;
     this.$typeExpr = dnuCatcher("$typeExpr");
     this._$typePrimary = $.$typePrimary;
     this.$typePrimary = dnuCatcher("$typePrimary");
     this._$typeTerm = $.$typeTerm;
     this.$typeTerm = dnuCatcher("$typeTerm");
     this.$enclosingObjects$NewspeakParsing$Parser = enclosingObjects;
     this.$super$NewspeakParsing$Parser$slot = runtimeSuperclass;
     this["NewspeakParsing`Parser"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakParsing`Parser"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakParsing`Parser";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakParsing`Parser";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakParsing$Parser = enclosingObjects;
      this.$super$NewspeakParsing$Parser = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakParsing$InternalParser.enclosingMixin = this;
  this.$NewspeakParsing$Parser.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for NewspeakParsing";
    this._$superInit$NewspeakParsing = $.$superInit$NewspeakParsing;
    this.$superInit$NewspeakParsing = dnuCatcher("$superInit$NewspeakParsing");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$InternalParser = this._$InternalParser = $.$InternalParser;
    this.$Parser = this._$Parser = $.$Parser;
    this._$init$OrderedCollection$ = $.$init$OrderedCollection$;
    this.$init$OrderedCollection$ = dnuCatcher("$init$OrderedCollection$");
    this._$OrderedCollection = $.$OrderedCollection;
    this.$OrderedCollection = dnuCatcher("$OrderedCollection");
    this._$init$TypedGrammar$ = $.$init$TypedGrammar$;
    this.$init$TypedGrammar$ = dnuCatcher("$init$TypedGrammar$");
    this._$TypedGrammar = $.$TypedGrammar;
    this.$TypedGrammar = dnuCatcher("$TypedGrammar");
    this._$init$ParserError$ = $.$init$ParserError$;
    this.$init$ParserError$ = dnuCatcher("$init$ParserError$");
    this._$ParserError = $.$ParserError;
    this.$ParserError = dnuCatcher("$ParserError");
    this.$init$ASTModule$ = this._$init$ASTModule$ = $.$init$ASTModule$;
    this.$ASTModule = this._$ASTModule = $.$ASTModule;
    this._$init$BinaryTypeOpAST$ = $.$init$BinaryTypeOpAST$;
    this.$init$BinaryTypeOpAST$ = dnuCatcher("$init$BinaryTypeOpAST$");
    this._$BinaryTypeOpAST = $.$BinaryTypeOpAST;
    this.$BinaryTypeOpAST = dnuCatcher("$BinaryTypeOpAST");
    this._$init$BlockAST$ = $.$init$BlockAST$;
    this.$init$BlockAST$ = dnuCatcher("$init$BlockAST$");
    this._$BlockAST = $.$BlockAST;
    this.$BlockAST = dnuCatcher("$BlockAST");
    this._$init$BlockTypeAST$ = $.$init$BlockTypeAST$;
    this.$init$BlockTypeAST$ = dnuCatcher("$init$BlockTypeAST$");
    this._$BlockTypeAST = $.$BlockTypeAST;
    this.$BlockTypeAST = dnuCatcher("$BlockTypeAST");
    this._$init$CascadedSendAST$ = $.$init$CascadedSendAST$;
    this.$init$CascadedSendAST$ = dnuCatcher("$init$CascadedSendAST$");
    this._$CascadedSendAST = $.$CascadedSendAST;
    this.$CascadedSendAST = dnuCatcher("$CascadedSendAST");
    this._$init$CategoryAST$ = $.$init$CategoryAST$;
    this.$init$CategoryAST$ = dnuCatcher("$init$CategoryAST$");
    this._$CategoryAST = $.$CategoryAST;
    this.$CategoryAST = dnuCatcher("$CategoryAST");
    this._$init$CharAST$ = $.$init$CharAST$;
    this.$init$CharAST$ = dnuCatcher("$init$CharAST$");
    this._$CharAST = $.$CharAST;
    this.$CharAST = dnuCatcher("$CharAST");
    this._$init$ClassBodyAST$ = $.$init$ClassBodyAST$;
    this.$init$ClassBodyAST$ = dnuCatcher("$init$ClassBodyAST$");
    this._$ClassBodyAST = $.$ClassBodyAST;
    this.$ClassBodyAST = dnuCatcher("$ClassBodyAST");
    this._$init$ClassDeclarationAST$ = $.$init$ClassDeclarationAST$;
    this.$init$ClassDeclarationAST$ = dnuCatcher("$init$ClassDeclarationAST$");
    this._$ClassDeclarationAST = $.$ClassDeclarationAST;
    this.$ClassDeclarationAST = dnuCatcher("$ClassDeclarationAST");
    this._$init$ClassHeaderAST$ = $.$init$ClassHeaderAST$;
    this.$init$ClassHeaderAST$ = dnuCatcher("$init$ClassHeaderAST$");
    this._$ClassHeaderAST = $.$ClassHeaderAST;
    this.$ClassHeaderAST = dnuCatcher("$ClassHeaderAST");
    this._$init$ClassPrefixAST$ = $.$init$ClassPrefixAST$;
    this.$init$ClassPrefixAST$ = dnuCatcher("$init$ClassPrefixAST$");
    this._$ClassPrefixAST = $.$ClassPrefixAST;
    this.$ClassPrefixAST = dnuCatcher("$ClassPrefixAST");
    this._$init$CodeBodyAST$ = $.$init$CodeBodyAST$;
    this.$init$CodeBodyAST$ = dnuCatcher("$init$CodeBodyAST$");
    this._$CodeBodyAST = $.$CodeBodyAST;
    this.$CodeBodyAST = dnuCatcher("$CodeBodyAST");
    this._$init$ImmutableSlotDefAST$ = $.$init$ImmutableSlotDefAST$;
    this.$init$ImmutableSlotDefAST$ = dnuCatcher("$init$ImmutableSlotDefAST$");
    this._$ImmutableSlotDefAST = $.$ImmutableSlotDefAST;
    this.$ImmutableSlotDefAST = dnuCatcher("$ImmutableSlotDefAST");
    this._$init$InitializerAST$ = $.$init$InitializerAST$;
    this.$init$InitializerAST$ = dnuCatcher("$init$InitializerAST$");
    this._$InitializerAST = $.$InitializerAST;
    this.$InitializerAST = dnuCatcher("$InitializerAST");
    this._$init$ParameterizedTypeAST$ = $.$init$ParameterizedTypeAST$;
    this.$init$ParameterizedTypeAST$ = dnuCatcher("$init$ParameterizedTypeAST$");
    this._$ParameterizedTypeAST = $.$ParameterizedTypeAST;
    this.$ParameterizedTypeAST = dnuCatcher("$ParameterizedTypeAST");
    this._$init$MessageAST$ = $.$init$MessageAST$;
    this.$init$MessageAST$ = dnuCatcher("$init$MessageAST$");
    this._$MessageAST = $.$MessageAST;
    this.$MessageAST = dnuCatcher("$MessageAST");
    this._$init$MessagePatternAST$ = $.$init$MessagePatternAST$;
    this.$init$MessagePatternAST$ = dnuCatcher("$init$MessagePatternAST$");
    this._$MessagePatternAST = $.$MessagePatternAST;
    this.$MessagePatternAST = dnuCatcher("$MessagePatternAST");
    this._$init$MethodAST$ = $.$init$MethodAST$;
    this.$init$MethodAST$ = dnuCatcher("$init$MethodAST$");
    this._$MethodAST = $.$MethodAST;
    this.$MethodAST = dnuCatcher("$MethodAST");
    this._$init$MixinApplicationClassAST$ = $.$init$MixinApplicationClassAST$;
    this.$init$MixinApplicationClassAST$ = dnuCatcher("$init$MixinApplicationClassAST$");
    this._$MixinApplicationClassAST = $.$MixinApplicationClassAST;
    this.$MixinApplicationClassAST = dnuCatcher("$MixinApplicationClassAST");
    this._$init$MutableSlotDefAST$ = $.$init$MutableSlotDefAST$;
    this.$init$MutableSlotDefAST$ = dnuCatcher("$init$MutableSlotDefAST$");
    this._$MutableSlotDefAST = $.$MutableSlotDefAST;
    this.$MutableSlotDefAST = dnuCatcher("$MutableSlotDefAST");
    this._$init$NormalSendAST$ = $.$init$NormalSendAST$;
    this.$init$NormalSendAST$ = dnuCatcher("$init$NormalSendAST$");
    this._$NormalSendAST = $.$NormalSendAST;
    this.$NormalSendAST = dnuCatcher("$NormalSendAST");
    this._$init$NSSideAST$ = $.$init$NSSideAST$;
    this.$init$NSSideAST$ = dnuCatcher("$init$NSSideAST$");
    this._$NSSideAST = $.$NSSideAST;
    this.$NSSideAST = dnuCatcher("$NSSideAST");
    this._$init$NumberAST$ = $.$init$NumberAST$;
    this.$init$NumberAST$ = dnuCatcher("$init$NumberAST$");
    this._$NumberAST = $.$NumberAST;
    this.$NumberAST = dnuCatcher("$NumberAST");
    this._$init$ReturnStatAST$ = $.$init$ReturnStatAST$;
    this.$init$ReturnStatAST$ = dnuCatcher("$init$ReturnStatAST$");
    this._$ReturnStatAST = $.$ReturnStatAST;
    this.$ReturnStatAST = dnuCatcher("$ReturnStatAST");
    this._$init$SetterSendAST$ = $.$init$SetterSendAST$;
    this.$init$SetterSendAST$ = dnuCatcher("$init$SetterSendAST$");
    this._$SetterSendAST = $.$SetterSendAST;
    this.$SetterSendAST = dnuCatcher("$SetterSendAST");
    this._$init$SideAST$ = $.$init$SideAST$;
    this.$init$SideAST$ = dnuCatcher("$init$SideAST$");
    this._$SideAST = $.$SideAST;
    this.$SideAST = dnuCatcher("$SideAST");
    this._$init$StringAST$ = $.$init$StringAST$;
    this.$init$StringAST$ = dnuCatcher("$init$StringAST$");
    this._$StringAST = $.$StringAST;
    this.$StringAST = dnuCatcher("$StringAST");
    this._$init$SymbolAST$ = $.$init$SymbolAST$;
    this.$init$SymbolAST$ = dnuCatcher("$init$SymbolAST$");
    this._$SymbolAST = $.$SymbolAST;
    this.$SymbolAST = dnuCatcher("$SymbolAST");
    this._$init$TupleAST$ = $.$init$TupleAST$;
    this.$init$TupleAST$ = dnuCatcher("$init$TupleAST$");
    this._$TupleAST = $.$TupleAST;
    this.$TupleAST = dnuCatcher("$TupleAST");
    this._$init$TypeIdAST$ = $.$init$TypeIdAST$;
    this.$init$TypeIdAST$ = dnuCatcher("$init$TypeIdAST$");
    this._$TypeIdAST = $.$TypeIdAST;
    this.$TypeIdAST = dnuCatcher("$TypeIdAST");
    this._$init$UnaryTypeOpAST$ = $.$init$UnaryTypeOpAST$;
    this.$init$UnaryTypeOpAST$ = dnuCatcher("$init$UnaryTypeOpAST$");
    this._$UnaryTypeOpAST = $.$UnaryTypeOpAST;
    this.$UnaryTypeOpAST = dnuCatcher("$UnaryTypeOpAST");
    this._$init$VarDeclAST$ = $.$init$VarDeclAST$;
    this.$init$VarDeclAST$ = dnuCatcher("$init$VarDeclAST$");
    this._$VarDeclAST = $.$VarDeclAST;
    this.$VarDeclAST = dnuCatcher("$VarDeclAST");
    this._$init$VariableAST$ = $.$init$VariableAST$;
    this.$init$VariableAST$ = dnuCatcher("$init$VariableAST$");
    this._$VariableAST = $.$VariableAST;
    this.$VariableAST = dnuCatcher("$VariableAST");
    this._$init$MixinApplicationAST$ = $.$init$MixinApplicationAST$;
    this.$init$MixinApplicationAST$ = dnuCatcher("$init$MixinApplicationAST$");
    this._$MixinApplicationAST = $.$MixinApplicationAST;
    this.$MixinApplicationAST = dnuCatcher("$MixinApplicationAST");
    this._$init$KeywordPatternAST$ = $.$init$KeywordPatternAST$;
    this.$init$KeywordPatternAST$ = dnuCatcher("$init$KeywordPatternAST$");
    this._$KeywordPatternAST = $.$KeywordPatternAST;
    this.$KeywordPatternAST = dnuCatcher("$KeywordPatternAST");
    this._$init$KeywordPatternPairAST$ = $.$init$KeywordPatternPairAST$;
    this.$init$KeywordPatternPairAST$ = dnuCatcher("$init$KeywordPatternPairAST$");
    this._$KeywordPatternPairAST = $.$KeywordPatternPairAST;
    this.$KeywordPatternPairAST = dnuCatcher("$KeywordPatternPairAST");
    this._$init$WildcardPatternAST$ = $.$init$WildcardPatternAST$;
    this.$init$WildcardPatternAST$ = dnuCatcher("$init$WildcardPatternAST$");
    this._$WildcardPatternAST = $.$WildcardPatternAST;
    this.$WildcardPatternAST = dnuCatcher("$WildcardPatternAST");
    this._$init$LiteralPatternAST$ = $.$init$LiteralPatternAST$;
    this.$init$LiteralPatternAST$ = dnuCatcher("$init$LiteralPatternAST$");
    this._$LiteralPatternAST = $.$LiteralPatternAST;
    this.$LiteralPatternAST = dnuCatcher("$LiteralPatternAST");
    this._$init$VariablePatternAST$ = $.$init$VariablePatternAST$;
    this.$init$VariablePatternAST$ = dnuCatcher("$init$VariablePatternAST$");
    this._$VariablePatternAST = $.$VariablePatternAST;
    this.$VariablePatternAST = dnuCatcher("$VariablePatternAST");
    this.$init$NewspeakParsing$InternalParser$ = this._$init$NewspeakParsing$InternalParser$ = $.$init$NewspeakParsing$InternalParser$;
    this.$NewspeakParsing$InternalParser = this._$NewspeakParsing$InternalParser = $.$NewspeakParsing$InternalParser;
    this.$NewspeakParsing$InternalParser$ = this._$NewspeakParsing$InternalParser$ = $.$NewspeakParsing$InternalParser$;
    this.$init$NewspeakParsing$Parser$ = this._$init$NewspeakParsing$Parser$ = $.$init$NewspeakParsing$Parser$;
    this.$NewspeakParsing$Parser = this._$NewspeakParsing$Parser = $.$NewspeakParsing$Parser;
    this.$NewspeakParsing$Parser$ = this._$NewspeakParsing$Parser$ = $.$NewspeakParsing$Parser$;
    this.$enclosingObjects$NewspeakParsing = enclosingObjects;
    this.$super$NewspeakParsing$slot = runtimeSuperclass;
    this.NewspeakParsing = function () {
     superBasicNew.call(this);
     this.$OrderedCollection$slot = nil;
     this.$TypedGrammar$slot = nil;
     this.$ParserError$slot = nil;
     this.$ASTModule$slot = nil;
     this.$BinaryTypeOpAST$slot = nil;
     this.$BlockAST$slot = nil;
     this.$BlockTypeAST$slot = nil;
     this.$CascadedSendAST$slot = nil;
     this.$CategoryAST$slot = nil;
     this.$CharAST$slot = nil;
     this.$ClassBodyAST$slot = nil;
     this.$ClassDeclarationAST$slot = nil;
     this.$ClassHeaderAST$slot = nil;
     this.$ClassPrefixAST$slot = nil;
     this.$CodeBodyAST$slot = nil;
     this.$ImmutableSlotDefAST$slot = nil;
     this.$InitializerAST$slot = nil;
     this.$ParameterizedTypeAST$slot = nil;
     this.$MessageAST$slot = nil;
     this.$MessagePatternAST$slot = nil;
     this.$MethodAST$slot = nil;
     this.$MixinApplicationClassAST$slot = nil;
     this.$MutableSlotDefAST$slot = nil;
     this.$NormalSendAST$slot = nil;
     this.$NSSideAST$slot = nil;
     this.$NumberAST$slot = nil;
     this.$ReturnStatAST$slot = nil;
     this.$SetterSendAST$slot = nil;
     this.$SideAST$slot = nil;
     this.$StringAST$slot = nil;
     this.$SymbolAST$slot = nil;
     this.$TupleAST$slot = nil;
     this.$TypeIdAST$slot = nil;
     this.$UnaryTypeOpAST$slot = nil;
     this.$VarDeclAST$slot = nil;
     this.$VariableAST$slot = nil;
     this.$MixinApplicationAST$slot = nil;
     this.$KeywordPatternAST$slot = nil;
     this.$KeywordPatternPairAST$slot = nil;
     this.$WildcardPatternAST$slot = nil;
     this.$LiteralPatternAST$slot = nil;
     this.$VariablePatternAST$slot = nil;
     this.$NewspeakParsing$InternalParser$slot = nil;
     this.$NewspeakParsing$Parser$slot = nil;
    };
    this.basicNew = this.NewspeakParsing;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for NewspeakParsing";
   this.slots = [];
   this.methods = [new MM("usingPlatform:grammar:asts:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$grammar$asts$ = function ($platform, $grammar, $asts) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform, $grammar, $asts);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for NewspeakParsing";
     this.$usingPlatform$grammar$asts$ = this._$usingPlatform$grammar$asts$ = $.$usingPlatform$grammar$asts$;
     this.$enclosingObjects$NewspeakParsing = enclosingObjects;
     this.$super$NewspeakParsing = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$JavascriptGeneration = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for JavascriptGeneration";
  this.name = "JavascriptGeneration";
  this.header = 2101;
  this.slots = [
   new SM("List", false, false),
   new SM("Dictionary", false, false),
   new SM("WriteStream", false, false),
   new SM("syntax", false, false),
   new SM("factory", false, false),
   new SM("JavascriptGeneration`Factory", true, true),
   new SM("JavascriptGeneration`Syntax", true, true),
   new SM("JavascriptGeneration`Writer", true, true)
  ];
  this.methods = [
   new MM("superInit`JavascriptGeneration", true, 2102),
   new MM("instance`initializer", true, 2103),
   new MM("isLegalIdentifier:", false, 2104),
   new MM("Factory", true, 0),
   new MM("Syntax", true, 0),
   new MM("Writer", true, 0),
   new MM("init`List:", true, 0),
   new MM("List", true, 0),
   new MM("init`Dictionary:", true, 0),
   new MM("Dictionary", true, 0),
   new MM("init`WriteStream:", true, 0),
   new MM("WriteStream", true, 0),
   new MM("init`syntax:", true, 0),
   new MM("syntax", true, 0),
   new MM("init`factory:", true, 0),
   new MM("factory", true, 0),
   new MM("init`JavascriptGeneration`Factory:", true, 0),
   new MM("JavascriptGeneration`Factory", true, 0),
   new MM("JavascriptGeneration`Factory:", true, 0),
   new MM("init`JavascriptGeneration`Syntax:", true, 0),
   new MM("JavascriptGeneration`Syntax", true, 0),
   new MM("JavascriptGeneration`Syntax:", true, 0),
   new MM("init`JavascriptGeneration`Writer:", true, 0),
   new MM("JavascriptGeneration`Writer", true, 0),
   new MM("JavascriptGeneration`Writer:", true, 0)
  ];
  this.nestedClasses = [
   "JavascriptGeneration`Factory",
   "JavascriptGeneration`Syntax",
   "JavascriptGeneration`Writer"
  ];
  this.applications = [];
  this.$superInit$JavascriptGeneration = function ($platform) {
   var self = this;
   self.$super$JavascriptGeneration$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   var self = this;
   self._$superInit$JavascriptGeneration($platform);
   $0.$init$List$(self, $platform.$collections().$OrderedCollection());
   $0.$init$Dictionary$(self, $platform.$collections().$Dictionary());
   $0.$init$WriteStream$(self, $platform.$streams().$CharacterReadWriteStream());
   self._$init$syntax$(self._$Syntax().$new());
   self._$init$factory$(self._$Factory().$new());
   return self;
  };
  this.$isLegalIdentifier$ = function ($id) {
   var self = this;
   var NLR = new Object();
   try {
    if (!($id.$size() > 0)) {
     return false;
    } else {
     nil;
    };
    $id.$do$(function ($char) {
     return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_".$includes$($char).$ifFalse$(function () {
      {
       NLR.value = false;
       throw NLR;
      };
     });
    });
    return $id.$first().$isNumber().$not();
   } catch (NLR_exception) {
    if (NLR === NLR_exception) {
     return NLR_exception.value;
    } else {
     throw NLR_exception;
    };
   };
  };
  this.$Factory = function () {
   if (nil === this.$JavascriptGeneration$Factory$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration);
    var mixin = $.$JavascriptGeneration$Factory;
    this.$JavascriptGeneration$Factory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$JavascriptGeneration$Factory$slot;
  };
  this.$Syntax = function () {
   if (nil === this.$JavascriptGeneration$Syntax$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration);
    var mixin = $.$JavascriptGeneration$Syntax;
    this.$JavascriptGeneration$Syntax$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$JavascriptGeneration$Syntax$slot;
  };
  this.$Writer = function () {
   if (nil === this.$JavascriptGeneration$Writer$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration);
    var mixin = $.$JavascriptGeneration$Writer;
    this.$JavascriptGeneration$Writer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$JavascriptGeneration$Writer$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$Dictionary$ = function (self, v) {
   self.$Dictionary$slot = v;
   return self;
  };
  this.$Dictionary = function (self) {
   return self.$Dictionary$slot;
  };
  this.$init$WriteStream$ = function (self, v) {
   self.$WriteStream$slot = v;
   return self;
  };
  this.$WriteStream = function (self) {
   return self.$WriteStream$slot;
  };
  this.$init$syntax$ = function (v) {
   this.$syntax$slot = v;
   return this;
  };
  this.$syntax = function () {
   return this.$syntax$slot;
  };
  this.$init$factory$ = function (v) {
   this.$factory$slot = v;
   return this;
  };
  this.$factory = function () {
   return this.$factory$slot;
  };
  this.$init$JavascriptGeneration$Factory$ = function (v) {
   this.$JavascriptGeneration$Factory$slot = v;
   return this;
  };
  this.$JavascriptGeneration$Factory = function () {
   return this.$JavascriptGeneration$Factory$slot;
  };
  this.$JavascriptGeneration$Factory$ = function (v) {
   this.$JavascriptGeneration$Factory$slot = v;
   return this;
  };
  this.$init$JavascriptGeneration$Syntax$ = function (v) {
   this.$JavascriptGeneration$Syntax$slot = v;
   return this;
  };
  this.$JavascriptGeneration$Syntax = function () {
   return this.$JavascriptGeneration$Syntax$slot;
  };
  this.$JavascriptGeneration$Syntax$ = function (v) {
   this.$JavascriptGeneration$Syntax$slot = v;
   return this;
  };
  this.$init$JavascriptGeneration$Writer$ = function (v) {
   this.$JavascriptGeneration$Writer$slot = v;
   return this;
  };
  this.$JavascriptGeneration$Writer = function () {
   return this.$JavascriptGeneration$Writer$slot;
  };
  this.$JavascriptGeneration$Writer$ = function (v) {
   this.$JavascriptGeneration$Writer$slot = v;
   return this;
  };
  this.$JavascriptGeneration$Factory = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for JavascriptGeneration`Factory";
   this.name = "JavascriptGeneration`Factory";
   this.header = 2105;
   this.slots = [];
   this.methods = [
    new MM("superInit`JavascriptGeneration`Factory", true, 2106),
    new MM("instance`initializer", true, 2107),
    new MM("array:", false, 2108),
    new MM("assign:toBe:", false, 2109),
    new MM("block:", false, 2110),
    new MM("call:with:", false, 2111),
    new MM("for:in:do:", false, 2112),
    new MM("for:while:step:do:", false, 2113),
    new MM("function:of:body:", false, 2114),
    new MM("functionOf:body:", false, 2115),
    new MM("ident:", false, 2116),
    new MM("if:then:", false, 2117),
    new MM("if:then:else:", false, 2118),
    new MM("literal:", false, 2119),
    new MM("new:with:", false, 2120),
    new MM("objectLiteral", false, 2121),
    new MM("objectLiteral:", false, 2122),
    new MM("objectLiteralSlotNames:values:", false, 2123),
    new MM("operator:with:and:", false, 2124),
    new MM("postfixOperator:on:", false, 2125),
    new MM("prefixOperator:on:", false, 2126),
    new MM("propertyOf:at:", false, 2127),
    new MM("propertyOf:atPath:", false, 2128),
    new MM("return", false, 2129),
    new MM("return:", false, 2130),
    new MM("script:", false, 2131),
    new MM("ternaryIf:then:else:", false, 2132),
    new MM("throw:", false, 2133),
    new MM("try:catch:with:", false, 2134),
    new MM("try:catch:with:finally:", false, 2135),
    new MM("try:finally:", false, 2136),
    new MM("var:", false, 2137),
    new MM("var:value:", false, 2138),
    new MM("verbatim:", false, 2139)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$JavascriptGeneration$Factory = function () {
    var self = this;
    self.$super$JavascriptGeneration$Factory$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$JavascriptGeneration$Factory();
    return self;
   };
   this.$array$ = function ($elements) {
    var self = this;
    $elements.$do$(function ($each) {
     return self._$assert$message$(function () {
      return $each.$isJsNode();
     }, "JS node expected");
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ArrayExpression().$elements$($elements);
   };
   this.$assign$toBe$ = function ($lhs, $rhs) {
    var self = this;
    self._$assert$message$(function () {
     return $lhs.$isJsNode();
    }, "JS node expected on left");
    self._$assert$message$(function () {
     return $rhs.$isJsNode();
    }, "JS node expected on right");
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$AssignmentExpression().$leftHandSide$rightHandSide$($lhs, $rhs);
   };
   this.$block$ = function ($statements) {
    var self = this;
    $statements.$do$(function ($each) {
     return self._$assert$message$(function () {
      return $each.$isJsNode();
     }, "Malformed statement tree");
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$Block().$statements$($statements);
   };
   this.$call$with$ = function ($expression, $arguments) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$CallExpression().$function$arguments$($expression, $arguments);
   };
   this.$for$in$do$ = function ($varName, $expr, $bodyStmt) {
    var self = this;
    var $canonicalVarName = nil;
    $canonicalVarName = $varName.$isNil().$ifTrue$ifFalse$(function () {
     return $varName;
    }, function () {
     return $varName.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($varName);
     }, function () {
      return $varName;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ForInStatement().$varName$expression$body$($canonicalVarName, $expr, $bodyStmt);
   };
   this.$for$while$step$do$ = function ($initExpr, $testExpr, $incExpr, $bodyStmt) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ForStatement().$initExpression$test$increment$body$($initExpr, $testExpr, $incExpr, $bodyStmt);
   };
   this.$function$of$body$ = function ($name, $params, $body) {
    var self = this;
    var $canonicalName = nil;
    var $canonicalParams = nil;
    $canonicalName = $name.$isNil().$ifTrue$ifFalse$(function () {
     return $name;
    }, function () {
     return $name.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($name);
     }, function () {
      return $name;
     });
    });
    $canonicalParams = $params.$collect$(function ($each) {
     return $each.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($each);
     }, function () {
      return $each;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$FunctionStatement().$name$parameters$body$($canonicalName, $canonicalParams, $body);
   };
   this.$functionOf$body$ = function ($params, $body) {
    var self = this;
    var $paramIds = nil;
    $paramIds = $params.$collect$(function ($each) {
     return $each.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($each);
     }, function () {
      return $each;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$FunctionExpression().$name$parameters$body$(nil, $paramIds, $body);
   };
   this.$ident$ = function ($name) {
    var self = this;
    self._$assert$message$(function () {
     return $name.$isString();
    }, "name must be a string");
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IdentifierExpression().$name$($name);
   };
   this.$if$then$ = function ($expression, $then) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IfStatement().$expression$then$else$($expression, $then, nil);
   };
   this.$if$then$else$ = function ($expression, $then, $else) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IfStatement().$expression$then$else$($expression, $then, $else);
   };
   this.$literal$ = function ($value) {
    var self = this;
    if ($value.$isString()) {
     return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$StringLiteral().$value$($value);
    } else {
     nil;
    };
    if ($value.$isNumber()) {
     return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$NumberLiteral().$value$($value);
    } else {
     nil;
    };
    if (true.$$equal($value) || false.$$equal($value)) {
     return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$BooleanLiteral().$value$($value);
    } else {
     nil;
    };
    self._$error$("this value cannot be a Javascript literal");
    return self;
   };
   this.$new$with$ = function ($expression, $args) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$NewExpression().$expression$arguments$($expression, $args);
   };
   this.$objectLiteral = function () {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ObjectLiteral().$new();
   };
   this.$objectLiteral$ = function ($slots) {
    var self = this;
    $slots.$keysAndValuesDo$(function ($index, $element) {
     return self._$assert$message$($index.$odd().$ifTrue$ifFalse$(function () {
      return function () {
       return $element.$isString();
      };
     }, function () {
      return function () {
       return $element.$isJsNode();
      };
     }), "JS node or string expected");
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ObjectLiteral().$slots$($slots);
   };
   this.$objectLiteralSlotNames$values$ = function ($names, $values) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ObjectLiteral().$slotNames$values$($names, $values);
   };
   this.$operator$with$and$ = function ($name, $left, $right) {
    var self = this;
    var $canonicalName = nil;
    $canonicalName = $name.$isNil().$ifTrue$ifFalse$(function () {
     return $name;
    }, function () {
     return $name.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($name);
     }, function () {
      return $name;
     });
    });
    self._$assert$message$(function () {
     return $left.$isJsNode();
    }, "JS node expected on left");
    self._$assert$message$(function () {
     return $right.$isJsNode();
    }, "JS node expected on right");
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$OperatorExpression().$operator$with$and$($canonicalName, $left, $right);
   };
   this.$postfixOperator$on$ = function ($name, $operand) {
    var self = this;
    var $canonicalName = nil;
    $canonicalName = $name.$isNil().$ifTrue$ifFalse$(function () {
     return $name;
    }, function () {
     return $name.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($name);
     }, function () {
      return $name;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$UnaryOperatorExpression().$operator$postfix$on$($canonicalName, true, $operand);
   };
   this.$prefixOperator$on$ = function ($name, $operand) {
    var self = this;
    var $canonicalName = nil;
    $canonicalName = $name.$isNil().$ifTrue$ifFalse$(function () {
     return $name;
    }, function () {
     return $name.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($name);
     }, function () {
      return $name;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$UnaryOperatorExpression().$operator$postfix$on$($canonicalName, false, $operand);
   };
   this.$propertyOf$at$ = function ($expression, $indexExpr) {
    var self = this;
    self._$assert$message$(function () {
     return $expression.$isJsNode();
    }, "JS node expected");
    self._$assert$message$(function () {
     return $indexExpr.$isJsNode();
    }, "JS node expected for index expression");
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$MemberExpression().$primary$property$($expression, $indexExpr);
   };
   this.$propertyOf$atPath$ = function ($expression, $path) {
    var self = this;
    self._$assert$message$(function () {
     return $expression.$isJsNode();
    }, "JS node expected");
    return $path.$isEmpty().$ifTrue$ifFalse$(function () {
     return $expression;
    }, function () {
     return self._$propertyOf$atPath$(self._$propertyOf$at$($expression, $path.$first()), $path.$copyFrom$to$(2, $path.$size()));
    });
   };
   this.$return = function () {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ReturnStatement().$expression$(nil);
   };
   this.$return$ = function ($expression) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ReturnStatement().$expression$($expression);
   };
   this.$script$ = function ($statements) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$Script().$statements$($statements);
   };
   this.$ternaryIf$then$else$ = function ($condition, $then, $else) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TernaryOperatorExpression().$if$then$else$($condition, $then, $else);
   };
   this.$throw$ = function ($expression) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ThrowStatement().$expression$($expression);
   };
   this.$try$catch$with$ = function ($block, $varName, $catchBlock) {
    var self = this;
    var $canonicalVarName = nil;
    $canonicalVarName = $varName.$isNil().$ifTrue$ifFalse$(function () {
     return $varName;
    }, function () {
     return $varName.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($varName);
     }, function () {
      return $varName;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TryStatement().$block$catch$with$finally$($block, $canonicalVarName, $catchBlock, nil);
   };
   this.$try$catch$with$finally$ = function ($block, $varName, $catchBlock, $finallyBlock) {
    var self = this;
    var $canonicalVarName = nil;
    $canonicalVarName = $varName.$isNil().$ifTrue$ifFalse$(function () {
     return $varName;
    }, function () {
     return $varName.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($varName);
     }, function () {
      return $varName;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TryStatement().$block$catch$with$finally$($block, $canonicalVarName, $catchBlock, $finallyBlock);
   };
   this.$try$finally$ = function ($block, $finallyBlock) {
    var self = this;
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TryStatement().$block$catch$with$finally$($block, nil, nil, $finallyBlock);
   };
   this.$var$ = function ($name) {
    var self = this;
    var $canonicalName = nil;
    $canonicalName = $name.$isNil().$ifTrue$ifFalse$(function () {
     return $name;
    }, function () {
     return $name.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($name);
     }, function () {
      return $name;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$VariableStatement().$name$initializer$($canonicalName, nil);
   };
   this.$var$value$ = function ($name, $expr) {
    var self = this;
    var $canonicalName = nil;
    $canonicalName = $name.$isNil().$ifTrue$ifFalse$(function () {
     return $name;
    }, function () {
     return $name.$isString().$ifTrue$ifFalse$(function () {
      return self._$ident$($name);
     }, function () {
      return $name;
     });
    });
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$VariableStatement().$name$initializer$($canonicalName, $expr);
   };
   this.$verbatim$ = function ($text) {
    var self = this;
    self._$assert$message$(function () {
     return $text.$isString();
    }, "String expected");
    return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$VerbatimNode().$text$($text);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for JavascriptGeneration`Factory";
     this._$superInit$JavascriptGeneration$Factory = $.$superInit$JavascriptGeneration$Factory;
     this.$superInit$JavascriptGeneration$Factory = dnuCatcher("$superInit$JavascriptGeneration$Factory");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$array$ = this._$array$ = $.$array$;
     this.$assign$toBe$ = this._$assign$toBe$ = $.$assign$toBe$;
     this.$block$ = this._$block$ = $.$block$;
     this.$call$with$ = this._$call$with$ = $.$call$with$;
     this.$for$in$do$ = this._$for$in$do$ = $.$for$in$do$;
     this.$for$while$step$do$ = this._$for$while$step$do$ = $.$for$while$step$do$;
     this.$function$of$body$ = this._$function$of$body$ = $.$function$of$body$;
     this.$functionOf$body$ = this._$functionOf$body$ = $.$functionOf$body$;
     this.$ident$ = this._$ident$ = $.$ident$;
     this.$if$then$ = this._$if$then$ = $.$if$then$;
     this.$if$then$else$ = this._$if$then$else$ = $.$if$then$else$;
     this.$literal$ = this._$literal$ = $.$literal$;
     this.$new$with$ = this._$new$with$ = $.$new$with$;
     this.$objectLiteral = this._$objectLiteral = $.$objectLiteral;
     this.$objectLiteral$ = this._$objectLiteral$ = $.$objectLiteral$;
     this.$objectLiteralSlotNames$values$ = this._$objectLiteralSlotNames$values$ = $.$objectLiteralSlotNames$values$;
     this.$operator$with$and$ = this._$operator$with$and$ = $.$operator$with$and$;
     this.$postfixOperator$on$ = this._$postfixOperator$on$ = $.$postfixOperator$on$;
     this.$prefixOperator$on$ = this._$prefixOperator$on$ = $.$prefixOperator$on$;
     this.$propertyOf$at$ = this._$propertyOf$at$ = $.$propertyOf$at$;
     this.$propertyOf$atPath$ = this._$propertyOf$atPath$ = $.$propertyOf$atPath$;
     this.$return = this._$return = $.$return;
     this.$return$ = this._$return$ = $.$return$;
     this.$script$ = this._$script$ = $.$script$;
     this.$ternaryIf$then$else$ = this._$ternaryIf$then$else$ = $.$ternaryIf$then$else$;
     this.$throw$ = this._$throw$ = $.$throw$;
     this.$try$catch$with$ = this._$try$catch$with$ = $.$try$catch$with$;
     this.$try$catch$with$finally$ = this._$try$catch$with$finally$ = $.$try$catch$with$finally$;
     this.$try$finally$ = this._$try$finally$ = $.$try$finally$;
     this.$var$ = this._$var$ = $.$var$;
     this.$var$value$ = this._$var$value$ = $.$var$value$;
     this.$verbatim$ = this._$verbatim$ = $.$verbatim$;
     this.$enclosingObjects$JavascriptGeneration$Factory = enclosingObjects;
     this.$super$JavascriptGeneration$Factory$slot = runtimeSuperclass;
     this["JavascriptGeneration`Factory"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["JavascriptGeneration`Factory"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for JavascriptGeneration`Factory";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for JavascriptGeneration`Factory";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$JavascriptGeneration$Factory = enclosingObjects;
      this.$super$JavascriptGeneration$Factory = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$JavascriptGeneration$Syntax = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for JavascriptGeneration`Syntax";
   this.name = "JavascriptGeneration`Syntax";
   this.header = 2140;
   this.slots = [
    new SM("JavascriptGeneration`Syntax`ArrayExpression", true, true),
    new SM("JavascriptGeneration`Syntax`AssignmentExpression", true, true),
    new SM("JavascriptGeneration`Syntax`Block", true, true),
    new SM("JavascriptGeneration`Syntax`BooleanLiteral", true, true),
    new SM("JavascriptGeneration`Syntax`CallExpression", true, true),
    new SM("JavascriptGeneration`Syntax`ForInStatement", true, true),
    new SM("JavascriptGeneration`Syntax`ForStatement", true, true),
    new SM("JavascriptGeneration`Syntax`FunctionExpression", true, true),
    new SM("JavascriptGeneration`Syntax`FunctionStatement", true, true),
    new SM("JavascriptGeneration`Syntax`IdentifierExpression", true, true),
    new SM("JavascriptGeneration`Syntax`IfStatement", true, true),
    new SM("JavascriptGeneration`Syntax`MemberExpression", true, true),
    new SM("JavascriptGeneration`Syntax`NewExpression", true, true),
    new SM("JavascriptGeneration`Syntax`Node", true, true),
    new SM("JavascriptGeneration`Syntax`NumberLiteral", true, true),
    new SM("JavascriptGeneration`Syntax`ObjectLiteral", true, true),
    new SM("JavascriptGeneration`Syntax`OperatorExpression", true, true),
    new SM("JavascriptGeneration`Syntax`ReturnStatement", true, true),
    new SM("JavascriptGeneration`Syntax`Script", true, true),
    new SM("JavascriptGeneration`Syntax`StringLiteral", true, true),
    new SM("JavascriptGeneration`Syntax`TernaryOperatorExpression", true, true),
    new SM("JavascriptGeneration`Syntax`ThrowStatement", true, true),
    new SM("JavascriptGeneration`Syntax`TryStatement", true, true),
    new SM("JavascriptGeneration`Syntax`UnaryOperatorExpression", true, true),
    new SM("JavascriptGeneration`Syntax`VariableStatement", true, true),
    new SM("JavascriptGeneration`Syntax`VerbatimNode", true, true)
   ];
   this.methods = [
    new MM("superInit`JavascriptGeneration`Syntax", true, 2141),
    new MM("instance`initializer", true, 2142),
    new MM("ArrayExpression", true, 0),
    new MM("AssignmentExpression", true, 0),
    new MM("Block", true, 0),
    new MM("BooleanLiteral", true, 0),
    new MM("CallExpression", true, 0),
    new MM("ForInStatement", true, 0),
    new MM("ForStatement", true, 0),
    new MM("FunctionExpression", true, 0),
    new MM("FunctionStatement", true, 0),
    new MM("IdentifierExpression", true, 0),
    new MM("IfStatement", true, 0),
    new MM("MemberExpression", true, 0),
    new MM("NewExpression", true, 0),
    new MM("Node", true, 0),
    new MM("NumberLiteral", true, 0),
    new MM("ObjectLiteral", true, 0),
    new MM("OperatorExpression", true, 0),
    new MM("ReturnStatement", true, 0),
    new MM("Script", true, 0),
    new MM("StringLiteral", true, 0),
    new MM("TernaryOperatorExpression", true, 0),
    new MM("ThrowStatement", true, 0),
    new MM("TryStatement", true, 0),
    new MM("UnaryOperatorExpression", true, 0),
    new MM("VariableStatement", true, 0),
    new MM("VerbatimNode", true, 0),
    new MM("init`JavascriptGeneration`Syntax`ArrayExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`ArrayExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`ArrayExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`AssignmentExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`AssignmentExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`AssignmentExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`Block:", true, 0),
    new MM("JavascriptGeneration`Syntax`Block", true, 0),
    new MM("JavascriptGeneration`Syntax`Block:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`BooleanLiteral:", true, 0),
    new MM("JavascriptGeneration`Syntax`BooleanLiteral", true, 0),
    new MM("JavascriptGeneration`Syntax`BooleanLiteral:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`CallExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`CallExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`CallExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`ForInStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`ForInStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`ForInStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`ForStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`ForStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`ForStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`FunctionExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`FunctionExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`FunctionExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`FunctionStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`FunctionStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`FunctionStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`IdentifierExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`IdentifierExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`IdentifierExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`IfStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`IfStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`IfStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`MemberExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`MemberExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`MemberExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`NewExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`NewExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`NewExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`Node:", true, 0),
    new MM("JavascriptGeneration`Syntax`Node", true, 0),
    new MM("JavascriptGeneration`Syntax`Node:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`NumberLiteral:", true, 0),
    new MM("JavascriptGeneration`Syntax`NumberLiteral", true, 0),
    new MM("JavascriptGeneration`Syntax`NumberLiteral:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`ObjectLiteral:", true, 0),
    new MM("JavascriptGeneration`Syntax`ObjectLiteral", true, 0),
    new MM("JavascriptGeneration`Syntax`ObjectLiteral:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`OperatorExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`OperatorExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`OperatorExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`ReturnStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`ReturnStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`ReturnStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`Script:", true, 0),
    new MM("JavascriptGeneration`Syntax`Script", true, 0),
    new MM("JavascriptGeneration`Syntax`Script:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`StringLiteral:", true, 0),
    new MM("JavascriptGeneration`Syntax`StringLiteral", true, 0),
    new MM("JavascriptGeneration`Syntax`StringLiteral:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`TernaryOperatorExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`TernaryOperatorExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`TernaryOperatorExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`ThrowStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`ThrowStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`ThrowStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`TryStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`TryStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`TryStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`UnaryOperatorExpression:", true, 0),
    new MM("JavascriptGeneration`Syntax`UnaryOperatorExpression", true, 0),
    new MM("JavascriptGeneration`Syntax`UnaryOperatorExpression:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`VariableStatement:", true, 0),
    new MM("JavascriptGeneration`Syntax`VariableStatement", true, 0),
    new MM("JavascriptGeneration`Syntax`VariableStatement:", true, 0),
    new MM("init`JavascriptGeneration`Syntax`VerbatimNode:", true, 0),
    new MM("JavascriptGeneration`Syntax`VerbatimNode", true, 0),
    new MM("JavascriptGeneration`Syntax`VerbatimNode:", true, 0)
   ];
   this.nestedClasses = [
    "JavascriptGeneration`Syntax`ArrayExpression",
    "JavascriptGeneration`Syntax`AssignmentExpression",
    "JavascriptGeneration`Syntax`Block",
    "JavascriptGeneration`Syntax`BooleanLiteral",
    "JavascriptGeneration`Syntax`CallExpression",
    "JavascriptGeneration`Syntax`ForInStatement",
    "JavascriptGeneration`Syntax`ForStatement",
    "JavascriptGeneration`Syntax`FunctionExpression",
    "JavascriptGeneration`Syntax`FunctionStatement",
    "JavascriptGeneration`Syntax`IdentifierExpression",
    "JavascriptGeneration`Syntax`IfStatement",
    "JavascriptGeneration`Syntax`MemberExpression",
    "JavascriptGeneration`Syntax`NewExpression",
    "JavascriptGeneration`Syntax`Node",
    "JavascriptGeneration`Syntax`NumberLiteral",
    "JavascriptGeneration`Syntax`ObjectLiteral",
    "JavascriptGeneration`Syntax`OperatorExpression",
    "JavascriptGeneration`Syntax`ReturnStatement",
    "JavascriptGeneration`Syntax`Script",
    "JavascriptGeneration`Syntax`StringLiteral",
    "JavascriptGeneration`Syntax`TernaryOperatorExpression",
    "JavascriptGeneration`Syntax`ThrowStatement",
    "JavascriptGeneration`Syntax`TryStatement",
    "JavascriptGeneration`Syntax`UnaryOperatorExpression",
    "JavascriptGeneration`Syntax`VariableStatement",
    "JavascriptGeneration`Syntax`VerbatimNode"
   ];
   this.applications = [];
   this.$superInit$JavascriptGeneration$Syntax = function () {
    var self = this;
    self.$super$JavascriptGeneration$Syntax$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$JavascriptGeneration$Syntax();
    return self;
   };
   this.$ArrayExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$ArrayExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$ArrayExpression;
     this.$JavascriptGeneration$Syntax$ArrayExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$ArrayExpression$slot;
   };
   this.$AssignmentExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$AssignmentExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$AssignmentExpression;
     this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$AssignmentExpression$slot;
   };
   this.$Block = function () {
    if (nil === this.$JavascriptGeneration$Syntax$Block$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$Block;
     this.$JavascriptGeneration$Syntax$Block$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$Block$slot;
   };
   this.$BooleanLiteral = function () {
    if (nil === this.$JavascriptGeneration$Syntax$BooleanLiteral$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$BooleanLiteral;
     this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$BooleanLiteral$slot;
   };
   this.$CallExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$CallExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$CallExpression;
     this.$JavascriptGeneration$Syntax$CallExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$CallExpression$slot;
   };
   this.$ForInStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$ForInStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$ForInStatement;
     this.$JavascriptGeneration$Syntax$ForInStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$ForInStatement$slot;
   };
   this.$ForStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$ForStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$ForStatement;
     this.$JavascriptGeneration$Syntax$ForStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$ForStatement$slot;
   };
   this.$FunctionExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$FunctionExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$FunctionExpression;
     this.$JavascriptGeneration$Syntax$FunctionExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$FunctionExpression$slot;
   };
   this.$FunctionStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$FunctionStatement$slot) {
     var self = this;
     var superclass = self._$FunctionExpression();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$FunctionStatement;
     this.$JavascriptGeneration$Syntax$FunctionStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$FunctionStatement$slot;
   };
   this.$IdentifierExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$IdentifierExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$IdentifierExpression;
     this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$IdentifierExpression$slot;
   };
   this.$IfStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$IfStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$IfStatement;
     this.$JavascriptGeneration$Syntax$IfStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$IfStatement$slot;
   };
   this.$MemberExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$MemberExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$MemberExpression;
     this.$JavascriptGeneration$Syntax$MemberExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$MemberExpression$slot;
   };
   this.$NewExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$NewExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$NewExpression;
     this.$JavascriptGeneration$Syntax$NewExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$NewExpression$slot;
   };
   this.$Node = function () {
    if (nil === this.$JavascriptGeneration$Syntax$Node$slot) {
     var self = this;
     var superclass = self._$Object();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$Node;
     this.$JavascriptGeneration$Syntax$Node$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$Node$slot;
   };
   this.$NumberLiteral = function () {
    if (nil === this.$JavascriptGeneration$Syntax$NumberLiteral$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$NumberLiteral;
     this.$JavascriptGeneration$Syntax$NumberLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$NumberLiteral$slot;
   };
   this.$ObjectLiteral = function () {
    if (nil === this.$JavascriptGeneration$Syntax$ObjectLiteral$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$ObjectLiteral;
     this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$ObjectLiteral$slot;
   };
   this.$OperatorExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$OperatorExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$OperatorExpression;
     this.$JavascriptGeneration$Syntax$OperatorExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$OperatorExpression$slot;
   };
   this.$ReturnStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$ReturnStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$ReturnStatement;
     this.$JavascriptGeneration$Syntax$ReturnStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$ReturnStatement$slot;
   };
   this.$Script = function () {
    if (nil === this.$JavascriptGeneration$Syntax$Script$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$Script;
     this.$JavascriptGeneration$Syntax$Script$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$Script$slot;
   };
   this.$StringLiteral = function () {
    if (nil === this.$JavascriptGeneration$Syntax$StringLiteral$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$StringLiteral;
     this.$JavascriptGeneration$Syntax$StringLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$StringLiteral$slot;
   };
   this.$TernaryOperatorExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$TernaryOperatorExpression;
     this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot;
   };
   this.$ThrowStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$ThrowStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$ThrowStatement;
     this.$JavascriptGeneration$Syntax$ThrowStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$ThrowStatement$slot;
   };
   this.$TryStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$TryStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$TryStatement;
     this.$JavascriptGeneration$Syntax$TryStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$TryStatement$slot;
   };
   this.$UnaryOperatorExpression = function () {
    if (nil === this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$UnaryOperatorExpression;
     this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot;
   };
   this.$VariableStatement = function () {
    if (nil === this.$JavascriptGeneration$Syntax$VariableStatement$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$VariableStatement;
     this.$JavascriptGeneration$Syntax$VariableStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$VariableStatement$slot;
   };
   this.$VerbatimNode = function () {
    if (nil === this.$JavascriptGeneration$Syntax$VerbatimNode$slot) {
     var self = this;
     var superclass = self._$Node();
     var enclosingObjects = [this].concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
     var mixin = $.$JavascriptGeneration$Syntax$VerbatimNode;
     this.$JavascriptGeneration$Syntax$VerbatimNode$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$JavascriptGeneration$Syntax$VerbatimNode$slot;
   };
   this.$init$JavascriptGeneration$Syntax$ArrayExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$ArrayExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ArrayExpression = function () {
    return this.$JavascriptGeneration$Syntax$ArrayExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$ArrayExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$ArrayExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$AssignmentExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$AssignmentExpression = function () {
    return this.$JavascriptGeneration$Syntax$AssignmentExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$AssignmentExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$Block$ = function (v) {
    this.$JavascriptGeneration$Syntax$Block$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$Block = function () {
    return this.$JavascriptGeneration$Syntax$Block$slot;
   };
   this.$JavascriptGeneration$Syntax$Block$ = function (v) {
    this.$JavascriptGeneration$Syntax$Block$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$BooleanLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$BooleanLiteral = function () {
    return this.$JavascriptGeneration$Syntax$BooleanLiteral$slot;
   };
   this.$JavascriptGeneration$Syntax$BooleanLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$CallExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$CallExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$CallExpression = function () {
    return this.$JavascriptGeneration$Syntax$CallExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$CallExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$CallExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$ForInStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ForInStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ForInStatement = function () {
    return this.$JavascriptGeneration$Syntax$ForInStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$ForInStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ForInStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$ForStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ForStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ForStatement = function () {
    return this.$JavascriptGeneration$Syntax$ForStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$ForStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ForStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$FunctionExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$FunctionExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$FunctionExpression = function () {
    return this.$JavascriptGeneration$Syntax$FunctionExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$FunctionExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$FunctionExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$FunctionStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$FunctionStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$FunctionStatement = function () {
    return this.$JavascriptGeneration$Syntax$FunctionStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$FunctionStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$FunctionStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$IdentifierExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$IdentifierExpression = function () {
    return this.$JavascriptGeneration$Syntax$IdentifierExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$IdentifierExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$IfStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$IfStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$IfStatement = function () {
    return this.$JavascriptGeneration$Syntax$IfStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$IfStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$IfStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$MemberExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$MemberExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$MemberExpression = function () {
    return this.$JavascriptGeneration$Syntax$MemberExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$MemberExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$MemberExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$NewExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$NewExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$NewExpression = function () {
    return this.$JavascriptGeneration$Syntax$NewExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$NewExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$NewExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$Node$ = function (v) {
    this.$JavascriptGeneration$Syntax$Node$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$Node = function () {
    return this.$JavascriptGeneration$Syntax$Node$slot;
   };
   this.$JavascriptGeneration$Syntax$Node$ = function (v) {
    this.$JavascriptGeneration$Syntax$Node$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$NumberLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$NumberLiteral$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$NumberLiteral = function () {
    return this.$JavascriptGeneration$Syntax$NumberLiteral$slot;
   };
   this.$JavascriptGeneration$Syntax$NumberLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$NumberLiteral$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$ObjectLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ObjectLiteral = function () {
    return this.$JavascriptGeneration$Syntax$ObjectLiteral$slot;
   };
   this.$JavascriptGeneration$Syntax$ObjectLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$OperatorExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$OperatorExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$OperatorExpression = function () {
    return this.$JavascriptGeneration$Syntax$OperatorExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$OperatorExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$OperatorExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$ReturnStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ReturnStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ReturnStatement = function () {
    return this.$JavascriptGeneration$Syntax$ReturnStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$ReturnStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ReturnStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$Script$ = function (v) {
    this.$JavascriptGeneration$Syntax$Script$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$Script = function () {
    return this.$JavascriptGeneration$Syntax$Script$slot;
   };
   this.$JavascriptGeneration$Syntax$Script$ = function (v) {
    this.$JavascriptGeneration$Syntax$Script$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$StringLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$StringLiteral$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$StringLiteral = function () {
    return this.$JavascriptGeneration$Syntax$StringLiteral$slot;
   };
   this.$JavascriptGeneration$Syntax$StringLiteral$ = function (v) {
    this.$JavascriptGeneration$Syntax$StringLiteral$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$TernaryOperatorExpression = function () {
    return this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$ThrowStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ThrowStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ThrowStatement = function () {
    return this.$JavascriptGeneration$Syntax$ThrowStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$ThrowStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$ThrowStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$TryStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$TryStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$TryStatement = function () {
    return this.$JavascriptGeneration$Syntax$TryStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$TryStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$TryStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$UnaryOperatorExpression = function () {
    return this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot;
   };
   this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = function (v) {
    this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$VariableStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$VariableStatement$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$VariableStatement = function () {
    return this.$JavascriptGeneration$Syntax$VariableStatement$slot;
   };
   this.$JavascriptGeneration$Syntax$VariableStatement$ = function (v) {
    this.$JavascriptGeneration$Syntax$VariableStatement$slot = v;
    return this;
   };
   this.$init$JavascriptGeneration$Syntax$VerbatimNode$ = function (v) {
    this.$JavascriptGeneration$Syntax$VerbatimNode$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$VerbatimNode = function () {
    return this.$JavascriptGeneration$Syntax$VerbatimNode$slot;
   };
   this.$JavascriptGeneration$Syntax$VerbatimNode$ = function (v) {
    this.$JavascriptGeneration$Syntax$VerbatimNode$slot = v;
    return this;
   };
   this.$JavascriptGeneration$Syntax$ArrayExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ArrayExpression";
    this.name = "JavascriptGeneration`Syntax`ArrayExpression";
    this.header = 2143;
    this.slots = [new SM("elements_", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`ArrayExpression", true, 2144),
     new MM("instance`initializer", true, 2145),
     new MM("=", false, 2146),
     new MM("elements", false, 2147),
     new MM("visitBy:", false, 2148),
     new MM("init`elements_:", true, 0),
     new MM("elements_", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$ArrayExpression = function ($elements) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ArrayExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($elements) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$ArrayExpression($elements);
     self._$init$elements_$($elements);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$ArrayExpression$slot._$$equal.call(self, $anotherNode) && self._$elements().$$equal($anotherNode.$elements());
    };
    this.$elements = function () {
     var self = this;
     return self._$elements_();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitArrayExpression$(self);
    };
    this.$init$elements_$ = function (v) {
     this.$elements_$slot = v;
     return this;
    };
    this.$elements_ = function () {
     return this.$elements_$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`ArrayExpression";
      this._$superInit$JavascriptGeneration$Syntax$ArrayExpression = $.$superInit$JavascriptGeneration$Syntax$ArrayExpression;
      this.$superInit$JavascriptGeneration$Syntax$ArrayExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ArrayExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$elements = this._$elements = $.$elements;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$elements_$ = $.$init$elements_$;
      this.$init$elements_$ = dnuCatcher("$init$elements_$");
      this._$elements_ = $.$elements_;
      this.$elements_ = dnuCatcher("$elements_");
      this.$enclosingObjects$JavascriptGeneration$Syntax$ArrayExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$ArrayExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`ArrayExpression"] = function () {
       superBasicNew.call(this);
       this.$elements_$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`ArrayExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ArrayExpression";
     this.slots = [];
     this.methods = [new MM("elements:", true, 0)];
     this.nestedClasses = [];
     this.$elements$ = function ($elements) {
      return (new this.nonMeta.basicNew()).$instance$initializer($elements);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ArrayExpression";
       this.$elements$ = this._$elements$ = $.$elements$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$ArrayExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$ArrayExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$AssignmentExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`AssignmentExpression";
    this.name = "JavascriptGeneration`Syntax`AssignmentExpression";
    this.header = 2149;
    this.slots = [
     new SM("leftHandSide", false, false),
     new SM("rightHandSide", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`AssignmentExpression", true, 2150),
     new MM("instance`initializer", true, 2151),
     new MM("=", false, 2152),
     new MM("isOperatorExpression", false, 2153),
     new MM("printOn:", false, 2154),
     new MM("visitBy:", false, 2155),
     new MM("init`leftHandSide:", true, 0),
     new MM("leftHandSide", true, 0),
     new MM("init`rightHandSide:", true, 0),
     new MM("rightHandSide", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$AssignmentExpression = function ($lhs, $rhs) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($lhs, $rhs) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$AssignmentExpression($lhs, $rhs);
     self._$init$leftHandSide$($lhs);
     self._$init$rightHandSide$($rhs);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot._$$equal.call(self, $anotherNode) && (self._$leftHandSide().$$equal($anotherNode.$leftHandSide()) && self._$rightHandSide().$$equal($anotherNode.$rightHandSide()));
    };
    this.$isOperatorExpression = function () {
     var self = this;
     return true;
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     self._$leftHandSide().$printOn$($stream);
     $stream.$nextPutAll$(", ");
     self._$rightHandSide().$printOn$($stream);
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitAssignmentExpression$(self);
    };
    this.$init$leftHandSide$ = function (v) {
     this.$leftHandSide$slot = v;
     return this;
    };
    this.$leftHandSide = function () {
     return this.$leftHandSide$slot;
    };
    this.$init$rightHandSide$ = function (v) {
     this.$rightHandSide$slot = v;
     return this;
    };
    this.$rightHandSide = function () {
     return this.$rightHandSide$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`AssignmentExpression";
      this._$superInit$JavascriptGeneration$Syntax$AssignmentExpression = $.$superInit$JavascriptGeneration$Syntax$AssignmentExpression;
      this.$superInit$JavascriptGeneration$Syntax$AssignmentExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$AssignmentExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$isOperatorExpression = this._$isOperatorExpression = $.$isOperatorExpression;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$leftHandSide$ = this._$init$leftHandSide$ = $.$init$leftHandSide$;
      this.$leftHandSide = this._$leftHandSide = $.$leftHandSide;
      this.$init$rightHandSide$ = this._$init$rightHandSide$ = $.$init$rightHandSide$;
      this.$rightHandSide = this._$rightHandSide = $.$rightHandSide;
      this.$enclosingObjects$JavascriptGeneration$Syntax$AssignmentExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`AssignmentExpression"] = function () {
       superBasicNew.call(this);
       this.$leftHandSide$slot = nil;
       this.$rightHandSide$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`AssignmentExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`AssignmentExpression";
     this.slots = [];
     this.methods = [new MM("leftHandSide:rightHandSide:", true, 0)];
     this.nestedClasses = [];
     this.$leftHandSide$rightHandSide$ = function ($lhs, $rhs) {
      return (new this.nonMeta.basicNew()).$instance$initializer($lhs, $rhs);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`AssignmentExpression";
       this.$leftHandSide$rightHandSide$ = this._$leftHandSide$rightHandSide$ = $.$leftHandSide$rightHandSide$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$AssignmentExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$AssignmentExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$Block = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`Block";
    this.name = "JavascriptGeneration`Syntax`Block";
    this.header = 2156;
    this.slots = [new SM("statementsS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`Block", true, 2157),
     new MM("instance`initializer", true, 2158),
     new MM("=", false, 2159),
     new MM("asBlock", false, 2160),
     new MM("statements", false, 2161),
     new MM("visitBy:", false, 2162),
     new MM("init`statementsS:", true, 0),
     new MM("statementsS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$Block = function ($s) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$Block$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($s) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$Block($s);
     self._$init$statementsS$($s);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$Block$slot._$$equal.call(self, $anotherNode) && self._$statements().$$equal($anotherNode.$statements());
    };
    this.$asBlock = function () {
     var self = this;
     return self;
    };
    this.$statements = function () {
     var self = this;
     return self._$statementsS();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitBlock$(self);
    };
    this.$init$statementsS$ = function (v) {
     this.$statementsS$slot = v;
     return this;
    };
    this.$statementsS = function () {
     return this.$statementsS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`Block";
      this._$superInit$JavascriptGeneration$Syntax$Block = $.$superInit$JavascriptGeneration$Syntax$Block;
      this.$superInit$JavascriptGeneration$Syntax$Block = dnuCatcher("$superInit$JavascriptGeneration$Syntax$Block");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$asBlock = this._$asBlock = $.$asBlock;
      this.$statements = this._$statements = $.$statements;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$statementsS$ = $.$init$statementsS$;
      this.$init$statementsS$ = dnuCatcher("$init$statementsS$");
      this._$statementsS = $.$statementsS;
      this.$statementsS = dnuCatcher("$statementsS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$Block = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$Block$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`Block"] = function () {
       superBasicNew.call(this);
       this.$statementsS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`Block"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`Block";
     this.slots = [];
     this.methods = [
      new MM("statements:", true, 0),
      new MM("empty", false, 2163)
     ];
     this.nestedClasses = [];
     this.$statements$ = function ($s) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s);
     };
     this.$empty = function () {
      var self = this;
      return self.$enclosingObjects$JavascriptGeneration$Syntax$Block[0]._$Block().$statements$([]);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`Block";
       this.$statements$ = this._$statements$ = $.$statements$;
       this.$empty = this._$empty = $.$empty;
       this.$enclosingObjects$JavascriptGeneration$Syntax$Block = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$Block = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$BooleanLiteral = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`BooleanLiteral";
    this.name = "JavascriptGeneration`Syntax`BooleanLiteral";
    this.header = 2164;
    this.slots = [new SM("valueS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`BooleanLiteral", true, 2165),
     new MM("instance`initializer", true, 2166),
     new MM("=", false, 2167),
     new MM("printOn:", false, 2168),
     new MM("value", false, 2169),
     new MM("visitBy:", false, 2170),
     new MM("init`valueS:", true, 0),
     new MM("valueS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$BooleanLiteral = function ($b) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($b) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$BooleanLiteral($b);
     self._$init$valueS$($b);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot._$$equal.call(self, $anotherNode) && self._$value().$$equal($anotherNode.$value());
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     self._$value().$printOn$($stream);
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$value = function () {
     var self = this;
     return self._$valueS();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitBooleanLiteral$(self);
    };
    this.$init$valueS$ = function (v) {
     this.$valueS$slot = v;
     return this;
    };
    this.$valueS = function () {
     return this.$valueS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`BooleanLiteral";
      this._$superInit$JavascriptGeneration$Syntax$BooleanLiteral = $.$superInit$JavascriptGeneration$Syntax$BooleanLiteral;
      this.$superInit$JavascriptGeneration$Syntax$BooleanLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$BooleanLiteral");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$value = this._$value = $.$value;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$valueS$ = $.$init$valueS$;
      this.$init$valueS$ = dnuCatcher("$init$valueS$");
      this._$valueS = $.$valueS;
      this.$valueS = dnuCatcher("$valueS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$BooleanLiteral = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`BooleanLiteral"] = function () {
       superBasicNew.call(this);
       this.$valueS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`BooleanLiteral"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`BooleanLiteral";
     this.slots = [];
     this.methods = [new MM("value:", true, 0)];
     this.nestedClasses = [];
     this.$value$ = function ($b) {
      return (new this.nonMeta.basicNew()).$instance$initializer($b);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`BooleanLiteral";
       this.$value$ = this._$value$ = $.$value$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$BooleanLiteral = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$BooleanLiteral = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$CallExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`CallExpression";
    this.name = "JavascriptGeneration`Syntax`CallExpression";
    this.header = 2171;
    this.slots = [
     new SM("function", false, false),
     new SM("arguments", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`CallExpression", true, 2172),
     new MM("instance`initializer", true, 2173),
     new MM("=", false, 2174),
     new MM("visitBy:", false, 2175),
     new MM("init`function:", true, 0),
     new MM("function", true, 0),
     new MM("init`arguments:", true, 0),
     new MM("arguments", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$CallExpression = function ($f, $args) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$CallExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($f, $args) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$CallExpression($f, $args);
     self._$init$function$($f);
     self._$init$arguments$($args);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$CallExpression$slot._$$equal.call(self, $anotherNode) && (self._$function().$$equal($anotherNode.$function()) && self._$arguments().$$equal($anotherNode.$arguments()));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitCallExpression$(self);
    };
    this.$init$function$ = function (v) {
     this.$function$slot = v;
     return this;
    };
    this.$function = function () {
     return this.$function$slot;
    };
    this.$init$arguments$ = function (v) {
     this.$arguments$slot = v;
     return this;
    };
    this.$arguments = function () {
     return this.$arguments$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`CallExpression";
      this._$superInit$JavascriptGeneration$Syntax$CallExpression = $.$superInit$JavascriptGeneration$Syntax$CallExpression;
      this.$superInit$JavascriptGeneration$Syntax$CallExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$CallExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$function$ = this._$init$function$ = $.$init$function$;
      this.$function = this._$function = $.$function;
      this.$init$arguments$ = this._$init$arguments$ = $.$init$arguments$;
      this.$arguments = this._$arguments = $.$arguments;
      this.$enclosingObjects$JavascriptGeneration$Syntax$CallExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$CallExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`CallExpression"] = function () {
       superBasicNew.call(this);
       this.$function$slot = nil;
       this.$arguments$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`CallExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`CallExpression";
     this.slots = [];
     this.methods = [new MM("function:arguments:", true, 0)];
     this.nestedClasses = [];
     this.$function$arguments$ = function ($f, $args) {
      return (new this.nonMeta.basicNew()).$instance$initializer($f, $args);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`CallExpression";
       this.$function$arguments$ = this._$function$arguments$ = $.$function$arguments$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$CallExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$CallExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$ForInStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ForInStatement";
    this.name = "JavascriptGeneration`Syntax`ForInStatement";
    this.header = 2176;
    this.slots = [
     new SM("varName", false, false),
     new SM("expression", false, false),
     new SM("body", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`ForInStatement", true, 2177),
     new MM("instance`initializer", true, 2178),
     new MM("=", false, 2179),
     new MM("visitBy:", false, 2180),
     new MM("init`varName:", true, 0),
     new MM("varName", true, 0),
     new MM("init`expression:", true, 0),
     new MM("expression", true, 0),
     new MM("init`body:", true, 0),
     new MM("body", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$ForInStatement = function ($name, $expr, $body) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ForInStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($name, $expr, $body) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$ForInStatement($name, $expr, $body);
     self._$init$varName$($name);
     self._$init$expression$($expr);
     self._$init$body$($body);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$ForInStatement$slot._$$equal.call(self, $anotherNode) && (self._$varName().$$equal($anotherNode.$varName()) && (self._$expression().$$equal($anotherNode.$expression()) && self._$body().$$equal($anotherNode.$body())));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitForInStatement$(self);
    };
    this.$init$varName$ = function (v) {
     this.$varName$slot = v;
     return this;
    };
    this.$varName = function () {
     return this.$varName$slot;
    };
    this.$init$expression$ = function (v) {
     this.$expression$slot = v;
     return this;
    };
    this.$expression = function () {
     return this.$expression$slot;
    };
    this.$init$body$ = function (v) {
     this.$body$slot = v;
     return this;
    };
    this.$body = function () {
     return this.$body$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`ForInStatement";
      this._$superInit$JavascriptGeneration$Syntax$ForInStatement = $.$superInit$JavascriptGeneration$Syntax$ForInStatement;
      this.$superInit$JavascriptGeneration$Syntax$ForInStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ForInStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$varName$ = this._$init$varName$ = $.$init$varName$;
      this.$varName = this._$varName = $.$varName;
      this.$init$expression$ = this._$init$expression$ = $.$init$expression$;
      this.$expression = this._$expression = $.$expression;
      this.$init$body$ = this._$init$body$ = $.$init$body$;
      this.$body = this._$body = $.$body;
      this.$enclosingObjects$JavascriptGeneration$Syntax$ForInStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$ForInStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`ForInStatement"] = function () {
       superBasicNew.call(this);
       this.$varName$slot = nil;
       this.$expression$slot = nil;
       this.$body$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`ForInStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ForInStatement";
     this.slots = [];
     this.methods = [new MM("varName:expression:body:", true, 0)];
     this.nestedClasses = [];
     this.$varName$expression$body$ = function ($name, $expr, $body) {
      return (new this.nonMeta.basicNew()).$instance$initializer($name, $expr, $body);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ForInStatement";
       this.$varName$expression$body$ = this._$varName$expression$body$ = $.$varName$expression$body$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$ForInStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$ForInStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$ForStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ForStatement";
    this.name = "JavascriptGeneration`Syntax`ForStatement";
    this.header = 2181;
    this.slots = [
     new SM("initExpression", false, false),
     new SM("testExpression", false, false),
     new SM("incrementExpression", false, false),
     new SM("body", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`ForStatement", true, 2182),
     new MM("instance`initializer", true, 2183),
     new MM("=", false, 2184),
     new MM("visitBy:", false, 2185),
     new MM("init`initExpression:", true, 0),
     new MM("initExpression", true, 0),
     new MM("init`testExpression:", true, 0),
     new MM("testExpression", true, 0),
     new MM("init`incrementExpression:", true, 0),
     new MM("incrementExpression", true, 0),
     new MM("init`body:", true, 0),
     new MM("body", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$ForStatement = function ($initExpr, $testExpr, $incExpr, $body) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ForStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($initExpr, $testExpr, $incExpr, $body) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$ForStatement($initExpr, $testExpr, $incExpr, $body);
     self._$init$initExpression$($initExpr);
     self._$init$testExpression$($testExpr);
     self._$init$incrementExpression$($incExpr);
     self._$init$body$($body);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$ForStatement$slot._$$equal.call(self, $anotherNode) && (self._$initExpression().$$equal($anotherNode.$initExpression()) && (self._$testExpression().$$equal($anotherNode.$testExpression()) && (self._$incrementExpression().$$equal($anotherNode.$incrementExpression()) && self._$body().$$equal($anotherNode.$body()))));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitForStatement$(self);
    };
    this.$init$initExpression$ = function (v) {
     this.$initExpression$slot = v;
     return this;
    };
    this.$initExpression = function () {
     return this.$initExpression$slot;
    };
    this.$init$testExpression$ = function (v) {
     this.$testExpression$slot = v;
     return this;
    };
    this.$testExpression = function () {
     return this.$testExpression$slot;
    };
    this.$init$incrementExpression$ = function (v) {
     this.$incrementExpression$slot = v;
     return this;
    };
    this.$incrementExpression = function () {
     return this.$incrementExpression$slot;
    };
    this.$init$body$ = function (v) {
     this.$body$slot = v;
     return this;
    };
    this.$body = function () {
     return this.$body$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`ForStatement";
      this._$superInit$JavascriptGeneration$Syntax$ForStatement = $.$superInit$JavascriptGeneration$Syntax$ForStatement;
      this.$superInit$JavascriptGeneration$Syntax$ForStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ForStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$initExpression$ = this._$init$initExpression$ = $.$init$initExpression$;
      this.$initExpression = this._$initExpression = $.$initExpression;
      this.$init$testExpression$ = this._$init$testExpression$ = $.$init$testExpression$;
      this.$testExpression = this._$testExpression = $.$testExpression;
      this.$init$incrementExpression$ = this._$init$incrementExpression$ = $.$init$incrementExpression$;
      this.$incrementExpression = this._$incrementExpression = $.$incrementExpression;
      this.$init$body$ = this._$init$body$ = $.$init$body$;
      this.$body = this._$body = $.$body;
      this.$enclosingObjects$JavascriptGeneration$Syntax$ForStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$ForStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`ForStatement"] = function () {
       superBasicNew.call(this);
       this.$initExpression$slot = nil;
       this.$testExpression$slot = nil;
       this.$incrementExpression$slot = nil;
       this.$body$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`ForStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ForStatement";
     this.slots = [];
     this.methods = [new MM("initExpression:test:increment:body:", true, 0)];
     this.nestedClasses = [];
     this.$initExpression$test$increment$body$ = function ($initExpr, $testExpr, $incExpr, $body) {
      return (new this.nonMeta.basicNew()).$instance$initializer($initExpr, $testExpr, $incExpr, $body);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ForStatement";
       this.$initExpression$test$increment$body$ = this._$initExpression$test$increment$body$ = $.$initExpression$test$increment$body$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$ForStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$ForStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$FunctionExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`FunctionExpression";
    this.name = "JavascriptGeneration`Syntax`FunctionExpression";
    this.header = 2186;
    this.slots = [
     new SM("name", false, false),
     new SM("parameters", false, false),
     new SM("body", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`FunctionExpression", true, 2187),
     new MM("instance`initializer", true, 2188),
     new MM("=", false, 2189),
     new MM("isFunctionExpression", false, 2190),
     new MM("visitBy:", false, 2191),
     new MM("init`name:", true, 0),
     new MM("name", true, 0),
     new MM("init`parameters:", true, 0),
     new MM("parameters", true, 0),
     new MM("init`body:", true, 0),
     new MM("body", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$FunctionExpression = function ($s, $names, $b) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$FunctionExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($s, $names, $b) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$FunctionExpression($s, $names, $b);
     self._$init$name$($s);
     self._$init$parameters$($names);
     self._$init$body$($b.$asBlock());
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$FunctionExpression$slot._$$equal.call(self, $anotherNode) && (self._$name().$$equal($anotherNode.$name()) && (self._$parameters().$$equal($anotherNode.$parameters()) && self._$body().$$equal($anotherNode.$body())));
    };
    this.$isFunctionExpression = function () {
     var self = this;
     return true;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitFunctionExpression$(self);
    };
    this.$init$name$ = function (v) {
     this.$name$slot = v;
     return this;
    };
    this.$name = function () {
     return this.$name$slot;
    };
    this.$init$parameters$ = function (v) {
     this.$parameters$slot = v;
     return this;
    };
    this.$parameters = function () {
     return this.$parameters$slot;
    };
    this.$init$body$ = function (v) {
     this.$body$slot = v;
     return this;
    };
    this.$body = function () {
     return this.$body$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`FunctionExpression";
      this._$superInit$JavascriptGeneration$Syntax$FunctionExpression = $.$superInit$JavascriptGeneration$Syntax$FunctionExpression;
      this.$superInit$JavascriptGeneration$Syntax$FunctionExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$FunctionExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$isFunctionExpression = this._$isFunctionExpression = $.$isFunctionExpression;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$name$ = this._$init$name$ = $.$init$name$;
      this.$name = this._$name = $.$name;
      this.$init$parameters$ = this._$init$parameters$ = $.$init$parameters$;
      this.$parameters = this._$parameters = $.$parameters;
      this.$init$body$ = this._$init$body$ = $.$init$body$;
      this.$body = this._$body = $.$body;
      this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$FunctionExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`FunctionExpression"] = function () {
       superBasicNew.call(this);
       this.$name$slot = nil;
       this.$parameters$slot = nil;
       this.$body$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`FunctionExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`FunctionExpression";
     this.slots = [];
     this.methods = [
      new MM("name:parameters:body:", true, 0),
      new MM("parameters:body:", false, 2192)
     ];
     this.nestedClasses = [];
     this.$name$parameters$body$ = function ($s, $names, $b) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s, $names, $b);
     };
     this.$parameters$body$ = function ($names, $b) {
      var self = this;
      return self.$enclosingObjects$JavascriptGeneration$Syntax$FunctionExpression[0]._$FunctionExpression().$name$parameters$body$(nil, $names, $b);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`FunctionExpression";
       this.$name$parameters$body$ = this._$name$parameters$body$ = $.$name$parameters$body$;
       this.$parameters$body$ = this._$parameters$body$ = $.$parameters$body$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$FunctionExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$FunctionStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`FunctionStatement";
    this.name = "JavascriptGeneration`Syntax`FunctionStatement";
    this.header = 2193;
    this.slots = [];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`FunctionStatement", true, 2194),
     new MM("instance`initializer", true, 2195),
     new MM("visitBy:", false, 2196)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$FunctionStatement = function ($s, $names, $b) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$FunctionStatement$slot._$instance$initializer.call(self, $s, $names, $b);
     return self;
    };
    this.$instance$initializer = function ($s, $names, $b) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$FunctionStatement($s, $names, $b);
     return self;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitFunctionStatement$(self);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`FunctionStatement";
      this._$superInit$JavascriptGeneration$Syntax$FunctionStatement = $.$superInit$JavascriptGeneration$Syntax$FunctionStatement;
      this.$superInit$JavascriptGeneration$Syntax$FunctionStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$FunctionStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$FunctionStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`FunctionStatement"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["JavascriptGeneration`Syntax`FunctionStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`FunctionStatement";
     this.slots = [];
     this.methods = [new MM("name:parameters:body:", true, 0)];
     this.nestedClasses = [];
     this.$name$parameters$body$ = function ($s, $names, $b) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s, $names, $b);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`FunctionStatement";
       this.$name$parameters$body$ = this._$name$parameters$body$ = $.$name$parameters$body$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$FunctionStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$IdentifierExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`IdentifierExpression";
    this.name = "JavascriptGeneration`Syntax`IdentifierExpression";
    this.header = 2197;
    this.slots = [new SM("nameS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`IdentifierExpression", true, 2198),
     new MM("instance`initializer", true, 2199),
     new MM("=", false, 2200),
     new MM("name", false, 2201),
     new MM("printOn:", false, 2202),
     new MM("visitBy:", false, 2203),
     new MM("init`nameS:", true, 0),
     new MM("nameS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$IdentifierExpression = function ($s) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($s) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$IdentifierExpression($s);
     self._$init$nameS$($s);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot._$$equal.call(self, $anotherNode) && self._$name().$$equal($anotherNode.$name());
    };
    this.$name = function () {
     var self = this;
     return self._$nameS();
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     $stream.$nextPutAll$(self._$name());
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitIdentifierExpression$(self);
    };
    this.$init$nameS$ = function (v) {
     this.$nameS$slot = v;
     return this;
    };
    this.$nameS = function () {
     return this.$nameS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`IdentifierExpression";
      this._$superInit$JavascriptGeneration$Syntax$IdentifierExpression = $.$superInit$JavascriptGeneration$Syntax$IdentifierExpression;
      this.$superInit$JavascriptGeneration$Syntax$IdentifierExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$IdentifierExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$name = this._$name = $.$name;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$nameS$ = $.$init$nameS$;
      this.$init$nameS$ = dnuCatcher("$init$nameS$");
      this._$nameS = $.$nameS;
      this.$nameS = dnuCatcher("$nameS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$IdentifierExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`IdentifierExpression"] = function () {
       superBasicNew.call(this);
       this.$nameS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`IdentifierExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`IdentifierExpression";
     this.slots = [];
     this.methods = [new MM("name:", true, 0)];
     this.nestedClasses = [];
     this.$name$ = function ($s) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`IdentifierExpression";
       this.$name$ = this._$name$ = $.$name$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$IdentifierExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$IdentifierExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$IfStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`IfStatement";
    this.name = "JavascriptGeneration`Syntax`IfStatement";
    this.header = 2204;
    this.slots = [
     new SM("expression", false, false),
     new SM("thenStatement", false, false),
     new SM("elseStatement", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`IfStatement", true, 2205),
     new MM("instance`initializer", true, 2206),
     new MM("=", false, 2207),
     new MM("visitBy:", false, 2208),
     new MM("init`expression:", true, 0),
     new MM("expression", true, 0),
     new MM("init`thenStatement:", true, 0),
     new MM("thenStatement", true, 0),
     new MM("init`elseStatement:", true, 0),
     new MM("elseStatement", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$IfStatement = function ($expr, $then, $else) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$IfStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($expr, $then, $else) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$IfStatement($expr, $then, $else);
     self._$init$expression$($expr);
     self._$init$thenStatement$($then);
     self._$init$elseStatement$($else);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$IfStatement$slot._$$equal.call(self, $anotherNode) && (self._$expression().$$equal($anotherNode.$expression()) && (self._$thenStatement().$$equal($anotherNode.$thenStatement()) && self._$elseStatement().$$equal($anotherNode.$elseStatement())));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitIfStatement$(self);
    };
    this.$init$expression$ = function (v) {
     this.$expression$slot = v;
     return this;
    };
    this.$expression = function () {
     return this.$expression$slot;
    };
    this.$init$thenStatement$ = function (v) {
     this.$thenStatement$slot = v;
     return this;
    };
    this.$thenStatement = function () {
     return this.$thenStatement$slot;
    };
    this.$init$elseStatement$ = function (v) {
     this.$elseStatement$slot = v;
     return this;
    };
    this.$elseStatement = function () {
     return this.$elseStatement$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`IfStatement";
      this._$superInit$JavascriptGeneration$Syntax$IfStatement = $.$superInit$JavascriptGeneration$Syntax$IfStatement;
      this.$superInit$JavascriptGeneration$Syntax$IfStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$IfStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$expression$ = this._$init$expression$ = $.$init$expression$;
      this.$expression = this._$expression = $.$expression;
      this.$init$thenStatement$ = this._$init$thenStatement$ = $.$init$thenStatement$;
      this.$thenStatement = this._$thenStatement = $.$thenStatement;
      this.$init$elseStatement$ = this._$init$elseStatement$ = $.$init$elseStatement$;
      this.$elseStatement = this._$elseStatement = $.$elseStatement;
      this.$enclosingObjects$JavascriptGeneration$Syntax$IfStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$IfStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`IfStatement"] = function () {
       superBasicNew.call(this);
       this.$expression$slot = nil;
       this.$thenStatement$slot = nil;
       this.$elseStatement$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`IfStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`IfStatement";
     this.slots = [];
     this.methods = [
      new MM("expression:then:else:", true, 0),
      new MM("expression:then:", false, 2209)
     ];
     this.nestedClasses = [];
     this.$expression$then$else$ = function ($expr, $then, $else) {
      return (new this.nonMeta.basicNew()).$instance$initializer($expr, $then, $else);
     };
     this.$expression$then$ = function ($expr, $then) {
      var self = this;
      return self.$enclosingObjects$JavascriptGeneration$Syntax$IfStatement[0]._$IfStatement().$expression$then$else$($expr, $then, nil);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`IfStatement";
       this.$expression$then$else$ = this._$expression$then$else$ = $.$expression$then$else$;
       this.$expression$then$ = this._$expression$then$ = $.$expression$then$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$IfStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$IfStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$MemberExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`MemberExpression";
    this.name = "JavascriptGeneration`Syntax`MemberExpression";
    this.header = 2210;
    this.slots = [
     new SM("primary", false, false),
     new SM("property", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`MemberExpression", true, 2211),
     new MM("instance`initializer", true, 2212),
     new MM("=", false, 2213),
     new MM("visitBy:", false, 2214),
     new MM("init`primary:", true, 0),
     new MM("primary", true, 0),
     new MM("init`property:", true, 0),
     new MM("property", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$MemberExpression = function ($expr, $p) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$MemberExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($expr, $p) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$MemberExpression($expr, $p);
     self._$init$primary$($expr);
     self._$init$property$($p);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$MemberExpression$slot._$$equal.call(self, $anotherNode) && (self._$primary().$$equal($anotherNode.$primary()) && self._$property().$$equal($anotherNode.$property()));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitMemberExpression$(self);
    };
    this.$init$primary$ = function (v) {
     this.$primary$slot = v;
     return this;
    };
    this.$primary = function () {
     return this.$primary$slot;
    };
    this.$init$property$ = function (v) {
     this.$property$slot = v;
     return this;
    };
    this.$property = function () {
     return this.$property$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`MemberExpression";
      this._$superInit$JavascriptGeneration$Syntax$MemberExpression = $.$superInit$JavascriptGeneration$Syntax$MemberExpression;
      this.$superInit$JavascriptGeneration$Syntax$MemberExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$MemberExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$primary$ = this._$init$primary$ = $.$init$primary$;
      this.$primary = this._$primary = $.$primary;
      this.$init$property$ = this._$init$property$ = $.$init$property$;
      this.$property = this._$property = $.$property;
      this.$enclosingObjects$JavascriptGeneration$Syntax$MemberExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$MemberExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`MemberExpression"] = function () {
       superBasicNew.call(this);
       this.$primary$slot = nil;
       this.$property$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`MemberExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`MemberExpression";
     this.slots = [];
     this.methods = [new MM("primary:property:", true, 0)];
     this.nestedClasses = [];
     this.$primary$property$ = function ($expr, $p) {
      return (new this.nonMeta.basicNew()).$instance$initializer($expr, $p);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`MemberExpression";
       this.$primary$property$ = this._$primary$property$ = $.$primary$property$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$MemberExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$MemberExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$NewExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`NewExpression";
    this.name = "JavascriptGeneration`Syntax`NewExpression";
    this.header = 2215;
    this.slots = [
     new SM("expression", false, false),
     new SM("arguments", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`NewExpression", true, 2216),
     new MM("instance`initializer", true, 2217),
     new MM("=", false, 2218),
     new MM("visitBy:", false, 2219),
     new MM("init`expression:", true, 0),
     new MM("expression", true, 0),
     new MM("init`arguments:", true, 0),
     new MM("arguments", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$NewExpression = function ($expr, $args) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$NewExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($expr, $args) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$NewExpression($expr, $args);
     self._$init$expression$($expr);
     self._$init$arguments$($args);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$NewExpression$slot._$$equal.call(self, $anotherNode) && (self._$expression().$$equal($anotherNode.$expression()) && self._$arguments().$$equal($anotherNode.$arguments()));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitNewExpression$(self);
    };
    this.$init$expression$ = function (v) {
     this.$expression$slot = v;
     return this;
    };
    this.$expression = function () {
     return this.$expression$slot;
    };
    this.$init$arguments$ = function (v) {
     this.$arguments$slot = v;
     return this;
    };
    this.$arguments = function () {
     return this.$arguments$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`NewExpression";
      this._$superInit$JavascriptGeneration$Syntax$NewExpression = $.$superInit$JavascriptGeneration$Syntax$NewExpression;
      this.$superInit$JavascriptGeneration$Syntax$NewExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$NewExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$expression$ = this._$init$expression$ = $.$init$expression$;
      this.$expression = this._$expression = $.$expression;
      this.$init$arguments$ = this._$init$arguments$ = $.$init$arguments$;
      this.$arguments = this._$arguments = $.$arguments;
      this.$enclosingObjects$JavascriptGeneration$Syntax$NewExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$NewExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`NewExpression"] = function () {
       superBasicNew.call(this);
       this.$expression$slot = nil;
       this.$arguments$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`NewExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`NewExpression";
     this.slots = [];
     this.methods = [new MM("expression:arguments:", true, 0)];
     this.nestedClasses = [];
     this.$expression$arguments$ = function ($expr, $args) {
      return (new this.nonMeta.basicNew()).$instance$initializer($expr, $args);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`NewExpression";
       this.$expression$arguments$ = this._$expression$arguments$ = $.$expression$arguments$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$NewExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$NewExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$Node = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`Node";
    this.name = "JavascriptGeneration`Syntax`Node";
    this.header = 2220;
    this.slots = [new SM("comment", true, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`Node", true, 2221),
     new MM("instance`initializer", true, 2222),
     new MM("=", false, 2223),
     new MM("asBlock", false, 2224),
     new MM("isFunctionExpression", false, 2225),
     new MM("isJsNode", false, 2226),
     new MM("isNumberLiteral", false, 2227),
     new MM("isOperatorExpression", false, 2228),
     new MM("init`comment:", true, 0),
     new MM("comment", true, 0),
     new MM("comment:", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$Node = function () {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$Node$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$Node();
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self._$class().$$equal($anotherNode.$class());
    };
    this.$asBlock = function () {
     var self = this;
     return self.$enclosingObjects$JavascriptGeneration$Syntax$Node[0]._$Block().$statements$([self]);
    };
    this.$isFunctionExpression = function () {
     var self = this;
     return false;
    };
    this.$isJsNode = function () {
     var self = this;
     return true;
    };
    this.$isNumberLiteral = function () {
     var self = this;
     return false;
    };
    this.$isOperatorExpression = function () {
     var self = this;
     return false;
    };
    this.$init$comment$ = function (v) {
     this.$comment$slot = v;
     return this;
    };
    this.$comment = function () {
     return this.$comment$slot;
    };
    this.$comment$ = function (v) {
     this.$comment$slot = v;
     return this;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`Node";
      this._$superInit$JavascriptGeneration$Syntax$Node = $.$superInit$JavascriptGeneration$Syntax$Node;
      this.$superInit$JavascriptGeneration$Syntax$Node = dnuCatcher("$superInit$JavascriptGeneration$Syntax$Node");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$asBlock = this._$asBlock = $.$asBlock;
      this.$isFunctionExpression = this._$isFunctionExpression = $.$isFunctionExpression;
      this.$isJsNode = this._$isJsNode = $.$isJsNode;
      this.$isNumberLiteral = this._$isNumberLiteral = $.$isNumberLiteral;
      this.$isOperatorExpression = this._$isOperatorExpression = $.$isOperatorExpression;
      this.$init$comment$ = this._$init$comment$ = $.$init$comment$;
      this.$comment = this._$comment = $.$comment;
      this.$comment$ = this._$comment$ = $.$comment$;
      this.$enclosingObjects$JavascriptGeneration$Syntax$Node = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$Node$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`Node"] = function () {
       superBasicNew.call(this);
       this.$comment$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`Node"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`Node";
     this.slots = [];
     this.methods = [new MM("new", true, 0)];
     this.nestedClasses = [];
     this.$new = function () {
      return (new this.nonMeta.basicNew()).$instance$initializer();
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`Node";
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$JavascriptGeneration$Syntax$Node = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$Node = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$NumberLiteral = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`NumberLiteral";
    this.name = "JavascriptGeneration`Syntax`NumberLiteral";
    this.header = 2229;
    this.slots = [new SM("valueS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`NumberLiteral", true, 2230),
     new MM("instance`initializer", true, 2231),
     new MM("=", false, 2232),
     new MM("isNumberLiteral", false, 2233),
     new MM("printOn:", false, 2234),
     new MM("value", false, 2235),
     new MM("visitBy:", false, 2236),
     new MM("init`valueS:", true, 0),
     new MM("valueS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$NumberLiteral = function ($v) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$NumberLiteral$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($v) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$NumberLiteral($v);
     self._$init$valueS$($v);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$NumberLiteral$slot._$$equal.call(self, $anotherNode) && self._$value().$$equal($anotherNode.$value());
    };
    this.$isNumberLiteral = function () {
     var self = this;
     return true;
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$NumberLiteral$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     self._$value().$printOn$($stream);
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$value = function () {
     var self = this;
     return self._$valueS();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitNumberLiteral$(self);
    };
    this.$init$valueS$ = function (v) {
     this.$valueS$slot = v;
     return this;
    };
    this.$valueS = function () {
     return this.$valueS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`NumberLiteral";
      this._$superInit$JavascriptGeneration$Syntax$NumberLiteral = $.$superInit$JavascriptGeneration$Syntax$NumberLiteral;
      this.$superInit$JavascriptGeneration$Syntax$NumberLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$NumberLiteral");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$isNumberLiteral = this._$isNumberLiteral = $.$isNumberLiteral;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$value = this._$value = $.$value;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$valueS$ = $.$init$valueS$;
      this.$init$valueS$ = dnuCatcher("$init$valueS$");
      this._$valueS = $.$valueS;
      this.$valueS = dnuCatcher("$valueS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$NumberLiteral = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$NumberLiteral$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`NumberLiteral"] = function () {
       superBasicNew.call(this);
       this.$valueS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`NumberLiteral"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`NumberLiteral";
     this.slots = [];
     this.methods = [new MM("value:", true, 0)];
     this.nestedClasses = [];
     this.$value$ = function ($v) {
      return (new this.nonMeta.basicNew()).$instance$initializer($v);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`NumberLiteral";
       this.$value$ = this._$value$ = $.$value$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$NumberLiteral = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$NumberLiteral = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$ObjectLiteral = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ObjectLiteral";
    this.name = "JavascriptGeneration`Syntax`ObjectLiteral";
    this.header = 2237;
    this.slots = [
     new SM("slotNames", false, false),
     new SM("slotValues", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`ObjectLiteral", true, 2238),
     new MM("instance`initializer", true, 2239),
     new MM("=", false, 2240),
     new MM("addSlot:value:", false, 2241),
     new MM("slotCount", false, 2242),
     new MM("slotsDo:", false, 2243),
     new MM("slotsDo:betweenDo:", false, 2244),
     new MM("visitBy:", false, 2245),
     new MM("init`slotNames:", true, 0),
     new MM("slotNames", true, 0),
     new MM("init`slotValues:", true, 0),
     new MM("slotValues", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$ObjectLiteral = function () {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ObjectLiteral$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$ObjectLiteral();
     self._$init$slotNames$($0.$List(self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[1]).$new());
     self._$init$slotValues$($0.$List(self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[1]).$new());
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$ObjectLiteral$slot._$$equal.call(self, $anotherNode) && (self._$slotNames().$$equal($anotherNode.$slotNames()) && self._$slotValues().$$equal($anotherNode.$slotValues()));
    };
    this.$addSlot$value$ = function ($name, $object) {
     var self = this;
     self._$slotNames().$addLast$($name);
     self._$slotValues().$addLast$($object);
     return self;
    };
    this.$slotCount = function () {
     var self = this;
     return self._$slotNames().$size();
    };
    this.$slotsDo$ = function ($aBlock) {
     var self = this;
     return self._$slotNames().$with$do$(self._$slotValues(), $aBlock);
    };
    this.$slotsDo$betweenDo$ = function ($aBlock, $betweenBlock) {
     var self = this;
     var $lastIndex = nil;
     $lastIndex = self._$slotNames().$size();
     {
      var $$limit = nil;
      var $index = nil;
      nil;
      $index = 1;
      $$limit = $lastIndex;
      for (; $$limit.$$greater$equal($index); ) {
       $aBlock.$value$value$(self._$slotNames().$at$($index), self._$slotValues().$at$($index));
       if (!$index.$$equal($lastIndex)) {
        $betweenBlock.$value();
       } else {
        nil;
       };
       $index = (1).$$plus($index);
      };
     };
     return self;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitObjectLiteral$(self);
    };
    this.$init$slotNames$ = function (v) {
     this.$slotNames$slot = v;
     return this;
    };
    this.$slotNames = function () {
     return this.$slotNames$slot;
    };
    this.$init$slotValues$ = function (v) {
     this.$slotValues$slot = v;
     return this;
    };
    this.$slotValues = function () {
     return this.$slotValues$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`ObjectLiteral";
      this._$superInit$JavascriptGeneration$Syntax$ObjectLiteral = $.$superInit$JavascriptGeneration$Syntax$ObjectLiteral;
      this.$superInit$JavascriptGeneration$Syntax$ObjectLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ObjectLiteral");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$addSlot$value$ = this._$addSlot$value$ = $.$addSlot$value$;
      this.$slotCount = this._$slotCount = $.$slotCount;
      this.$slotsDo$ = this._$slotsDo$ = $.$slotsDo$;
      this.$slotsDo$betweenDo$ = this._$slotsDo$betweenDo$ = $.$slotsDo$betweenDo$;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$slotNames$ = this._$init$slotNames$ = $.$init$slotNames$;
      this.$slotNames = this._$slotNames = $.$slotNames;
      this.$init$slotValues$ = this._$init$slotValues$ = $.$init$slotValues$;
      this.$slotValues = this._$slotValues = $.$slotValues;
      this.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$ObjectLiteral$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`ObjectLiteral"] = function () {
       superBasicNew.call(this);
       this.$slotNames$slot = nil;
       this.$slotValues$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`ObjectLiteral"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ObjectLiteral";
     this.slots = [];
     this.methods = [
      new MM("new", true, 0),
      new MM("slotNames:values:", false, 2246),
      new MM("slots:", false, 2247)
     ];
     this.nestedClasses = [];
     this.$new = function () {
      return (new this.nonMeta.basicNew()).$instance$initializer();
     };
     this.$slotNames$values$ = function ($names, $values) {
      var self = this;
      var $instance = nil;
      $instance = self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[0]._$ObjectLiteral().$new();
      $names.$with$do$($values, function ($eachName, $eachValue) {
       return $instance.$addSlot$value$($eachName, $eachValue);
      });
      return $instance;
     };
     this.$slots$ = function ($namesAndValues) {
      var self = this;
      var $instance = nil;
      if ($namesAndValues.$size().$odd()) {
       self._$error$("invalid slot initialization data");
      } else {
       nil;
      };
      $instance = self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[0]._$ObjectLiteral().$new();
      {
       var $$limit = nil;
       var $i = nil;
       nil;
       $i = 1;
       $$limit = $namesAndValues.$size();
       for (; $$limit.$$greater$equal($i); ) {
        $instance.$addSlot$value$($namesAndValues.$at$($i), $namesAndValues.$at$($i + 1));
        $i = (2).$$plus($i);
       };
      };
      return $instance;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ObjectLiteral";
       this.$new = this._$new = $.$new;
       this.$slotNames$values$ = this._$slotNames$values$ = $.$slotNames$values$;
       this.$slots$ = this._$slots$ = $.$slots$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$ObjectLiteral = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$OperatorExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`OperatorExpression";
    this.name = "JavascriptGeneration`Syntax`OperatorExpression";
    this.header = 2248;
    this.slots = [
     new SM("operatorName", false, false),
     new SM("left", false, false),
     new SM("right", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`OperatorExpression", true, 2249),
     new MM("instance`initializer", true, 2250),
     new MM("=", false, 2251),
     new MM("isOperatorExpression", false, 2252),
     new MM("visitBy:", false, 2253),
     new MM("init`operatorName:", true, 0),
     new MM("operatorName", true, 0),
     new MM("init`left:", true, 0),
     new MM("left", true, 0),
     new MM("init`right:", true, 0),
     new MM("right", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$OperatorExpression = function ($name, $left, $right) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$OperatorExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($name, $left, $right) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$OperatorExpression($name, $left, $right);
     self._$init$operatorName$($name);
     self._$init$left$($left);
     self._$init$right$($right);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$OperatorExpression$slot._$$equal.call(self, $anotherNode) && (self._$operatorName().$$equal($anotherNode.$operatorName()) && (self._$left().$$equal($anotherNode.$left()) && self._$right().$$equal($anotherNode.$right())));
    };
    this.$isOperatorExpression = function () {
     var self = this;
     return true;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitOperatorExpression$(self);
    };
    this.$init$operatorName$ = function (v) {
     this.$operatorName$slot = v;
     return this;
    };
    this.$operatorName = function () {
     return this.$operatorName$slot;
    };
    this.$init$left$ = function (v) {
     this.$left$slot = v;
     return this;
    };
    this.$left = function () {
     return this.$left$slot;
    };
    this.$init$right$ = function (v) {
     this.$right$slot = v;
     return this;
    };
    this.$right = function () {
     return this.$right$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`OperatorExpression";
      this._$superInit$JavascriptGeneration$Syntax$OperatorExpression = $.$superInit$JavascriptGeneration$Syntax$OperatorExpression;
      this.$superInit$JavascriptGeneration$Syntax$OperatorExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$OperatorExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$isOperatorExpression = this._$isOperatorExpression = $.$isOperatorExpression;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$operatorName$ = this._$init$operatorName$ = $.$init$operatorName$;
      this.$operatorName = this._$operatorName = $.$operatorName;
      this.$init$left$ = this._$init$left$ = $.$init$left$;
      this.$left = this._$left = $.$left;
      this.$init$right$ = this._$init$right$ = $.$init$right$;
      this.$right = this._$right = $.$right;
      this.$enclosingObjects$JavascriptGeneration$Syntax$OperatorExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$OperatorExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`OperatorExpression"] = function () {
       superBasicNew.call(this);
       this.$operatorName$slot = nil;
       this.$left$slot = nil;
       this.$right$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`OperatorExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`OperatorExpression";
     this.slots = [];
     this.methods = [new MM("operator:with:and:", true, 0)];
     this.nestedClasses = [];
     this.$operator$with$and$ = function ($name, $left, $right) {
      return (new this.nonMeta.basicNew()).$instance$initializer($name, $left, $right);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`OperatorExpression";
       this.$operator$with$and$ = this._$operator$with$and$ = $.$operator$with$and$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$OperatorExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$OperatorExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$ReturnStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ReturnStatement";
    this.name = "JavascriptGeneration`Syntax`ReturnStatement";
    this.header = 2254;
    this.slots = [new SM("expressionS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`ReturnStatement", true, 2255),
     new MM("instance`initializer", true, 2256),
     new MM("=", false, 2257),
     new MM("expression", false, 2258),
     new MM("printOn:", false, 2259),
     new MM("visitBy:", false, 2260),
     new MM("init`expressionS:", true, 0),
     new MM("expressionS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$ReturnStatement = function ($expr) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ReturnStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($expr) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$ReturnStatement($expr);
     self._$init$expressionS$($expr);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$ReturnStatement$slot._$$equal.call(self, $anotherNode) && self._$expression().$$equal($anotherNode.$expression());
    };
    this.$expression = function () {
     var self = this;
     return self._$expressionS();
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ReturnStatement$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     self._$expression().$printOn$($stream);
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitReturnStatement$(self);
    };
    this.$init$expressionS$ = function (v) {
     this.$expressionS$slot = v;
     return this;
    };
    this.$expressionS = function () {
     return this.$expressionS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`ReturnStatement";
      this._$superInit$JavascriptGeneration$Syntax$ReturnStatement = $.$superInit$JavascriptGeneration$Syntax$ReturnStatement;
      this.$superInit$JavascriptGeneration$Syntax$ReturnStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ReturnStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$expression = this._$expression = $.$expression;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$expressionS$ = $.$init$expressionS$;
      this.$init$expressionS$ = dnuCatcher("$init$expressionS$");
      this._$expressionS = $.$expressionS;
      this.$expressionS = dnuCatcher("$expressionS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$ReturnStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$ReturnStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`ReturnStatement"] = function () {
       superBasicNew.call(this);
       this.$expressionS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`ReturnStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ReturnStatement";
     this.slots = [];
     this.methods = [new MM("expression:", true, 0)];
     this.nestedClasses = [];
     this.$expression$ = function ($expr) {
      return (new this.nonMeta.basicNew()).$instance$initializer($expr);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ReturnStatement";
       this.$expression$ = this._$expression$ = $.$expression$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$ReturnStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$ReturnStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$Script = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`Script";
    this.name = "JavascriptGeneration`Syntax`Script";
    this.header = 2261;
    this.slots = [new SM("statements_", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`Script", true, 2262),
     new MM("instance`initializer", true, 2263),
     new MM("=", false, 2264),
     new MM("statements", false, 2265),
     new MM("visitBy:", false, 2266),
     new MM("init`statements_:", true, 0),
     new MM("statements_", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$Script = function ($statements) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$Script$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($statements) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$Script($statements);
     self._$init$statements_$($statements);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$Script$slot._$$equal.call(self, $anotherNode) && self._$statements().$$equal($anotherNode.$statements());
    };
    this.$statements = function () {
     var self = this;
     return self._$statements_();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitScript$(self);
    };
    this.$init$statements_$ = function (v) {
     this.$statements_$slot = v;
     return this;
    };
    this.$statements_ = function () {
     return this.$statements_$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`Script";
      this._$superInit$JavascriptGeneration$Syntax$Script = $.$superInit$JavascriptGeneration$Syntax$Script;
      this.$superInit$JavascriptGeneration$Syntax$Script = dnuCatcher("$superInit$JavascriptGeneration$Syntax$Script");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$statements = this._$statements = $.$statements;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$statements_$ = $.$init$statements_$;
      this.$init$statements_$ = dnuCatcher("$init$statements_$");
      this._$statements_ = $.$statements_;
      this.$statements_ = dnuCatcher("$statements_");
      this.$enclosingObjects$JavascriptGeneration$Syntax$Script = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$Script$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`Script"] = function () {
       superBasicNew.call(this);
       this.$statements_$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`Script"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`Script";
     this.slots = [];
     this.methods = [new MM("statements:", true, 0)];
     this.nestedClasses = [];
     this.$statements$ = function ($statements) {
      return (new this.nonMeta.basicNew()).$instance$initializer($statements);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`Script";
       this.$statements$ = this._$statements$ = $.$statements$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$Script = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$Script = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$StringLiteral = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`StringLiteral";
    this.name = "JavascriptGeneration`Syntax`StringLiteral";
    this.header = 2267;
    this.slots = [new SM("valueS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`StringLiteral", true, 2268),
     new MM("instance`initializer", true, 2269),
     new MM("=", false, 2270),
     new MM("isStringLiteral", false, 2271),
     new MM("printOn:", false, 2272),
     new MM("value", false, 2273),
     new MM("visitBy:", false, 2274),
     new MM("init`valueS:", true, 0),
     new MM("valueS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$StringLiteral = function ($string) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$StringLiteral$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($string) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$StringLiteral($string);
     self._$init$valueS$($string);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$StringLiteral$slot._$$equal.call(self, $anotherNode) && self._$value().$$equal($anotherNode.$value());
    };
    this.$isStringLiteral = function () {
     var self = this;
     return true;
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$StringLiteral$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     self._$value().$printOn$($stream);
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$value = function () {
     var self = this;
     return self._$valueS();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitStringLiteral$(self);
    };
    this.$init$valueS$ = function (v) {
     this.$valueS$slot = v;
     return this;
    };
    this.$valueS = function () {
     return this.$valueS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`StringLiteral";
      this._$superInit$JavascriptGeneration$Syntax$StringLiteral = $.$superInit$JavascriptGeneration$Syntax$StringLiteral;
      this.$superInit$JavascriptGeneration$Syntax$StringLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$StringLiteral");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$isStringLiteral = this._$isStringLiteral = $.$isStringLiteral;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$value = this._$value = $.$value;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$valueS$ = $.$init$valueS$;
      this.$init$valueS$ = dnuCatcher("$init$valueS$");
      this._$valueS = $.$valueS;
      this.$valueS = dnuCatcher("$valueS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$StringLiteral = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$StringLiteral$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`StringLiteral"] = function () {
       superBasicNew.call(this);
       this.$valueS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`StringLiteral"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`StringLiteral";
     this.slots = [];
     this.methods = [new MM("value:", true, 0)];
     this.nestedClasses = [];
     this.$value$ = function ($string) {
      return (new this.nonMeta.basicNew()).$instance$initializer($string);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`StringLiteral";
       this.$value$ = this._$value$ = $.$value$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$StringLiteral = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$StringLiteral = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$TernaryOperatorExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`TernaryOperatorExpression";
    this.name = "JavascriptGeneration`Syntax`TernaryOperatorExpression";
    this.header = 2275;
    this.slots = [
     new SM("condition", false, false),
     new SM("then", false, false),
     new SM("else", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`TernaryOperatorExpression", true, 2276),
     new MM("instance`initializer", true, 2277),
     new MM("=", false, 2278),
     new MM("visitBy:", false, 2279),
     new MM("init`condition:", true, 0),
     new MM("condition", true, 0),
     new MM("init`then:", true, 0),
     new MM("then", true, 0),
     new MM("init`else:", true, 0),
     new MM("else", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression = function ($condExpr, $thenExpr, $elseExpr) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($condExpr, $thenExpr, $elseExpr) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression($condExpr, $thenExpr, $elseExpr);
     self._$init$condition$($condExpr);
     self._$init$then$($thenExpr);
     self._$init$else$($elseExpr);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot._$$equal.call(self, $anotherNode) && (self._$condition().$$equal($anotherNode.$condition()) && (self._$then().$$equal($anotherNode.$then()) && self._$else().$$equal($anotherNode.$else())));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitTernaryOperatorExpression$(self);
    };
    this.$init$condition$ = function (v) {
     this.$condition$slot = v;
     return this;
    };
    this.$condition = function () {
     return this.$condition$slot;
    };
    this.$init$then$ = function (v) {
     this.$then$slot = v;
     return this;
    };
    this.$then = function () {
     return this.$then$slot;
    };
    this.$init$else$ = function (v) {
     this.$else$slot = v;
     return this;
    };
    this.$else = function () {
     return this.$else$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`TernaryOperatorExpression";
      this._$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression = $.$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression;
      this.$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$condition$ = this._$init$condition$ = $.$init$condition$;
      this.$condition = this._$condition = $.$condition;
      this.$init$then$ = this._$init$then$ = $.$init$then$;
      this.$then = this._$then = $.$then;
      this.$init$else$ = this._$init$else$ = $.$init$else$;
      this.$else = this._$else = $.$else;
      this.$enclosingObjects$JavascriptGeneration$Syntax$TernaryOperatorExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`TernaryOperatorExpression"] = function () {
       superBasicNew.call(this);
       this.$condition$slot = nil;
       this.$then$slot = nil;
       this.$else$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`TernaryOperatorExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`TernaryOperatorExpression";
     this.slots = [];
     this.methods = [new MM("if:then:else:", true, 0)];
     this.nestedClasses = [];
     this.$if$then$else$ = function ($condExpr, $thenExpr, $elseExpr) {
      return (new this.nonMeta.basicNew()).$instance$initializer($condExpr, $thenExpr, $elseExpr);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`TernaryOperatorExpression";
       this.$if$then$else$ = this._$if$then$else$ = $.$if$then$else$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$TernaryOperatorExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$ThrowStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ThrowStatement";
    this.name = "JavascriptGeneration`Syntax`ThrowStatement";
    this.header = 2280;
    this.slots = [new SM("expressionS", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`ThrowStatement", true, 2281),
     new MM("instance`initializer", true, 2282),
     new MM("=", false, 2283),
     new MM("expression", false, 2284),
     new MM("visitBy:", false, 2285),
     new MM("init`expressionS:", true, 0),
     new MM("expressionS", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$ThrowStatement = function ($expr) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$ThrowStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($expr) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$ThrowStatement($expr);
     self._$init$expressionS$($expr);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$ThrowStatement$slot._$$equal.call(self, $anotherNode) && self._$expression().$$equal($anotherNode.$expression());
    };
    this.$expression = function () {
     var self = this;
     return self._$expressionS();
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitThrowStatement$(self);
    };
    this.$init$expressionS$ = function (v) {
     this.$expressionS$slot = v;
     return this;
    };
    this.$expressionS = function () {
     return this.$expressionS$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`ThrowStatement";
      this._$superInit$JavascriptGeneration$Syntax$ThrowStatement = $.$superInit$JavascriptGeneration$Syntax$ThrowStatement;
      this.$superInit$JavascriptGeneration$Syntax$ThrowStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ThrowStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$expression = this._$expression = $.$expression;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this._$init$expressionS$ = $.$init$expressionS$;
      this.$init$expressionS$ = dnuCatcher("$init$expressionS$");
      this._$expressionS = $.$expressionS;
      this.$expressionS = dnuCatcher("$expressionS");
      this.$enclosingObjects$JavascriptGeneration$Syntax$ThrowStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$ThrowStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`ThrowStatement"] = function () {
       superBasicNew.call(this);
       this.$expressionS$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`ThrowStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ThrowStatement";
     this.slots = [];
     this.methods = [new MM("expression:", true, 0)];
     this.nestedClasses = [];
     this.$expression$ = function ($expr) {
      return (new this.nonMeta.basicNew()).$instance$initializer($expr);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ThrowStatement";
       this.$expression$ = this._$expression$ = $.$expression$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$ThrowStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$ThrowStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$TryStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`TryStatement";
    this.name = "JavascriptGeneration`Syntax`TryStatement";
    this.header = 2286;
    this.slots = [
     new SM("protectedBlock", false, false),
     new SM("catchVar", false, false),
     new SM("catchBlock", false, false),
     new SM("finallyBlock", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`TryStatement", true, 2287),
     new MM("instance`initializer", true, 2288),
     new MM("=", false, 2289),
     new MM("visitBy:", false, 2290),
     new MM("init`protectedBlock:", true, 0),
     new MM("protectedBlock", true, 0),
     new MM("init`catchVar:", true, 0),
     new MM("catchVar", true, 0),
     new MM("init`catchBlock:", true, 0),
     new MM("catchBlock", true, 0),
     new MM("init`finallyBlock:", true, 0),
     new MM("finallyBlock", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$TryStatement = function ($pb, $cvar, $cb, $fb) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$TryStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($pb, $cvar, $cb, $fb) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$TryStatement($pb, $cvar, $cb, $fb);
     self._$init$protectedBlock$($pb);
     self._$init$catchVar$($cvar);
     self._$init$catchBlock$($cb);
     self._$init$finallyBlock$($fb);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$TryStatement$slot._$$equal.call(self, $anotherNode) && (self._$protectedBlock().$$equal($anotherNode.$protectedBlock()) && (self._$catchVar().$$equal($anotherNode.$catchVar()) && (self._$catchBlock().$$equal($anotherNode.$catchBlock()) && self._$finallyBlock().$$equal($anotherNode.$finallyBlock()))));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitTryStatement$(self);
    };
    this.$init$protectedBlock$ = function (v) {
     this.$protectedBlock$slot = v;
     return this;
    };
    this.$protectedBlock = function () {
     return this.$protectedBlock$slot;
    };
    this.$init$catchVar$ = function (v) {
     this.$catchVar$slot = v;
     return this;
    };
    this.$catchVar = function () {
     return this.$catchVar$slot;
    };
    this.$init$catchBlock$ = function (v) {
     this.$catchBlock$slot = v;
     return this;
    };
    this.$catchBlock = function () {
     return this.$catchBlock$slot;
    };
    this.$init$finallyBlock$ = function (v) {
     this.$finallyBlock$slot = v;
     return this;
    };
    this.$finallyBlock = function () {
     return this.$finallyBlock$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`TryStatement";
      this._$superInit$JavascriptGeneration$Syntax$TryStatement = $.$superInit$JavascriptGeneration$Syntax$TryStatement;
      this.$superInit$JavascriptGeneration$Syntax$TryStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$TryStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$protectedBlock$ = this._$init$protectedBlock$ = $.$init$protectedBlock$;
      this.$protectedBlock = this._$protectedBlock = $.$protectedBlock;
      this.$init$catchVar$ = this._$init$catchVar$ = $.$init$catchVar$;
      this.$catchVar = this._$catchVar = $.$catchVar;
      this.$init$catchBlock$ = this._$init$catchBlock$ = $.$init$catchBlock$;
      this.$catchBlock = this._$catchBlock = $.$catchBlock;
      this.$init$finallyBlock$ = this._$init$finallyBlock$ = $.$init$finallyBlock$;
      this.$finallyBlock = this._$finallyBlock = $.$finallyBlock;
      this.$enclosingObjects$JavascriptGeneration$Syntax$TryStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$TryStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`TryStatement"] = function () {
       superBasicNew.call(this);
       this.$protectedBlock$slot = nil;
       this.$catchVar$slot = nil;
       this.$catchBlock$slot = nil;
       this.$finallyBlock$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`TryStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`TryStatement";
     this.slots = [];
     this.methods = [new MM("block:catch:with:finally:", true, 0)];
     this.nestedClasses = [];
     this.$block$catch$with$finally$ = function ($pb, $cvar, $cb, $fb) {
      return (new this.nonMeta.basicNew()).$instance$initializer($pb, $cvar, $cb, $fb);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`TryStatement";
       this.$block$catch$with$finally$ = this._$block$catch$with$finally$ = $.$block$catch$with$finally$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$TryStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$TryStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$UnaryOperatorExpression = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`UnaryOperatorExpression";
    this.name = "JavascriptGeneration`Syntax`UnaryOperatorExpression";
    this.header = 2291;
    this.slots = [
     new SM("operatorName", false, false),
     new SM("isPostfix", false, false),
     new SM("operand", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`UnaryOperatorExpression", true, 2292),
     new MM("instance`initializer", true, 2293),
     new MM("=", false, 2294),
     new MM("visitBy:", false, 2295),
     new MM("init`operatorName:", true, 0),
     new MM("operatorName", true, 0),
     new MM("init`isPostfix:", true, 0),
     new MM("isPostfix", true, 0),
     new MM("init`operand:", true, 0),
     new MM("operand", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression = function ($name, $postfix, $node) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($name, $postfix, $node) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression($name, $postfix, $node);
     self._$init$operatorName$($name);
     self._$init$isPostfix$($postfix);
     self._$init$operand$($node);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot._$$equal.call(self, $anotherNode) && (self._$operatorName().$$equal($anotherNode.$operatorName()) && (self._$isPostfix().$$equal($anotherNode.$isPostfix()) && self._$operand().$$equal($anotherNode.$operand())));
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitUnaryOperatorExpression$(self);
    };
    this.$init$operatorName$ = function (v) {
     this.$operatorName$slot = v;
     return this;
    };
    this.$operatorName = function () {
     return this.$operatorName$slot;
    };
    this.$init$isPostfix$ = function (v) {
     this.$isPostfix$slot = v;
     return this;
    };
    this.$isPostfix = function () {
     return this.$isPostfix$slot;
    };
    this.$init$operand$ = function (v) {
     this.$operand$slot = v;
     return this;
    };
    this.$operand = function () {
     return this.$operand$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`UnaryOperatorExpression";
      this._$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression = $.$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression;
      this.$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$operatorName$ = this._$init$operatorName$ = $.$init$operatorName$;
      this.$operatorName = this._$operatorName = $.$operatorName;
      this.$init$isPostfix$ = this._$init$isPostfix$ = $.$init$isPostfix$;
      this.$isPostfix = this._$isPostfix = $.$isPostfix;
      this.$init$operand$ = this._$init$operand$ = $.$init$operand$;
      this.$operand = this._$operand = $.$operand;
      this.$enclosingObjects$JavascriptGeneration$Syntax$UnaryOperatorExpression = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`UnaryOperatorExpression"] = function () {
       superBasicNew.call(this);
       this.$operatorName$slot = nil;
       this.$isPostfix$slot = nil;
       this.$operand$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`UnaryOperatorExpression"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`UnaryOperatorExpression";
     this.slots = [];
     this.methods = [new MM("operator:postfix:on:", true, 0)];
     this.nestedClasses = [];
     this.$operator$postfix$on$ = function ($name, $postfix, $node) {
      return (new this.nonMeta.basicNew()).$instance$initializer($name, $postfix, $node);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`UnaryOperatorExpression";
       this.$operator$postfix$on$ = this._$operator$postfix$on$ = $.$operator$postfix$on$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$UnaryOperatorExpression = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$VariableStatement = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`VariableStatement";
    this.name = "JavascriptGeneration`Syntax`VariableStatement";
    this.header = 2296;
    this.slots = [
     new SM("name", false, false),
     new SM("initializer", false, false)
    ];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`VariableStatement", true, 2297),
     new MM("instance`initializer", true, 2298),
     new MM("=", false, 2299),
     new MM("printOn:", false, 2300),
     new MM("visitBy:", false, 2301),
     new MM("init`name:", true, 0),
     new MM("name", true, 0),
     new MM("init`initializer:", true, 0),
     new MM("initializer", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$VariableStatement = function ($n, $expr) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$VariableStatement$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($n, $expr) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$VariableStatement($n, $expr);
     self._$init$name$($n);
     self._$init$initializer$($expr);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$VariableStatement$slot._$$equal.call(self, $anotherNode) && (self._$name().$$equal($anotherNode.$name()) && self._$initializer().$$equal($anotherNode.$initializer()));
    };
    this.$printOn$ = function ($stream) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$VariableStatement$slot._$printOn$.call(self, $stream);
     $stream.$nextPutAll$(" (");
     self._$name().$printOn$($stream);
     $stream.$nextPutAll$(", ");
     self._$initializer().$printOn$($stream);
     $stream.$nextPutAll$(")");
     return self;
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitVariableStatement$(self);
    };
    this.$init$name$ = function (v) {
     this.$name$slot = v;
     return this;
    };
    this.$name = function () {
     return this.$name$slot;
    };
    this.$init$initializer$ = function (v) {
     this.$initializer$slot = v;
     return this;
    };
    this.$initializer = function () {
     return this.$initializer$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`VariableStatement";
      this._$superInit$JavascriptGeneration$Syntax$VariableStatement = $.$superInit$JavascriptGeneration$Syntax$VariableStatement;
      this.$superInit$JavascriptGeneration$Syntax$VariableStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$VariableStatement");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$printOn$ = this._$printOn$ = $.$printOn$;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$name$ = this._$init$name$ = $.$init$name$;
      this.$name = this._$name = $.$name;
      this.$init$initializer$ = this._$init$initializer$ = $.$init$initializer$;
      this.$initializer = this._$initializer = $.$initializer;
      this.$enclosingObjects$JavascriptGeneration$Syntax$VariableStatement = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$VariableStatement$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`VariableStatement"] = function () {
       superBasicNew.call(this);
       this.$name$slot = nil;
       this.$initializer$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`VariableStatement"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`VariableStatement";
     this.slots = [];
     this.methods = [
      new MM("name:initializer:", true, 0),
      new MM("name:", false, 2302)
     ];
     this.nestedClasses = [];
     this.$name$initializer$ = function ($n, $expr) {
      return (new this.nonMeta.basicNew()).$instance$initializer($n, $expr);
     };
     this.$name$ = function ($s) {
      var self = this;
      return self.$enclosingObjects$JavascriptGeneration$Syntax$VariableStatement[0]._$VariableStatement().$name$initializer$($s, nil);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`VariableStatement";
       this.$name$initializer$ = this._$name$initializer$ = $.$name$initializer$;
       this.$name$ = this._$name$ = $.$name$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$VariableStatement = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$VariableStatement = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$VerbatimNode = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for JavascriptGeneration`Syntax`VerbatimNode";
    this.name = "JavascriptGeneration`Syntax`VerbatimNode";
    this.header = 2303;
    this.slots = [new SM("text", false, false)];
    this.methods = [
     new MM("superInit`JavascriptGeneration`Syntax`VerbatimNode", true, 2304),
     new MM("instance`initializer", true, 2305),
     new MM("=", false, 2306),
     new MM("visitBy:", false, 2307),
     new MM("init`text:", true, 0),
     new MM("text", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$JavascriptGeneration$Syntax$VerbatimNode = function ($s) {
     var self = this;
     self.$super$JavascriptGeneration$Syntax$VerbatimNode$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($s) {
     var self = this;
     self._$superInit$JavascriptGeneration$Syntax$VerbatimNode($s);
     self._$init$text$($s);
     return self;
    };
    this.$$equal = function ($anotherNode) {
     var self = this;
     return self.$super$JavascriptGeneration$Syntax$VerbatimNode$slot._$$equal.call(self, $anotherNode) && self._$text().$$equal($anotherNode.$text());
    };
    this.$visitBy$ = function ($visitor) {
     var self = this;
     return $visitor.$visitVerbatimNode$(self);
    };
    this.$init$text$ = function (v) {
     this.$text$slot = v;
     return this;
    };
    this.$text = function () {
     return this.$text$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for JavascriptGeneration`Syntax`VerbatimNode";
      this._$superInit$JavascriptGeneration$Syntax$VerbatimNode = $.$superInit$JavascriptGeneration$Syntax$VerbatimNode;
      this.$superInit$JavascriptGeneration$Syntax$VerbatimNode = dnuCatcher("$superInit$JavascriptGeneration$Syntax$VerbatimNode");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$$equal = this._$$equal = $.$$equal;
      this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
      this.$init$text$ = this._$init$text$ = $.$init$text$;
      this.$text = this._$text = $.$text;
      this.$enclosingObjects$JavascriptGeneration$Syntax$VerbatimNode = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax$VerbatimNode$slot = runtimeSuperclass;
      this["JavascriptGeneration`Syntax`VerbatimNode"] = function () {
       superBasicNew.call(this);
       this.$text$slot = nil;
      };
      this.basicNew = this["JavascriptGeneration`Syntax`VerbatimNode"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`VerbatimNode";
     this.slots = [];
     this.methods = [new MM("text:", true, 0)];
     this.nestedClasses = [];
     this.$text$ = function ($s) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for JavascriptGeneration`Syntax`VerbatimNode";
       this.$text$ = this._$text$ = $.$text$;
       this.$enclosingObjects$JavascriptGeneration$Syntax$VerbatimNode = enclosingObjects;
       this.$super$JavascriptGeneration$Syntax$VerbatimNode = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$JavascriptGeneration$Syntax$ArrayExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$AssignmentExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$Block.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$BooleanLiteral.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$CallExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$ForInStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$ForStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$FunctionExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$FunctionStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$IdentifierExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$IfStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$MemberExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$NewExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$Node.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$NumberLiteral.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$ObjectLiteral.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$OperatorExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$ReturnStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$Script.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$StringLiteral.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$TernaryOperatorExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$ThrowStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$TryStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$UnaryOperatorExpression.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$VariableStatement.enclosingMixin = this;
   this.$JavascriptGeneration$Syntax$VerbatimNode.enclosingMixin = this;
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for JavascriptGeneration`Syntax";
     this._$superInit$JavascriptGeneration$Syntax = $.$superInit$JavascriptGeneration$Syntax;
     this.$superInit$JavascriptGeneration$Syntax = dnuCatcher("$superInit$JavascriptGeneration$Syntax");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$ArrayExpression = this._$ArrayExpression = $.$ArrayExpression;
     this.$AssignmentExpression = this._$AssignmentExpression = $.$AssignmentExpression;
     this.$Block = this._$Block = $.$Block;
     this.$BooleanLiteral = this._$BooleanLiteral = $.$BooleanLiteral;
     this.$CallExpression = this._$CallExpression = $.$CallExpression;
     this.$ForInStatement = this._$ForInStatement = $.$ForInStatement;
     this.$ForStatement = this._$ForStatement = $.$ForStatement;
     this.$FunctionExpression = this._$FunctionExpression = $.$FunctionExpression;
     this.$FunctionStatement = this._$FunctionStatement = $.$FunctionStatement;
     this.$IdentifierExpression = this._$IdentifierExpression = $.$IdentifierExpression;
     this.$IfStatement = this._$IfStatement = $.$IfStatement;
     this.$MemberExpression = this._$MemberExpression = $.$MemberExpression;
     this.$NewExpression = this._$NewExpression = $.$NewExpression;
     this._$Node = $.$Node;
     this.$Node = dnuCatcher("$Node");
     this.$NumberLiteral = this._$NumberLiteral = $.$NumberLiteral;
     this.$ObjectLiteral = this._$ObjectLiteral = $.$ObjectLiteral;
     this.$OperatorExpression = this._$OperatorExpression = $.$OperatorExpression;
     this.$ReturnStatement = this._$ReturnStatement = $.$ReturnStatement;
     this.$Script = this._$Script = $.$Script;
     this.$StringLiteral = this._$StringLiteral = $.$StringLiteral;
     this.$TernaryOperatorExpression = this._$TernaryOperatorExpression = $.$TernaryOperatorExpression;
     this.$ThrowStatement = this._$ThrowStatement = $.$ThrowStatement;
     this.$TryStatement = this._$TryStatement = $.$TryStatement;
     this.$UnaryOperatorExpression = this._$UnaryOperatorExpression = $.$UnaryOperatorExpression;
     this.$VariableStatement = this._$VariableStatement = $.$VariableStatement;
     this.$VerbatimNode = this._$VerbatimNode = $.$VerbatimNode;
     this.$init$JavascriptGeneration$Syntax$ArrayExpression$ = this._$init$JavascriptGeneration$Syntax$ArrayExpression$ = $.$init$JavascriptGeneration$Syntax$ArrayExpression$;
     this.$JavascriptGeneration$Syntax$ArrayExpression = this._$JavascriptGeneration$Syntax$ArrayExpression = $.$JavascriptGeneration$Syntax$ArrayExpression;
     this.$JavascriptGeneration$Syntax$ArrayExpression$ = this._$JavascriptGeneration$Syntax$ArrayExpression$ = $.$JavascriptGeneration$Syntax$ArrayExpression$;
     this.$init$JavascriptGeneration$Syntax$AssignmentExpression$ = this._$init$JavascriptGeneration$Syntax$AssignmentExpression$ = $.$init$JavascriptGeneration$Syntax$AssignmentExpression$;
     this.$JavascriptGeneration$Syntax$AssignmentExpression = this._$JavascriptGeneration$Syntax$AssignmentExpression = $.$JavascriptGeneration$Syntax$AssignmentExpression;
     this.$JavascriptGeneration$Syntax$AssignmentExpression$ = this._$JavascriptGeneration$Syntax$AssignmentExpression$ = $.$JavascriptGeneration$Syntax$AssignmentExpression$;
     this.$init$JavascriptGeneration$Syntax$Block$ = this._$init$JavascriptGeneration$Syntax$Block$ = $.$init$JavascriptGeneration$Syntax$Block$;
     this.$JavascriptGeneration$Syntax$Block = this._$JavascriptGeneration$Syntax$Block = $.$JavascriptGeneration$Syntax$Block;
     this.$JavascriptGeneration$Syntax$Block$ = this._$JavascriptGeneration$Syntax$Block$ = $.$JavascriptGeneration$Syntax$Block$;
     this.$init$JavascriptGeneration$Syntax$BooleanLiteral$ = this._$init$JavascriptGeneration$Syntax$BooleanLiteral$ = $.$init$JavascriptGeneration$Syntax$BooleanLiteral$;
     this.$JavascriptGeneration$Syntax$BooleanLiteral = this._$JavascriptGeneration$Syntax$BooleanLiteral = $.$JavascriptGeneration$Syntax$BooleanLiteral;
     this.$JavascriptGeneration$Syntax$BooleanLiteral$ = this._$JavascriptGeneration$Syntax$BooleanLiteral$ = $.$JavascriptGeneration$Syntax$BooleanLiteral$;
     this.$init$JavascriptGeneration$Syntax$CallExpression$ = this._$init$JavascriptGeneration$Syntax$CallExpression$ = $.$init$JavascriptGeneration$Syntax$CallExpression$;
     this.$JavascriptGeneration$Syntax$CallExpression = this._$JavascriptGeneration$Syntax$CallExpression = $.$JavascriptGeneration$Syntax$CallExpression;
     this.$JavascriptGeneration$Syntax$CallExpression$ = this._$JavascriptGeneration$Syntax$CallExpression$ = $.$JavascriptGeneration$Syntax$CallExpression$;
     this.$init$JavascriptGeneration$Syntax$ForInStatement$ = this._$init$JavascriptGeneration$Syntax$ForInStatement$ = $.$init$JavascriptGeneration$Syntax$ForInStatement$;
     this.$JavascriptGeneration$Syntax$ForInStatement = this._$JavascriptGeneration$Syntax$ForInStatement = $.$JavascriptGeneration$Syntax$ForInStatement;
     this.$JavascriptGeneration$Syntax$ForInStatement$ = this._$JavascriptGeneration$Syntax$ForInStatement$ = $.$JavascriptGeneration$Syntax$ForInStatement$;
     this.$init$JavascriptGeneration$Syntax$ForStatement$ = this._$init$JavascriptGeneration$Syntax$ForStatement$ = $.$init$JavascriptGeneration$Syntax$ForStatement$;
     this.$JavascriptGeneration$Syntax$ForStatement = this._$JavascriptGeneration$Syntax$ForStatement = $.$JavascriptGeneration$Syntax$ForStatement;
     this.$JavascriptGeneration$Syntax$ForStatement$ = this._$JavascriptGeneration$Syntax$ForStatement$ = $.$JavascriptGeneration$Syntax$ForStatement$;
     this.$init$JavascriptGeneration$Syntax$FunctionExpression$ = this._$init$JavascriptGeneration$Syntax$FunctionExpression$ = $.$init$JavascriptGeneration$Syntax$FunctionExpression$;
     this.$JavascriptGeneration$Syntax$FunctionExpression = this._$JavascriptGeneration$Syntax$FunctionExpression = $.$JavascriptGeneration$Syntax$FunctionExpression;
     this.$JavascriptGeneration$Syntax$FunctionExpression$ = this._$JavascriptGeneration$Syntax$FunctionExpression$ = $.$JavascriptGeneration$Syntax$FunctionExpression$;
     this.$init$JavascriptGeneration$Syntax$FunctionStatement$ = this._$init$JavascriptGeneration$Syntax$FunctionStatement$ = $.$init$JavascriptGeneration$Syntax$FunctionStatement$;
     this.$JavascriptGeneration$Syntax$FunctionStatement = this._$JavascriptGeneration$Syntax$FunctionStatement = $.$JavascriptGeneration$Syntax$FunctionStatement;
     this.$JavascriptGeneration$Syntax$FunctionStatement$ = this._$JavascriptGeneration$Syntax$FunctionStatement$ = $.$JavascriptGeneration$Syntax$FunctionStatement$;
     this.$init$JavascriptGeneration$Syntax$IdentifierExpression$ = this._$init$JavascriptGeneration$Syntax$IdentifierExpression$ = $.$init$JavascriptGeneration$Syntax$IdentifierExpression$;
     this.$JavascriptGeneration$Syntax$IdentifierExpression = this._$JavascriptGeneration$Syntax$IdentifierExpression = $.$JavascriptGeneration$Syntax$IdentifierExpression;
     this.$JavascriptGeneration$Syntax$IdentifierExpression$ = this._$JavascriptGeneration$Syntax$IdentifierExpression$ = $.$JavascriptGeneration$Syntax$IdentifierExpression$;
     this.$init$JavascriptGeneration$Syntax$IfStatement$ = this._$init$JavascriptGeneration$Syntax$IfStatement$ = $.$init$JavascriptGeneration$Syntax$IfStatement$;
     this.$JavascriptGeneration$Syntax$IfStatement = this._$JavascriptGeneration$Syntax$IfStatement = $.$JavascriptGeneration$Syntax$IfStatement;
     this.$JavascriptGeneration$Syntax$IfStatement$ = this._$JavascriptGeneration$Syntax$IfStatement$ = $.$JavascriptGeneration$Syntax$IfStatement$;
     this.$init$JavascriptGeneration$Syntax$MemberExpression$ = this._$init$JavascriptGeneration$Syntax$MemberExpression$ = $.$init$JavascriptGeneration$Syntax$MemberExpression$;
     this.$JavascriptGeneration$Syntax$MemberExpression = this._$JavascriptGeneration$Syntax$MemberExpression = $.$JavascriptGeneration$Syntax$MemberExpression;
     this.$JavascriptGeneration$Syntax$MemberExpression$ = this._$JavascriptGeneration$Syntax$MemberExpression$ = $.$JavascriptGeneration$Syntax$MemberExpression$;
     this.$init$JavascriptGeneration$Syntax$NewExpression$ = this._$init$JavascriptGeneration$Syntax$NewExpression$ = $.$init$JavascriptGeneration$Syntax$NewExpression$;
     this.$JavascriptGeneration$Syntax$NewExpression = this._$JavascriptGeneration$Syntax$NewExpression = $.$JavascriptGeneration$Syntax$NewExpression;
     this.$JavascriptGeneration$Syntax$NewExpression$ = this._$JavascriptGeneration$Syntax$NewExpression$ = $.$JavascriptGeneration$Syntax$NewExpression$;
     this.$init$JavascriptGeneration$Syntax$Node$ = this._$init$JavascriptGeneration$Syntax$Node$ = $.$init$JavascriptGeneration$Syntax$Node$;
     this.$JavascriptGeneration$Syntax$Node = this._$JavascriptGeneration$Syntax$Node = $.$JavascriptGeneration$Syntax$Node;
     this.$JavascriptGeneration$Syntax$Node$ = this._$JavascriptGeneration$Syntax$Node$ = $.$JavascriptGeneration$Syntax$Node$;
     this.$init$JavascriptGeneration$Syntax$NumberLiteral$ = this._$init$JavascriptGeneration$Syntax$NumberLiteral$ = $.$init$JavascriptGeneration$Syntax$NumberLiteral$;
     this.$JavascriptGeneration$Syntax$NumberLiteral = this._$JavascriptGeneration$Syntax$NumberLiteral = $.$JavascriptGeneration$Syntax$NumberLiteral;
     this.$JavascriptGeneration$Syntax$NumberLiteral$ = this._$JavascriptGeneration$Syntax$NumberLiteral$ = $.$JavascriptGeneration$Syntax$NumberLiteral$;
     this.$init$JavascriptGeneration$Syntax$ObjectLiteral$ = this._$init$JavascriptGeneration$Syntax$ObjectLiteral$ = $.$init$JavascriptGeneration$Syntax$ObjectLiteral$;
     this.$JavascriptGeneration$Syntax$ObjectLiteral = this._$JavascriptGeneration$Syntax$ObjectLiteral = $.$JavascriptGeneration$Syntax$ObjectLiteral;
     this.$JavascriptGeneration$Syntax$ObjectLiteral$ = this._$JavascriptGeneration$Syntax$ObjectLiteral$ = $.$JavascriptGeneration$Syntax$ObjectLiteral$;
     this.$init$JavascriptGeneration$Syntax$OperatorExpression$ = this._$init$JavascriptGeneration$Syntax$OperatorExpression$ = $.$init$JavascriptGeneration$Syntax$OperatorExpression$;
     this.$JavascriptGeneration$Syntax$OperatorExpression = this._$JavascriptGeneration$Syntax$OperatorExpression = $.$JavascriptGeneration$Syntax$OperatorExpression;
     this.$JavascriptGeneration$Syntax$OperatorExpression$ = this._$JavascriptGeneration$Syntax$OperatorExpression$ = $.$JavascriptGeneration$Syntax$OperatorExpression$;
     this.$init$JavascriptGeneration$Syntax$ReturnStatement$ = this._$init$JavascriptGeneration$Syntax$ReturnStatement$ = $.$init$JavascriptGeneration$Syntax$ReturnStatement$;
     this.$JavascriptGeneration$Syntax$ReturnStatement = this._$JavascriptGeneration$Syntax$ReturnStatement = $.$JavascriptGeneration$Syntax$ReturnStatement;
     this.$JavascriptGeneration$Syntax$ReturnStatement$ = this._$JavascriptGeneration$Syntax$ReturnStatement$ = $.$JavascriptGeneration$Syntax$ReturnStatement$;
     this.$init$JavascriptGeneration$Syntax$Script$ = this._$init$JavascriptGeneration$Syntax$Script$ = $.$init$JavascriptGeneration$Syntax$Script$;
     this.$JavascriptGeneration$Syntax$Script = this._$JavascriptGeneration$Syntax$Script = $.$JavascriptGeneration$Syntax$Script;
     this.$JavascriptGeneration$Syntax$Script$ = this._$JavascriptGeneration$Syntax$Script$ = $.$JavascriptGeneration$Syntax$Script$;
     this.$init$JavascriptGeneration$Syntax$StringLiteral$ = this._$init$JavascriptGeneration$Syntax$StringLiteral$ = $.$init$JavascriptGeneration$Syntax$StringLiteral$;
     this.$JavascriptGeneration$Syntax$StringLiteral = this._$JavascriptGeneration$Syntax$StringLiteral = $.$JavascriptGeneration$Syntax$StringLiteral;
     this.$JavascriptGeneration$Syntax$StringLiteral$ = this._$JavascriptGeneration$Syntax$StringLiteral$ = $.$JavascriptGeneration$Syntax$StringLiteral$;
     this.$init$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = this._$init$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = $.$init$JavascriptGeneration$Syntax$TernaryOperatorExpression$;
     this.$JavascriptGeneration$Syntax$TernaryOperatorExpression = this._$JavascriptGeneration$Syntax$TernaryOperatorExpression = $.$JavascriptGeneration$Syntax$TernaryOperatorExpression;
     this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = this._$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = $.$JavascriptGeneration$Syntax$TernaryOperatorExpression$;
     this.$init$JavascriptGeneration$Syntax$ThrowStatement$ = this._$init$JavascriptGeneration$Syntax$ThrowStatement$ = $.$init$JavascriptGeneration$Syntax$ThrowStatement$;
     this.$JavascriptGeneration$Syntax$ThrowStatement = this._$JavascriptGeneration$Syntax$ThrowStatement = $.$JavascriptGeneration$Syntax$ThrowStatement;
     this.$JavascriptGeneration$Syntax$ThrowStatement$ = this._$JavascriptGeneration$Syntax$ThrowStatement$ = $.$JavascriptGeneration$Syntax$ThrowStatement$;
     this.$init$JavascriptGeneration$Syntax$TryStatement$ = this._$init$JavascriptGeneration$Syntax$TryStatement$ = $.$init$JavascriptGeneration$Syntax$TryStatement$;
     this.$JavascriptGeneration$Syntax$TryStatement = this._$JavascriptGeneration$Syntax$TryStatement = $.$JavascriptGeneration$Syntax$TryStatement;
     this.$JavascriptGeneration$Syntax$TryStatement$ = this._$JavascriptGeneration$Syntax$TryStatement$ = $.$JavascriptGeneration$Syntax$TryStatement$;
     this.$init$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = this._$init$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = $.$init$JavascriptGeneration$Syntax$UnaryOperatorExpression$;
     this.$JavascriptGeneration$Syntax$UnaryOperatorExpression = this._$JavascriptGeneration$Syntax$UnaryOperatorExpression = $.$JavascriptGeneration$Syntax$UnaryOperatorExpression;
     this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = this._$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = $.$JavascriptGeneration$Syntax$UnaryOperatorExpression$;
     this.$init$JavascriptGeneration$Syntax$VariableStatement$ = this._$init$JavascriptGeneration$Syntax$VariableStatement$ = $.$init$JavascriptGeneration$Syntax$VariableStatement$;
     this.$JavascriptGeneration$Syntax$VariableStatement = this._$JavascriptGeneration$Syntax$VariableStatement = $.$JavascriptGeneration$Syntax$VariableStatement;
     this.$JavascriptGeneration$Syntax$VariableStatement$ = this._$JavascriptGeneration$Syntax$VariableStatement$ = $.$JavascriptGeneration$Syntax$VariableStatement$;
     this.$init$JavascriptGeneration$Syntax$VerbatimNode$ = this._$init$JavascriptGeneration$Syntax$VerbatimNode$ = $.$init$JavascriptGeneration$Syntax$VerbatimNode$;
     this.$JavascriptGeneration$Syntax$VerbatimNode = this._$JavascriptGeneration$Syntax$VerbatimNode = $.$JavascriptGeneration$Syntax$VerbatimNode;
     this.$JavascriptGeneration$Syntax$VerbatimNode$ = this._$JavascriptGeneration$Syntax$VerbatimNode$ = $.$JavascriptGeneration$Syntax$VerbatimNode$;
     this.$enclosingObjects$JavascriptGeneration$Syntax = enclosingObjects;
     this.$super$JavascriptGeneration$Syntax$slot = runtimeSuperclass;
     this["JavascriptGeneration`Syntax"] = function () {
      superBasicNew.call(this);
      this.$JavascriptGeneration$Syntax$ArrayExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$Block$slot = nil;
      this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = nil;
      this.$JavascriptGeneration$Syntax$CallExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$ForInStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$ForStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$FunctionExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$FunctionStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$IfStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$MemberExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$NewExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$Node$slot = nil;
      this.$JavascriptGeneration$Syntax$NumberLiteral$slot = nil;
      this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = nil;
      this.$JavascriptGeneration$Syntax$OperatorExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$ReturnStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$Script$slot = nil;
      this.$JavascriptGeneration$Syntax$StringLiteral$slot = nil;
      this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$ThrowStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$TryStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = nil;
      this.$JavascriptGeneration$Syntax$VariableStatement$slot = nil;
      this.$JavascriptGeneration$Syntax$VerbatimNode$slot = nil;
     };
     this.basicNew = this["JavascriptGeneration`Syntax"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for JavascriptGeneration`Syntax";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$JavascriptGeneration$Syntax = enclosingObjects;
      this.$super$JavascriptGeneration$Syntax = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$JavascriptGeneration$Writer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for JavascriptGeneration`Writer";
   this.name = "JavascriptGeneration`Writer";
   this.header = 2308;
   this.slots = [
    new SM("output", true, false),
    new SM("tabLevel", true, false),
    new SM("stringTranslation", false, false)
   ];
   this.methods = [
    new MM("superInit`JavascriptGeneration`Writer", true, 2309),
    new MM("instance`initializer", true, 2310),
    new MM("contents", false, 2311),
    new MM("generateSourceFor:", false, 2312),
    new MM("generateSourceFor:on:", false, 2313),
    new MM("visitArrayExpression:", false, 2314),
    new MM("visitForInStatement:", false, 2315),
    new MM("visitForStatement:", false, 2316),
    new MM("visitFunctionStatement:", false, 2317),
    new MM("visitOperatorExpression:", false, 2318),
    new MM("visitScript:", false, 2319),
    new MM("visitStringLiteral:", false, 2320),
    new MM("visitTernaryOperatorExpression:", false, 2321),
    new MM("visitThrowStatement:", false, 2322),
    new MM("visitUnaryOperatorExpression:", false, 2323),
    new MM("visitVerbatimNode:", false, 2324),
    new MM("visitAssignmentExpression:", false, 2325),
    new MM("visitBlock:", false, 2326),
    new MM("visitBooleanLiteral:", false, 2327),
    new MM("visitCallExpression:", false, 2328),
    new MM("visitFunctionExpression:", false, 2329),
    new MM("visitIdentifierExpression:", false, 2330),
    new MM("visitIfStatement:", false, 2331),
    new MM("visitMemberExpression:", false, 2332),
    new MM("visitNewExpression:", false, 2333),
    new MM("visitNumberLiteral:", false, 2334),
    new MM("visitObjectLiteral:", false, 2335),
    new MM("visitReturnStatement:", false, 2336),
    new MM("visitTryStatement:", false, 2337),
    new MM("visitVariableStatement:", false, 2338),
    new MM("beginNewWriteCycleUsing:", false, 2339),
    new MM("cr", false, 2340),
    new MM("inIndentedBlock:", false, 2341),
    new MM("indentCr", false, 2342),
    new MM("unindentCr", false, 2343),
    new MM("write:", false, 2344),
    new MM("writeBlock:", false, 2345),
    new MM("init`output:", true, 0),
    new MM("output", true, 0),
    new MM("output:", true, 0),
    new MM("init`tabLevel:", true, 0),
    new MM("tabLevel", true, 0),
    new MM("tabLevel:", true, 0),
    new MM("init`stringTranslation:", true, 0),
    new MM("stringTranslation", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$JavascriptGeneration$Writer = function () {
    var self = this;
    self.$super$JavascriptGeneration$Writer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$JavascriptGeneration$Writer();
    $1.$init$stringTranslation$(self, $0.$Dictionary(self.$enclosingObjects$JavascriptGeneration$Writer[0]).$new());
    $1.$stringTranslation(self).$at$put$("\\", "\\\\");
    $1.$stringTranslation(self).$at$put$(self._$Character().$cr(), "\\r");
    $1.$stringTranslation(self).$at$put$(self._$Character().$lf(), "\\n");
    $1.$stringTranslation(self).$at$put$("\"", "\\\"");
    return self;
   };
   this.$contents = function () {
    var self = this;
    return $1.$output(self).$contents();
   };
   this.$generateSourceFor$ = function ($node) {
    var self = this;
    self._$generateSourceFor$on$($node, $0.$WriteStream(self.$enclosingObjects$JavascriptGeneration$Writer[0]).$on$(self._$String().$new$(100)));
    return self._$contents();
   };
   this.$generateSourceFor$on$ = function ($node, $stream) {
    var self = this;
    self._$beginNewWriteCycleUsing$($stream);
    $node.$visitBy$(self);
    return self;
   };
   this.$visitArrayExpression$ = function ($node) {
    var self = this;
    var $elements = nil;
    $elements = $node.$elements();
    if ($elements.$isEmpty()) {
     return self._$write$("[]");
    } else {
     nil;
    };
    if ($elements.$size().$$equal(1)) {
     self._$write$("[");
     $elements.$first().$visitBy$(self);
     return self._$write$("]");
    } else {
     nil;
    };
    self._$write$("[");
    self._$indentCr();
    $elements.$do$separatedBy$(function ($each) {
     return $each.$visitBy$(self);
    }, function () {
     self._$write$(",");
     return self._$cr();
    });
    self._$unindentCr();
    self._$write$("]");
    return self;
   };
   this.$visitForInStatement$ = function ($node) {
    var self = this;
    self._$write$("for (");
    $node.$varName().$visitBy$(self);
    self._$write$(" in ");
    $node.$expression().$visitBy$(self);
    self._$write$(") ");
    $node.$body().$asBlock().$visitBy$(self);
    return self;
   };
   this.$visitForStatement$ = function ($node) {
    var self = this;
    self._$write$("for (");
    $node.$initExpression().$visitBy$(self);
    self._$write$("; ");
    $node.$testExpression().$visitBy$(self);
    self._$write$("; ");
    $node.$incrementExpression().$visitBy$(self);
    self._$write$(") ");
    $node.$body().$asBlock().$visitBy$(self);
    return self;
   };
   this.$visitFunctionStatement$ = function ($node) {
    var self = this;
    self._$write$("function ");
    $node.$name().$ifNotNil$(function ($name) {
     $name.$visitBy$(self);
     return self._$write$(" ");
    });
    self._$write$("(");
    $node.$parameters().$do$separatedBy$(function ($each) {
     return $each.$visitBy$(self);
    }, function () {
     return self._$write$(", ");
    });
    self._$write$(") ");
    self._$writeBlock$($node.$body());
    return self;
   };
   this.$visitOperatorExpression$ = function ($node) {
    var self = this;
    var $parenthesizeLeft = nil;
    var $parenthesizeRight = nil;
    $parenthesizeLeft = $node.$left().$isOperatorExpression();
    $parenthesizeRight = $node.$right().$isOperatorExpression();
    if ($parenthesizeLeft) {
     self._$write$("(");
    } else {
     nil;
    };
    $node.$left().$visitBy$(self);
    if ($parenthesizeLeft) {
     self._$write$(") ");
    } else {
     self._$write$(" ");
    };
    $node.$operatorName().$visitBy$(self);
    if ($parenthesizeRight) {
     self._$write$(" (");
    } else {
     self._$write$(" ");
    };
    $node.$right().$visitBy$(self);
    if ($parenthesizeRight) {
     self._$write$(")");
    } else {
     nil;
    };
    return self;
   };
   this.$visitScript$ = function ($node) {
    var self = this;
    $node.$statements().$do$separatedBy$(function ($each) {
     $each.$visitBy$(self);
     return self._$write$(";");
    }, function () {
     self._$cr();
     return self._$cr();
    });
    return self;
   };
   this.$visitStringLiteral$ = function ($node) {
    var self = this;
    self._$write$("\"");
    $node.$value().$do$(function ($each) {
     var $s = nil;
     $s = $1.$stringTranslation(self).$at$ifAbsent$($each, function () {
      return [$each];
     });
     return self._$write$($s);
    });
    self._$write$("\"");
    return self;
   };
   this.$visitTernaryOperatorExpression$ = function ($node) {
    var self = this;
    self._$write$("(");
    $node.$condition().$visitBy$(self);
    self._$write$(" ? ");
    $node.$then().$visitBy$(self);
    self._$write$(" : ");
    $node.$else().$visitBy$(self);
    self._$write$(")");
    return self;
   };
   this.$visitThrowStatement$ = function ($node) {
    var self = this;
    self._$write$("throw ");
    $node.$expression().$visitBy$(self);
    return self;
   };
   this.$visitUnaryOperatorExpression$ = function ($node) {
    var self = this;
    var $isPostfix = nil;
    var $isOnOperator = nil;
    $isPostfix = $node.$isPostfix();
    $isOnOperator = $node.$operand().$isOperatorExpression();
    if (!$isPostfix) {
     $node.$operatorName().$visitBy$(self);
    } else {
     nil;
    };
    if ($isOnOperator) {
     self._$write$("(");
    } else {
     nil;
    };
    $node.$operand().$visitBy$(self);
    if ($isOnOperator) {
     self._$write$(")");
    } else {
     nil;
    };
    if ($isPostfix) {
     $node.$operatorName().$visitBy$(self);
    } else {
     nil;
    };
    return self;
   };
   this.$visitVerbatimNode$ = function ($node) {
    var self = this;
    self._$write$($node.$text());
    return self;
   };
   this.$visitAssignmentExpression$ = function ($node) {
    var self = this;
    $node.$leftHandSide().$visitBy$(self);
    self._$write$(" = ");
    $node.$rightHandSide().$visitBy$(self);
    return self;
   };
   this.$visitBlock$ = function ($node) {
    var self = this;
    var $statements = nil;
    $statements = $node.$statements();
    if ($statements.$isEmpty()) {
     return self._$write$("{}");
    } else {
     nil;
    };
    self._$write$("{");
    self._$indentCr();
    $statements.$do$separatedBy$(function ($each) {
     $each.$visitBy$(self);
     return self._$write$(";");
    }, function () {
     return self._$cr();
    });
    self._$unindentCr();
    self._$write$("}");
    return self;
   };
   this.$visitBooleanLiteral$ = function ($node) {
    var self = this;
    self._$write$($node.$value().$ifTrue$ifFalse$(function () {
     return "true";
    }, function () {
     return "false";
    }));
    return self;
   };
   this.$visitCallExpression$ = function ($node) {
    var self = this;
    var $parenthesize = nil;
    $parenthesize = $node.$function().$isFunctionExpression();
    if ($parenthesize) {
     self._$write$("(");
    } else {
     nil;
    };
    $node.$function().$visitBy$(self);
    if ($parenthesize) {
     self._$write$(")");
    } else {
     nil;
    };
    self._$write$("(");
    $node.$arguments().$do$separatedBy$(function ($arg) {
     return $arg.$visitBy$(self);
    }, function () {
     return self._$write$(", ");
    });
    self._$write$(")");
    return self;
   };
   this.$visitFunctionExpression$ = function ($node) {
    var self = this;
    self._$visitFunctionStatement$($node);
    return self;
   };
   this.$visitIdentifierExpression$ = function ($node) {
    var self = this;
    self._$write$($node.$name());
    return self;
   };
   this.$visitIfStatement$ = function ($node) {
    var self = this;
    self._$write$("if (");
    $node.$expression().$visitBy$(self);
    self._$write$(") ");
    self._$writeBlock$($node.$thenStatement().$asBlock());
    $node.$elseStatement().$ifNotNil$(function ($else) {
     self._$write$(" else ");
     return self._$writeBlock$($node.$elseStatement().$asBlock());
    });
    return self;
   };
   this.$visitMemberExpression$ = function ($node) {
    var self = this;
    var $parenthesize = nil;
    $parenthesize = ($node.$primary().$isNumberLiteral() || $node.$primary().$isOperatorExpression()) || $node.$primary().$isFunctionExpression();
    if ($parenthesize) {
     self._$write$("(");
    } else {
     nil;
    };
    $node.$primary().$visitBy$(self);
    if ($parenthesize) {
     self._$write$(")");
    } else {
     nil;
    };
    if ($node.$property().$isStringLiteral() && self.$enclosingObjects$JavascriptGeneration$Writer[0]._$isLegalIdentifier$($node.$property().$value())) {
     self._$write$(".");
     self._$write$($node.$property().$value());
    } else {
     self._$write$("[");
     $node.$property().$visitBy$(self);
     self._$write$("]");
    };
    return self;
   };
   this.$visitNewExpression$ = function ($node) {
    var self = this;
    self._$write$("new ");
    $node.$expression().$visitBy$(self);
    self._$write$("(");
    $node.$arguments().$do$separatedBy$(function ($arg) {
     return $arg.$visitBy$(self);
    }, function () {
     return self._$write$(", ");
    });
    self._$write$(")");
    return self;
   };
   this.$visitNumberLiteral$ = function ($node) {
    var self = this;
    self._$write$($node.$value().$printString());
    return self;
   };
   this.$visitObjectLiteral$ = function ($node) {
    var self = this;
    if ($node.$slotCount().$$equal(0)) {
     self._$write$("{}");
     return self;
    } else {
     nil;
    };
    self._$write$("{");
    self._$indentCr();
    $node.$slotsDo$betweenDo$(function ($name, $value) {
     var $nameIsQuoted = nil;
     $nameIsQuoted = $name.$first().$$equal("'");
     if (!$nameIsQuoted) {
      self._$write$("'");
     } else {
      nil;
     };
     self._$write$($name);
     if (!$nameIsQuoted) {
      self._$write$("'");
     } else {
      nil;
     };
     self._$write$(": ");
     return $value.$visitBy$(self);
    }, function () {
     self._$write$(",");
     return self._$cr();
    });
    self._$unindentCr();
    self._$write$("}");
    return self;
   };
   this.$visitReturnStatement$ = function ($node) {
    var self = this;
    self._$write$("return");
    $node.$expression().$ifNotNil$(function ($expr) {
     self._$write$(" ");
     return $expr.$visitBy$(self);
    });
    return self;
   };
   this.$visitTryStatement$ = function ($node) {
    var self = this;
    self._$write$("try ");
    self._$writeBlock$($node.$protectedBlock());
    $node.$catchBlock().$ifNotNil$(function ($catch) {
     self._$write$(" catch (");
     $node.$catchVar().$visitBy$(self);
     self._$write$(") ");
     return self._$writeBlock$($catch);
    });
    $node.$finallyBlock().$ifNotNil$(function ($finally) {
     self._$write$(" finally ");
     return self._$writeBlock$($finally);
    });
    return self;
   };
   this.$visitVariableStatement$ = function ($node) {
    var self = this;
    self._$write$("var ");
    $node.$name().$visitBy$(self);
    $node.$initializer().$ifNotNil$(function ($expr) {
     self._$write$(" = ");
     return $expr.$visitBy$(self);
    });
    return self;
   };
   this.$beginNewWriteCycleUsing$ = function ($stream) {
    var self = this;
    $1.$output$(self, $stream);
    $1.$tabLevel$(self, 0);
    return self;
   };
   this.$cr = function () {
    var self = this;
    $1.$output(self).$cr();
    {
     var $$limit = nil;
     var $$i = nil;
     nil;
     $$i = 1;
     $$limit = $1.$tabLevel(self);
     for (; $$limit.$$greater$equal($$i); ) {
      $1.$output(self).$space();
      $$i = (1).$$plus($$i);
     };
    };
    return self;
   };
   this.$inIndentedBlock$ = function ($closure) {
    var self = this;
    self._$write$("{");
    self._$indentCr();
    return $closure.$ensure$(function () {
     self._$unindentCr();
     return self._$write$("}");
    });
   };
   this.$indentCr = function () {
    var self = this;
    $1.$tabLevel$(self, $1.$tabLevel(self) + 1);
    self._$cr();
    return self;
   };
   this.$unindentCr = function () {
    var self = this;
    $1.$tabLevel$(self, (0).$max$($1.$tabLevel(self) - 1));
    self._$cr();
    return self;
   };
   this.$write$ = function ($text) {
    var self = this;
    $1.$output(self).$nextPutAll$($text);
    return self;
   };
   this.$writeBlock$ = function ($block) {
    var self = this;
    var $statements = nil;
    $statements = $block.$statements();
    if ($statements.$isEmpty()) {
     self._$write$("{}");
    } else {
     self._$inIndentedBlock$(function () {
      return $statements.$do$separatedBy$(function ($each) {
       $each.$visitBy$(self);
       return self._$write$(";");
      }, function () {
       return self._$cr();
      });
     });
    };
    return self;
   };
   this.$init$output$ = function (self, v) {
    self.$output$slot = v;
    return self;
   };
   this.$output = function (self) {
    return self.$output$slot;
   };
   this.$output$ = function (self, v) {
    self.$output$slot = v;
    return self;
   };
   this.$init$tabLevel$ = function (self, v) {
    self.$tabLevel$slot = v;
    return self;
   };
   this.$tabLevel = function (self) {
    return self.$tabLevel$slot;
   };
   this.$tabLevel$ = function (self, v) {
    self.$tabLevel$slot = v;
    return self;
   };
   this.$init$stringTranslation$ = function (self, v) {
    self.$stringTranslation$slot = v;
    return self;
   };
   this.$stringTranslation = function (self) {
    return self.$stringTranslation$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for JavascriptGeneration`Writer";
     this._$superInit$JavascriptGeneration$Writer = $.$superInit$JavascriptGeneration$Writer;
     this.$superInit$JavascriptGeneration$Writer = dnuCatcher("$superInit$JavascriptGeneration$Writer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$contents = $.$contents;
     this.$contents = dnuCatcher("$contents");
     this.$generateSourceFor$ = this._$generateSourceFor$ = $.$generateSourceFor$;
     this.$generateSourceFor$on$ = this._$generateSourceFor$on$ = $.$generateSourceFor$on$;
     this.$visitArrayExpression$ = this._$visitArrayExpression$ = $.$visitArrayExpression$;
     this.$visitForInStatement$ = this._$visitForInStatement$ = $.$visitForInStatement$;
     this.$visitForStatement$ = this._$visitForStatement$ = $.$visitForStatement$;
     this.$visitFunctionStatement$ = this._$visitFunctionStatement$ = $.$visitFunctionStatement$;
     this.$visitOperatorExpression$ = this._$visitOperatorExpression$ = $.$visitOperatorExpression$;
     this.$visitScript$ = this._$visitScript$ = $.$visitScript$;
     this.$visitStringLiteral$ = this._$visitStringLiteral$ = $.$visitStringLiteral$;
     this.$visitTernaryOperatorExpression$ = this._$visitTernaryOperatorExpression$ = $.$visitTernaryOperatorExpression$;
     this.$visitThrowStatement$ = this._$visitThrowStatement$ = $.$visitThrowStatement$;
     this.$visitUnaryOperatorExpression$ = this._$visitUnaryOperatorExpression$ = $.$visitUnaryOperatorExpression$;
     this.$visitVerbatimNode$ = this._$visitVerbatimNode$ = $.$visitVerbatimNode$;
     this.$visitAssignmentExpression$ = this._$visitAssignmentExpression$ = $.$visitAssignmentExpression$;
     this.$visitBlock$ = this._$visitBlock$ = $.$visitBlock$;
     this.$visitBooleanLiteral$ = this._$visitBooleanLiteral$ = $.$visitBooleanLiteral$;
     this.$visitCallExpression$ = this._$visitCallExpression$ = $.$visitCallExpression$;
     this.$visitFunctionExpression$ = this._$visitFunctionExpression$ = $.$visitFunctionExpression$;
     this.$visitIdentifierExpression$ = this._$visitIdentifierExpression$ = $.$visitIdentifierExpression$;
     this.$visitIfStatement$ = this._$visitIfStatement$ = $.$visitIfStatement$;
     this.$visitMemberExpression$ = this._$visitMemberExpression$ = $.$visitMemberExpression$;
     this.$visitNewExpression$ = this._$visitNewExpression$ = $.$visitNewExpression$;
     this.$visitNumberLiteral$ = this._$visitNumberLiteral$ = $.$visitNumberLiteral$;
     this.$visitObjectLiteral$ = this._$visitObjectLiteral$ = $.$visitObjectLiteral$;
     this.$visitReturnStatement$ = this._$visitReturnStatement$ = $.$visitReturnStatement$;
     this.$visitTryStatement$ = this._$visitTryStatement$ = $.$visitTryStatement$;
     this.$visitVariableStatement$ = this._$visitVariableStatement$ = $.$visitVariableStatement$;
     this._$beginNewWriteCycleUsing$ = $.$beginNewWriteCycleUsing$;
     this.$beginNewWriteCycleUsing$ = dnuCatcher("$beginNewWriteCycleUsing$");
     this._$cr = $.$cr;
     this.$cr = dnuCatcher("$cr");
     this._$inIndentedBlock$ = $.$inIndentedBlock$;
     this.$inIndentedBlock$ = dnuCatcher("$inIndentedBlock$");
     this._$indentCr = $.$indentCr;
     this.$indentCr = dnuCatcher("$indentCr");
     this._$unindentCr = $.$unindentCr;
     this.$unindentCr = dnuCatcher("$unindentCr");
     this._$write$ = $.$write$;
     this.$write$ = dnuCatcher("$write$");
     this._$writeBlock$ = $.$writeBlock$;
     this.$writeBlock$ = dnuCatcher("$writeBlock$");
     this.$enclosingObjects$JavascriptGeneration$Writer = enclosingObjects;
     this.$super$JavascriptGeneration$Writer$slot = runtimeSuperclass;
     this["JavascriptGeneration`Writer"] = function () {
      superBasicNew.call(this);
      this.$output$slot = nil;
      this.$tabLevel$slot = nil;
      this.$stringTranslation$slot = nil;
     };
     this.basicNew = this["JavascriptGeneration`Writer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for JavascriptGeneration`Writer";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for JavascriptGeneration`Writer";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$JavascriptGeneration$Writer = enclosingObjects;
      this.$super$JavascriptGeneration$Writer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$JavascriptGeneration$Factory.enclosingMixin = this;
  this.$JavascriptGeneration$Syntax.enclosingMixin = this;
  this.$JavascriptGeneration$Writer.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for JavascriptGeneration";
    this._$superInit$JavascriptGeneration = $.$superInit$JavascriptGeneration;
    this.$superInit$JavascriptGeneration = dnuCatcher("$superInit$JavascriptGeneration");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$isLegalIdentifier$ = $.$isLegalIdentifier$;
    this.$isLegalIdentifier$ = dnuCatcher("$isLegalIdentifier$");
    this._$Factory = $.$Factory;
    this.$Factory = dnuCatcher("$Factory");
    this._$Syntax = $.$Syntax;
    this.$Syntax = dnuCatcher("$Syntax");
    this.$Writer = this._$Writer = $.$Writer;
    this._$init$syntax$ = $.$init$syntax$;
    this.$init$syntax$ = dnuCatcher("$init$syntax$");
    this._$syntax = $.$syntax;
    this.$syntax = dnuCatcher("$syntax");
    this.$init$factory$ = this._$init$factory$ = $.$init$factory$;
    this.$factory = this._$factory = $.$factory;
    this.$init$JavascriptGeneration$Factory$ = this._$init$JavascriptGeneration$Factory$ = $.$init$JavascriptGeneration$Factory$;
    this.$JavascriptGeneration$Factory = this._$JavascriptGeneration$Factory = $.$JavascriptGeneration$Factory;
    this.$JavascriptGeneration$Factory$ = this._$JavascriptGeneration$Factory$ = $.$JavascriptGeneration$Factory$;
    this.$init$JavascriptGeneration$Syntax$ = this._$init$JavascriptGeneration$Syntax$ = $.$init$JavascriptGeneration$Syntax$;
    this.$JavascriptGeneration$Syntax = this._$JavascriptGeneration$Syntax = $.$JavascriptGeneration$Syntax;
    this.$JavascriptGeneration$Syntax$ = this._$JavascriptGeneration$Syntax$ = $.$JavascriptGeneration$Syntax$;
    this.$init$JavascriptGeneration$Writer$ = this._$init$JavascriptGeneration$Writer$ = $.$init$JavascriptGeneration$Writer$;
    this.$JavascriptGeneration$Writer = this._$JavascriptGeneration$Writer = $.$JavascriptGeneration$Writer;
    this.$JavascriptGeneration$Writer$ = this._$JavascriptGeneration$Writer$ = $.$JavascriptGeneration$Writer$;
    this.$enclosingObjects$JavascriptGeneration = enclosingObjects;
    this.$super$JavascriptGeneration$slot = runtimeSuperclass;
    this.JavascriptGeneration = function () {
     superBasicNew.call(this);
     this.$List$slot = nil;
     this.$Dictionary$slot = nil;
     this.$WriteStream$slot = nil;
     this.$syntax$slot = nil;
     this.$factory$slot = nil;
     this.$JavascriptGeneration$Factory$slot = nil;
     this.$JavascriptGeneration$Syntax$slot = nil;
     this.$JavascriptGeneration$Writer$slot = nil;
    };
    this.basicNew = this.JavascriptGeneration;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for JavascriptGeneration";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($platform) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for JavascriptGeneration";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$JavascriptGeneration = enclosingObjects;
     this.$super$JavascriptGeneration = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Newspeak2V8Compilation = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for Newspeak2V8Compilation";
  this.name = "Newspeak2V8Compilation";
  this.header = 2346;
  this.slots = [
   new SM("asts", false, false),
   new SM("Collection", false, false),
   new SM("Dictionary", false, false),
   new SM("IdentityDictionary", false, false),
   new SM("OrderedCollection", false, false),
   new SM("SortedList", false, false),
   new SM("Set", false, false),
   new SM("ReadStream", false, false),
   new SM("WriteStream", false, false),
   new SM("MutableString", false, false),
   new SM("Parser", false, false),
   new SM("javascriptGeneration", false, false),
   new SM("JavascriptWriter", false, false),
   new SM("js", false, false),
   new SM("names", false, false),
   new SM("ASTTool", false, false),
   new SM("ASTCopier", false, false),
   new SM("AST", false, false),
   new SM("AssignmentAST", false, false),
   new SM("BlockAST", false, false),
   new SM("CascadedSendAST", false, false),
   new SM("CodeBodyAST", false, false),
   new SM("MessageAST", false, false),
   new SM("MessagePatternAST", false, false),
   new SM("MethodAST", false, false),
   new SM("NormalSendAST", false, false),
   new SM("NumberAST", false, false),
   new SM("ReturnStatAST", false, false),
   new SM("SendAST", false, false),
   new SM("SymbolAST", false, false),
   new SM("TupleAST", false, false),
   new SM("VarDeclAST", false, false),
   new SM("VariableAST", false, false),
   new SM("parser", false, false),
   new SM("cachedCompilations", false, false),
   new SM("sourcesList", true, false),
   new SM("Newspeak2V8Compilation`CachedCompilation", true, true),
   new SM("Newspeak2V8Compilation`Compiler", true, true),
   new SM("Newspeak2V8Compilation`IntermediateClassDeclaration", true, true),
   new SM("Newspeak2V8Compilation`IntermediateMethod", true, true),
   new SM("Newspeak2V8Compilation`IntermediateMixin", true, true),
   new SM("Newspeak2V8Compilation`IntermediateSlotDeclaration", true, true),
   new SM("Newspeak2V8Compilation`NameMangler", true, true),
   new SM("Newspeak2V8Compilation`ProgramBuilder", true, true)
  ];
  this.methods = [
   new MM("superInit`Newspeak2V8Compilation", true, 2347),
   new MM("instance`initializer", true, 2348),
   new MM("LocalEntry", false, 2349),
   new MM("Scope", false, 2350),
   new MM("assert:", false, 2351),
   new MM("mixinNameOfClassNamed:", false, 2352),
   new MM("mixinSlotNameFor:", false, 2353),
   new MM("split:at:", false, 2354),
   new MM("splitFullyQualifiedName:", false, 2355),
   new MM("syntheticNameSeparator", false, 2356),
   new MM("CachedCompilation", true, 0),
   new MM("Compiler", true, 0),
   new MM("IntermediateClassDeclaration", true, 0),
   new MM("IntermediateMethod", true, 0),
   new MM("IntermediateMixin", true, 0),
   new MM("IntermediateSlotDeclaration", true, 0),
   new MM("NameMangler", true, 0),
   new MM("ProgramBuilder", true, 0),
   new MM("init`asts:", true, 0),
   new MM("asts", true, 0),
   new MM("init`Collection:", true, 0),
   new MM("Collection", true, 0),
   new MM("init`Dictionary:", true, 0),
   new MM("Dictionary", true, 0),
   new MM("init`IdentityDictionary:", true, 0),
   new MM("IdentityDictionary", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`SortedList:", true, 0),
   new MM("SortedList", true, 0),
   new MM("init`Set:", true, 0),
   new MM("Set", true, 0),
   new MM("init`ReadStream:", true, 0),
   new MM("ReadStream", true, 0),
   new MM("init`WriteStream:", true, 0),
   new MM("WriteStream", true, 0),
   new MM("init`MutableString:", true, 0),
   new MM("MutableString", true, 0),
   new MM("init`Parser:", true, 0),
   new MM("Parser", true, 0),
   new MM("init`javascriptGeneration:", true, 0),
   new MM("javascriptGeneration", true, 0),
   new MM("init`JavascriptWriter:", true, 0),
   new MM("JavascriptWriter", true, 0),
   new MM("init`js:", true, 0),
   new MM("js", true, 0),
   new MM("init`names:", true, 0),
   new MM("names", true, 0),
   new MM("init`ASTTool:", true, 0),
   new MM("ASTTool", true, 0),
   new MM("init`ASTCopier:", true, 0),
   new MM("ASTCopier", true, 0),
   new MM("init`AST:", true, 0),
   new MM("AST", true, 0),
   new MM("init`AssignmentAST:", true, 0),
   new MM("AssignmentAST", true, 0),
   new MM("init`BlockAST:", true, 0),
   new MM("BlockAST", true, 0),
   new MM("init`CascadedSendAST:", true, 0),
   new MM("CascadedSendAST", true, 0),
   new MM("init`CodeBodyAST:", true, 0),
   new MM("CodeBodyAST", true, 0),
   new MM("init`MessageAST:", true, 0),
   new MM("MessageAST", true, 0),
   new MM("init`MessagePatternAST:", true, 0),
   new MM("MessagePatternAST", true, 0),
   new MM("init`MethodAST:", true, 0),
   new MM("MethodAST", true, 0),
   new MM("init`NormalSendAST:", true, 0),
   new MM("NormalSendAST", true, 0),
   new MM("init`NumberAST:", true, 0),
   new MM("NumberAST", true, 0),
   new MM("init`ReturnStatAST:", true, 0),
   new MM("ReturnStatAST", true, 0),
   new MM("init`SendAST:", true, 0),
   new MM("SendAST", true, 0),
   new MM("init`SymbolAST:", true, 0),
   new MM("SymbolAST", true, 0),
   new MM("init`TupleAST:", true, 0),
   new MM("TupleAST", true, 0),
   new MM("init`VarDeclAST:", true, 0),
   new MM("VarDeclAST", true, 0),
   new MM("init`VariableAST:", true, 0),
   new MM("VariableAST", true, 0),
   new MM("init`parser:", true, 0),
   new MM("parser", true, 0),
   new MM("init`cachedCompilations:", true, 0),
   new MM("cachedCompilations", true, 0),
   new MM("init`sourcesList:", true, 0),
   new MM("sourcesList", true, 0),
   new MM("sourcesList:", true, 0),
   new MM("init`Newspeak2V8Compilation`CachedCompilation:", true, 0),
   new MM("Newspeak2V8Compilation`CachedCompilation", true, 0),
   new MM("Newspeak2V8Compilation`CachedCompilation:", true, 0),
   new MM("init`Newspeak2V8Compilation`Compiler:", true, 0),
   new MM("Newspeak2V8Compilation`Compiler", true, 0),
   new MM("Newspeak2V8Compilation`Compiler:", true, 0),
   new MM("init`Newspeak2V8Compilation`IntermediateClassDeclaration:", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateClassDeclaration", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateClassDeclaration:", true, 0),
   new MM("init`Newspeak2V8Compilation`IntermediateMethod:", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateMethod", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateMethod:", true, 0),
   new MM("init`Newspeak2V8Compilation`IntermediateMixin:", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateMixin", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateMixin:", true, 0),
   new MM("init`Newspeak2V8Compilation`IntermediateSlotDeclaration:", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateSlotDeclaration", true, 0),
   new MM("Newspeak2V8Compilation`IntermediateSlotDeclaration:", true, 0),
   new MM("init`Newspeak2V8Compilation`NameMangler:", true, 0),
   new MM("Newspeak2V8Compilation`NameMangler", true, 0),
   new MM("Newspeak2V8Compilation`NameMangler:", true, 0),
   new MM("init`Newspeak2V8Compilation`ProgramBuilder:", true, 0),
   new MM("Newspeak2V8Compilation`ProgramBuilder", true, 0),
   new MM("Newspeak2V8Compilation`ProgramBuilder:", true, 0)
  ];
  this.nestedClasses = [
   "Newspeak2V8Compilation`CachedCompilation",
   "Newspeak2V8Compilation`Compiler",
   "Newspeak2V8Compilation`IntermediateClassDeclaration",
   "Newspeak2V8Compilation`IntermediateMethod",
   "Newspeak2V8Compilation`IntermediateMixin",
   "Newspeak2V8Compilation`IntermediateSlotDeclaration",
   "Newspeak2V8Compilation`NameMangler",
   "Newspeak2V8Compilation`ProgramBuilder"
  ];
  this.applications = [];
  this.$superInit$Newspeak2V8Compilation = function ($platform, $parsing, $generation, $mirrors) {
   var self = this;
   self.$super$Newspeak2V8Compilation$slot._$instance$initializer.call(self, $platform, $parsing.$ASTModule());
   return self;
  };
  this.$instance$initializer = function ($platform, $parsing, $generation, $mirrors) {
   var self = this;
   self._$superInit$Newspeak2V8Compilation($platform, $parsing, $generation, $mirrors);
   self._$init$asts$($parsing.$ASTModule());
   self._$init$Collection$($platform.$collections().$Collection());
   self._$init$Dictionary$($platform.$collections().$Dictionary());
   self._$init$IdentityDictionary$($platform.$collections().$IdentityDictionary());
   self._$init$OrderedCollection$($platform.$collections().$OrderedCollection());
   self._$init$SortedList$($platform.$collections().$SortedList());
   self._$init$Set$($platform.$collections().$Set());
   self._$init$ReadStream$($platform.$streams().$CharacterReadStream());
   self._$init$WriteStream$($platform.$streams().$CharacterReadWriteStream());
   self._$init$MutableString$($platform.$kernel().$MutableString());
   self._$init$Parser$($parsing.$Parser());
   self._$init$javascriptGeneration$($generation);
   self._$init$JavascriptWriter$(self._$javascriptGeneration().$Writer());
   self._$init$js$(self._$javascriptGeneration().$factory());
   self._$init$names$(self._$NameMangler().$new());
   self._$init$ASTTool$(self._$asts().$ASTTool());
   self._$init$ASTCopier$(self._$asts().$ASTCopier());
   self._$init$AST$(self._$asts().$AST());
   self._$init$AssignmentAST$(self._$asts().$AssignmentAST());
   self._$init$BlockAST$(self._$asts().$BlockAST());
   self._$init$CascadedSendAST$(self._$asts().$CascadedSendAST());
   self._$init$CodeBodyAST$(self._$asts().$CodeBodyAST());
   self._$init$MessageAST$(self._$asts().$MessageAST());
   self._$init$MessagePatternAST$(self._$asts().$MessagePatternAST());
   self._$init$MethodAST$(self._$asts().$MethodAST());
   self._$init$NormalSendAST$(self._$asts().$NormalSendAST());
   self._$init$NumberAST$(self._$asts().$NumberAST());
   self._$init$ReturnStatAST$(self._$asts().$ReturnStatAST());
   self._$init$SendAST$(self._$asts().$SendAST());
   self._$init$SymbolAST$(self._$asts().$SymbolAST());
   self._$init$TupleAST$(self._$asts().$TupleAST());
   self._$init$VarDeclAST$(self._$asts().$VarDeclAST());
   self._$init$VariableAST$(self._$asts().$VariableAST());
   self._$init$parser$(self._$Parser().$new());
   self._$init$cachedCompilations$(self._$Dictionary().$new());
   self._$init$sourcesList$(self._$OrderedCollection().$new());
   return self;
  };
  this.$LocalEntry = function () {
   var self = this;
   return self.$super$Newspeak2V8Compilation$slot._$LocalEntry.call(self);
  };
  this.$Scope = function () {
   var self = this;
   return self.$super$Newspeak2V8Compilation$slot._$Scope.call(self);
  };
  this.$assert$ = function ($block) {
   var self = this;
   self.$super$Newspeak2V8Compilation$slot._$assert$message$.call(self, $block, "assertion failed");
   return self;
  };
  this.$mixinNameOfClassNamed$ = function ($className) {
   var self = this;
   var $simpleNames = nil;
   var $rawNames = nil;
   $rawNames = self._$splitFullyQualifiedName$($className);
   if ($rawNames.$size().$$equal(1)) {
    return $className;
   } else {
    nil;
   };
   $simpleNames = $rawNames.$select$(function ($n) {
    return ($n.$size() === 0) || $n.$first().$isLetter();
   });
   self._$assert$(function () {
    return $simpleNames.$size() >= 2;
   });
   return $simpleNames.$inject$into$("", function ($sn1, $sn2) {
    return $sn1.$$comma(self._$syntheticNameSeparator()).$$comma($sn2);
   }).$asSymbol();
  };
  this.$mixinSlotNameFor$ = function ($nestedName) {
   var self = this;
   var $mixinName = nil;
   $mixinName = self._$mixinNameOfClassNamed$($nestedName);
   return $mixinName;
  };
  this.$split$at$ = function ($aString, $aCharacter) {
   var self = this;
   var $parts = nil;
   var $start = nil;
   $parts = self._$OrderedCollection().$new();
   $start = 1;
   {
    var $$limit = nil;
    var $index = nil;
    nil;
    $index = 1;
    $$limit = $aString.$size();
    for (; $$limit.$$greater$equal($index); ) {
     if ($aString.$at$($index).$$equal($aCharacter)) {
      $parts.$add$($aString.$copyFrom$to$($start, $index - 1));
      $start = $index + 1;
     } else {
      nil;
     };
     $index = (1).$$plus($index);
    };
   };
   $parts.$add$($aString.$copyFrom$to$($start, $aString.$size()));
   return $parts;
  };
  this.$splitFullyQualifiedName$ = function ($fqn) {
   var self = this;
   return self._$split$at$($fqn, self._$syntheticNameSeparator().$first());
  };
  this.$syntheticNameSeparator = function () {
   var self = this;
   return "`";
  };
  this.$CachedCompilation = function () {
   if (nil === this.$Newspeak2V8Compilation$CachedCompilation$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$CachedCompilation;
    this.$Newspeak2V8Compilation$CachedCompilation$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$CachedCompilation$slot;
  };
  this.$Compiler = function () {
   if (nil === this.$Newspeak2V8Compilation$Compiler$slot) {
    var self = this;
    var superclass = self.$super$Newspeak2V8Compilation$slot._$Compiler.call(self);
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$Compiler;
    this.$Newspeak2V8Compilation$Compiler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$Compiler$slot;
  };
  this.$IntermediateClassDeclaration = function () {
   if (nil === this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$IntermediateClassDeclaration;
    this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot;
  };
  this.$IntermediateMethod = function () {
   if (nil === this.$Newspeak2V8Compilation$IntermediateMethod$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$IntermediateMethod;
    this.$Newspeak2V8Compilation$IntermediateMethod$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$IntermediateMethod$slot;
  };
  this.$IntermediateMixin = function () {
   if (nil === this.$Newspeak2V8Compilation$IntermediateMixin$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$IntermediateMixin;
    this.$Newspeak2V8Compilation$IntermediateMixin$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$IntermediateMixin$slot;
  };
  this.$IntermediateSlotDeclaration = function () {
   if (nil === this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$IntermediateSlotDeclaration;
    this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot;
  };
  this.$NameMangler = function () {
   if (nil === this.$Newspeak2V8Compilation$NameMangler$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$NameMangler;
    this.$Newspeak2V8Compilation$NameMangler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$NameMangler$slot;
  };
  this.$ProgramBuilder = function () {
   if (nil === this.$Newspeak2V8Compilation$ProgramBuilder$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation);
    var mixin = $.$Newspeak2V8Compilation$ProgramBuilder;
    this.$Newspeak2V8Compilation$ProgramBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Newspeak2V8Compilation$ProgramBuilder$slot;
  };
  this.$init$asts$ = function (v) {
   this.$asts$slot = v;
   return this;
  };
  this.$asts = function () {
   return this.$asts$slot;
  };
  this.$init$Collection$ = function (v) {
   this.$Collection$slot = v;
   return this;
  };
  this.$Collection = function () {
   return this.$Collection$slot;
  };
  this.$init$Dictionary$ = function (v) {
   this.$Dictionary$slot = v;
   return this;
  };
  this.$Dictionary = function () {
   return this.$Dictionary$slot;
  };
  this.$init$IdentityDictionary$ = function (v) {
   this.$IdentityDictionary$slot = v;
   return this;
  };
  this.$IdentityDictionary = function () {
   return this.$IdentityDictionary$slot;
  };
  this.$init$OrderedCollection$ = function (v) {
   this.$OrderedCollection$slot = v;
   return this;
  };
  this.$OrderedCollection = function () {
   return this.$OrderedCollection$slot;
  };
  this.$init$SortedList$ = function (v) {
   this.$SortedList$slot = v;
   return this;
  };
  this.$SortedList = function () {
   return this.$SortedList$slot;
  };
  this.$init$Set$ = function (v) {
   this.$Set$slot = v;
   return this;
  };
  this.$Set = function () {
   return this.$Set$slot;
  };
  this.$init$ReadStream$ = function (v) {
   this.$ReadStream$slot = v;
   return this;
  };
  this.$ReadStream = function () {
   return this.$ReadStream$slot;
  };
  this.$init$WriteStream$ = function (v) {
   this.$WriteStream$slot = v;
   return this;
  };
  this.$WriteStream = function () {
   return this.$WriteStream$slot;
  };
  this.$init$MutableString$ = function (v) {
   this.$MutableString$slot = v;
   return this;
  };
  this.$MutableString = function () {
   return this.$MutableString$slot;
  };
  this.$init$Parser$ = function (v) {
   this.$Parser$slot = v;
   return this;
  };
  this.$Parser = function () {
   return this.$Parser$slot;
  };
  this.$init$javascriptGeneration$ = function (v) {
   this.$javascriptGeneration$slot = v;
   return this;
  };
  this.$javascriptGeneration = function () {
   return this.$javascriptGeneration$slot;
  };
  this.$init$JavascriptWriter$ = function (v) {
   this.$JavascriptWriter$slot = v;
   return this;
  };
  this.$JavascriptWriter = function () {
   return this.$JavascriptWriter$slot;
  };
  this.$init$js$ = function (v) {
   this.$js$slot = v;
   return this;
  };
  this.$js = function () {
   return this.$js$slot;
  };
  this.$init$names$ = function (v) {
   this.$names$slot = v;
   return this;
  };
  this.$names = function () {
   return this.$names$slot;
  };
  this.$init$ASTTool$ = function (v) {
   this.$ASTTool$slot = v;
   return this;
  };
  this.$ASTTool = function () {
   return this.$ASTTool$slot;
  };
  this.$init$ASTCopier$ = function (v) {
   this.$ASTCopier$slot = v;
   return this;
  };
  this.$ASTCopier = function () {
   return this.$ASTCopier$slot;
  };
  this.$init$AST$ = function (v) {
   this.$AST$slot = v;
   return this;
  };
  this.$AST = function () {
   return this.$AST$slot;
  };
  this.$init$AssignmentAST$ = function (v) {
   this.$AssignmentAST$slot = v;
   return this;
  };
  this.$AssignmentAST = function () {
   return this.$AssignmentAST$slot;
  };
  this.$init$BlockAST$ = function (v) {
   this.$BlockAST$slot = v;
   return this;
  };
  this.$BlockAST = function () {
   return this.$BlockAST$slot;
  };
  this.$init$CascadedSendAST$ = function (v) {
   this.$CascadedSendAST$slot = v;
   return this;
  };
  this.$CascadedSendAST = function () {
   return this.$CascadedSendAST$slot;
  };
  this.$init$CodeBodyAST$ = function (v) {
   this.$CodeBodyAST$slot = v;
   return this;
  };
  this.$CodeBodyAST = function () {
   return this.$CodeBodyAST$slot;
  };
  this.$init$MessageAST$ = function (v) {
   this.$MessageAST$slot = v;
   return this;
  };
  this.$MessageAST = function () {
   return this.$MessageAST$slot;
  };
  this.$init$MessagePatternAST$ = function (v) {
   this.$MessagePatternAST$slot = v;
   return this;
  };
  this.$MessagePatternAST = function () {
   return this.$MessagePatternAST$slot;
  };
  this.$init$MethodAST$ = function (v) {
   this.$MethodAST$slot = v;
   return this;
  };
  this.$MethodAST = function () {
   return this.$MethodAST$slot;
  };
  this.$init$NormalSendAST$ = function (v) {
   this.$NormalSendAST$slot = v;
   return this;
  };
  this.$NormalSendAST = function () {
   return this.$NormalSendAST$slot;
  };
  this.$init$NumberAST$ = function (v) {
   this.$NumberAST$slot = v;
   return this;
  };
  this.$NumberAST = function () {
   return this.$NumberAST$slot;
  };
  this.$init$ReturnStatAST$ = function (v) {
   this.$ReturnStatAST$slot = v;
   return this;
  };
  this.$ReturnStatAST = function () {
   return this.$ReturnStatAST$slot;
  };
  this.$init$SendAST$ = function (v) {
   this.$SendAST$slot = v;
   return this;
  };
  this.$SendAST = function () {
   return this.$SendAST$slot;
  };
  this.$init$SymbolAST$ = function (v) {
   this.$SymbolAST$slot = v;
   return this;
  };
  this.$SymbolAST = function () {
   return this.$SymbolAST$slot;
  };
  this.$init$TupleAST$ = function (v) {
   this.$TupleAST$slot = v;
   return this;
  };
  this.$TupleAST = function () {
   return this.$TupleAST$slot;
  };
  this.$init$VarDeclAST$ = function (v) {
   this.$VarDeclAST$slot = v;
   return this;
  };
  this.$VarDeclAST = function () {
   return this.$VarDeclAST$slot;
  };
  this.$init$VariableAST$ = function (v) {
   this.$VariableAST$slot = v;
   return this;
  };
  this.$VariableAST = function () {
   return this.$VariableAST$slot;
  };
  this.$init$parser$ = function (v) {
   this.$parser$slot = v;
   return this;
  };
  this.$parser = function () {
   return this.$parser$slot;
  };
  this.$init$cachedCompilations$ = function (v) {
   this.$cachedCompilations$slot = v;
   return this;
  };
  this.$cachedCompilations = function () {
   return this.$cachedCompilations$slot;
  };
  this.$init$sourcesList$ = function (v) {
   this.$sourcesList$slot = v;
   return this;
  };
  this.$sourcesList = function () {
   return this.$sourcesList$slot;
  };
  this.$sourcesList$ = function (v) {
   this.$sourcesList$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$CachedCompilation$ = function (v) {
   this.$Newspeak2V8Compilation$CachedCompilation$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$CachedCompilation = function () {
   return this.$Newspeak2V8Compilation$CachedCompilation$slot;
  };
  this.$Newspeak2V8Compilation$CachedCompilation$ = function (v) {
   this.$Newspeak2V8Compilation$CachedCompilation$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$Compiler$ = function (v) {
   this.$Newspeak2V8Compilation$Compiler$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$Compiler = function () {
   return this.$Newspeak2V8Compilation$Compiler$slot;
  };
  this.$Newspeak2V8Compilation$Compiler$ = function (v) {
   this.$Newspeak2V8Compilation$Compiler$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$IntermediateClassDeclaration$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$IntermediateClassDeclaration = function () {
   return this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot;
  };
  this.$Newspeak2V8Compilation$IntermediateClassDeclaration$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$IntermediateMethod$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateMethod$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$IntermediateMethod = function () {
   return this.$Newspeak2V8Compilation$IntermediateMethod$slot;
  };
  this.$Newspeak2V8Compilation$IntermediateMethod$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateMethod$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$IntermediateMixin$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateMixin$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$IntermediateMixin = function () {
   return this.$Newspeak2V8Compilation$IntermediateMixin$slot;
  };
  this.$Newspeak2V8Compilation$IntermediateMixin$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateMixin$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$IntermediateSlotDeclaration$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$IntermediateSlotDeclaration = function () {
   return this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot;
  };
  this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$ = function (v) {
   this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$NameMangler$ = function (v) {
   this.$Newspeak2V8Compilation$NameMangler$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$NameMangler = function () {
   return this.$Newspeak2V8Compilation$NameMangler$slot;
  };
  this.$Newspeak2V8Compilation$NameMangler$ = function (v) {
   this.$Newspeak2V8Compilation$NameMangler$slot = v;
   return this;
  };
  this.$init$Newspeak2V8Compilation$ProgramBuilder$ = function (v) {
   this.$Newspeak2V8Compilation$ProgramBuilder$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$ProgramBuilder = function () {
   return this.$Newspeak2V8Compilation$ProgramBuilder$slot;
  };
  this.$Newspeak2V8Compilation$ProgramBuilder$ = function (v) {
   this.$Newspeak2V8Compilation$ProgramBuilder$slot = v;
   return this;
  };
  this.$Newspeak2V8Compilation$CachedCompilation = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`CachedCompilation";
   this.name = "Newspeak2V8Compilation`CachedCompilation";
   this.header = 2357;
   this.slots = [
    new SM("source", true, false),
    new SM("enableIntrinsics", true, false),
    new SM("ir", true, false),
    new SM("sentSelectors", true, false)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`CachedCompilation", true, 2358),
    new MM("instance`initializer", true, 2359),
    new MM("init`source:", true, 0),
    new MM("source", true, 0),
    new MM("source:", true, 0),
    new MM("init`enableIntrinsics:", true, 0),
    new MM("enableIntrinsics", true, 0),
    new MM("enableIntrinsics:", true, 0),
    new MM("init`ir:", true, 0),
    new MM("ir", true, 0),
    new MM("ir:", true, 0),
    new MM("init`sentSelectors:", true, 0),
    new MM("sentSelectors", true, 0),
    new MM("sentSelectors:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$CachedCompilation = function () {
    var self = this;
    self.$super$Newspeak2V8Compilation$CachedCompilation$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$CachedCompilation();
    return self;
   };
   this.$init$source$ = function (v) {
    this.$source$slot = v;
    return this;
   };
   this.$source = function () {
    return this.$source$slot;
   };
   this.$source$ = function (v) {
    this.$source$slot = v;
    return this;
   };
   this.$init$enableIntrinsics$ = function (v) {
    this.$enableIntrinsics$slot = v;
    return this;
   };
   this.$enableIntrinsics = function () {
    return this.$enableIntrinsics$slot;
   };
   this.$enableIntrinsics$ = function (v) {
    this.$enableIntrinsics$slot = v;
    return this;
   };
   this.$init$ir$ = function (v) {
    this.$ir$slot = v;
    return this;
   };
   this.$ir = function () {
    return this.$ir$slot;
   };
   this.$ir$ = function (v) {
    this.$ir$slot = v;
    return this;
   };
   this.$init$sentSelectors$ = function (v) {
    this.$sentSelectors$slot = v;
    return this;
   };
   this.$sentSelectors = function () {
    return this.$sentSelectors$slot;
   };
   this.$sentSelectors$ = function (v) {
    this.$sentSelectors$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`CachedCompilation";
     this._$superInit$Newspeak2V8Compilation$CachedCompilation = $.$superInit$Newspeak2V8Compilation$CachedCompilation;
     this.$superInit$Newspeak2V8Compilation$CachedCompilation = dnuCatcher("$superInit$Newspeak2V8Compilation$CachedCompilation");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$source$ = this._$init$source$ = $.$init$source$;
     this.$source = this._$source = $.$source;
     this.$source$ = this._$source$ = $.$source$;
     this.$init$enableIntrinsics$ = this._$init$enableIntrinsics$ = $.$init$enableIntrinsics$;
     this.$enableIntrinsics = this._$enableIntrinsics = $.$enableIntrinsics;
     this.$enableIntrinsics$ = this._$enableIntrinsics$ = $.$enableIntrinsics$;
     this.$init$ir$ = this._$init$ir$ = $.$init$ir$;
     this.$ir = this._$ir = $.$ir;
     this.$ir$ = this._$ir$ = $.$ir$;
     this.$init$sentSelectors$ = this._$init$sentSelectors$ = $.$init$sentSelectors$;
     this.$sentSelectors = this._$sentSelectors = $.$sentSelectors;
     this.$sentSelectors$ = this._$sentSelectors$ = $.$sentSelectors$;
     this.$enclosingObjects$Newspeak2V8Compilation$CachedCompilation = enclosingObjects;
     this.$super$Newspeak2V8Compilation$CachedCompilation$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`CachedCompilation"] = function () {
      superBasicNew.call(this);
      this.$source$slot = nil;
      this.$enableIntrinsics$slot = nil;
      this.$ir$slot = nil;
      this.$sentSelectors$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`CachedCompilation"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`CachedCompilation";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`CachedCompilation";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Newspeak2V8Compilation$CachedCompilation = enclosingObjects;
      this.$super$Newspeak2V8Compilation$CachedCompilation = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$Compiler = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler";
   this.name = "Newspeak2V8Compilation`Compiler";
   this.header = 2360;
   this.slots = [
    new SM("scopeStack", true, false),
    new SM("input", true, false),
    new SM("sentSelectors", true, false),
    new SM("rewriter", false, false),
    new SM("translator", false, false),
    new SM("currentDepth", true, false),
    new SM("currentMixinUID", true, false),
    new SM("jsWriter", false, false),
    new SM("supportDoesNotUnderstand", true, false),
    new SM("inlineOperators", true, false),
    new SM("enableIntrinsics", true, false),
    new SM("Newspeak2V8Compilation`Compiler`PropertyCallAST", true, true),
    new SM("Newspeak2V8Compilation`Compiler`Rewriter", true, true),
    new SM("Newspeak2V8Compilation`Compiler`ScopeBuilder", true, true),
    new SM("Newspeak2V8Compilation`Compiler`Translator", true, true)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`Compiler", true, 2361),
    new MM("instance`initializer", true, 2362),
    new MM("accessorForNestedClassNamed:in:superCall:", false, 2363),
    new MM("accessorForSuperclass:inScope:", false, 2364),
    new MM("checkForDuplicateNames:", false, 2365),
    new MM("classNode:", false, 2366),
    new MM("compileClassSource:within:", false, 2367),
    new MM("compileExpressionSource:inMixin:", false, 2368),
    new MM("compileMethodSource:within:", false, 2369),
    new MM("compileNestedClasses:within:", false, 2370),
    new MM("compileNestedClassesOf:within:", false, 2371),
    new MM("computeMethod:inScope:", false, 2372),
    new MM("computeMixinFrom:", false, 2373),
    new MM("createNestedClassAccessorFrom:within:", false, 2374),
    new MM("currentScope", false, 2375),
    new MM("dnuHandlers", false, 2376),
    new MM("generateSlotAccessorsFor:", false, 2377),
    new MM("generateSlotGetterFor:in:", false, 2378),
    new MM("generateSlotInitializerFor:in:", false, 2379),
    new MM("generateSlotSetterFor:in:", false, 2380),
    new MM("hereNode", false, 2381),
    new MM("hereSendFrom:", false, 2382),
    new MM("initializerFor:", false, 2383),
    new MM("initializerSelectorForSlot:", false, 2384),
    new MM("language", false, 2385),
    new MM("methodNode:", false, 2386),
    new MM("nestScope:", false, 2387),
    new MM("nestedMixinWrapperFor:in:", false, 2388),
    new MM("popScope", false, 2389),
    new MM("processClassSideOf:ofMixin:", false, 2390),
    new MM("processFactoryFor:in:", false, 2391),
    new MM("processInitializerFor:in:", false, 2392),
    new MM("processInstanceSideOf:ofMixin:", false, 2393),
    new MM("processMethod:inScope:in:", false, 2394),
    new MM("processSide:ofMixin:", false, 2395),
    new MM("pushScope:", false, 2396),
    new MM("selfNode", false, 2397),
    new MM("setInput:", false, 2398),
    new MM("setScopeFor:in:", false, 2399),
    new MM("setterSelectorFor:", false, 2400),
    new MM("sourceForNode:", false, 2401),
    new MM("superConstructorCallFor:", false, 2402),
    new MM("superConstructorMethodFor:", false, 2403),
    new MM("superConstructorNameFor:", false, 2404),
    new MM("scopeMap", false, 2405),
    new MM("PropertyCallAST", true, 0),
    new MM("Rewriter", true, 0),
    new MM("ScopeBuilder", true, 0),
    new MM("Translator", true, 0),
    new MM("init`scopeStack:", true, 0),
    new MM("scopeStack", true, 0),
    new MM("scopeStack:", true, 0),
    new MM("init`input:", true, 0),
    new MM("input", true, 0),
    new MM("input:", true, 0),
    new MM("init`sentSelectors:", true, 0),
    new MM("sentSelectors", true, 0),
    new MM("sentSelectors:", true, 0),
    new MM("init`rewriter:", true, 0),
    new MM("rewriter", true, 0),
    new MM("init`translator:", true, 0),
    new MM("translator", true, 0),
    new MM("init`currentDepth:", true, 0),
    new MM("currentDepth", true, 0),
    new MM("currentDepth:", true, 0),
    new MM("init`currentMixinUID:", true, 0),
    new MM("currentMixinUID", true, 0),
    new MM("currentMixinUID:", true, 0),
    new MM("init`jsWriter:", true, 0),
    new MM("jsWriter", true, 0),
    new MM("init`supportDoesNotUnderstand:", true, 0),
    new MM("supportDoesNotUnderstand", true, 0),
    new MM("supportDoesNotUnderstand:", true, 0),
    new MM("init`inlineOperators:", true, 0),
    new MM("inlineOperators", true, 0),
    new MM("inlineOperators:", true, 0),
    new MM("init`enableIntrinsics:", true, 0),
    new MM("enableIntrinsics", true, 0),
    new MM("enableIntrinsics:", true, 0),
    new MM("init`Newspeak2V8Compilation`Compiler`PropertyCallAST:", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`PropertyCallAST", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`PropertyCallAST:", true, 0),
    new MM("init`Newspeak2V8Compilation`Compiler`Rewriter:", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`Rewriter", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`Rewriter:", true, 0),
    new MM("init`Newspeak2V8Compilation`Compiler`ScopeBuilder:", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`ScopeBuilder", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`ScopeBuilder:", true, 0),
    new MM("init`Newspeak2V8Compilation`Compiler`Translator:", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`Translator", true, 0),
    new MM("Newspeak2V8Compilation`Compiler`Translator:", true, 0)
   ];
   this.nestedClasses = [
    "Newspeak2V8Compilation`Compiler`PropertyCallAST",
    "Newspeak2V8Compilation`Compiler`Rewriter",
    "Newspeak2V8Compilation`Compiler`ScopeBuilder",
    "Newspeak2V8Compilation`Compiler`Translator"
   ];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$Compiler = function () {
    var self = this;
    self.$super$Newspeak2V8Compilation$Compiler$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$Compiler();
    self._$init$scopeStack$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new());
    self._$init$sentSelectors$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Set().$new());
    self._$init$rewriter$(self._$Rewriter().$new());
    self._$init$translator$(self._$Translator().$new());
    self._$init$jsWriter$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$JavascriptWriter().$new());
    self._$init$supportDoesNotUnderstand$(true);
    self._$init$inlineOperators$(true);
    self._$init$enableIntrinsics$(true);
    return self;
   };
   this.$accessorForNestedClassNamed$in$superCall$ = function ($simpleName, $mixinName, $superAccessor) {
    var self = this;
    var $nestedName = nil;
    var $nestedSlotName = nil;
    var $nestedSlotNode = nil;
    var $enclosingObjectsName = nil;
    $nestedName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSynthetic$($mixinName.$$comma("`").$$comma($simpleName));
    $nestedSlotName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSlot$($mixinName.$$comma("`").$$comma($simpleName));
    $nestedSlotNode = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($nestedSlotName));
    $enclosingObjectsName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSynthetic$("enclosingObjects`".$$comma($mixinName));
    return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$if$then$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$operator$with$and$("===", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("nil"), $nestedSlotNode), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("self", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this")),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("superclass", $superAccessor),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("enclosingObjects", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$array$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this")]), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("concat")), [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($enclosingObjectsName))])),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("mixin", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("$"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($nestedName))),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$($nestedSlotNode, self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("vmmirror"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("$applyMixin$toSuperclass$withEnclosingObjects$")), [
       self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("mixin"),
       self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("superclass"),
       self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("enclosingObjects")
      ]))
     ])),
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$($nestedSlotNode)
    ]));
   };
   this.$accessorForSuperclass$inScope$ = function ($superclassCall, $s) {
    var self = this;
    var $send = nil;
    var $scopeBuilder = nil;
    self._$rewriter().$pushScope$($s);
    $send = $superclassCall.$apply$(self._$rewriter());
    self._$rewriter().$popScope();
    self._$translator().$beginNewTranslationCycle();
    return $send.$apply$(self._$translator());
   };
   this.$checkForDuplicateNames$ = function ($aNode) {
    var self = this;
    var $namesWithDuplicates = nil;
    var $names = nil;
    var $duplicateNames = nil;
    $namesWithDuplicates = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new();
    $aNode.$instanceSide().$categories().$do$(function ($cat) {
     return $cat.$methods().$do$(function ($each) {
      return $namesWithDuplicates.$add$($each.$selector());
     });
    });
    $aNode.$header().$slots().$do$(function ($each) {
     $namesWithDuplicates.$add$($each.$name());
     return $each.$isMutable().$ifTrue$(function () {
      return $namesWithDuplicates.$add$($each.$name().$$comma(":"));
     });
    });
    $namesWithDuplicates.$addAll$($aNode.$instanceSide().$nestedClasses().$collect$(function ($each) {
     return $each.$name();
    }));
    $names = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Set().$new();
    $duplicateNames = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Set().$new();
    $namesWithDuplicates.$do$(function ($each) {
     var $present = nil;
     $present = true;
     $names.$include$ifNew$($each, function () {
      return $present = false;
     });
     return $present.$ifTrue$(function () {
      return $duplicateNames.$add$($each);
     });
    });
    if (!$duplicateNames.$isEmpty()) {
     var $message = nil;
     $message = self._$String().$streamContents$(function ($s) {
      (function (cascadeReceiver) {
       cascadeReceiver.$nextPutAll$("Class ");
       cascadeReceiver.$nextPutAll$($aNode.$name());
       return cascadeReceiver.$nextPutAll$("\" has multiple definitions for ");
      })($s);
      $duplicateNames.$do$separatedBy$(function ($each) {
       return $s.$nextPutAll$($each.$asString());
      }, function () {
       return $s.$nextPutAll$(",");
      });
      return $s.$nextPutAll$(".");
     });
     self._$assert$message$(false, $message);
    } else {
     nil;
    };
    return self;
   };
   this.$classNode$ = function ($aNode) {
    var self = this;
    var $ir = nil;
    var $priorMixinUID = nil;
    if ($aNode.$name().$$equal("Newspeak2V8Compilation")) {
     "BOGUS";
     self._$enableIntrinsics$(false);
    } else {
     nil;
    };
    self._$checkForDuplicateNames$($aNode);
    $ir = self._$computeMixinFrom$($aNode.$header());
    $ir.$accessModifier$($aNode.$accessModifier());
    $priorMixinUID = self._$currentMixinUID();
    self._$currentMixinUID$($ir.$qualifiedName());
    self._$currentDepth$(self._$currentDepth() + 1);
    self._$processInstanceSideOf$ofMixin$($aNode, $ir.$instanceSide());
    self._$generateSlotAccessorsFor$($ir.$instanceSide());
    self._$processClassSideOf$ofMixin$($aNode, $ir.$classSide());
    self._$currentDepth$(self._$currentDepth() - 1);
    self._$currentMixinUID$($priorMixinUID);
    return $ir;
   };
   this.$compileClassSource$within$ = function ($source, $enclosing) {
    var self = this;
    var $tree = nil;
    var $mixinRep = nil;
    $tree = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$parser().$compilationUnit().$parseString$($source);
    self._$setInput$($source);
    self._$setScopeFor$in$($tree, $enclosing);
    $mixinRep = self._$classNode$($tree);
    self._$scopeMap$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Dictionary().$new());
    return $enclosing.$isNil().$ifTrue$ifFalse$(function () {
     return $mixinRep;
    }, function () {
     return [
      $enclosing,
      $mixinRep
     ];
    });
   };
   this.$compileExpressionSource$inMixin$ = function ($expression, $enclosing) {
    var self = this;
    var $body = nil;
    var $method = nil;
    var $result = nil;
    $body = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$parser().$doItExpression().$parseString$($expression);
    self._$input$($expression);
    if (!$body.$statements().$isEmpty()) {
     if (!$body.$statements().$last().$isReturnStatNode()) {
      var $last = nil;
      $last = $body.$statements().$removeLast();
      $body.$statements().$add$((function (cascadeReceiver) {
       cascadeReceiver.$expression$($last);
       cascadeReceiver.$start$($last.$start());
       return cascadeReceiver.$end$($last.$end());
      })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ReturnStatAST().$new()));
     } else {
      nil;
     };
    } else {
     nil;
    };
    $method = (function (cascadeReceiver) {
     cascadeReceiver.$pattern$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessagePatternAST().$new().$selector$parameters$("DoIt", []));
     cascadeReceiver.$body$($body);
     return cascadeReceiver.$accessModifier$("public");
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodAST().$new());
    self._$setScopeFor$in$($method, $enclosing);
    self._$currentMixinUID$($enclosing.$declaration().$name());
    $result = self._$methodNode$($method);
    self._$scopeMap$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Dictionary().$new());
    return $result;
   };
   this.$compileMethodSource$within$ = function ($source, $enclosing) {
    var self = this;
    var $tree = nil;
    var $jsTree = nil;
    $tree = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$parser().$methodDecl().$parseString$($source);
    self._$setInput$($source);
    self._$setScopeFor$in$($tree, $enclosing);
    self._$currentMixinUID$($enclosing.$declaration().$name());
    $jsTree = self._$methodNode$($tree);
    self._$scopeMap$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Dictionary().$new());
    return $jsTree;
   };
   this.$compileNestedClasses$within$ = function ($nestedClasses, $mixinIR) {
    var self = this;
    $nestedClasses.$do$(function ($nc) {
     var $nSlotName = nil;
     var $nSlot = nil;
     $nSlotName = $mixinIR.$declaration().$qualifiedName().$$comma("`").$$comma($nc.$name());
     $nSlot = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateSlotDeclaration().$named$mutable$accessModifier$($nSlotName, true, "public");
     $nSlot.$isSynthetic$(true);
     $mixinIR.$slots().$add$($nSlot);
     $mixinIR.$nestedClasses().$add$(self._$classNode$(self._$nestedMixinWrapperFor$in$($nc, $mixinIR)));
     return self._$createNestedClassAccessorFrom$within$($nc, $mixinIR);
    });
    return self;
   };
   this.$compileNestedClassesOf$within$ = function ($aNode, $mixinMirror) {
    var self = this;
    return self._$compileNestedClasses$within$($aNode.$nestedClasses(), $mixinMirror);
   };
   this.$computeMethod$inScope$ = function ($aNode, $s) {
    var self = this;
    var $scopeBuilder = nil;
    $scopeBuilder = self._$ScopeBuilder().$nestedIn$atLevel$($s, self._$currentDepth());
    $aNode.$apply$($scopeBuilder);
    return self._$methodNode$($aNode);
   };
   this.$computeMixinFrom$ = function ($aNode) {
    var self = this;
    var $ir = nil;
    $ir = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateClassDeclaration().$new();
    $ir.$qualifiedName$($aNode.$name());
    $aNode.$slots().$do$(function ($s) {
     return $ir.$instanceSide().$slots().$add$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateSlotDeclaration().$named$mutable$accessModifier$($s.$name(), $s.$isMutable(), $s.$accessModifier()));
    });
    $ir.$headerSource$(self._$input().$copyFrom$to$($aNode.$start(), $aNode.$end()));
    $ir.$depth$(self._$currentDepth());
    $ir.$factoryName$($aNode.$constructor().$selector());
    return $ir;
   };
   this.$createNestedClassAccessorFrom$within$ = function ($classDecl, $mixinMirror) {
    var self = this;
    var $n = nil;
    var $accessorString = nil;
    var $methodAST = nil;
    var $hdr = nil;
    var $accessor = nil;
    $hdr = $classDecl.$header();
    $n = $hdr.$name();
    $methodAST = self._$accessorForNestedClassNamed$in$superCall$($n, $mixinMirror.$qualifiedName(), self._$accessorForSuperclass$inScope$($hdr.$superclassCall(), self._$scopeMap().$at$($classDecl.$instanceSide())));
    $accessor = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateMethod().$named$accessModifier$function$source$($classDecl.$name(), $classDecl.$accessModifier(), $methodAST, nil);
    $accessor.$isSynthetic$(true);
    $mixinMirror.$methods().$add$($accessor);
    return self;
   };
   this.$currentScope = function () {
    var self = this;
    return self._$scopeStack().$last();
   };
   this.$dnuHandlers = function () {
    var self = this;
    var $sortedSelectors = nil;
    var $mangledSelectors = nil;
    var $catcher = nil;
    $sortedSelectors = self._$sentSelectors().$asArray().$sort$(function ($a, $b) {
     return $a.$$less($b);
    });
    $mangledSelectors = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$array$($sortedSelectors.$collect$(function ($sel) {
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$manglePublic$($sel));
    }));
    $catcher = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("dnuCatcher"), [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("sel")]);
    return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$function$of$body$("installDnuHandlersOn", [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("p")], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$($mangledSelectors, self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("forEach")), [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$(["sel"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("p"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$operator$with$and$("+", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("_"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("sel"))), $catcher),
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("p"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("sel")), $catcher)
    ]))])]));
   };
   this.$generateSlotAccessorsFor$ = function ($mixinIR) {
    var self = this;
    $mixinIR.$slots().$do$(function ($slotIR) {
     self._$generateSlotInitializerFor$in$($slotIR, $mixinIR);
     self._$generateSlotGetterFor$in$($slotIR, $mixinIR);
     return self._$generateSlotSetterFor$in$($slotIR, $mixinIR);
    });
    return self;
   };
   this.$generateSlotGetterFor$in$ = function ($slotIR, $mixinIR) {
    var self = this;
    var $slotName = nil;
    var $fieldName = nil;
    var $getter = nil;
    var $getterJS = nil;
    $slotName = $slotIR.$name();
    $fieldName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSlot$($slotName);
    if ($slotIR.$accessModifier().$$equal("private")) {
     $getterJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$(["self"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)))]));
    } else {
     $getterJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)))]));
    };
    $getter = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateMethod().$named$accessModifier$function$source$($slotName, $slotIR.$accessModifier(), $getterJS, nil);
    $getter.$isSynthetic$(true);
    $mixinIR.$methods().$add$($getter);
    return self;
   };
   this.$generateSlotInitializerFor$in$ = function ($slotIR, $mixinIR) {
    var self = this;
    var $slotName = nil;
    var $fieldName = nil;
    var $initializer = nil;
    var $initializerJS = nil;
    $slotName = $slotIR.$name();
    $fieldName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSlot$($slotName);
    if ($slotIR.$accessModifier().$$equal("private")) {
     $initializerJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$([
      "self",
      "v"
     ], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("v")),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("self"))
     ]));
    } else {
     $initializerJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$(["v"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("v")),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"))
     ]));
    };
    $initializer = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateMethod().$named$accessModifier$function$source$(self._$initializerSelectorForSlot$($slotIR), $slotIR.$accessModifier(), $initializerJS, nil);
    $initializer.$isSynthetic$(true);
    $mixinIR.$methods().$add$($initializer);
    return self;
   };
   this.$generateSlotSetterFor$in$ = function ($slotIR, $mixinIR) {
    var self = this;
    var $slotName = nil;
    var $fieldName = nil;
    var $setter = nil;
    var $setterJS = nil;
    if (!$slotIR.$isMutable()) {
     return self;
    } else {
     nil;
    };
    $slotName = $slotIR.$name();
    $fieldName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSlot$($slotName);
    if ($slotIR.$accessModifier().$$equal("private")) {
     $setterJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$([
      "self",
      "v"
     ], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("v")),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("self"))
     ]));
    } else {
     $setterJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$(["v"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("v")),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"))
     ]));
    };
    $setter = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateMethod().$named$accessModifier$function$source$(self._$setterSelectorFor$($slotIR), $slotIR.$accessModifier(), $setterJS, nil);
    $setter.$isSynthetic$(true);
    $mixinIR.$methods().$add$($setter);
    return self;
   };
   this.$hereNode = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$("@here");
     cascadeReceiver.$start$(0);
     return cascadeReceiver.$end$(0);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
   };
   this.$hereSendFrom$ = function ($arg) {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$to$send$(self._$hereNode(), (function (cascadeReceiver) {
      cascadeReceiver.$send$with$($arg.$name(), []);
      cascadeReceiver.$start$($arg.$start());
      return cascadeReceiver.$end$($arg.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST().$new()));
     cascadeReceiver.$start$($arg.$start());
     return cascadeReceiver.$end$($arg.$end());
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new());
   };
   this.$initializerFor$ = function ($aNode) {
    var self = this;
    var $stmts = nil;
    var $start = nil;
    var $end = nil;
    var $initHdr = nil;
    var $body = nil;
    var $copier = nil;
    var $params = nil;
    $start = $aNode.$superConstructorCall().$start();
    $end = $aNode.$superConstructorCall().$end();
    $copier = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ASTCopier().$new();
    $params = $aNode.$constructor().$parameters().$collect$(function ($formal) {
     return $formal.$apply$($copier);
    });
    $initHdr = (function (cascadeReceiver) {
     cascadeReceiver.$selector$parameters$("instance`initializer", $params);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessagePatternAST().$new());
    $stmts = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new();
    $stmts.$add$(self._$superConstructorCallFor$($aNode));
    $aNode.$slots().$reject$(function ($ea) {
     return $ea.$initializer().$isNil();
    }).$do$(function ($slot) {
     var $aMsg = nil;
     $aMsg = (function (cascadeReceiver) {
      cascadeReceiver.$send$with$(self._$initializerSelectorForSlot$($slot), [$slot.$initializer().$apply$($copier)]);
      cascadeReceiver.$start$($slot.$start());
      return cascadeReceiver.$end$($slot.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST().$new());
     return $stmts.$add$((function (cascadeReceiver) {
      cascadeReceiver.$message$($aMsg);
      cascadeReceiver.$receiver$(self._$hereNode());
      cascadeReceiver.$start$($aMsg.$start());
      return cascadeReceiver.$end$($aMsg.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new()));
    });
    $stmts.$addAll$($aNode.$initExprs().$collect$(function ($ie) {
     return $ie.$apply$($copier);
    }));
    $body = (function (cascadeReceiver) {
     cascadeReceiver.$temporaries$statements$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new(), $stmts);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$CodeBodyAST().$new());
    return (function (cascadeReceiver) {
     cascadeReceiver.$pattern$body$accessModifier$($initHdr, $body, "public");
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodAST().$new());
   };
   this.$initializerSelectorForSlot$ = function ($slot) {
    var self = this;
    return "init`".$$comma($slot.$name()).$$comma(":").$asSymbol();
   };
   this.$language = function () {
    var self = this;
    return "NewspeakLanguage2";
   };
   this.$methodNode$ = function ($aNode) {
    var self = this;
    var $tree = nil;
    var $jsTree = nil;
    $tree = $aNode.$apply$(self._$rewriter());
    self._$translator().$beginNewTranslationCycle();
    $jsTree = $tree.$apply$(self._$translator());
    return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateMethod().$named$accessModifier$function$source$(self._$translator().$currentSelector(), $aNode.$accessModifier(), $jsTree, (function () {
     return self._$sourceForNode$($aNode);
    }).$on$do$(self._$Error(), function () {
     return nil;
    }));
   };
   this.$nestScope$ = function ($s) {
    var self = this;
    $s.$setSuperScope$(self._$currentScope());
    self._$pushScope$($s);
    return self;
   };
   this.$nestedMixinWrapperFor$in$ = function ($nested, $outerClass) {
    var self = this;
    var $wrapper = nil;
    $wrapper = $nested.$clone();
    $wrapper.$header$($nested.$header().$clone());
    $wrapper.$header().$name$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$fullyQualifySimpleName$with$($nested.$name(), $outerClass.$qualifiedName()));
    return $wrapper;
   };
   this.$popScope = function () {
    var self = this;
    return self._$scopeStack().$removeLast();
   };
   this.$processClassSideOf$ofMixin$ = function ($aNode, $mixinMirror) {
    var self = this;
    self._$processFactoryFor$in$($aNode, $mixinMirror);
    self._$processSide$ofMixin$($aNode.$classSide(), $mixinMirror);
    return self;
   };
   this.$processFactoryFor$in$ = function ($aNode, $mixinIR) {
    var self = this;
    var $accessor = nil;
    var $argNames = nil;
    var $ast = nil;
    $argNames = $aNode.$header().$constructor().$parameters().$collect$(function ($each) {
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleLocal$($each.$name());
    }).$asArray();
    $ast = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$($argNames, self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("(new this.nonMeta.basicNew()).$instance$initializer"), $argNames.$collect$(function ($each) {
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$($each);
    })))]));
    $accessor = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$IntermediateMethod().$named$accessModifier$function$source$($aNode.$header().$constructor().$selector(), "public", $ast, nil);
    $accessor.$isSynthetic$(true);
    $accessor.$isFactory$(true);
    $mixinIR.$methods().$add$($accessor);
    return self;
   };
   this.$processInitializerFor$in$ = function ($aNode, $mixinIR) {
    var self = this;
    self._$processMethod$inScope$in$(self._$superConstructorMethodFor$($aNode.$header()), self._$scopeMap().$at$($aNode.$instanceSide()), $mixinIR);
    self._$processMethod$inScope$in$(self._$initializerFor$($aNode.$header()), self._$scopeMap().$at$($aNode.$instanceSide()), $mixinIR);
    return self;
   };
   this.$processInstanceSideOf$ofMixin$ = function ($aNode, $mixinIR) {
    var self = this;
    self._$processInitializerFor$in$($aNode, $mixinIR);
    self._$processSide$ofMixin$($aNode.$instanceSide(), $mixinIR);
    self._$compileNestedClassesOf$within$($aNode.$instanceSide(), $mixinIR);
    return self;
   };
   this.$processMethod$inScope$in$ = function ($aNode, $s, $mixinIR) {
    var self = this;
    var $method = nil;
    $method = self._$computeMethod$inScope$($aNode, $s);
    $method.$isSynthetic$(true);
    $mixinIR.$methods().$add$($method);
    return self;
   };
   this.$processSide$ofMixin$ = function ($side, $mixinIR) {
    var self = this;
    $side.$categories().$do$(function ($cat) {
     return $cat.$methods().$do$(function ($m) {
      return $mixinIR.$methods().$add$(self._$methodNode$($m));
     });
    });
    return self;
   };
   this.$pushScope$ = function ($scope) {
    var self = this;
    self._$scopeStack().$addLast$($scope);
    return self;
   };
   this.$selfNode = function () {
    var self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$name$("self");
     cascadeReceiver.$start$(0);
     return cascadeReceiver.$end$(0);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
   };
   this.$setInput$ = function ($source) {
    var self = this;
    self._$input$($source);
    return self;
   };
   this.$setScopeFor$in$ = function ($node, $enclosing) {
    var self = this;
    var $scopeBuilder = nil;
    self._$pushScope$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Scope().$new());
    if (!$enclosing.$isNil()) {
     self._$nestScope$(self._$ScopeBuilder().$new().$buildScopeFor$($enclosing));
    } else {
     nil;
    };
    self._$currentDepth$(self._$currentScope().$depth());
    $scopeBuilder = self._$ScopeBuilder().$nestedIn$atLevel$(self._$currentScope(), self._$currentDepth());
    $node.$apply$($scopeBuilder);
    return self;
   };
   this.$setterSelectorFor$ = function ($slot) {
    var self = this;
    if (!$slot.$isMutable()) {
     self._$warnObsolete();
    } else {
     nil;
    };
    return $slot.$isMutable().$ifTrue$ifFalse$(function () {
     return "";
    }, function () {
     return "setOnce`";
    }).$$comma($slot.$name()).$$comma(":").$asSymbol();
   };
   this.$sourceForNode$ = function ($node) {
    var self = this;
    var $savedPos = nil;
    var $pos = nil;
    var $len = nil;
    var $s = nil;
    return self._$input().$copyFrom$to$($node.$start(), $node.$end());
   };
   this.$superConstructorCallFor$ = function ($aNode) {
    var self = this;
    var $var = nil;
    var $send = nil;
    var $start = nil;
    var $end = nil;
    var $superMsg = nil;
    var $args = nil;
    $start = $aNode.$superConstructorCall().$start();
    $end = $aNode.$superConstructorCall().$end();
    $var = (function (cascadeReceiver) {
     cascadeReceiver.$name$("self");
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
    $args = $aNode.$constructor().$parameters().$collect$(function ($p) {
     return self._$hereSendFrom$($p);
    });
    $superMsg = (function (cascadeReceiver) {
     cascadeReceiver.$send$with$(self._$superConstructorNameFor$($aNode), $args);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST().$new());
    $send = (function (cascadeReceiver) {
     cascadeReceiver.$to$send$($var, $superMsg);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new());
    return $send;
   };
   this.$superConstructorMethodFor$ = function ($aNode) {
    var self = this;
    var $start = nil;
    var $end = nil;
    var $stmts = nil;
    var $var = nil;
    var $initHdr = nil;
    var $superMsg = nil;
    var $send = nil;
    var $body = nil;
    var $copier = nil;
    var $params = nil;
    var $args = nil;
    $start = $aNode.$superConstructorCall().$start();
    $end = $aNode.$superConstructorCall().$end();
    $copier = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ASTCopier().$new();
    $params = $aNode.$constructor().$parameters().$collect$(function ($formal) {
     return $formal.$apply$($copier);
    });
    $initHdr = (function (cascadeReceiver) {
     cascadeReceiver.$selector$parameters$(self._$superConstructorNameFor$($aNode), $params);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessagePatternAST().$new());
    $stmts = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new();
    $var = (function (cascadeReceiver) {
     cascadeReceiver.$name$("super");
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
    $args = $aNode.$superConstructorCall().$arguments().$collect$(function ($actual) {
     return $actual.$apply$($copier);
    });
    $superMsg = (function (cascadeReceiver) {
     cascadeReceiver.$send$with$("instance`initializer", $args);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self._$PropertyCallAST().$new());
    $send = (function (cascadeReceiver) {
     cascadeReceiver.$to$send$($var, $superMsg);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new());
    $stmts.$addFirst$($send);
    $body = (function (cascadeReceiver) {
     cascadeReceiver.$temporaries$statements$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new(), $stmts);
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$CodeBodyAST().$new());
    return (function (cascadeReceiver) {
     cascadeReceiver.$pattern$body$accessModifier$($initHdr, $body, "protected");
     cascadeReceiver.$start$($start);
     return cascadeReceiver.$end$($end);
    })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodAST().$new());
   };
   this.$superConstructorNameFor$ = function ($aNode) {
    var self = this;
    return "superInit`".$$comma($aNode.$name());
   };
   this.$scopeMap = function () {
    var self = this;
    return self.$super$Newspeak2V8Compilation$Compiler$slot._$scopeMap.call(self);
   };
   this.$PropertyCallAST = function () {
    if (nil === this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot) {
     var self = this;
     var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST();
     var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
     var mixin = $.$Newspeak2V8Compilation$Compiler$PropertyCallAST;
     this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot;
   };
   this.$Rewriter = function () {
    if (nil === this.$Newspeak2V8Compilation$Compiler$Rewriter$slot) {
     var self = this;
     var superclass = self.$super$Newspeak2V8Compilation$Compiler$slot._$Rewriter.call(self);
     var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
     var mixin = $.$Newspeak2V8Compilation$Compiler$Rewriter;
     this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Newspeak2V8Compilation$Compiler$Rewriter$slot;
   };
   this.$ScopeBuilder = function () {
    if (nil === this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot) {
     var self = this;
     var superclass = self.$super$Newspeak2V8Compilation$Compiler$slot._$ScopeBuilder.call(self);
     var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
     var mixin = $.$Newspeak2V8Compilation$Compiler$ScopeBuilder;
     this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot;
   };
   this.$Translator = function () {
    if (nil === this.$Newspeak2V8Compilation$Compiler$Translator$slot) {
     var self = this;
     var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ASTTool();
     var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
     var mixin = $.$Newspeak2V8Compilation$Compiler$Translator;
     this.$Newspeak2V8Compilation$Compiler$Translator$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Newspeak2V8Compilation$Compiler$Translator$slot;
   };
   this.$init$scopeStack$ = function (v) {
    this.$scopeStack$slot = v;
    return this;
   };
   this.$scopeStack = function () {
    return this.$scopeStack$slot;
   };
   this.$scopeStack$ = function (v) {
    this.$scopeStack$slot = v;
    return this;
   };
   this.$init$input$ = function (v) {
    this.$input$slot = v;
    return this;
   };
   this.$input = function () {
    return this.$input$slot;
   };
   this.$input$ = function (v) {
    this.$input$slot = v;
    return this;
   };
   this.$init$sentSelectors$ = function (v) {
    this.$sentSelectors$slot = v;
    return this;
   };
   this.$sentSelectors = function () {
    return this.$sentSelectors$slot;
   };
   this.$sentSelectors$ = function (v) {
    this.$sentSelectors$slot = v;
    return this;
   };
   this.$init$rewriter$ = function (v) {
    this.$rewriter$slot = v;
    return this;
   };
   this.$rewriter = function () {
    return this.$rewriter$slot;
   };
   this.$init$translator$ = function (v) {
    this.$translator$slot = v;
    return this;
   };
   this.$translator = function () {
    return this.$translator$slot;
   };
   this.$init$currentDepth$ = function (v) {
    this.$currentDepth$slot = v;
    return this;
   };
   this.$currentDepth = function () {
    return this.$currentDepth$slot;
   };
   this.$currentDepth$ = function (v) {
    this.$currentDepth$slot = v;
    return this;
   };
   this.$init$currentMixinUID$ = function (v) {
    this.$currentMixinUID$slot = v;
    return this;
   };
   this.$currentMixinUID = function () {
    return this.$currentMixinUID$slot;
   };
   this.$currentMixinUID$ = function (v) {
    this.$currentMixinUID$slot = v;
    return this;
   };
   this.$init$jsWriter$ = function (v) {
    this.$jsWriter$slot = v;
    return this;
   };
   this.$jsWriter = function () {
    return this.$jsWriter$slot;
   };
   this.$init$supportDoesNotUnderstand$ = function (v) {
    this.$supportDoesNotUnderstand$slot = v;
    return this;
   };
   this.$supportDoesNotUnderstand = function () {
    return this.$supportDoesNotUnderstand$slot;
   };
   this.$supportDoesNotUnderstand$ = function (v) {
    this.$supportDoesNotUnderstand$slot = v;
    return this;
   };
   this.$init$inlineOperators$ = function (v) {
    this.$inlineOperators$slot = v;
    return this;
   };
   this.$inlineOperators = function () {
    return this.$inlineOperators$slot;
   };
   this.$inlineOperators$ = function (v) {
    this.$inlineOperators$slot = v;
    return this;
   };
   this.$init$enableIntrinsics$ = function (v) {
    this.$enableIntrinsics$slot = v;
    return this;
   };
   this.$enableIntrinsics = function () {
    return this.$enableIntrinsics$slot;
   };
   this.$enableIntrinsics$ = function (v) {
    this.$enableIntrinsics$slot = v;
    return this;
   };
   this.$init$Newspeak2V8Compilation$Compiler$PropertyCallAST$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot = v;
    return this;
   };
   this.$Newspeak2V8Compilation$Compiler$PropertyCallAST = function () {
    return this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot;
   };
   this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot = v;
    return this;
   };
   this.$init$Newspeak2V8Compilation$Compiler$Rewriter$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = v;
    return this;
   };
   this.$Newspeak2V8Compilation$Compiler$Rewriter = function () {
    return this.$Newspeak2V8Compilation$Compiler$Rewriter$slot;
   };
   this.$Newspeak2V8Compilation$Compiler$Rewriter$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = v;
    return this;
   };
   this.$init$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = v;
    return this;
   };
   this.$Newspeak2V8Compilation$Compiler$ScopeBuilder = function () {
    return this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot;
   };
   this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = v;
    return this;
   };
   this.$init$Newspeak2V8Compilation$Compiler$Translator$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$Translator$slot = v;
    return this;
   };
   this.$Newspeak2V8Compilation$Compiler$Translator = function () {
    return this.$Newspeak2V8Compilation$Compiler$Translator$slot;
   };
   this.$Newspeak2V8Compilation$Compiler$Translator$ = function (v) {
    this.$Newspeak2V8Compilation$Compiler$Translator$slot = v;
    return this;
   };
   this.$Newspeak2V8Compilation$Compiler$PropertyCallAST = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`PropertyCallAST";
    this.name = "Newspeak2V8Compilation`Compiler`PropertyCallAST";
    this.header = 2406;
    this.slots = [];
    this.methods = [
     new MM("superInit`Newspeak2V8Compilation`Compiler`PropertyCallAST", true, 2407),
     new MM("instance`initializer", true, 2408),
     new MM("apply:", false, 2409)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST = function () {
     var self = this;
     self.$super$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     var self = this;
     self._$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST();
     return self;
    };
    this.$apply$ = function ($tool) {
     var self = this;
     return $tool.$propertyCallNode$(self);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`PropertyCallAST";
      this._$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST = $.$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST;
      this.$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$apply$ = this._$apply$ = $.$apply$;
      this.$enclosingObjects$Newspeak2V8Compilation$Compiler$PropertyCallAST = enclosingObjects;
      this.$super$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot = runtimeSuperclass;
      this["Newspeak2V8Compilation`Compiler`PropertyCallAST"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["Newspeak2V8Compilation`Compiler`PropertyCallAST"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`PropertyCallAST";
     this.slots = [];
     this.methods = [new MM("new", true, 0)];
     this.nestedClasses = [];
     this.$new = function () {
      return (new this.nonMeta.basicNew()).$instance$initializer();
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`PropertyCallAST";
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$Newspeak2V8Compilation$Compiler$PropertyCallAST = enclosingObjects;
       this.$super$Newspeak2V8Compilation$Compiler$PropertyCallAST = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Newspeak2V8Compilation$Compiler$Rewriter = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Rewriter";
    this.name = "Newspeak2V8Compilation`Compiler`Rewriter";
    this.header = 2410;
    this.slots = [
     new SM("inlinableOperators", false, false),
     new SM("inlinableNumericOperators", false, false),
     new SM("Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST", true, true),
     new SM("Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST", true, true)
    ];
    this.methods = [
     new MM("superInit`Newspeak2V8Compilation`Compiler`Rewriter", true, 2411),
     new MM("instance`initializer", true, 2412),
     new MM("__isInlinableAsExpressionConditional:", false, 2413),
     new MM("canInlineSeqexps", false, 2414),
     new MM("currentScope", false, 2415),
     new MM("inline:as:selector:rewriteArgsAs:", false, 2416),
     new MM("isInlinableBooleanOperator:", false, 2417),
     new MM("isInlinableNumericOperator:", false, 2418),
     new MM("isInlinableOperator:", false, 2419),
     new MM("processEventualSend:", false, 2420),
     new MM("setterBlockArgName", false, 2421),
     new MM("normalSendNode:", false, 2422),
     new MM("propertyCallNode:", false, 2423),
     new MM("setterSendNode:", false, 2424),
     new MM("InlinedOperatorAST", true, 0),
     new MM("SchedulerAST", true, 0),
     new MM("init`inlinableOperators:", true, 0),
     new MM("inlinableOperators", true, 0),
     new MM("init`inlinableNumericOperators:", true, 0),
     new MM("inlinableNumericOperators", true, 0),
     new MM("init`Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST:", true, 0),
     new MM("Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST", true, 0),
     new MM("Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST:", true, 0),
     new MM("init`Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST:", true, 0),
     new MM("Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST", true, 0),
     new MM("Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST:", true, 0)
    ];
    this.nestedClasses = [
     "Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST",
     "Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST"
    ];
    this.applications = [];
    this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter = function () {
     var self = this;
     self.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     var self = this;
     self._$superInit$Newspeak2V8Compilation$Compiler$Rewriter();
     self._$init$inlinableOperators$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$Dictionary().$new());
     self._$init$inlinableNumericOperators$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$Dictionary().$new());
     (function (cascadeReceiver) {
      cascadeReceiver.$at$put$("+", "+");
      cascadeReceiver.$at$put$("-", "-");
      cascadeReceiver.$at$put$("*", "*");
      cascadeReceiver.$at$put$("/", "/");
      return cascadeReceiver.$at$put$("==", "===");
     })(self._$inlinableOperators());
     (function (cascadeReceiver) {
      cascadeReceiver.$at$put$("<", "<");
      cascadeReceiver.$at$put$("<=", "<=");
      cascadeReceiver.$at$put$(">", ">");
      return cascadeReceiver.$at$put$(">=", ">=");
     })(self._$inlinableNumericOperators());
     return self;
    };
    this.$__isInlinableAsExpressionConditional$ = function ($node) {
     var self = this;
     var NLR = new Object();
     try {
      if (!(self._$conditionalSelectors().$includes$($node.$msg().$sel()) && self._$valueExpected())) {
       return false;
      } else {
       nil;
      };
      $node.$msg().$args().$do$(function ($each) {
       return (self._$isRemovableBlock$withArgs$($each, 0) && ($each.$body().$statements().$size().$$equal(1) && $each.$body().$statements().$first().$isReturnStatNode().$not())).$ifFalse$(function () {
        {
         NLR.value = false;
         throw NLR;
        };
       });
      });
      return true;
     } catch (NLR_exception) {
      if (NLR === NLR_exception) {
       return NLR_exception.value;
      } else {
       throw NLR_exception;
      };
     };
    };
    this.$canInlineSeqexps = function () {
     var self = this;
     return false;
    };
    this.$currentScope = function () {
     var self = this;
     return self.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot._$currentScope.call(self);
    };
    this.$inline$as$selector$rewriteArgsAs$ = function ($node, $sendClass, $selector, $argRewriteBlock) {
     var self = this;
     var $receiver = nil;
     var $message = nil;
     $receiver = self._$applyForValueTo$($node.$receiver());
     $message = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new().$send$with$($selector, $node.$message().$arguments().$collect$($argRewriteBlock));
     return (function (cascadeReceiver) {
      cascadeReceiver.$to$send$($receiver, $message);
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })($sendClass.$new());
    };
    this.$isInlinableBooleanOperator$ = function ($node) {
     var self = this;
     var $selector = nil;
     $selector = $node.$message().$selector();
     return ($selector.$$equal("or:") || $selector.$$equal("and:")) && ($node.$message().$arguments().$size().$$equal(1) && ($node.$message().$arguments().$first().$isBlockNode() && $node.$message().$arguments().$first().$body().$statements().$size().$$equal(1)));
    };
    this.$isInlinableNumericOperator$ = function ($node) {
     var self = this;
     var $args = nil;
     $args = $node.$message().$arguments();
     if (!$args.$size().$$equal(1)) {
      return false;
     } else {
      nil;
     };
     if (!self._$inlinableNumericOperators().$includesKey$($node.$message().$selector())) {
      return false;
     } else {
      nil;
     };
     if ($node.$receiver().$isLiteralNode() && $node.$receiver().$value().$isNumber()) {
      return true;
     } else {
      nil;
     };
     if ($args.$first().$isLiteralNode() && $args.$first().$value().$isNumber()) {
      return true;
     } else {
      nil;
     };
     return false;
    };
    this.$isInlinableOperator$ = function ($node) {
     var self = this;
     return self._$inlinableOperators().$includesKey$($node.$message().$selector()) && $node.$message().$arguments().$size().$$equal(1);
    };
    this.$processEventualSend$ = function ($node) {
     var self = this;
     var $scheduler = nil;
     var $receiver = nil;
     var $selector = nil;
     var $arguments = nil;
     $scheduler = self._$SchedulerAST().$new();
     $receiver = $node.$receiver().$apply$(self);
     $selector = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$SymbolAST().$new().$value$($node.$message().$selector()).$apply$(self);
     $arguments = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$TupleAST().$new().$elements$($node.$message().$arguments()).$apply$(self);
     return self._$OrdinarySendAST().$to$send$($scheduler, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new().$send$with$("eventualSendTo:selector:arguments:", [
      $receiver,
      $selector,
      $arguments
     ]).$copyPositionFrom$($node.$message())).$copyPositionFrom$($node);
    };
    this.$setterBlockArgName = function () {
     var self = this;
     return "setter_arg".$asSymbol();
    };
    this.$normalSendNode$ = function ($node) {
     var self = this;
     "BOGUS";
     if ($node.$message().$isEventual()) {
      return self._$processEventualSend$($node);
     } else {
      nil;
     };
     if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$inlineOperators() && self._$isInlinableNumericOperator$($node)) {
      return self._$inline$as$selector$rewriteArgsAs$($node, self._$InlinedOperatorAST(), self._$inlinableNumericOperators().$at$($node.$message().$selector()), function ($each) {
       return self._$applyForValueTo$($each);
      });
     } else {
      nil;
     };
     if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$inlineOperators() && self._$isInlinableOperator$($node)) {
      return self._$inline$as$selector$rewriteArgsAs$($node, self._$InlinedOperatorAST(), self._$inlinableOperators().$at$($node.$message().$selector()), function ($each) {
       return self._$applyForValueTo$($each);
      });
     } else {
      nil;
     };
     if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$inlineOperators() && self._$isInlinableBooleanOperator$($node)) {
      return self._$inline$as$selector$rewriteArgsAs$($node, self._$InlinedOperatorAST(), $node.$message().$selector().$$equal("and:").$ifTrue$ifFalse$(function () {
       return "&&";
      }, function () {
       return "||";
      }), function ($each) {
       return self._$applyForValueTo$($each.$body().$statements().$first());
      });
     } else {
      nil;
     };
     return self.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot._$normalSendNode$.call(self, $node);
    };
    this.$propertyCallNode$ = function ($node) {
     var self = this;
     var $args = nil;
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$assert$(function () {
      return $node.$isMessageNode();
     });
     $args = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$OrderedCollection().$new();
     $node.$arguments().$do$(function ($each) {
      return $args.$add$(self._$applyForValueTo$($each));
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$send$with$($node.$selector(), $args);
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$PropertyCallAST().$new());
    };
    this.$setterSendNode$ = function ($node) {
     var self = this;
     var $binding = nil;
     var $block = nil;
     var $blockArg = nil;
     var $blockParam = nil;
     var $blockScope = nil;
     var $send = nil;
     var $rewrittenSetterSend = nil;
     $binding = self._$currentScope().$at$ifAbsent$($node.$message().$selector(), function () {
      return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new();
     });
     if ($binding.$isVarDeclNode()) {
      return self._$processLocalAccess$of$($node.$message(), $binding);
     } else {
      nil;
     };
     if (!self._$valueExpected()) {
      return self._$processImplicitReceiverSend$($node);
     } else {
      nil;
     };
     $blockArg = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST().$new().$to$send$(self._$implicitReceiverNode(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new().$send$with$(self._$setterBlockArgName(), []));
     $blockParam = self._$ParameterAST().$name$type$(self._$setterBlockArgName(), nil);
     $send = (function (cascadeReceiver) {
      cascadeReceiver.$to$send$($node.$receiver(), (function (cascadeReceiver) {
       cascadeReceiver.$selector$($node.$message().$selector());
       cascadeReceiver.$arguments$([$blockArg]);
       cascadeReceiver.$start$($node.$message().$start());
       cascadeReceiver.$end$($node.$message().$end());
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new()));
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST().$new());
     $block = (function (cascadeReceiver) {
      cascadeReceiver.$body$((function (cascadeReceiver) {
       cascadeReceiver.$parameters$temporaries$statements$([$blockParam], [], [
        $send,
        $blockArg
       ]);
       cascadeReceiver.$start$($node.$start());
       return cascadeReceiver.$end$($node.$end());
      })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$CodeBodyAST().$new()));
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$BlockAST().$new());
     $blockScope = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$Scope().$new();
     (function (cascadeReceiver) {
      cascadeReceiver.$superScope$(self._$currentScope());
      return cascadeReceiver.$at$put$(self._$setterBlockArgName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$LocalEntry().$forDeclaration$atDepth$($blockParam, nil));
     })($blockScope);
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($block, $blockScope);
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($block.$body(), $blockScope);
     $rewrittenSetterSend = (function (cascadeReceiver) {
      cascadeReceiver.$to$send$($block, (function (cascadeReceiver) {
       cascadeReceiver.$selector$("value:");
       cascadeReceiver.$arguments$([$node.$message().$arguments().$first()]);
       cascadeReceiver.$start$($node.$message().$start());
       return cascadeReceiver.$end$($node.$message().$end());
      })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new()));
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST().$new());
     return self._$applyForValueTo$($rewrittenSetterSend);
    };
    this.$InlinedOperatorAST = function () {
     if (nil === this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter);
      var mixin = $.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot;
    };
    this.$SchedulerAST = function () {
     if (nil === this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter);
      var mixin = $.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot;
    };
    this.$init$inlinableOperators$ = function (v) {
     this.$inlinableOperators$slot = v;
     return this;
    };
    this.$inlinableOperators = function () {
     return this.$inlinableOperators$slot;
    };
    this.$init$inlinableNumericOperators$ = function (v) {
     this.$inlinableNumericOperators$slot = v;
     return this;
    };
    this.$inlinableNumericOperators = function () {
     return this.$inlinableNumericOperators$slot;
    };
    this.$init$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = function (v) {
     this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = v;
     return this;
    };
    this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = function () {
     return this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot;
    };
    this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = function (v) {
     this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = v;
     return this;
    };
    this.$init$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = function (v) {
     this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = v;
     return this;
    };
    this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = function () {
     return this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot;
    };
    this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = function (v) {
     this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = v;
     return this;
    };
    this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
     this.name = "Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
     this.header = 2425;
     this.slots = [];
     this.methods = [
      new MM("superInit`Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST", true, 2426),
      new MM("instance`initializer", true, 2427),
      new MM("apply:", false, 2428)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = function () {
      var self = this;
      self.$super$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST();
      return self;
     };
     this.$apply$ = function ($aTool) {
      var self = this;
      return $aTool.$inlinedOperatorNode$(self);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
       this._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = $.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST;
       this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = enclosingObjects;
       this.$super$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = runtimeSuperclass;
       this["Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = enclosingObjects;
        this.$super$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
     this.name = "Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
     this.header = 2429;
     this.slots = [];
     this.methods = [
      new MM("superInit`Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST", true, 2430),
      new MM("instance`initializer", true, 2431),
      new MM("apply:", false, 2432)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = function () {
      var self = this;
      self.$super$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST();
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$schedulerNode$(self);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
       this._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = $.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST;
       this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = enclosingObjects;
       this.$super$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = runtimeSuperclass;
       this["Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = enclosingObjects;
        this.$super$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST.enclosingMixin = this;
    this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST.enclosingMixin = this;
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Rewriter";
      this._$superInit$Newspeak2V8Compilation$Compiler$Rewriter = $.$superInit$Newspeak2V8Compilation$Compiler$Rewriter;
      this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Rewriter");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$__isInlinableAsExpressionConditional$ = $.$__isInlinableAsExpressionConditional$;
      this.$__isInlinableAsExpressionConditional$ = dnuCatcher("$__isInlinableAsExpressionConditional$");
      this._$canInlineSeqexps = $.$canInlineSeqexps;
      this.$canInlineSeqexps = dnuCatcher("$canInlineSeqexps");
      this._$currentScope = $.$currentScope;
      this.$currentScope = dnuCatcher("$currentScope");
      this._$inline$as$selector$rewriteArgsAs$ = $.$inline$as$selector$rewriteArgsAs$;
      this.$inline$as$selector$rewriteArgsAs$ = dnuCatcher("$inline$as$selector$rewriteArgsAs$");
      this._$isInlinableBooleanOperator$ = $.$isInlinableBooleanOperator$;
      this.$isInlinableBooleanOperator$ = dnuCatcher("$isInlinableBooleanOperator$");
      this._$isInlinableNumericOperator$ = $.$isInlinableNumericOperator$;
      this.$isInlinableNumericOperator$ = dnuCatcher("$isInlinableNumericOperator$");
      this._$isInlinableOperator$ = $.$isInlinableOperator$;
      this.$isInlinableOperator$ = dnuCatcher("$isInlinableOperator$");
      this._$processEventualSend$ = $.$processEventualSend$;
      this.$processEventualSend$ = dnuCatcher("$processEventualSend$");
      this._$setterBlockArgName = $.$setterBlockArgName;
      this.$setterBlockArgName = dnuCatcher("$setterBlockArgName");
      this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
      this.$propertyCallNode$ = this._$propertyCallNode$ = $.$propertyCallNode$;
      this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
      this._$InlinedOperatorAST = $.$InlinedOperatorAST;
      this.$InlinedOperatorAST = dnuCatcher("$InlinedOperatorAST");
      this._$SchedulerAST = $.$SchedulerAST;
      this.$SchedulerAST = dnuCatcher("$SchedulerAST");
      this._$init$inlinableOperators$ = $.$init$inlinableOperators$;
      this.$init$inlinableOperators$ = dnuCatcher("$init$inlinableOperators$");
      this._$inlinableOperators = $.$inlinableOperators;
      this.$inlinableOperators = dnuCatcher("$inlinableOperators");
      this._$init$inlinableNumericOperators$ = $.$init$inlinableNumericOperators$;
      this.$init$inlinableNumericOperators$ = dnuCatcher("$init$inlinableNumericOperators$");
      this._$inlinableNumericOperators = $.$inlinableNumericOperators;
      this.$inlinableNumericOperators = dnuCatcher("$inlinableNumericOperators");
      this.$init$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = this._$init$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = $.$init$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = this._$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = $.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = this._$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = $.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$;
      this.$init$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = this._$init$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = $.$init$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = this._$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = $.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = this._$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = $.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$;
      this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter = enclosingObjects;
      this.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot = runtimeSuperclass;
      this["Newspeak2V8Compilation`Compiler`Rewriter"] = function () {
       superBasicNew.call(this);
       this.$inlinableOperators$slot = nil;
       this.$inlinableNumericOperators$slot = nil;
       this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = nil;
       this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = nil;
      };
      this.basicNew = this["Newspeak2V8Compilation`Compiler`Rewriter"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Rewriter";
     this.slots = [];
     this.methods = [new MM("new", true, 0)];
     this.nestedClasses = [];
     this.$new = function () {
      return (new this.nonMeta.basicNew()).$instance$initializer();
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Rewriter";
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter = enclosingObjects;
       this.$super$Newspeak2V8Compilation$Compiler$Rewriter = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Newspeak2V8Compilation$Compiler$ScopeBuilder = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`ScopeBuilder";
    this.name = "Newspeak2V8Compilation`Compiler`ScopeBuilder";
    this.header = 2433;
    this.slots = [];
    this.methods = [
     new MM("superInit`Newspeak2V8Compilation`Compiler`ScopeBuilder", true, 2434),
     new MM("instance`initializer", true, 2435),
     new MM("propertyCallNode:", false, 2436)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder = function ($initialScope, $initialDepth) {
     var self = this;
     self.$super$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot._$instance$initializer.call(self, $initialScope, $initialDepth);
     return self;
    };
    this.$instance$initializer = function ($initialScope, $initialDepth) {
     var self = this;
     self._$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder($initialScope, $initialDepth);
     return self;
    };
    this.$propertyCallNode$ = function ($aNode) {
     var self = this;
     self._$messageNode$($aNode);
     return self;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`ScopeBuilder";
      this._$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder = $.$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder;
      this.$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$propertyCallNode$ = this._$propertyCallNode$ = $.$propertyCallNode$;
      this.$enclosingObjects$Newspeak2V8Compilation$Compiler$ScopeBuilder = enclosingObjects;
      this.$super$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = runtimeSuperclass;
      this["Newspeak2V8Compilation`Compiler`ScopeBuilder"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["Newspeak2V8Compilation`Compiler`ScopeBuilder"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`ScopeBuilder";
     this.slots = [];
     this.methods = [
      new MM("nestedIn:atLevel:", true, 0),
      new MM("new", false, 2437)
     ];
     this.nestedClasses = [];
     this.$nestedIn$atLevel$ = function ($initialScope, $initialDepth) {
      return (new this.nonMeta.basicNew()).$instance$initializer($initialScope, $initialDepth);
     };
     this.$new = function () {
      var self = this;
      return self._$nestedIn$atLevel$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$ScopeBuilder[1]._$Scope().$new(), 0);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`ScopeBuilder";
       this.$nestedIn$atLevel$ = this._$nestedIn$atLevel$ = $.$nestedIn$atLevel$;
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$Newspeak2V8Compilation$Compiler$ScopeBuilder = enclosingObjects;
       this.$super$Newspeak2V8Compilation$Compiler$ScopeBuilder = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Newspeak2V8Compilation$Compiler$Translator = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Translator";
    this.name = "Newspeak2V8Compilation`Compiler`Translator";
    this.header = 2438;
    this.slots = [
     new SM("scopeStack", true, false),
     new SM("currentSelector", true, false),
     new SM("containsNonLocalReturn", true, false),
     new SM("methodIsPrivate", true, false)
    ];
    this.methods = [
     new MM("superInit`Newspeak2V8Compilation`Compiler`Translator", true, 2439),
     new MM("instance`initializer", true, 2440),
     new MM("addCascadedSend:to:", false, 2441),
     new MM("beginNewTranslationCycle", false, 2442),
     new MM("maybeCaptureReceiver", false, 2443),
     new MM("nlrName", false, 2444),
     new MM("nlrValuePropertyName", false, 2445),
     new MM("processIntrinsic:", false, 2446),
     new MM("processIntrinsicArg:", false, 2447),
     new MM("processLexicalSend:to:binding:", false, 2448),
     new MM("processOuterReceiverAtDepth:", false, 2449),
     new MM("protectedMessage:", false, 2450),
     new MM("publicMessage:", false, 2451),
     new MM("selfName", false, 2452),
     new MM("wrapBodyForNlrHandling:", false, 2453),
     new MM("wrapBodyNoNlrHandling:", false, 2454),
     new MM("blockLocalReturnNode:", false, 2455),
     new MM("blockNode:", false, 2456),
     new MM("boolNode:", false, 2457),
     new MM("cascadedSendNode:", false, 2458),
     new MM("charNode:", false, 2459),
     new MM("codeBodyNode:", false, 2460),
     new MM("conditionalNode:", false, 2461),
     new MM("enclosingObjectNode:", false, 2462),
     new MM("explicitOuterReceiverNode:", false, 2463),
     new MM("implicitReceiverSendNode:", false, 2464),
     new MM("inlinableAsExpressionConditionalNode:", false, 2465),
     new MM("inlinableConditionalNode:", false, 2466),
     new MM("inlinedOperatorNode:", false, 2467),
     new MM("localReadNode:", false, 2468),
     new MM("localWriteNode:", false, 2469),
     new MM("loopNode:", false, 2470),
     new MM("messageNode:", false, 2471),
     new MM("messagePatternNode:", false, 2472),
     new MM("methodLocalReturnNode:", false, 2473),
     new MM("methodNode:", false, 2474),
     new MM("nilNode:", false, 2475),
     new MM("nonLocalReturnNode:", false, 2476),
     new MM("numberNode:", false, 2477),
     new MM("ordinarySendNode:", false, 2478),
     new MM("outerSendNode:", false, 2479),
     new MM("parameterDeclNode:", false, 2480),
     new MM("propertyCallNode:", false, 2481),
     new MM("receiverNode:", false, 2482),
     new MM("returnStatNode:", false, 2483),
     new MM("schedulerNode:", false, 2484),
     new MM("selfSendNode:", false, 2485),
     new MM("stringNode:", false, 2486),
     new MM("superSendNode:", false, 2487),
     new MM("symbolNode:", false, 2488),
     new MM("temporaryDeclNode:", false, 2489),
     new MM("tupleNode:", false, 2490),
     new MM("varDeclNode:", false, 2491),
     new MM("init`scopeStack:", true, 0),
     new MM("scopeStack", true, 0),
     new MM("scopeStack:", true, 0),
     new MM("init`currentSelector:", true, 0),
     new MM("currentSelector", true, 0),
     new MM("currentSelector:", true, 0),
     new MM("init`containsNonLocalReturn:", true, 0),
     new MM("containsNonLocalReturn", true, 0),
     new MM("containsNonLocalReturn:", true, 0),
     new MM("init`methodIsPrivate:", true, 0),
     new MM("methodIsPrivate", true, 0),
     new MM("methodIsPrivate:", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Newspeak2V8Compilation$Compiler$Translator = function () {
     var self = this;
     self.$super$Newspeak2V8Compilation$Compiler$Translator$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     var self = this;
     self._$superInit$Newspeak2V8Compilation$Compiler$Translator();
     return self;
    };
    this.$addCascadedSend$to$ = function ($node, $statements) {
     var self = this;
     if ($node.$isCascadedSendNode()) {
      self._$addCascadedSend$to$($node.$previousSend(), $statements);
     } else {
      nil;
     };
     $statements.$add$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("cascadeReceiver"), self._$publicMessage$($node.$message())), $node.$message().$arguments().$collect$(function ($each) {
      return $each.$apply$(self);
     }).$asArray()));
     return self;
    };
    this.$beginNewTranslationCycle = function () {
     var self = this;
     self._$scopeStack$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new());
     self._$containsNonLocalReturn$(false);
     return self;
    };
    this.$maybeCaptureReceiver = function () {
     var self = this;
     if (self._$methodIsPrivate()) {
      return [];
     } else {
      return [self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self._$selfName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("this"))];
     };
     return self;
    };
    this.$nlrName = function () {
     var self = this;
     return "NLR";
    };
    this.$nlrValuePropertyName = function () {
     var self = this;
     return "value";
    };
    this.$processIntrinsic$ = function ($msg) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$perform$withArguments$($msg.$selector(), $msg.$arguments().$collect$(function ($arg) {
      return self._$processIntrinsicArg$($arg);
     }).$asArray());
    };
    this.$processIntrinsicArg$ = function ($arg) {
     var self = this;
     if ($arg.$isTupleNode()) {
      return $arg.$elements().$collect$(function ($el) {
       return self._$processIntrinsicArg$($el);
      }).$asArray();
     } else {
      nil;
     };
     if ($arg.$isLiteralNode()) {
      return $arg.$value();
     } else {
      nil;
     };
     return $arg.$apply$(self);
    };
    this.$processLexicalSend$to$binding$ = function ($message, $jsReceiver, $binding) {
     var self = this;
     if ($binding.$notNil() && $binding.$ast().$accessModifier().$$equal("private")) {
      var $definingMixinDepth = nil;
      var $definingMixin = nil;
      var $targetMethod = nil;
      $definingMixinDepth = $binding.$depth() - 1;
      $definingMixin = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("$".$$comma($definingMixinDepth.$printString()));
      $targetMethod = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($definingMixin, self._$publicMessage$($message));
      return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$($targetMethod, [$jsReceiver].$$comma($message.$arguments().$collect$(function ($each) {
       return $each.$apply$(self);
      }).$asArray()));
     } else {
      nil;
     };
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($jsReceiver, self._$protectedMessage$($message)), $message.$arguments().$collect$(function ($each) {
      return $each.$apply$(self);
     }).$asArray());
    };
    this.$processOuterReceiverAtDepth$ = function ($depth) {
     var self = this;
     var $slotName = nil;
     if ($depth.$$equal(0)) {
      return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self");
     } else {
      nil;
     };
     $slotName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSynthetic$("enclosingObjects`".$$comma(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$currentMixinUID()));
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($slotName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($depth - 1));
    };
    this.$protectedMessage$ = function ($node) {
     var self = this;
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$sentSelectors().$add$($node.$selector());
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleProtected$($node.$selector()));
    };
    this.$publicMessage$ = function ($node) {
     var self = this;
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$sentSelectors().$add$($node.$selector());
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$manglePublic$($node.$selector()));
    };
    this.$selfName = function () {
     var self = this;
     return "self";
    };
    this.$wrapBodyForNlrHandling$ = function ($body) {
     var self = this;
     var $nlrVarNode = nil;
     var $nlrParamName = nil;
     var $nlrParamNode = nil;
     $nlrVarNode = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$nlrName());
     $nlrParamName = self._$nlrName().$$comma("_exception");
     $nlrParamNode = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$($nlrParamName);
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$(self._$maybeCaptureReceiver().$$comma([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self._$nlrName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("Object"), [])),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$try$catch$with$($body, $nlrParamName, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$if$then$else$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$operator$with$and$("===", $nlrVarNode, $nlrParamNode), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($nlrParamNode, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self._$nlrValuePropertyName()))), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$throw$($nlrParamNode))]))
     ]));
    };
    this.$wrapBodyNoNlrHandling$ = function ($body) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$(self._$maybeCaptureReceiver().$$comma($body.$statements()));
    };
    this.$blockLocalReturnNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$return$($node.$expression().$apply$(self));
    };
    this.$blockNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$functionOf$body$($node.$parameters().$collect$(function ($each) {
      return $each.$apply$(self);
     }).$asArray(), $node.$body().$apply$(self));
    };
    this.$boolNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
    };
    this.$cascadedSendNode$ = function ($node) {
     var self = this;
     var $statements = nil;
     $statements = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new();
     self._$addCascadedSend$to$($node, $statements);
     $statements.$at$put$($statements.$size(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$return$($statements.$last()));
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$functionOf$body$(["cascadeReceiver"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($statements)), [$node.$receiver().$apply$(self)]);
    };
    this.$charNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value().$asString());
    };
    this.$codeBodyNode$ = function ($node) {
     var self = this;
     var $locals = nil;
     var $statements = nil;
     $locals = $node.$temporaries().$collect$(function ($each) {
      return $each.$apply$(self);
     });
     $statements = $node.$statements().$collect$(function ($each) {
      return $each.$apply$(self);
     });
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($locals.$asArray().$$comma($statements).$asArray());
    };
    this.$conditionalNode$ = function ($node) {
     var self = this;
     return self._$inlinableConditionalNode$($node);
    };
    this.$enclosingObjectNode$ = function ($node) {
     var self = this;
     return self._$processOuterReceiverAtDepth$($node.$depth());
    };
    this.$explicitOuterReceiverNode$ = function ($node) {
     var self = this;
     return self._$processOuterReceiverAtDepth$($node.$depth());
    };
    this.$implicitReceiverSendNode$ = function ($node) {
     var self = this;
     var $receiver = nil;
     $receiver = self._$processOuterReceiverAtDepth$($node.$depth());
     return self._$processLexicalSend$to$binding$($node.$message(), $receiver, $node.$binding());
    };
    this.$inlinableAsExpressionConditionalNode$ = function ($node) {
     var self = this;
     var $truePath = nil;
     var $falsePath = nil;
     var $condition = nil;
     $condition = $node.$receiver().$apply$(self);
     if ($node.$message().$selector().$$equal("ifTrue:")) {
      $truePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
      $falsePath = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil");
     } else {
      nil;
     };
     if ($node.$message().$selector().$$equal("ifFalse:")) {
      $truePath = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil");
      $falsePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
     } else {
      nil;
     };
     if ($node.$message().$selector().$$equal("ifTrue:ifFalse:")) {
      $truePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
      $falsePath = $node.$message().$arguments().$at$(2).$body().$statements().$first().$apply$(self);
     } else {
      nil;
     };
     if ($node.$message().$selector().$$equal("ifFalse:ifTrue:")) {
      $truePath = $node.$message().$arguments().$at$(2).$body().$statements().$first().$apply$(self);
      $falsePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
     } else {
      nil;
     };
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ternaryIf$then$else$($condition, $truePath, $falsePath);
    };
    this.$inlinableConditionalNode$ = function ($node) {
     var self = this;
     var $inverseCondition = nil;
     var $hasElseClause = nil;
     var $condition = nil;
     $inverseCondition = $node.$ifTrue().$not();
     $hasElseClause = $node.$else().$isNil().$not();
     $condition = $node.$condition().$apply$(self);
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$if$then$else$($inverseCondition.$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$prefixOperator$on$("!", $condition);
     }, function () {
      return $condition;
     }), $node.$then().$apply$(self), $hasElseClause.$ifTrue$ifFalse$(function () {
      return $node.$else().$apply$(self);
     }, function () {
      return nil;
     }));
    };
    this.$inlinedOperatorNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$operator$with$and$($node.$message().$selector(), $node.$receiver().$apply$(self), $node.$message().$arguments().$first().$apply$(self));
    };
    this.$localReadNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name()));
    };
    this.$localWriteNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name())), $node.$value().$apply$(self));
    };
    this.$loopNode$ = function ($node) {
     var self = this;
     var $prologue = nil;
     var $cond = nil;
     var $body = nil;
     var $condExpression = nil;
     var $condPrologue = nil;
     $prologue = $node.$prologue().$apply$(self);
     $cond = $node.$condition().$apply$(self);
     $body = $node.$body().$ifNil$ifNotNil$(function () {
      return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([]);
     }, function ($it) {
      return $it.$apply$(self);
     });
     $condExpression = $cond.$statements().$last();
     $condPrologue = (function (cascadeReceiver) {
      cascadeReceiver.$removeLast();
      return cascadeReceiver.$yourself();
     })($cond.$statements().$asOrderedCollection());
     if (!$node.$isWhileTrue()) {
      $condExpression = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$prefixOperator$on$("!", $condExpression);
     } else {
      nil;
     };
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($prologue.$statements().$$comma($condPrologue).$$comma([self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$for$while$step$do$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$verbatim$(""), $condExpression, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$verbatim$(""), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($body.$statements().$$comma($condPrologue)))]));
    };
    this.$messageNode$ = function ($node) {
     var self = this;
     self._$halt();
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$sentSelectors().$add$($node.$selector());
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSelector$($node.$selector()));
    };
    this.$messagePatternNode$ = function ($node) {
     var self = this;
     var $jsParameters = nil;
     $jsParameters = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new();
     self._$currentSelector$($node.$selector());
     self._$methodIsPrivate$($node.$accessModifier().$$equal("private"));
     if (self._$methodIsPrivate()) {
      $jsParameters.$add$(self._$selfName());
     } else {
      nil;
     };
     $node.$parameters().$do$(function ($each) {
      return $jsParameters.$add$($each.$apply$(self));
     });
     return $jsParameters;
    };
    this.$methodLocalReturnNode$ = function ($node) {
     var self = this;
     return self._$blockLocalReturnNode$($node);
    };
    this.$methodNode$ = function ($node) {
     var self = this;
     var $translatedBody = nil;
     $translatedBody = $node.$body().$apply$(self);
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$functionOf$body$($node.$pattern().$apply$(self).$asArray(), self._$containsNonLocalReturn().$ifTrue$ifFalse$(function () {
      return self._$wrapBodyForNlrHandling$($translatedBody);
     }, function () {
      return self._$wrapBodyNoNlrHandling$($translatedBody);
     }));
    };
    this.$nilNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil");
    };
    this.$nonLocalReturnNode$ = function ($node) {
     var self = this;
     return self._$returnStatNode$($node);
    };
    this.$numberNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
    };
    this.$ordinarySendNode$ = function ($node) {
     var self = this;
     if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$enableIntrinsics()) {
      if ($node.$receiver().$isImplicitReceiverSendNode()) {
       if ($node.$receiver().$message().$selector().$$equal("js")) {
        return self._$processIntrinsic$($node.$message());
       } else {
        nil;
       };
      } else {
       nil;
      };
     } else {
      nil;
     };
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($node.$receiver().$apply$(self), self._$publicMessage$($node.$message())), $node.$message().$arguments().$collect$(function ($each) {
      return $each.$apply$(self);
     }).$asArray());
    };
    this.$outerSendNode$ = function ($node) {
     var self = this;
     var $receiver = nil;
     $receiver = self._$processOuterReceiverAtDepth$($node.$depth());
     return self._$processLexicalSend$to$binding$($node.$message(), $receiver, $node.$binding());
    };
    this.$parameterDeclNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name());
    };
    this.$propertyCallNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSelector$($node.$selector()));
    };
    this.$receiverNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$selfName());
    };
    this.$returnStatNode$ = function ($node) {
     var self = this;
     self._$containsNonLocalReturn$(true);
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$nlrName()), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self._$nlrValuePropertyName())), $node.$expression().$apply$(self)),
      self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$throw$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$nlrName()))
     ]);
    };
    this.$schedulerNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("currentActor");
    };
    this.$selfSendNode$ = function ($node) {
     var self = this;
     var $receiver = nil;
     $receiver = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$selfName());
     return self._$processLexicalSend$to$binding$($node.$message(), $receiver, $node.$binding());
    };
    this.$stringNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
    };
    this.$superSendNode$ = function ($node) {
     var self = this;
     var $superSlotName = nil;
     var $args = nil;
     $superSlotName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSlot$("super`".$$comma(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$currentMixinUID()));
     $args = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new();
     $args.$add$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self"));
     $node.$message().$arguments().$do$(function ($each) {
      return $args.$add$($each.$apply$(self));
     });
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($superSlotName)), self._$protectedMessage$($node.$message())), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$("call")), $args);
    };
    this.$symbolNode$ = function ($node) {
     var self = this;
     self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$assert$(function () {
      return $node.$isSymbolNode();
     });
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
    };
    this.$temporaryDeclNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name()), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil"));
    };
    this.$tupleNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$array$($node.$elements().$collect$(function ($ea) {
      return $ea.$apply$(self);
     }));
    };
    this.$varDeclNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name()));
    };
    this.$init$scopeStack$ = function (v) {
     this.$scopeStack$slot = v;
     return this;
    };
    this.$scopeStack = function () {
     return this.$scopeStack$slot;
    };
    this.$scopeStack$ = function (v) {
     this.$scopeStack$slot = v;
     return this;
    };
    this.$init$currentSelector$ = function (v) {
     this.$currentSelector$slot = v;
     return this;
    };
    this.$currentSelector = function () {
     return this.$currentSelector$slot;
    };
    this.$currentSelector$ = function (v) {
     this.$currentSelector$slot = v;
     return this;
    };
    this.$init$containsNonLocalReturn$ = function (v) {
     this.$containsNonLocalReturn$slot = v;
     return this;
    };
    this.$containsNonLocalReturn = function () {
     return this.$containsNonLocalReturn$slot;
    };
    this.$containsNonLocalReturn$ = function (v) {
     this.$containsNonLocalReturn$slot = v;
     return this;
    };
    this.$init$methodIsPrivate$ = function (v) {
     this.$methodIsPrivate$slot = v;
     return this;
    };
    this.$methodIsPrivate = function () {
     return this.$methodIsPrivate$slot;
    };
    this.$methodIsPrivate$ = function (v) {
     this.$methodIsPrivate$slot = v;
     return this;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Translator";
      this._$superInit$Newspeak2V8Compilation$Compiler$Translator = $.$superInit$Newspeak2V8Compilation$Compiler$Translator;
      this.$superInit$Newspeak2V8Compilation$Compiler$Translator = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Translator");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$addCascadedSend$to$ = $.$addCascadedSend$to$;
      this.$addCascadedSend$to$ = dnuCatcher("$addCascadedSend$to$");
      this.$beginNewTranslationCycle = this._$beginNewTranslationCycle = $.$beginNewTranslationCycle;
      this._$maybeCaptureReceiver = $.$maybeCaptureReceiver;
      this.$maybeCaptureReceiver = dnuCatcher("$maybeCaptureReceiver");
      this._$nlrName = $.$nlrName;
      this.$nlrName = dnuCatcher("$nlrName");
      this._$nlrValuePropertyName = $.$nlrValuePropertyName;
      this.$nlrValuePropertyName = dnuCatcher("$nlrValuePropertyName");
      this._$processIntrinsic$ = $.$processIntrinsic$;
      this.$processIntrinsic$ = dnuCatcher("$processIntrinsic$");
      this._$processIntrinsicArg$ = $.$processIntrinsicArg$;
      this.$processIntrinsicArg$ = dnuCatcher("$processIntrinsicArg$");
      this._$processLexicalSend$to$binding$ = $.$processLexicalSend$to$binding$;
      this.$processLexicalSend$to$binding$ = dnuCatcher("$processLexicalSend$to$binding$");
      this._$processOuterReceiverAtDepth$ = $.$processOuterReceiverAtDepth$;
      this.$processOuterReceiverAtDepth$ = dnuCatcher("$processOuterReceiverAtDepth$");
      this._$protectedMessage$ = $.$protectedMessage$;
      this.$protectedMessage$ = dnuCatcher("$protectedMessage$");
      this._$publicMessage$ = $.$publicMessage$;
      this.$publicMessage$ = dnuCatcher("$publicMessage$");
      this._$selfName = $.$selfName;
      this.$selfName = dnuCatcher("$selfName");
      this._$wrapBodyForNlrHandling$ = $.$wrapBodyForNlrHandling$;
      this.$wrapBodyForNlrHandling$ = dnuCatcher("$wrapBodyForNlrHandling$");
      this._$wrapBodyNoNlrHandling$ = $.$wrapBodyNoNlrHandling$;
      this.$wrapBodyNoNlrHandling$ = dnuCatcher("$wrapBodyNoNlrHandling$");
      this.$blockLocalReturnNode$ = this._$blockLocalReturnNode$ = $.$blockLocalReturnNode$;
      this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
      this.$boolNode$ = this._$boolNode$ = $.$boolNode$;
      this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
      this.$charNode$ = this._$charNode$ = $.$charNode$;
      this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
      this.$conditionalNode$ = this._$conditionalNode$ = $.$conditionalNode$;
      this.$enclosingObjectNode$ = this._$enclosingObjectNode$ = $.$enclosingObjectNode$;
      this.$explicitOuterReceiverNode$ = this._$explicitOuterReceiverNode$ = $.$explicitOuterReceiverNode$;
      this.$implicitReceiverSendNode$ = this._$implicitReceiverSendNode$ = $.$implicitReceiverSendNode$;
      this.$inlinableAsExpressionConditionalNode$ = this._$inlinableAsExpressionConditionalNode$ = $.$inlinableAsExpressionConditionalNode$;
      this.$inlinableConditionalNode$ = this._$inlinableConditionalNode$ = $.$inlinableConditionalNode$;
      this.$inlinedOperatorNode$ = this._$inlinedOperatorNode$ = $.$inlinedOperatorNode$;
      this.$localReadNode$ = this._$localReadNode$ = $.$localReadNode$;
      this.$localWriteNode$ = this._$localWriteNode$ = $.$localWriteNode$;
      this.$loopNode$ = this._$loopNode$ = $.$loopNode$;
      this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
      this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
      this.$methodLocalReturnNode$ = this._$methodLocalReturnNode$ = $.$methodLocalReturnNode$;
      this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
      this.$nilNode$ = this._$nilNode$ = $.$nilNode$;
      this.$nonLocalReturnNode$ = this._$nonLocalReturnNode$ = $.$nonLocalReturnNode$;
      this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
      this.$ordinarySendNode$ = this._$ordinarySendNode$ = $.$ordinarySendNode$;
      this.$outerSendNode$ = this._$outerSendNode$ = $.$outerSendNode$;
      this.$parameterDeclNode$ = this._$parameterDeclNode$ = $.$parameterDeclNode$;
      this.$propertyCallNode$ = this._$propertyCallNode$ = $.$propertyCallNode$;
      this.$receiverNode$ = this._$receiverNode$ = $.$receiverNode$;
      this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
      this.$schedulerNode$ = this._$schedulerNode$ = $.$schedulerNode$;
      this.$selfSendNode$ = this._$selfSendNode$ = $.$selfSendNode$;
      this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
      this.$superSendNode$ = this._$superSendNode$ = $.$superSendNode$;
      this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
      this.$temporaryDeclNode$ = this._$temporaryDeclNode$ = $.$temporaryDeclNode$;
      this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
      this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
      this._$init$scopeStack$ = $.$init$scopeStack$;
      this.$init$scopeStack$ = dnuCatcher("$init$scopeStack$");
      this._$scopeStack = $.$scopeStack;
      this.$scopeStack = dnuCatcher("$scopeStack");
      this._$scopeStack$ = $.$scopeStack$;
      this.$scopeStack$ = dnuCatcher("$scopeStack$");
      this.$init$currentSelector$ = this._$init$currentSelector$ = $.$init$currentSelector$;
      this.$currentSelector = this._$currentSelector = $.$currentSelector;
      this.$currentSelector$ = this._$currentSelector$ = $.$currentSelector$;
      this._$init$containsNonLocalReturn$ = $.$init$containsNonLocalReturn$;
      this.$init$containsNonLocalReturn$ = dnuCatcher("$init$containsNonLocalReturn$");
      this._$containsNonLocalReturn = $.$containsNonLocalReturn;
      this.$containsNonLocalReturn = dnuCatcher("$containsNonLocalReturn");
      this._$containsNonLocalReturn$ = $.$containsNonLocalReturn$;
      this.$containsNonLocalReturn$ = dnuCatcher("$containsNonLocalReturn$");
      this._$init$methodIsPrivate$ = $.$init$methodIsPrivate$;
      this.$init$methodIsPrivate$ = dnuCatcher("$init$methodIsPrivate$");
      this._$methodIsPrivate = $.$methodIsPrivate;
      this.$methodIsPrivate = dnuCatcher("$methodIsPrivate");
      this._$methodIsPrivate$ = $.$methodIsPrivate$;
      this.$methodIsPrivate$ = dnuCatcher("$methodIsPrivate$");
      this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator = enclosingObjects;
      this.$super$Newspeak2V8Compilation$Compiler$Translator$slot = runtimeSuperclass;
      this["Newspeak2V8Compilation`Compiler`Translator"] = function () {
       superBasicNew.call(this);
       this.$scopeStack$slot = nil;
       this.$currentSelector$slot = nil;
       this.$containsNonLocalReturn$slot = nil;
       this.$methodIsPrivate$slot = nil;
      };
      this.basicNew = this["Newspeak2V8Compilation`Compiler`Translator"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Translator";
     this.slots = [];
     this.methods = [new MM("new", true, 0)];
     this.nestedClasses = [];
     this.$new = function () {
      return (new this.nonMeta.basicNew()).$instance$initializer();
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Translator";
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator = enclosingObjects;
       this.$super$Newspeak2V8Compilation$Compiler$Translator = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Newspeak2V8Compilation$Compiler$PropertyCallAST.enclosingMixin = this;
   this.$Newspeak2V8Compilation$Compiler$Rewriter.enclosingMixin = this;
   this.$Newspeak2V8Compilation$Compiler$ScopeBuilder.enclosingMixin = this;
   this.$Newspeak2V8Compilation$Compiler$Translator.enclosingMixin = this;
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`Compiler";
     this._$superInit$Newspeak2V8Compilation$Compiler = $.$superInit$Newspeak2V8Compilation$Compiler;
     this.$superInit$Newspeak2V8Compilation$Compiler = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$accessorForNestedClassNamed$in$superCall$ = $.$accessorForNestedClassNamed$in$superCall$;
     this.$accessorForNestedClassNamed$in$superCall$ = dnuCatcher("$accessorForNestedClassNamed$in$superCall$");
     this._$accessorForSuperclass$inScope$ = $.$accessorForSuperclass$inScope$;
     this.$accessorForSuperclass$inScope$ = dnuCatcher("$accessorForSuperclass$inScope$");
     this._$checkForDuplicateNames$ = $.$checkForDuplicateNames$;
     this.$checkForDuplicateNames$ = dnuCatcher("$checkForDuplicateNames$");
     this._$classNode$ = $.$classNode$;
     this.$classNode$ = dnuCatcher("$classNode$");
     this.$compileClassSource$within$ = this._$compileClassSource$within$ = $.$compileClassSource$within$;
     this.$compileExpressionSource$inMixin$ = this._$compileExpressionSource$inMixin$ = $.$compileExpressionSource$inMixin$;
     this.$compileMethodSource$within$ = this._$compileMethodSource$within$ = $.$compileMethodSource$within$;
     this._$compileNestedClasses$within$ = $.$compileNestedClasses$within$;
     this.$compileNestedClasses$within$ = dnuCatcher("$compileNestedClasses$within$");
     this._$compileNestedClassesOf$within$ = $.$compileNestedClassesOf$within$;
     this.$compileNestedClassesOf$within$ = dnuCatcher("$compileNestedClassesOf$within$");
     this._$computeMethod$inScope$ = $.$computeMethod$inScope$;
     this.$computeMethod$inScope$ = dnuCatcher("$computeMethod$inScope$");
     this._$computeMixinFrom$ = $.$computeMixinFrom$;
     this.$computeMixinFrom$ = dnuCatcher("$computeMixinFrom$");
     this._$createNestedClassAccessorFrom$within$ = $.$createNestedClassAccessorFrom$within$;
     this.$createNestedClassAccessorFrom$within$ = dnuCatcher("$createNestedClassAccessorFrom$within$");
     this._$currentScope = $.$currentScope;
     this.$currentScope = dnuCatcher("$currentScope");
     this.$dnuHandlers = this._$dnuHandlers = $.$dnuHandlers;
     this._$generateSlotAccessorsFor$ = $.$generateSlotAccessorsFor$;
     this.$generateSlotAccessorsFor$ = dnuCatcher("$generateSlotAccessorsFor$");
     this._$generateSlotGetterFor$in$ = $.$generateSlotGetterFor$in$;
     this.$generateSlotGetterFor$in$ = dnuCatcher("$generateSlotGetterFor$in$");
     this._$generateSlotInitializerFor$in$ = $.$generateSlotInitializerFor$in$;
     this.$generateSlotInitializerFor$in$ = dnuCatcher("$generateSlotInitializerFor$in$");
     this._$generateSlotSetterFor$in$ = $.$generateSlotSetterFor$in$;
     this.$generateSlotSetterFor$in$ = dnuCatcher("$generateSlotSetterFor$in$");
     this._$hereNode = $.$hereNode;
     this.$hereNode = dnuCatcher("$hereNode");
     this._$hereSendFrom$ = $.$hereSendFrom$;
     this.$hereSendFrom$ = dnuCatcher("$hereSendFrom$");
     this._$initializerFor$ = $.$initializerFor$;
     this.$initializerFor$ = dnuCatcher("$initializerFor$");
     this._$initializerSelectorForSlot$ = $.$initializerSelectorForSlot$;
     this.$initializerSelectorForSlot$ = dnuCatcher("$initializerSelectorForSlot$");
     this._$language = $.$language;
     this.$language = dnuCatcher("$language");
     this._$methodNode$ = $.$methodNode$;
     this.$methodNode$ = dnuCatcher("$methodNode$");
     this._$nestScope$ = $.$nestScope$;
     this.$nestScope$ = dnuCatcher("$nestScope$");
     this._$nestedMixinWrapperFor$in$ = $.$nestedMixinWrapperFor$in$;
     this.$nestedMixinWrapperFor$in$ = dnuCatcher("$nestedMixinWrapperFor$in$");
     this._$popScope = $.$popScope;
     this.$popScope = dnuCatcher("$popScope");
     this._$processClassSideOf$ofMixin$ = $.$processClassSideOf$ofMixin$;
     this.$processClassSideOf$ofMixin$ = dnuCatcher("$processClassSideOf$ofMixin$");
     this._$processFactoryFor$in$ = $.$processFactoryFor$in$;
     this.$processFactoryFor$in$ = dnuCatcher("$processFactoryFor$in$");
     this._$processInitializerFor$in$ = $.$processInitializerFor$in$;
     this.$processInitializerFor$in$ = dnuCatcher("$processInitializerFor$in$");
     this._$processInstanceSideOf$ofMixin$ = $.$processInstanceSideOf$ofMixin$;
     this.$processInstanceSideOf$ofMixin$ = dnuCatcher("$processInstanceSideOf$ofMixin$");
     this._$processMethod$inScope$in$ = $.$processMethod$inScope$in$;
     this.$processMethod$inScope$in$ = dnuCatcher("$processMethod$inScope$in$");
     this._$processSide$ofMixin$ = $.$processSide$ofMixin$;
     this.$processSide$ofMixin$ = dnuCatcher("$processSide$ofMixin$");
     this._$pushScope$ = $.$pushScope$;
     this.$pushScope$ = dnuCatcher("$pushScope$");
     this._$selfNode = $.$selfNode;
     this.$selfNode = dnuCatcher("$selfNode");
     this._$setInput$ = $.$setInput$;
     this.$setInput$ = dnuCatcher("$setInput$");
     this._$setScopeFor$in$ = $.$setScopeFor$in$;
     this.$setScopeFor$in$ = dnuCatcher("$setScopeFor$in$");
     this._$setterSelectorFor$ = $.$setterSelectorFor$;
     this.$setterSelectorFor$ = dnuCatcher("$setterSelectorFor$");
     this._$sourceForNode$ = $.$sourceForNode$;
     this.$sourceForNode$ = dnuCatcher("$sourceForNode$");
     this._$superConstructorCallFor$ = $.$superConstructorCallFor$;
     this.$superConstructorCallFor$ = dnuCatcher("$superConstructorCallFor$");
     this._$superConstructorMethodFor$ = $.$superConstructorMethodFor$;
     this.$superConstructorMethodFor$ = dnuCatcher("$superConstructorMethodFor$");
     this._$superConstructorNameFor$ = $.$superConstructorNameFor$;
     this.$superConstructorNameFor$ = dnuCatcher("$superConstructorNameFor$");
     this._$scopeMap = $.$scopeMap;
     this.$scopeMap = dnuCatcher("$scopeMap");
     this._$PropertyCallAST = $.$PropertyCallAST;
     this.$PropertyCallAST = dnuCatcher("$PropertyCallAST");
     this._$Rewriter = $.$Rewriter;
     this.$Rewriter = dnuCatcher("$Rewriter");
     this._$ScopeBuilder = $.$ScopeBuilder;
     this.$ScopeBuilder = dnuCatcher("$ScopeBuilder");
     this._$Translator = $.$Translator;
     this.$Translator = dnuCatcher("$Translator");
     this._$init$scopeStack$ = $.$init$scopeStack$;
     this.$init$scopeStack$ = dnuCatcher("$init$scopeStack$");
     this._$scopeStack = $.$scopeStack;
     this.$scopeStack = dnuCatcher("$scopeStack");
     this._$scopeStack$ = $.$scopeStack$;
     this.$scopeStack$ = dnuCatcher("$scopeStack$");
     this._$init$input$ = $.$init$input$;
     this.$init$input$ = dnuCatcher("$init$input$");
     this._$input = $.$input;
     this.$input = dnuCatcher("$input");
     this._$input$ = $.$input$;
     this.$input$ = dnuCatcher("$input$");
     this.$init$sentSelectors$ = this._$init$sentSelectors$ = $.$init$sentSelectors$;
     this.$sentSelectors = this._$sentSelectors = $.$sentSelectors;
     this.$sentSelectors$ = this._$sentSelectors$ = $.$sentSelectors$;
     this._$init$rewriter$ = $.$init$rewriter$;
     this.$init$rewriter$ = dnuCatcher("$init$rewriter$");
     this._$rewriter = $.$rewriter;
     this.$rewriter = dnuCatcher("$rewriter");
     this._$init$translator$ = $.$init$translator$;
     this.$init$translator$ = dnuCatcher("$init$translator$");
     this._$translator = $.$translator;
     this.$translator = dnuCatcher("$translator");
     this._$init$currentDepth$ = $.$init$currentDepth$;
     this.$init$currentDepth$ = dnuCatcher("$init$currentDepth$");
     this._$currentDepth = $.$currentDepth;
     this.$currentDepth = dnuCatcher("$currentDepth");
     this._$currentDepth$ = $.$currentDepth$;
     this.$currentDepth$ = dnuCatcher("$currentDepth$");
     this._$init$currentMixinUID$ = $.$init$currentMixinUID$;
     this.$init$currentMixinUID$ = dnuCatcher("$init$currentMixinUID$");
     this._$currentMixinUID = $.$currentMixinUID;
     this.$currentMixinUID = dnuCatcher("$currentMixinUID");
     this._$currentMixinUID$ = $.$currentMixinUID$;
     this.$currentMixinUID$ = dnuCatcher("$currentMixinUID$");
     this._$init$jsWriter$ = $.$init$jsWriter$;
     this.$init$jsWriter$ = dnuCatcher("$init$jsWriter$");
     this._$jsWriter = $.$jsWriter;
     this.$jsWriter = dnuCatcher("$jsWriter");
     this.$init$supportDoesNotUnderstand$ = this._$init$supportDoesNotUnderstand$ = $.$init$supportDoesNotUnderstand$;
     this.$supportDoesNotUnderstand = this._$supportDoesNotUnderstand = $.$supportDoesNotUnderstand;
     this.$supportDoesNotUnderstand$ = this._$supportDoesNotUnderstand$ = $.$supportDoesNotUnderstand$;
     this.$init$inlineOperators$ = this._$init$inlineOperators$ = $.$init$inlineOperators$;
     this.$inlineOperators = this._$inlineOperators = $.$inlineOperators;
     this.$inlineOperators$ = this._$inlineOperators$ = $.$inlineOperators$;
     this.$init$enableIntrinsics$ = this._$init$enableIntrinsics$ = $.$init$enableIntrinsics$;
     this.$enableIntrinsics = this._$enableIntrinsics = $.$enableIntrinsics;
     this.$enableIntrinsics$ = this._$enableIntrinsics$ = $.$enableIntrinsics$;
     this.$init$Newspeak2V8Compilation$Compiler$PropertyCallAST$ = this._$init$Newspeak2V8Compilation$Compiler$PropertyCallAST$ = $.$init$Newspeak2V8Compilation$Compiler$PropertyCallAST$;
     this.$Newspeak2V8Compilation$Compiler$PropertyCallAST = this._$Newspeak2V8Compilation$Compiler$PropertyCallAST = $.$Newspeak2V8Compilation$Compiler$PropertyCallAST;
     this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$ = this._$Newspeak2V8Compilation$Compiler$PropertyCallAST$ = $.$Newspeak2V8Compilation$Compiler$PropertyCallAST$;
     this.$init$Newspeak2V8Compilation$Compiler$Rewriter$ = this._$init$Newspeak2V8Compilation$Compiler$Rewriter$ = $.$init$Newspeak2V8Compilation$Compiler$Rewriter$;
     this.$Newspeak2V8Compilation$Compiler$Rewriter = this._$Newspeak2V8Compilation$Compiler$Rewriter = $.$Newspeak2V8Compilation$Compiler$Rewriter;
     this.$Newspeak2V8Compilation$Compiler$Rewriter$ = this._$Newspeak2V8Compilation$Compiler$Rewriter$ = $.$Newspeak2V8Compilation$Compiler$Rewriter$;
     this.$init$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = this._$init$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = $.$init$Newspeak2V8Compilation$Compiler$ScopeBuilder$;
     this.$Newspeak2V8Compilation$Compiler$ScopeBuilder = this._$Newspeak2V8Compilation$Compiler$ScopeBuilder = $.$Newspeak2V8Compilation$Compiler$ScopeBuilder;
     this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = this._$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = $.$Newspeak2V8Compilation$Compiler$ScopeBuilder$;
     this.$init$Newspeak2V8Compilation$Compiler$Translator$ = this._$init$Newspeak2V8Compilation$Compiler$Translator$ = $.$init$Newspeak2V8Compilation$Compiler$Translator$;
     this.$Newspeak2V8Compilation$Compiler$Translator = this._$Newspeak2V8Compilation$Compiler$Translator = $.$Newspeak2V8Compilation$Compiler$Translator;
     this.$Newspeak2V8Compilation$Compiler$Translator$ = this._$Newspeak2V8Compilation$Compiler$Translator$ = $.$Newspeak2V8Compilation$Compiler$Translator$;
     this.$enclosingObjects$Newspeak2V8Compilation$Compiler = enclosingObjects;
     this.$super$Newspeak2V8Compilation$Compiler$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`Compiler"] = function () {
      superBasicNew.call(this);
      this.$scopeStack$slot = nil;
      this.$input$slot = nil;
      this.$sentSelectors$slot = nil;
      this.$rewriter$slot = nil;
      this.$translator$slot = nil;
      this.$currentDepth$slot = nil;
      this.$currentMixinUID$slot = nil;
      this.$jsWriter$slot = nil;
      this.$supportDoesNotUnderstand$slot = nil;
      this.$inlineOperators$slot = nil;
      this.$enableIntrinsics$slot = nil;
      this.$Newspeak2V8Compilation$Compiler$PropertyCallAST$slot = nil;
      this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = nil;
      this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = nil;
      this.$Newspeak2V8Compilation$Compiler$Translator$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`Compiler"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Newspeak2V8Compilation$Compiler = enclosingObjects;
      this.$super$Newspeak2V8Compilation$Compiler = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$IntermediateClassDeclaration = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`IntermediateClassDeclaration";
   this.name = "Newspeak2V8Compilation`IntermediateClassDeclaration";
   this.header = 2492;
   this.slots = [
    new SM("qualifiedName", true, false),
    new SM("headerSource", true, false),
    new SM("factoryName", true, false),
    new SM("instanceSide", false, false),
    new SM("classSide", false, false),
    new SM("depth", true, false),
    new SM("accessModifier", true, false)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`IntermediateClassDeclaration", true, 2493),
    new MM("instance`initializer", true, 2494),
    new MM("basicNew", false, 2495),
    new MM("basicNewMeta", false, 2496),
    new MM("classMethodsMetadata", false, 2497),
    new MM("copyMethods:", false, 2498),
    new MM("dnuCatcherFor:", false, 2499),
    new MM("encodeSource:", false, 2500),
    new MM("invoke", false, 2501),
    new MM("invokeMeta", false, 2502),
    new MM("makeMixin:", false, 2503),
    new MM("methodsMetadata", false, 2504),
    new MM("nestedClassesMetadata", false, 2505),
    new MM("printOn:", false, 2506),
    new MM("runtimeMetamixin", false, 2507),
    new MM("runtimeMixin", false, 2508),
    new MM("slotsMetadata", false, 2509),
    new MM("init`qualifiedName:", true, 0),
    new MM("qualifiedName", true, 0),
    new MM("qualifiedName:", true, 0),
    new MM("init`headerSource:", true, 0),
    new MM("headerSource", true, 0),
    new MM("headerSource:", true, 0),
    new MM("init`factoryName:", true, 0),
    new MM("factoryName", true, 0),
    new MM("factoryName:", true, 0),
    new MM("init`instanceSide:", true, 0),
    new MM("instanceSide", true, 0),
    new MM("init`classSide:", true, 0),
    new MM("classSide", true, 0),
    new MM("init`depth:", true, 0),
    new MM("depth", true, 0),
    new MM("depth:", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("accessModifier:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration = function () {
    var self = this;
    self.$super$Newspeak2V8Compilation$IntermediateClassDeclaration$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration();
    self._$init$instanceSide$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$IntermediateMixin().$for$isMeta$(self, false));
    self._$init$classSide$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$IntermediateMixin().$for$isMeta$(self, true));
    return self;
   };
   this.$basicNew = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("superBasicNew.call"), [self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this")])].$$comma(self._$instanceSide().$slots().$collect$(function ($s) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$mangleSlot$($s.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("nil"));
    }))));
   };
   this.$basicNewMeta = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("superBasicNew.call"), [self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this")])]));
   };
   this.$classMethodsMetadata = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$(self._$classSide().$methods().$collect$(function ($method) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("MM"), [
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($method.$name()),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($method.$isSynthetic()),
      self._$encodeSource$($method.$source())
     ]);
    }));
   };
   this.$copyMethods$ = function ($methods) {
    var self = this;
    var $stmts = nil;
    $stmts = self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$OrderedCollection().$new();
    $methods.$do$(function ($m) {
     var $assignProtected = nil;
     $assignProtected = self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$mangleProtected$($m.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("$"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name()))));
     if ($m.$isPublic()) {
      $stmts.$add$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name()))), $assignProtected));
     } else {
      nil;
     };
     if ($m.$isProtected()) {
      $stmts.$add$($assignProtected);
      $stmts.$add$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name()))), self._$dnuCatcherFor$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name()))));
     } else {
      nil;
     };
     return $m.$name().$$equal("doesNotUnderstand:").$ifTrue$(function () {
      return $stmts.$add$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$privateDnu())), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("$"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name())))));
     });
    });
    return $stmts;
   };
   this.$dnuCatcherFor$ = function ($publicMangling) {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("dnuCatcher"), [self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($publicMangling)]);
   };
   this.$encodeSource$ = function ($source) {
    var self = this;
    if ($source.$isNil()) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(0);
    } else {
     nil;
    };
    self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$sourcesList().$add$($source);
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$sourcesList().$size());
   };
   this.$invoke = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$functionOf$body$([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("runtimeSuperclass"),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("enclosingObjects")
    ], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$function$of$body$("constructRuntimeClass", [self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("superBasicNew")], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("Runtime class for ".$$comma(self._$qualifiedName())))].$$comma(self._$copyMethods$(self._$instanceSide().$methods())).$$comma([
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$("enclosingObjects`".$$comma(self._$qualifiedName())))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("enclosingObjects")),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$mangleSlot$("super`".$$comma(self._$qualifiedName())))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("runtimeSuperclass")),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self._$qualifiedName())), self._$basicNew()),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("basicNew")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self._$qualifiedName()))),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("this.basicNew.prototype = this"),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("this.meta = null"),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("this.newspeakClass = null")
     ]))),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("constructRuntimeClass.prototype = runtimeSuperclass"),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("return new constructRuntimeClass(runtimeSuperclass.basicNew)")
    ]));
   };
   this.$invokeMeta = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$functionOf$body$([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("runtimeSuperclass"),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("enclosingObjects")
    ], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$function$of$body$("constructRuntimeClass", [self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("superBasicNew")], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("Runtime meta class for ".$$comma(self._$qualifiedName())))].$$comma(self._$copyMethods$(self._$classSide().$methods())).$$comma([
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$("enclosingObjects`".$$comma(self._$qualifiedName())))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("enclosingObjects")),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$("super`".$$comma(self._$qualifiedName())))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("runtimeSuperclass")),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("basicNew")), self._$basicNewMeta()),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("this.basicNew.prototype = this"),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("nonMeta")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("null")),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("this.newspeakClass = null")
     ]))),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("constructRuntimeClass.prototype = runtimeSuperclass"),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$verbatim$("return new constructRuntimeClass(runtimeSuperclass.basicNew)")
    ]));
   };
   this.$makeMixin$ = function ($rm) {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("Mixin"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("fromRuntimeMixin")), [$rm]);
   };
   this.$methodsMetadata = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$(self._$instanceSide().$methods().$collect$(function ($method) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("MM"), [
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($method.$name()),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($method.$isSynthetic()),
      self._$encodeSource$($method.$source())
     ]);
    }));
   };
   this.$nestedClassesMetadata = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$(self._$instanceSide().$nestedClasses().$collect$(function ($nc) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($nc.$qualifiedName());
    }));
   };
   this.$printOn$ = function ($stm) {
    var self = this;
    $stm.$nextPutAll$("ClassDeclarationIR:");
    $stm.$nextPutAll$(self._$qualifiedName());
    return self;
   };
   this.$runtimeMetamixin = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("meta")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$var$value$("$", self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this")),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("Runtime meta mixin for ".$$comma(self._$qualifiedName()))),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("slots")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$([])),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("methods")), self._$classMethodsMetadata()),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("nestedClasses")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$([]))
    ].$$comma(self._$classSide().$methods().$collect$(function ($m) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name()))), $m.$function());
    })).$$comma([self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("invoke")), self._$invokeMeta())]))), []));
   };
   this.$runtimeMixin = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$block$([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$var$value$("$", self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this")),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$var$value$("$".$$comma(self._$depth().$printString()), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this")),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("Runtime mixin for ".$$comma(self._$qualifiedName()))),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("name")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self._$qualifiedName())),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("header")), self._$encodeSource$(self._$headerSource())),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("slots")), self._$slotsMetadata()),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("methods")), self._$methodsMetadata()),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("nestedClasses")), self._$nestedClassesMetadata()),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("applications")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$([]))
    ].$$comma(self._$instanceSide().$methods().$collect$(function ($m) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($m.$name()))), $m.$function());
    })).$$comma(self._$instanceSide().$nestedClasses().$collect$(function ($ncd) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($ncd.$qualifiedName()))), $ncd.$runtimeMixin());
    })).$$comma(self._$instanceSide().$nestedClasses().$collect$(function ($ncd) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$names().$manglePublic$($ncd.$qualifiedName()))), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("enclosingMixin")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"));
    })).$$comma([
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("invoke")), self._$invoke()),
     self._$runtimeMetamixin(),
     self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("meta")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$("nonMeta")), self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("this"))
    ]))), []);
   };
   this.$slotsMetadata = function () {
    var self = this;
    return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$array$(self._$instanceSide().$slots().$collect$(function ($slot) {
     return self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$ident$("SM"), [
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($slot.$name()),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($slot.$isMutable()),
      self.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration[0]._$js().$literal$($slot.$isSynthetic())
     ]);
    }));
   };
   this.$init$qualifiedName$ = function (v) {
    this.$qualifiedName$slot = v;
    return this;
   };
   this.$qualifiedName = function () {
    return this.$qualifiedName$slot;
   };
   this.$qualifiedName$ = function (v) {
    this.$qualifiedName$slot = v;
    return this;
   };
   this.$init$headerSource$ = function (v) {
    this.$headerSource$slot = v;
    return this;
   };
   this.$headerSource = function () {
    return this.$headerSource$slot;
   };
   this.$headerSource$ = function (v) {
    this.$headerSource$slot = v;
    return this;
   };
   this.$init$factoryName$ = function (v) {
    this.$factoryName$slot = v;
    return this;
   };
   this.$factoryName = function () {
    return this.$factoryName$slot;
   };
   this.$factoryName$ = function (v) {
    this.$factoryName$slot = v;
    return this;
   };
   this.$init$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$instanceSide = function () {
    return this.$instanceSide$slot;
   };
   this.$init$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.$classSide = function () {
    return this.$classSide$slot;
   };
   this.$init$depth$ = function (v) {
    this.$depth$slot = v;
    return this;
   };
   this.$depth = function () {
    return this.$depth$slot;
   };
   this.$depth$ = function (v) {
    this.$depth$slot = v;
    return this;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`IntermediateClassDeclaration";
     this._$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration = $.$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration;
     this.$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration = dnuCatcher("$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$basicNew = $.$basicNew;
     this.$basicNew = dnuCatcher("$basicNew");
     this._$basicNewMeta = $.$basicNewMeta;
     this.$basicNewMeta = dnuCatcher("$basicNewMeta");
     this._$classMethodsMetadata = $.$classMethodsMetadata;
     this.$classMethodsMetadata = dnuCatcher("$classMethodsMetadata");
     this._$copyMethods$ = $.$copyMethods$;
     this.$copyMethods$ = dnuCatcher("$copyMethods$");
     this._$dnuCatcherFor$ = $.$dnuCatcherFor$;
     this.$dnuCatcherFor$ = dnuCatcher("$dnuCatcherFor$");
     this._$encodeSource$ = $.$encodeSource$;
     this.$encodeSource$ = dnuCatcher("$encodeSource$");
     this._$invoke = $.$invoke;
     this.$invoke = dnuCatcher("$invoke");
     this._$invokeMeta = $.$invokeMeta;
     this.$invokeMeta = dnuCatcher("$invokeMeta");
     this._$makeMixin$ = $.$makeMixin$;
     this.$makeMixin$ = dnuCatcher("$makeMixin$");
     this._$methodsMetadata = $.$methodsMetadata;
     this.$methodsMetadata = dnuCatcher("$methodsMetadata");
     this._$nestedClassesMetadata = $.$nestedClassesMetadata;
     this.$nestedClassesMetadata = dnuCatcher("$nestedClassesMetadata");
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$runtimeMetamixin = $.$runtimeMetamixin;
     this.$runtimeMetamixin = dnuCatcher("$runtimeMetamixin");
     this.$runtimeMixin = this._$runtimeMixin = $.$runtimeMixin;
     this._$slotsMetadata = $.$slotsMetadata;
     this.$slotsMetadata = dnuCatcher("$slotsMetadata");
     this.$init$qualifiedName$ = this._$init$qualifiedName$ = $.$init$qualifiedName$;
     this.$qualifiedName = this._$qualifiedName = $.$qualifiedName;
     this.$qualifiedName$ = this._$qualifiedName$ = $.$qualifiedName$;
     this.$init$headerSource$ = this._$init$headerSource$ = $.$init$headerSource$;
     this.$headerSource = this._$headerSource = $.$headerSource;
     this.$headerSource$ = this._$headerSource$ = $.$headerSource$;
     this.$init$factoryName$ = this._$init$factoryName$ = $.$init$factoryName$;
     this.$factoryName = this._$factoryName = $.$factoryName;
     this.$factoryName$ = this._$factoryName$ = $.$factoryName$;
     this.$init$instanceSide$ = this._$init$instanceSide$ = $.$init$instanceSide$;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$init$classSide$ = this._$init$classSide$ = $.$init$classSide$;
     this.$classSide = this._$classSide = $.$classSide;
     this.$init$depth$ = this._$init$depth$ = $.$init$depth$;
     this.$depth = this._$depth = $.$depth;
     this.$depth$ = this._$depth$ = $.$depth$;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
     this.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration = enclosingObjects;
     this.$super$Newspeak2V8Compilation$IntermediateClassDeclaration$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`IntermediateClassDeclaration"] = function () {
      superBasicNew.call(this);
      this.$qualifiedName$slot = nil;
      this.$headerSource$slot = nil;
      this.$factoryName$slot = nil;
      this.$instanceSide$slot = nil;
      this.$classSide$slot = nil;
      this.$depth$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`IntermediateClassDeclaration"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`IntermediateClassDeclaration";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`IntermediateClassDeclaration";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Newspeak2V8Compilation$IntermediateClassDeclaration = enclosingObjects;
      this.$super$Newspeak2V8Compilation$IntermediateClassDeclaration = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$IntermediateMethod = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`IntermediateMethod";
   this.name = "Newspeak2V8Compilation`IntermediateMethod";
   this.header = 2510;
   this.slots = [
    new SM("name", false, false),
    new SM("function", false, false),
    new SM("source", false, false),
    new SM("isSynthetic", true, false),
    new SM("isFactory", true, false),
    new SM("accessModifier", false, false)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`IntermediateMethod", true, 2511),
    new MM("instance`initializer", true, 2512),
    new MM("isPrivate", false, 2513),
    new MM("isProtected", false, 2514),
    new MM("isPublic", false, 2515),
    new MM("printOn:", false, 2516),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`function:", true, 0),
    new MM("function", true, 0),
    new MM("init`source:", true, 0),
    new MM("source", true, 0),
    new MM("init`isSynthetic:", true, 0),
    new MM("isSynthetic", true, 0),
    new MM("isSynthetic:", true, 0),
    new MM("init`isFactory:", true, 0),
    new MM("isFactory", true, 0),
    new MM("isFactory:", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$IntermediateMethod = function ($n, $am, $f, $s) {
    var self = this;
    self.$super$Newspeak2V8Compilation$IntermediateMethod$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n, $am, $f, $s) {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$IntermediateMethod($n, $am, $f, $s);
    self._$init$name$($n);
    self._$init$function$($f);
    self._$init$source$($s);
    self._$init$isSynthetic$(false);
    self._$init$isFactory$(false);
    self._$init$accessModifier$($am);
    self.$enclosingObjects$Newspeak2V8Compilation$IntermediateMethod[0]._$assert$(function () {
     return $n.$includes$("$").$not();
    });
    if ($am.$isNil()) {
     self._$halt();
    } else {
     nil;
    };
    return self;
   };
   this.$isPrivate = function () {
    var self = this;
    return "private".$$equal(self._$accessModifier());
   };
   this.$isProtected = function () {
    var self = this;
    return "protected".$$equal(self._$accessModifier());
   };
   this.$isPublic = function () {
    var self = this;
    return "public".$$equal(self._$accessModifier());
   };
   this.$printOn$ = function ($stm) {
    var self = this;
    $stm.$nextPutAll$("MethodIR:");
    $stm.$nextPutAll$(self._$name());
    return self;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$function$ = function (v) {
    this.$function$slot = v;
    return this;
   };
   this.$function = function () {
    return this.$function$slot;
   };
   this.$init$source$ = function (v) {
    this.$source$slot = v;
    return this;
   };
   this.$source = function () {
    return this.$source$slot;
   };
   this.$init$isSynthetic$ = function (v) {
    this.$isSynthetic$slot = v;
    return this;
   };
   this.$isSynthetic = function () {
    return this.$isSynthetic$slot;
   };
   this.$isSynthetic$ = function (v) {
    this.$isSynthetic$slot = v;
    return this;
   };
   this.$init$isFactory$ = function (v) {
    this.$isFactory$slot = v;
    return this;
   };
   this.$isFactory = function () {
    return this.$isFactory$slot;
   };
   this.$isFactory$ = function (v) {
    this.$isFactory$slot = v;
    return this;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`IntermediateMethod";
     this._$superInit$Newspeak2V8Compilation$IntermediateMethod = $.$superInit$Newspeak2V8Compilation$IntermediateMethod;
     this.$superInit$Newspeak2V8Compilation$IntermediateMethod = dnuCatcher("$superInit$Newspeak2V8Compilation$IntermediateMethod");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isPrivate = this._$isPrivate = $.$isPrivate;
     this.$isProtected = this._$isProtected = $.$isProtected;
     this.$isPublic = this._$isPublic = $.$isPublic;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$function$ = this._$init$function$ = $.$init$function$;
     this.$function = this._$function = $.$function;
     this.$init$source$ = this._$init$source$ = $.$init$source$;
     this.$source = this._$source = $.$source;
     this.$init$isSynthetic$ = this._$init$isSynthetic$ = $.$init$isSynthetic$;
     this.$isSynthetic = this._$isSynthetic = $.$isSynthetic;
     this.$isSynthetic$ = this._$isSynthetic$ = $.$isSynthetic$;
     this.$init$isFactory$ = this._$init$isFactory$ = $.$init$isFactory$;
     this.$isFactory = this._$isFactory = $.$isFactory;
     this.$isFactory$ = this._$isFactory$ = $.$isFactory$;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$enclosingObjects$Newspeak2V8Compilation$IntermediateMethod = enclosingObjects;
     this.$super$Newspeak2V8Compilation$IntermediateMethod$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`IntermediateMethod"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$function$slot = nil;
      this.$source$slot = nil;
      this.$isSynthetic$slot = nil;
      this.$isFactory$slot = nil;
      this.$accessModifier$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`IntermediateMethod"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`IntermediateMethod";
    this.slots = [];
    this.methods = [new MM("named:accessModifier:function:source:", true, 0)];
    this.nestedClasses = [];
    this.$named$accessModifier$function$source$ = function ($n, $am, $f, $s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($n, $am, $f, $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`IntermediateMethod";
      this.$named$accessModifier$function$source$ = this._$named$accessModifier$function$source$ = $.$named$accessModifier$function$source$;
      this.$enclosingObjects$Newspeak2V8Compilation$IntermediateMethod = enclosingObjects;
      this.$super$Newspeak2V8Compilation$IntermediateMethod = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$IntermediateMixin = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`IntermediateMixin";
   this.name = "Newspeak2V8Compilation`IntermediateMixin";
   this.header = 2517;
   this.slots = [
    new SM("declaration", false, false),
    new SM("isMeta", false, false),
    new SM("slots", false, false),
    new SM("methods", false, false),
    new SM("nestedClasses", false, false)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`IntermediateMixin", true, 2518),
    new MM("instance`initializer", true, 2519),
    new MM("qualifiedName", false, 2520),
    new MM("init`declaration:", true, 0),
    new MM("declaration", true, 0),
    new MM("init`isMeta:", true, 0),
    new MM("isMeta", true, 0),
    new MM("init`slots:", true, 0),
    new MM("slots", true, 0),
    new MM("init`methods:", true, 0),
    new MM("methods", true, 0),
    new MM("init`nestedClasses:", true, 0),
    new MM("nestedClasses", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$IntermediateMixin = function ($d, $m) {
    var self = this;
    self.$super$Newspeak2V8Compilation$IntermediateMixin$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($d, $m) {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$IntermediateMixin($d, $m);
    self._$init$declaration$($d);
    self._$init$isMeta$($m);
    self._$init$slots$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateMixin[0]._$OrderedCollection().$new());
    self._$init$methods$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateMixin[0]._$OrderedCollection().$new());
    self._$init$nestedClasses$(self.$enclosingObjects$Newspeak2V8Compilation$IntermediateMixin[0]._$OrderedCollection().$new());
    return self;
   };
   this.$qualifiedName = function () {
    var self = this;
    return self._$declaration().$qualifiedName();
   };
   this.$init$declaration$ = function (v) {
    this.$declaration$slot = v;
    return this;
   };
   this.$declaration = function () {
    return this.$declaration$slot;
   };
   this.$init$isMeta$ = function (v) {
    this.$isMeta$slot = v;
    return this;
   };
   this.$isMeta = function () {
    return this.$isMeta$slot;
   };
   this.$init$slots$ = function (v) {
    this.$slots$slot = v;
    return this;
   };
   this.$slots = function () {
    return this.$slots$slot;
   };
   this.$init$methods$ = function (v) {
    this.$methods$slot = v;
    return this;
   };
   this.$methods = function () {
    return this.$methods$slot;
   };
   this.$init$nestedClasses$ = function (v) {
    this.$nestedClasses$slot = v;
    return this;
   };
   this.$nestedClasses = function () {
    return this.$nestedClasses$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`IntermediateMixin";
     this._$superInit$Newspeak2V8Compilation$IntermediateMixin = $.$superInit$Newspeak2V8Compilation$IntermediateMixin;
     this.$superInit$Newspeak2V8Compilation$IntermediateMixin = dnuCatcher("$superInit$Newspeak2V8Compilation$IntermediateMixin");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$qualifiedName = this._$qualifiedName = $.$qualifiedName;
     this.$init$declaration$ = this._$init$declaration$ = $.$init$declaration$;
     this.$declaration = this._$declaration = $.$declaration;
     this.$init$isMeta$ = this._$init$isMeta$ = $.$init$isMeta$;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$init$slots$ = this._$init$slots$ = $.$init$slots$;
     this.$slots = this._$slots = $.$slots;
     this.$init$methods$ = this._$init$methods$ = $.$init$methods$;
     this.$methods = this._$methods = $.$methods;
     this.$init$nestedClasses$ = this._$init$nestedClasses$ = $.$init$nestedClasses$;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$enclosingObjects$Newspeak2V8Compilation$IntermediateMixin = enclosingObjects;
     this.$super$Newspeak2V8Compilation$IntermediateMixin$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`IntermediateMixin"] = function () {
      superBasicNew.call(this);
      this.$declaration$slot = nil;
      this.$isMeta$slot = nil;
      this.$slots$slot = nil;
      this.$methods$slot = nil;
      this.$nestedClasses$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`IntermediateMixin"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`IntermediateMixin";
    this.slots = [];
    this.methods = [new MM("for:isMeta:", true, 0)];
    this.nestedClasses = [];
    this.$for$isMeta$ = function ($d, $m) {
     return (new this.nonMeta.basicNew()).$instance$initializer($d, $m);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`IntermediateMixin";
      this.$for$isMeta$ = this._$for$isMeta$ = $.$for$isMeta$;
      this.$enclosingObjects$Newspeak2V8Compilation$IntermediateMixin = enclosingObjects;
      this.$super$Newspeak2V8Compilation$IntermediateMixin = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$IntermediateSlotDeclaration = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`IntermediateSlotDeclaration";
   this.name = "Newspeak2V8Compilation`IntermediateSlotDeclaration";
   this.header = 2521;
   this.slots = [
    new SM("name", false, false),
    new SM("isMutable", false, false),
    new SM("accessModifier", false, false),
    new SM("isSynthetic", true, false)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`IntermediateSlotDeclaration", true, 2522),
    new MM("instance`initializer", true, 2523),
    new MM("printOn:", false, 2524),
    new MM("init`name:", true, 0),
    new MM("name", true, 0),
    new MM("init`isMutable:", true, 0),
    new MM("isMutable", true, 0),
    new MM("init`accessModifier:", true, 0),
    new MM("accessModifier", true, 0),
    new MM("init`isSynthetic:", true, 0),
    new MM("isSynthetic", true, 0),
    new MM("isSynthetic:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration = function ($n, $m, $am) {
    var self = this;
    self.$super$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n, $m, $am) {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration($n, $m, $am);
    self._$init$name$($n);
    self._$init$isMutable$($m);
    self._$init$accessModifier$($am);
    self._$init$isSynthetic$(false);
    return self;
   };
   this.$printOn$ = function ($stm) {
    var self = this;
    $stm.$nextPutAll$("SlotIR:");
    $stm.$nextPutAll$(self._$name());
    return self;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$isMutable$ = function (v) {
    this.$isMutable$slot = v;
    return this;
   };
   this.$isMutable = function () {
    return this.$isMutable$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$init$isSynthetic$ = function (v) {
    this.$isSynthetic$slot = v;
    return this;
   };
   this.$isSynthetic = function () {
    return this.$isSynthetic$slot;
   };
   this.$isSynthetic$ = function (v) {
    this.$isSynthetic$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`IntermediateSlotDeclaration";
     this._$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration = $.$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration;
     this.$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration = dnuCatcher("$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$isMutable$ = this._$init$isMutable$ = $.$init$isMutable$;
     this.$isMutable = this._$isMutable = $.$isMutable;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$init$isSynthetic$ = this._$init$isSynthetic$ = $.$init$isSynthetic$;
     this.$isSynthetic = this._$isSynthetic = $.$isSynthetic;
     this.$isSynthetic$ = this._$isSynthetic$ = $.$isSynthetic$;
     this.$enclosingObjects$Newspeak2V8Compilation$IntermediateSlotDeclaration = enclosingObjects;
     this.$super$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`IntermediateSlotDeclaration"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$isMutable$slot = nil;
      this.$accessModifier$slot = nil;
      this.$isSynthetic$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`IntermediateSlotDeclaration"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`IntermediateSlotDeclaration";
    this.slots = [];
    this.methods = [new MM("named:mutable:accessModifier:", true, 0)];
    this.nestedClasses = [];
    this.$named$mutable$accessModifier$ = function ($n, $m, $am) {
     return (new this.nonMeta.basicNew()).$instance$initializer($n, $m, $am);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`IntermediateSlotDeclaration";
      this.$named$mutable$accessModifier$ = this._$named$mutable$accessModifier$ = $.$named$mutable$accessModifier$;
      this.$enclosingObjects$Newspeak2V8Compilation$IntermediateSlotDeclaration = enclosingObjects;
      this.$super$Newspeak2V8Compilation$IntermediateSlotDeclaration = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$NameMangler = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`NameMangler";
   this.name = "Newspeak2V8Compilation`NameMangler";
   this.header = 2525;
   this.slots = [new SM("specialCharacterManglings", false, false)];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`NameMangler", true, 2526),
    new MM("instance`initializer", true, 2527),
    new MM("_mangleSelector:", false, 2528),
    new MM("fullyQualifiedNameToSimple:", false, 2529),
    new MM("fullyQualifySimpleName:with:", false, 2530),
    new MM("mangleLocal:", false, 2531),
    new MM("mangleProtected:", false, 2532),
    new MM("manglePublic:", false, 2533),
    new MM("mangleSlot:", false, 2534),
    new MM("mangleSynthetic:", false, 2535),
    new MM("privateDnu", false, 2536),
    new MM("init`specialCharacterManglings:", true, 0),
    new MM("specialCharacterManglings", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$NameMangler = function () {
    var self = this;
    self.$super$Newspeak2V8Compilation$NameMangler$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$NameMangler();
    $1.$init$specialCharacterManglings$(self, self.$enclosingObjects$Newspeak2V8Compilation$NameMangler[0]._$Dictionary().$new());
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("+", "$plus");
     cascadeReceiver.$at$put$("-", "$minus");
     cascadeReceiver.$at$put$("*", "$times");
     cascadeReceiver.$at$put$("/", "$over");
     cascadeReceiver.$at$put$("\\", "$back");
     cascadeReceiver.$at$put$("<", "$less");
     cascadeReceiver.$at$put$(">", "$greater");
     cascadeReceiver.$at$put$("~", "$tilde");
     cascadeReceiver.$at$put$("=", "$equal");
     cascadeReceiver.$at$put$("@", "$at");
     cascadeReceiver.$at$put$("%", "$percent");
     cascadeReceiver.$at$put$("|", "$pipe");
     cascadeReceiver.$at$put$("&", "$amp");
     cascadeReceiver.$at$put$("?", "$question");
     cascadeReceiver.$at$put$("!", "$bang");
     return cascadeReceiver.$at$put$(",", "$comma");
    })($1.$specialCharacterManglings(self));
    return self;
   };
   this.$_mangleSelector$ = function ($selector) {
    var self = this;
    if ("+-*/\\<>~=@%|&?!,".$includes$($selector.$first())) {
     return $selector.$inject$into$("$", function ($accum, $next) {
      return $accum.$$comma($1.$specialCharacterManglings(self).$at$($next));
     }).$asSymbol();
    } else {
     nil;
    };
    return "$".$$comma($selector).$replaceAll$with$(":", "$").$replaceAll$with$("`", "$").$replaceAll$with$(".", "$");
   };
   this.$fullyQualifiedNameToSimple$ = function ($fullName) {
    var self = this;
    var $parts = nil;
    $parts = self.$enclosingObjects$Newspeak2V8Compilation$NameMangler[0]._$splitFullyQualifiedName$($fullName);
    return $parts.$last().$asSymbol();
   };
   this.$fullyQualifySimpleName$with$ = function ($simpleName, $fullyQualifiedPackage) {
    var self = this;
    return $fullyQualifiedPackage.$asString().$$comma(self.$enclosingObjects$Newspeak2V8Compilation$NameMangler[0]._$syntheticNameSeparator()).$$comma($simpleName).$asSymbol();
   };
   this.$mangleLocal$ = function ($selector) {
    var self = this;
    return self._$_mangleSelector$($selector);
   };
   this.$mangleProtected$ = function ($selector) {
    var self = this;
    return "_".$$comma(self._$_mangleSelector$($selector));
   };
   this.$manglePublic$ = function ($selector) {
    var self = this;
    return self._$_mangleSelector$($selector);
   };
   this.$mangleSlot$ = function ($selector) {
    var self = this;
    return self._$_mangleSelector$($selector).$$comma("$slot");
   };
   this.$mangleSynthetic$ = function ($selector) {
    var self = this;
    return self._$_mangleSelector$($selector);
   };
   this.$privateDnu = function () {
    var self = this;
    return "dnu";
   };
   this.$init$specialCharacterManglings$ = function (self, v) {
    self.$specialCharacterManglings$slot = v;
    return self;
   };
   this.$specialCharacterManglings = function (self) {
    return self.$specialCharacterManglings$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`NameMangler";
     this._$superInit$Newspeak2V8Compilation$NameMangler = $.$superInit$Newspeak2V8Compilation$NameMangler;
     this.$superInit$Newspeak2V8Compilation$NameMangler = dnuCatcher("$superInit$Newspeak2V8Compilation$NameMangler");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$_mangleSelector$ = $.$_mangleSelector$;
     this.$_mangleSelector$ = dnuCatcher("$_mangleSelector$");
     this.$fullyQualifiedNameToSimple$ = this._$fullyQualifiedNameToSimple$ = $.$fullyQualifiedNameToSimple$;
     this.$fullyQualifySimpleName$with$ = this._$fullyQualifySimpleName$with$ = $.$fullyQualifySimpleName$with$;
     this.$mangleLocal$ = this._$mangleLocal$ = $.$mangleLocal$;
     this.$mangleProtected$ = this._$mangleProtected$ = $.$mangleProtected$;
     this.$manglePublic$ = this._$manglePublic$ = $.$manglePublic$;
     this.$mangleSlot$ = this._$mangleSlot$ = $.$mangleSlot$;
     this.$mangleSynthetic$ = this._$mangleSynthetic$ = $.$mangleSynthetic$;
     this.$privateDnu = this._$privateDnu = $.$privateDnu;
     this.$enclosingObjects$Newspeak2V8Compilation$NameMangler = enclosingObjects;
     this.$super$Newspeak2V8Compilation$NameMangler$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`NameMangler"] = function () {
      superBasicNew.call(this);
      this.$specialCharacterManglings$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`NameMangler"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`NameMangler";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`NameMangler";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Newspeak2V8Compilation$NameMangler = enclosingObjects;
      this.$super$Newspeak2V8Compilation$NameMangler = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$ProgramBuilder = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Newspeak2V8Compilation`ProgramBuilder";
   this.name = "Newspeak2V8Compilation`ProgramBuilder";
   this.header = 2537;
   this.slots = [
    new SM("compiler", false, false),
    new SM("mixins", false, false),
    new SM("sentSelectors", false, false),
    new SM("runtimeConfiguration", true, false),
    new SM("applicationConfiguration", true, false),
    new SM("resources", false, false)
   ];
   this.methods = [
    new MM("superInit`Newspeak2V8Compilation`ProgramBuilder", true, 2538),
    new MM("instance`initializer", true, 2539),
    new MM("addImageResource:under:", false, 2540),
    new MM("addStringResource:under:", false, 2541),
    new MM("applicationSources:", false, 2542),
    new MM("compileSource:enableIntrinsics:", false, 2543),
    new MM("main", false, 2544),
    new MM("namespace", false, 2545),
    new MM("outputSourcesTo:", false, 2546),
    new MM("outputTo:", false, 2547),
    new MM("runtimeMixinNamespace", false, 2548),
    new MM("runtimeSources:", false, 2549),
    new MM("script", false, 2550),
    new MM("sourcesScript", false, 2551),
    new MM("vmmirror", false, 2552),
    new MM("init`compiler:", true, 0),
    new MM("compiler", true, 0),
    new MM("init`mixins:", true, 0),
    new MM("mixins", true, 0),
    new MM("init`sentSelectors:", true, 0),
    new MM("sentSelectors", true, 0),
    new MM("init`runtimeConfiguration:", true, 0),
    new MM("runtimeConfiguration", true, 0),
    new MM("runtimeConfiguration:", true, 0),
    new MM("init`applicationConfiguration:", true, 0),
    new MM("applicationConfiguration", true, 0),
    new MM("applicationConfiguration:", true, 0),
    new MM("init`resources:", true, 0),
    new MM("resources", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Newspeak2V8Compilation$ProgramBuilder = function () {
    var self = this;
    self.$super$Newspeak2V8Compilation$ProgramBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$Newspeak2V8Compilation$ProgramBuilder();
    $1.$init$compiler$(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$Compiler().$new());
    $1.$init$mixins$(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$OrderedCollection().$new());
    $1.$init$sentSelectors$(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$Set().$new());
    $1.$init$resources$(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$OrderedCollection().$new());
    return self;
   };
   this.$addImageResource$under$ = function ($relativeUrl, $name) {
    var self = this;
    var $r = nil;
    var $i = nil;
    $i = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("vmmirror.kernel.$Future().$computing$(\r		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(\r			function(){ var i = new Image(); i.src =\"".$$comma($relativeUrl).$$comma("\"; return i;}() );})"));
    $r = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($name))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$return$($i)])));
    $1.$resources(self).$add$($r);
    return self;
   };
   this.$addStringResource$under$ = function ($string, $name) {
    var self = this;
    var $r = nil;
    $r = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($name))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$($string))])));
    $1.$resources(self).$add$($r);
    return self;
   };
   this.$applicationSources$ = function ($sources) {
    var self = this;
    var $results = nil;
    $results = $sources.$collect$(function ($source) {
     return self._$compileSource$enableIntrinsics$($source, false);
    });
    $1.$applicationConfiguration$(self, $results.$first());
    return self;
   };
   this.$compileSource$enableIntrinsics$ = function ($source, $flag) {
    var self = this;
    var $compilation = nil;
    $compilation = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$cachedCompilations().$at$ifAbsentPut$([
     $source,
     $flag
    ], function () {
     var $newCompilation = nil;
     $newCompilation = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$CachedCompilation().$new();
     $newCompilation.$source$($source);
     $newCompilation.$enableIntrinsics$($flag);
     $1.$compiler(self).$enableIntrinsics$($flag);
     $1.$compiler(self).$sentSelectors$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$Set().$new());
     $newCompilation.$ir$($1.$compiler(self).$compileClassSource$within$($source, nil));
     return $newCompilation.$sentSelectors$($1.$compiler(self).$sentSelectors());
    });
    $1.$mixins(self).$add$($compilation.$ir());
    $1.$sentSelectors(self).$addAll$($compilation.$sentSelectors());
    return $compilation.$ir();
   };
   this.$main = function (self) {
    return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("var runtime = ns.$".$$comma($1.$runtimeConfiguration(self).$qualifiedName()).$$comma("().$packageUsing$(ns);\rvmmirror.platform = runtime.$using$(vmmirror);\rvar app = ns.$").$$comma($1.$applicationConfiguration(self).$qualifiedName()).$$comma("().$packageUsing$(ns);\rapp.$main$args$(vmmirror.platform, [])"));
   };
   this.$namespace = function (self) {
    return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("ns", self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$($1.$mixins(self).$asArray().$collect$(function ($cd) {
     return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$mangleSlot$($cd.$qualifiedName()))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("vmmirror"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$("applyTopLevelMixin")), [self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("mixins"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($cd.$qualifiedName())))]));
    }).$$comma($1.$mixins(self).$asArray().$collect$(function ($cd) {
     return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($cd.$qualifiedName()))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$mangleSlot$($cd.$qualifiedName()))))])));
    })).$$comma($1.$resources(self).$asArray()))), []));
   };
   this.$outputSourcesTo$ = function ($stream) {
    var self = this;
    self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$JavascriptWriter().$new().$generateSourceFor$on$($1.$sourcesScript(self), $stream);
    return self;
   };
   this.$outputTo$ = function ($stream) {
    var self = this;
    self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$JavascriptWriter().$new().$generateSourceFor$on$($1.$script(self), $stream);
    return self;
   };
   this.$runtimeMixinNamespace = function (self) {
    return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$($1.$mixins(self).$collect$(function ($cd) {
     return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($cd.$qualifiedName()))), $cd.$runtimeMixin());
    }))), []);
   };
   this.$runtimeSources$ = function ($sources) {
    var self = this;
    var $results = nil;
    $results = $sources.$collect$(function ($source) {
     return self._$compileSource$enableIntrinsics$($source, true);
    });
    $1.$runtimeConfiguration$(self, $results.$first());
    return self;
   };
   this.$script = function (self) {
    $1.$compiler(self).$sentSelectors$($1.$sentSelectors(self));
    self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$sourcesList$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$OrderedCollection().$new());
    return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$script$([
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$("use strict"),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("nil", self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$("patch me with nil")),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$("currentActor"),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("theGlobalObject", self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this")),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("function SM(n,m,s){this.name=n; this.isMutable=m; this.isSynthetic=s; }"),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("function MM(n,sy,src){this.name=n; this.isSynthetic=sy; this.source=src; }"),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("function dnuCatcher(s){ return function() {\rreturn this.dnu(vmmirror.kernel.$Message().$selector$arguments$(s, Array.prototype.slice.call(arguments)));\r} }"),
     self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("mixins", $1.$runtimeMixinNamespace(self)),
     $1.$vmmirror(self),
     $1.$namespace(self),
     $1.$compiler(self).$dnuHandlers(),
     $1.$main(self)
    ]);
   };
   this.$sourcesScript = function (self) {
    var $elements = nil;
    $elements = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$OrderedCollection().$new();
    $elements.$add$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("null"));
    self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$sourcesList().$do$(function ($source) {
     return $elements.$add$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$($source));
    });
    return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("sources"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$array$($elements));
   };
   this.$vmmirror = function (self) {
    return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("\rvar vmmirror = new function(){\r	\r	this.ImplementationBase$slot = new function(){\r		this.debug = \"ImplementationBase\";\r		this.$runtimeClass$slot = new function(){\r			this.debug = \"Runtime class for ImplementationBase\";\r			this.basicNew = function(){ this.hashCode = 0; };\r			this.$instance$initializer = function(){};\r			this._$instance$initializer = function(){};\r			this.toString = function(){ return this.$printString(); }\r		};\r	};\r	this.$ImplementationBase = function(){return this.ImplementationBase$slot;};\r	this.$Array = function(){return Array;};\r	this.$String = function(){return String;};\r	this.$printString = function(){return \"VMMirrorForV8\"};\r	\r	this.createKernel = function(){\r		\r		var enclosingObjects = [\"patch me with kernel\", \"patch me with nil\"];\r		var enclosingObjects2 = [\"patch me with nil\"];\r		\r		var Object$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.invoke(this.$ImplementationBase().$runtimeClass$slot, enclosingObjects);\r		var Class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.invoke(Object$runtimeClass, enclosingObjects);\r		var Metaclass$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.invoke(Object$runtimeClass, enclosingObjects);\r		var Mixin$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.invoke(Object$runtimeClass, enclosingObjects);\r		var UndefinedObject$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.invoke(Object$runtimeClass, enclosingObjects);\r		var Kernel$runtimeClass = mixins.$KernelForV8.invoke(Object$runtimeClass, enclosingObjects2);\r		\r		var Object$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Class$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Metaclass$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Mixin$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var UndefinedObject$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Kernel$class$runtimeClass = mixins.$KernelForV8.meta.invoke(Class$runtimeClass, enclosingObjects2);\r		\r		Object$runtimeClass.meta = Object$class$runtimeClass;\r		Class$runtimeClass.meta = Class$class$runtimeClass;\r		Metaclass$runtimeClass.meta = Metaclass$class$runtimeClass;\r		Mixin$runtimeClass.meta = Mixin$class$runtimeClass;\r		UndefinedObject$runtimeClass.meta = UndefinedObject$class$runtimeClass;\r		Kernel$runtimeClass.meta = Kernel$class$runtimeClass;\r		\r		Object$class$runtimeClass.nonMeta = Object$runtimeClass;\r		Class$class$runtimeClass.nonMeta = Class$runtimeClass;\r		Metaclass$class$runtimeClass.nonMeta = Metaclass$runtimeClass;\r		Mixin$class$runtimeClass.nonMeta = Mixin$runtimeClass;\r		UndefinedObject$class$runtimeClass.nonMeta = UndefinedObject$runtimeClass;\r		Kernel$class$runtimeClass.nonMeta = Kernel$runtimeClass;\r		\r		nil = new UndefinedObject$runtimeClass.basicNew();\r		\r		var Object = new Object$class$runtimeClass.basicNew();\r		var Class = new Class$class$runtimeClass.basicNew();\r		var Metaclass = new Metaclass$class$runtimeClass.basicNew();\r		var Mixin = new Mixin$class$runtimeClass.basicNew();\r		var UndefinedObject = new UndefinedObject$class$runtimeClass.basicNew();\r		var Kernel = new Kernel$class$runtimeClass.basicNew();\r		\r		var Object$class = new Metaclass$runtimeClass.basicNew();\r		var Class$class = new Metaclass$runtimeClass.basicNew();\r		var Metaclass$class = new Metaclass$runtimeClass.basicNew();\r		var Mixin$class = new Metaclass$runtimeClass.basicNew();\r		var UndefinedObject$class = new Metaclass$runtimeClass.basicNew();\r		var Kernel$class = new Metaclass$runtimeClass.basicNew();\r		\r		Object$class$runtimeClass.newspeakClass = Object$class;\r		Class$class$runtimeClass.newspeakClass = Class$class;\r		Metaclass$class$runtimeClass.newspeakClass = Metaclass$class;\r		Mixin$class$runtimeClass.newspeakClass = Mixin$class;\r		UndefinedObject$class$runtimeClass.newspeakClass = UndefinedObject$class;\r		Kernel$class$runtimeClass.newspeakClass = Kernel$class;\r		\r		Object$runtimeClass.newspeakClass = Object;\r		Class$runtimeClass.newspeakClass = Class;\r		Metaclass$runtimeClass.newspeakClass = Metaclass;\r		Mixin$runtimeClass.newspeakClass = Mixin;\r		UndefinedObject$runtimeClass.newspeakClass = UndefinedObject;\r		Kernel$runtimeClass.newspeakClass = Kernel;\r		\r		var kernel = Kernel.$usingVmMirror$(this);\r		\r		//superclass$slot\r		Object.$superclass$slot = nil;\r		Class.$superclass$slot = Object;\r		Metaclass.$superclass$slot = Object;\r		Mixin.$superclass$slot = Object;\r		UndefinedObject.$superclass$slot = Object;\r		Kernel.$superclass$slot = Object;\r		\r		Object$class.$superclass$slot = Class;\r		Class$class.$superclass$slot = Class;\r		Metaclass$class.$superclass$slot = Class;\r		Mixin$class.$superclass$slot = Class;\r		UndefinedObject$class.$superclass$slot = Class;\r		Kernel$class.$superclass$slot = Class;\r		\r		//mixin$slot\r		Object.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object);\r		Class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class);\r		Metaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass);\r		Mixin.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin);\r		UndefinedObject.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject);\r		Kernel.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8);\r\r		Object$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object.meta);\r		Class$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class.meta);\r		Metaclass$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass.meta);\r		Mixin$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin.meta);\r		UndefinedObject$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta);\r		Kernel$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.meta);\r		\r		//enclosingObject$slot\r		Object.$enclosingObject$slot = kernel;\r		Class.$enclosingObject$slot = kernel;\r		Metaclass.$enclosingObject$slot = kernel;\r		Mixin.$enclosingObject$slot = kernel;\r		UndefinedObject.$enclosingObject$slot = kernel;\r		Kernel.$enclosingObject$slot = nil;\r		\r		Object$class.$enclosingObject$slot = kernel;\r		Class$class.$enclosingObject$slot = kernel;\r		Metaclass$class.$enclosingObject$slot = kernel;\r		Mixin$class.$enclosingObject$slot = kernel;\r		UndefinedObject$class.$enclosingObject$slot = kernel;\r		Kernel$class.$enclosingObject$slot = nil;\r		\r		enclosingObjects[0] = kernel;\r		enclosingObjects[1] = nil;\r		enclosingObjects2[0] = nil;\r		\r		//name$slot\r		Object.$name$slot = \"Object\";\r		Class.$name$slot = \"Class\";\r		Metaclass.$name$slot = \"Metaclass\";\r		Mixin.$name$slot = \"Mixin\";\r		Kernel.$name$slot = \"Kernel\";\r		\r		Object$class.$name$slot = \"Object class\";\r		Class$class.$name$slot = \"Class class\";\r		Metaclass$class.$name$slot = \"Metaclass class\";\r		Mixin$class.$name$slot = \"Mixin class\";\r		Kernel$class.$name$slot = \"Kernel class\";\r		\r		//runtimeClass\r		Object.runtimeClass = Object$runtimeClass;\r		Class.runtimeClass = Class$runtimeClass;\r		Metaclass.runtimeClass = Metaclass$runtimeClass;\r		Mixin.runtimeClass = Mixin$runtimeClass;\r		Kernel.runtimeClass = Kernel$runtimeClass;\r		\r		Object$class.runtimeClass = Metaclass$runtimeClass;\r		Class$class.runtimeClass = Metaclass$runtimeClass;\r		Metaclass$class.runtimeClass = Metaclass$runtimeClass;\r		Mixin$class.runtimeClass = Metaclass$runtimeClass;\r		Kernel$class.runtimeClass = Metaclass$runtimeClass;\r		\r		//thisClass$slot\r		Object$class.$thisClass$slot = Object;\r		Class$class.$thisClass$slot = Class;\r		Metaclass$class.$thisClass$slot = Metaclass;\r		Mixin$class.$thisClass$slot = Mixin;\r		Kernel$class.$thisClass$slot = Kernel;\r		\r		kernel.$KernelForV8$Object$slot = Object;\r		kernel.$KernelForV8$Class$slot = Class;\r		kernel.$KernelForV8$Metaclass$slot = Metaclass;\r		kernel.$KernelForV8$Mixin$slot = Mixin;\r		\r		return kernel;\r	};\r	this.kernel = this.createKernel();\r	\r	this.applyTopLevelMixin = function(runtimeMixin){\r		return this.$applyMixin$toSuperclass$withEnclosingObjects$(runtimeMixin, this.kernel._$Object(), [nil]);\r	};\r	\r	this.$applyMixin$toSuperclass$withEnclosingObjects$ = function(runtimeMixin, newspeakSuperclass, enclosingObjects){\r		\r		var Class = this.kernel.$Class();\r		var Metaclass = this.kernel.$Metaclass();\r		var Mixin = this.kernel.$Mixin();\r		\r		var runtimeSuperclass = newspeakSuperclass.runtimeClass;\r		var runtimeClass = runtimeMixin.invoke(runtimeSuperclass, enclosingObjects);\r		var runtimeMetaclass = runtimeMixin.meta.invoke(Class.runtimeClass, enclosingObjects);\r		runtimeClass.meta = runtimeMetaclass;\r		runtimeMetaclass.nonMeta = runtimeClass;\r		\r		var newspeakMetaclass = Metaclass.$new();\r		var newspeakClass = new runtimeMetaclass.basicNew();\r		\r		runtimeClass.newspeakClass = newspeakClass;\r		runtimeMetaclass.newspeakClass = newspeakMetaclass;//Class;\r		\r		newspeakMetaclass.$superclass$slot = Class;\r		newspeakMetaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin.meta);\r		newspeakMetaclass.$enclosingObject$slot = enclosingObjects[0];\r		newspeakMetaclass.$enclosingObjects$slot = enclosingObjects;\r		newspeakMetaclass.$name$slot = runtimeMixin.name + \" class\";\r		newspeakMetaclass.$thisClass$slot = newspeakClass;\r		newspeakMetaclass.runtimeClass = runtimeMetaclass;\r		\r		newspeakClass.$superclass$slot = newspeakSuperclass;\r		newspeakClass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin);\r		newspeakClass.$enclosingObject$slot = enclosingObjects[0];\r		newspeakClass.$enclosingObjects$slot = enclosingObjects;\r		newspeakClass.$name$slot = runtimeMixin.name;\r		newspeakClass.runtimeClass = runtimeClass;\r\r		runtimeMixin.applications.push(runtimeClass);\r		return newspeakClass;\r	};\r	\r	var specialCharacters = new Object();\r	specialCharacters[\"plus\"] = \"+\";\r	specialCharacters[\"minus\"] = \"-\";\r	specialCharacters[\"times\"] = \"*\";\r	specialCharacters[\"over\"] = \"/\";\r	specialCharacters[\"back\"] = \"\\\\\";\r	specialCharacters[\"less\"] = \"<\";\r	specialCharacters[\"greater\"] = \">\";\r	specialCharacters[\"tilde\"] = \"~\";\r	specialCharacters[\"equal\"] = \"=\";\r	specialCharacters[\"at\"] = \"@\";\r	specialCharacters[\"percent\"] = \"%\";\r	specialCharacters[\"pipe\"] = \"|\";\r	specialCharacters[\"amp\"] = \"&\";\r	specialCharacters[\"question\"] = \"?\";\r	specialCharacters[\"bang\"] = \"!\";\r	specialCharacters[\"comma\"] = \",\";\r	\r	this.$unmangleSelector$ = function(s) {\r		if(s[0] != \"$\") return \"<jsSelector:\"+s+\">\";\r		if(s[s.length-1] == \"$\")\r			// Keyword\r			return s.substring(1).replace(/\\$/g,\":\");\r		if(s[1] == \"$\")\r			// Binary\r			return s.substring(2).split(\"$\").map(function(x) {return specialCharacters[x];}).join(\"\");\r		// Unary / qualified\r	   	return s.substring(1).replace(/\\$/g,\"`\");\r	};\r	\r	this.$mangleSelector$ = function(s) {\r		return \"$\" + s.replace(/\\:/g,\"$\").replace(/\\`/g,\"$\");\r	};\r};\r");
   };
   this.$init$compiler$ = function (self, v) {
    self.$compiler$slot = v;
    return self;
   };
   this.$compiler = function (self) {
    return self.$compiler$slot;
   };
   this.$init$mixins$ = function (self, v) {
    self.$mixins$slot = v;
    return self;
   };
   this.$mixins = function (self) {
    return self.$mixins$slot;
   };
   this.$init$sentSelectors$ = function (self, v) {
    self.$sentSelectors$slot = v;
    return self;
   };
   this.$sentSelectors = function (self) {
    return self.$sentSelectors$slot;
   };
   this.$init$runtimeConfiguration$ = function (self, v) {
    self.$runtimeConfiguration$slot = v;
    return self;
   };
   this.$runtimeConfiguration = function (self) {
    return self.$runtimeConfiguration$slot;
   };
   this.$runtimeConfiguration$ = function (self, v) {
    self.$runtimeConfiguration$slot = v;
    return self;
   };
   this.$init$applicationConfiguration$ = function (self, v) {
    self.$applicationConfiguration$slot = v;
    return self;
   };
   this.$applicationConfiguration = function (self) {
    return self.$applicationConfiguration$slot;
   };
   this.$applicationConfiguration$ = function (self, v) {
    self.$applicationConfiguration$slot = v;
    return self;
   };
   this.$init$resources$ = function (self, v) {
    self.$resources$slot = v;
    return self;
   };
   this.$resources = function (self) {
    return self.$resources$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Newspeak2V8Compilation`ProgramBuilder";
     this._$superInit$Newspeak2V8Compilation$ProgramBuilder = $.$superInit$Newspeak2V8Compilation$ProgramBuilder;
     this.$superInit$Newspeak2V8Compilation$ProgramBuilder = dnuCatcher("$superInit$Newspeak2V8Compilation$ProgramBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addImageResource$under$ = this._$addImageResource$under$ = $.$addImageResource$under$;
     this.$addStringResource$under$ = this._$addStringResource$under$ = $.$addStringResource$under$;
     this.$applicationSources$ = this._$applicationSources$ = $.$applicationSources$;
     this._$compileSource$enableIntrinsics$ = $.$compileSource$enableIntrinsics$;
     this.$compileSource$enableIntrinsics$ = dnuCatcher("$compileSource$enableIntrinsics$");
     this.$outputSourcesTo$ = this._$outputSourcesTo$ = $.$outputSourcesTo$;
     this.$outputTo$ = this._$outputTo$ = $.$outputTo$;
     this.$runtimeSources$ = this._$runtimeSources$ = $.$runtimeSources$;
     this.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder = enclosingObjects;
     this.$super$Newspeak2V8Compilation$ProgramBuilder$slot = runtimeSuperclass;
     this["Newspeak2V8Compilation`ProgramBuilder"] = function () {
      superBasicNew.call(this);
      this.$compiler$slot = nil;
      this.$mixins$slot = nil;
      this.$sentSelectors$slot = nil;
      this.$runtimeConfiguration$slot = nil;
      this.$applicationConfiguration$slot = nil;
      this.$resources$slot = nil;
     };
     this.basicNew = this["Newspeak2V8Compilation`ProgramBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Newspeak2V8Compilation`ProgramBuilder";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Newspeak2V8Compilation`ProgramBuilder";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder = enclosingObjects;
      this.$super$Newspeak2V8Compilation$ProgramBuilder = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Newspeak2V8Compilation$CachedCompilation.enclosingMixin = this;
  this.$Newspeak2V8Compilation$Compiler.enclosingMixin = this;
  this.$Newspeak2V8Compilation$IntermediateClassDeclaration.enclosingMixin = this;
  this.$Newspeak2V8Compilation$IntermediateMethod.enclosingMixin = this;
  this.$Newspeak2V8Compilation$IntermediateMixin.enclosingMixin = this;
  this.$Newspeak2V8Compilation$IntermediateSlotDeclaration.enclosingMixin = this;
  this.$Newspeak2V8Compilation$NameMangler.enclosingMixin = this;
  this.$Newspeak2V8Compilation$ProgramBuilder.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Newspeak2V8Compilation";
    this._$superInit$Newspeak2V8Compilation = $.$superInit$Newspeak2V8Compilation;
    this.$superInit$Newspeak2V8Compilation = dnuCatcher("$superInit$Newspeak2V8Compilation");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$LocalEntry = $.$LocalEntry;
    this.$LocalEntry = dnuCatcher("$LocalEntry");
    this._$Scope = $.$Scope;
    this.$Scope = dnuCatcher("$Scope");
    this._$assert$ = $.$assert$;
    this.$assert$ = dnuCatcher("$assert$");
    this._$mixinNameOfClassNamed$ = $.$mixinNameOfClassNamed$;
    this.$mixinNameOfClassNamed$ = dnuCatcher("$mixinNameOfClassNamed$");
    this._$mixinSlotNameFor$ = $.$mixinSlotNameFor$;
    this.$mixinSlotNameFor$ = dnuCatcher("$mixinSlotNameFor$");
    this._$split$at$ = $.$split$at$;
    this.$split$at$ = dnuCatcher("$split$at$");
    this._$splitFullyQualifiedName$ = $.$splitFullyQualifiedName$;
    this.$splitFullyQualifiedName$ = dnuCatcher("$splitFullyQualifiedName$");
    this._$syntheticNameSeparator = $.$syntheticNameSeparator;
    this.$syntheticNameSeparator = dnuCatcher("$syntheticNameSeparator");
    this._$CachedCompilation = $.$CachedCompilation;
    this.$CachedCompilation = dnuCatcher("$CachedCompilation");
    this.$Compiler = this._$Compiler = $.$Compiler;
    this.$IntermediateClassDeclaration = this._$IntermediateClassDeclaration = $.$IntermediateClassDeclaration;
    this.$IntermediateMethod = this._$IntermediateMethod = $.$IntermediateMethod;
    this.$IntermediateMixin = this._$IntermediateMixin = $.$IntermediateMixin;
    this.$IntermediateSlotDeclaration = this._$IntermediateSlotDeclaration = $.$IntermediateSlotDeclaration;
    this._$NameMangler = $.$NameMangler;
    this.$NameMangler = dnuCatcher("$NameMangler");
    this.$ProgramBuilder = this._$ProgramBuilder = $.$ProgramBuilder;
    this._$init$asts$ = $.$init$asts$;
    this.$init$asts$ = dnuCatcher("$init$asts$");
    this._$asts = $.$asts;
    this.$asts = dnuCatcher("$asts");
    this._$init$Collection$ = $.$init$Collection$;
    this.$init$Collection$ = dnuCatcher("$init$Collection$");
    this._$Collection = $.$Collection;
    this.$Collection = dnuCatcher("$Collection");
    this._$init$Dictionary$ = $.$init$Dictionary$;
    this.$init$Dictionary$ = dnuCatcher("$init$Dictionary$");
    this._$Dictionary = $.$Dictionary;
    this.$Dictionary = dnuCatcher("$Dictionary");
    this._$init$IdentityDictionary$ = $.$init$IdentityDictionary$;
    this.$init$IdentityDictionary$ = dnuCatcher("$init$IdentityDictionary$");
    this._$IdentityDictionary = $.$IdentityDictionary;
    this.$IdentityDictionary = dnuCatcher("$IdentityDictionary");
    this._$init$OrderedCollection$ = $.$init$OrderedCollection$;
    this.$init$OrderedCollection$ = dnuCatcher("$init$OrderedCollection$");
    this._$OrderedCollection = $.$OrderedCollection;
    this.$OrderedCollection = dnuCatcher("$OrderedCollection");
    this._$init$SortedList$ = $.$init$SortedList$;
    this.$init$SortedList$ = dnuCatcher("$init$SortedList$");
    this._$SortedList = $.$SortedList;
    this.$SortedList = dnuCatcher("$SortedList");
    this._$init$Set$ = $.$init$Set$;
    this.$init$Set$ = dnuCatcher("$init$Set$");
    this._$Set = $.$Set;
    this.$Set = dnuCatcher("$Set");
    this._$init$ReadStream$ = $.$init$ReadStream$;
    this.$init$ReadStream$ = dnuCatcher("$init$ReadStream$");
    this._$ReadStream = $.$ReadStream;
    this.$ReadStream = dnuCatcher("$ReadStream");
    this._$init$WriteStream$ = $.$init$WriteStream$;
    this.$init$WriteStream$ = dnuCatcher("$init$WriteStream$");
    this._$WriteStream = $.$WriteStream;
    this.$WriteStream = dnuCatcher("$WriteStream");
    this._$init$MutableString$ = $.$init$MutableString$;
    this.$init$MutableString$ = dnuCatcher("$init$MutableString$");
    this._$MutableString = $.$MutableString;
    this.$MutableString = dnuCatcher("$MutableString");
    this._$init$Parser$ = $.$init$Parser$;
    this.$init$Parser$ = dnuCatcher("$init$Parser$");
    this._$Parser = $.$Parser;
    this.$Parser = dnuCatcher("$Parser");
    this._$init$javascriptGeneration$ = $.$init$javascriptGeneration$;
    this.$init$javascriptGeneration$ = dnuCatcher("$init$javascriptGeneration$");
    this._$javascriptGeneration = $.$javascriptGeneration;
    this.$javascriptGeneration = dnuCatcher("$javascriptGeneration");
    this._$init$JavascriptWriter$ = $.$init$JavascriptWriter$;
    this.$init$JavascriptWriter$ = dnuCatcher("$init$JavascriptWriter$");
    this._$JavascriptWriter = $.$JavascriptWriter;
    this.$JavascriptWriter = dnuCatcher("$JavascriptWriter");
    this._$init$js$ = $.$init$js$;
    this.$init$js$ = dnuCatcher("$init$js$");
    this._$js = $.$js;
    this.$js = dnuCatcher("$js");
    this.$init$names$ = this._$init$names$ = $.$init$names$;
    this.$names = this._$names = $.$names;
    this._$init$ASTTool$ = $.$init$ASTTool$;
    this.$init$ASTTool$ = dnuCatcher("$init$ASTTool$");
    this._$ASTTool = $.$ASTTool;
    this.$ASTTool = dnuCatcher("$ASTTool");
    this._$init$ASTCopier$ = $.$init$ASTCopier$;
    this.$init$ASTCopier$ = dnuCatcher("$init$ASTCopier$");
    this._$ASTCopier = $.$ASTCopier;
    this.$ASTCopier = dnuCatcher("$ASTCopier");
    this._$init$AST$ = $.$init$AST$;
    this.$init$AST$ = dnuCatcher("$init$AST$");
    this._$AST = $.$AST;
    this.$AST = dnuCatcher("$AST");
    this._$init$AssignmentAST$ = $.$init$AssignmentAST$;
    this.$init$AssignmentAST$ = dnuCatcher("$init$AssignmentAST$");
    this._$AssignmentAST = $.$AssignmentAST;
    this.$AssignmentAST = dnuCatcher("$AssignmentAST");
    this._$init$BlockAST$ = $.$init$BlockAST$;
    this.$init$BlockAST$ = dnuCatcher("$init$BlockAST$");
    this._$BlockAST = $.$BlockAST;
    this.$BlockAST = dnuCatcher("$BlockAST");
    this._$init$CascadedSendAST$ = $.$init$CascadedSendAST$;
    this.$init$CascadedSendAST$ = dnuCatcher("$init$CascadedSendAST$");
    this._$CascadedSendAST = $.$CascadedSendAST;
    this.$CascadedSendAST = dnuCatcher("$CascadedSendAST");
    this._$init$CodeBodyAST$ = $.$init$CodeBodyAST$;
    this.$init$CodeBodyAST$ = dnuCatcher("$init$CodeBodyAST$");
    this._$CodeBodyAST = $.$CodeBodyAST;
    this.$CodeBodyAST = dnuCatcher("$CodeBodyAST");
    this._$init$MessageAST$ = $.$init$MessageAST$;
    this.$init$MessageAST$ = dnuCatcher("$init$MessageAST$");
    this._$MessageAST = $.$MessageAST;
    this.$MessageAST = dnuCatcher("$MessageAST");
    this._$init$MessagePatternAST$ = $.$init$MessagePatternAST$;
    this.$init$MessagePatternAST$ = dnuCatcher("$init$MessagePatternAST$");
    this._$MessagePatternAST = $.$MessagePatternAST;
    this.$MessagePatternAST = dnuCatcher("$MessagePatternAST");
    this._$init$MethodAST$ = $.$init$MethodAST$;
    this.$init$MethodAST$ = dnuCatcher("$init$MethodAST$");
    this._$MethodAST = $.$MethodAST;
    this.$MethodAST = dnuCatcher("$MethodAST");
    this._$init$NormalSendAST$ = $.$init$NormalSendAST$;
    this.$init$NormalSendAST$ = dnuCatcher("$init$NormalSendAST$");
    this._$NormalSendAST = $.$NormalSendAST;
    this.$NormalSendAST = dnuCatcher("$NormalSendAST");
    this._$init$NumberAST$ = $.$init$NumberAST$;
    this.$init$NumberAST$ = dnuCatcher("$init$NumberAST$");
    this._$NumberAST = $.$NumberAST;
    this.$NumberAST = dnuCatcher("$NumberAST");
    this._$init$ReturnStatAST$ = $.$init$ReturnStatAST$;
    this.$init$ReturnStatAST$ = dnuCatcher("$init$ReturnStatAST$");
    this._$ReturnStatAST = $.$ReturnStatAST;
    this.$ReturnStatAST = dnuCatcher("$ReturnStatAST");
    this._$init$SendAST$ = $.$init$SendAST$;
    this.$init$SendAST$ = dnuCatcher("$init$SendAST$");
    this._$SendAST = $.$SendAST;
    this.$SendAST = dnuCatcher("$SendAST");
    this._$init$SymbolAST$ = $.$init$SymbolAST$;
    this.$init$SymbolAST$ = dnuCatcher("$init$SymbolAST$");
    this._$SymbolAST = $.$SymbolAST;
    this.$SymbolAST = dnuCatcher("$SymbolAST");
    this._$init$TupleAST$ = $.$init$TupleAST$;
    this.$init$TupleAST$ = dnuCatcher("$init$TupleAST$");
    this._$TupleAST = $.$TupleAST;
    this.$TupleAST = dnuCatcher("$TupleAST");
    this._$init$VarDeclAST$ = $.$init$VarDeclAST$;
    this.$init$VarDeclAST$ = dnuCatcher("$init$VarDeclAST$");
    this._$VarDeclAST = $.$VarDeclAST;
    this.$VarDeclAST = dnuCatcher("$VarDeclAST");
    this._$init$VariableAST$ = $.$init$VariableAST$;
    this.$init$VariableAST$ = dnuCatcher("$init$VariableAST$");
    this._$VariableAST = $.$VariableAST;
    this.$VariableAST = dnuCatcher("$VariableAST");
    this._$init$parser$ = $.$init$parser$;
    this.$init$parser$ = dnuCatcher("$init$parser$");
    this._$parser = $.$parser;
    this.$parser = dnuCatcher("$parser");
    this._$init$cachedCompilations$ = $.$init$cachedCompilations$;
    this.$init$cachedCompilations$ = dnuCatcher("$init$cachedCompilations$");
    this._$cachedCompilations = $.$cachedCompilations;
    this.$cachedCompilations = dnuCatcher("$cachedCompilations");
    this._$init$sourcesList$ = $.$init$sourcesList$;
    this.$init$sourcesList$ = dnuCatcher("$init$sourcesList$");
    this._$sourcesList = $.$sourcesList;
    this.$sourcesList = dnuCatcher("$sourcesList");
    this._$sourcesList$ = $.$sourcesList$;
    this.$sourcesList$ = dnuCatcher("$sourcesList$");
    this.$init$Newspeak2V8Compilation$CachedCompilation$ = this._$init$Newspeak2V8Compilation$CachedCompilation$ = $.$init$Newspeak2V8Compilation$CachedCompilation$;
    this.$Newspeak2V8Compilation$CachedCompilation = this._$Newspeak2V8Compilation$CachedCompilation = $.$Newspeak2V8Compilation$CachedCompilation;
    this.$Newspeak2V8Compilation$CachedCompilation$ = this._$Newspeak2V8Compilation$CachedCompilation$ = $.$Newspeak2V8Compilation$CachedCompilation$;
    this.$init$Newspeak2V8Compilation$Compiler$ = this._$init$Newspeak2V8Compilation$Compiler$ = $.$init$Newspeak2V8Compilation$Compiler$;
    this.$Newspeak2V8Compilation$Compiler = this._$Newspeak2V8Compilation$Compiler = $.$Newspeak2V8Compilation$Compiler;
    this.$Newspeak2V8Compilation$Compiler$ = this._$Newspeak2V8Compilation$Compiler$ = $.$Newspeak2V8Compilation$Compiler$;
    this.$init$Newspeak2V8Compilation$IntermediateClassDeclaration$ = this._$init$Newspeak2V8Compilation$IntermediateClassDeclaration$ = $.$init$Newspeak2V8Compilation$IntermediateClassDeclaration$;
    this.$Newspeak2V8Compilation$IntermediateClassDeclaration = this._$Newspeak2V8Compilation$IntermediateClassDeclaration = $.$Newspeak2V8Compilation$IntermediateClassDeclaration;
    this.$Newspeak2V8Compilation$IntermediateClassDeclaration$ = this._$Newspeak2V8Compilation$IntermediateClassDeclaration$ = $.$Newspeak2V8Compilation$IntermediateClassDeclaration$;
    this.$init$Newspeak2V8Compilation$IntermediateMethod$ = this._$init$Newspeak2V8Compilation$IntermediateMethod$ = $.$init$Newspeak2V8Compilation$IntermediateMethod$;
    this.$Newspeak2V8Compilation$IntermediateMethod = this._$Newspeak2V8Compilation$IntermediateMethod = $.$Newspeak2V8Compilation$IntermediateMethod;
    this.$Newspeak2V8Compilation$IntermediateMethod$ = this._$Newspeak2V8Compilation$IntermediateMethod$ = $.$Newspeak2V8Compilation$IntermediateMethod$;
    this.$init$Newspeak2V8Compilation$IntermediateMixin$ = this._$init$Newspeak2V8Compilation$IntermediateMixin$ = $.$init$Newspeak2V8Compilation$IntermediateMixin$;
    this.$Newspeak2V8Compilation$IntermediateMixin = this._$Newspeak2V8Compilation$IntermediateMixin = $.$Newspeak2V8Compilation$IntermediateMixin;
    this.$Newspeak2V8Compilation$IntermediateMixin$ = this._$Newspeak2V8Compilation$IntermediateMixin$ = $.$Newspeak2V8Compilation$IntermediateMixin$;
    this.$init$Newspeak2V8Compilation$IntermediateSlotDeclaration$ = this._$init$Newspeak2V8Compilation$IntermediateSlotDeclaration$ = $.$init$Newspeak2V8Compilation$IntermediateSlotDeclaration$;
    this.$Newspeak2V8Compilation$IntermediateSlotDeclaration = this._$Newspeak2V8Compilation$IntermediateSlotDeclaration = $.$Newspeak2V8Compilation$IntermediateSlotDeclaration;
    this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$ = this._$Newspeak2V8Compilation$IntermediateSlotDeclaration$ = $.$Newspeak2V8Compilation$IntermediateSlotDeclaration$;
    this.$init$Newspeak2V8Compilation$NameMangler$ = this._$init$Newspeak2V8Compilation$NameMangler$ = $.$init$Newspeak2V8Compilation$NameMangler$;
    this.$Newspeak2V8Compilation$NameMangler = this._$Newspeak2V8Compilation$NameMangler = $.$Newspeak2V8Compilation$NameMangler;
    this.$Newspeak2V8Compilation$NameMangler$ = this._$Newspeak2V8Compilation$NameMangler$ = $.$Newspeak2V8Compilation$NameMangler$;
    this.$init$Newspeak2V8Compilation$ProgramBuilder$ = this._$init$Newspeak2V8Compilation$ProgramBuilder$ = $.$init$Newspeak2V8Compilation$ProgramBuilder$;
    this.$Newspeak2V8Compilation$ProgramBuilder = this._$Newspeak2V8Compilation$ProgramBuilder = $.$Newspeak2V8Compilation$ProgramBuilder;
    this.$Newspeak2V8Compilation$ProgramBuilder$ = this._$Newspeak2V8Compilation$ProgramBuilder$ = $.$Newspeak2V8Compilation$ProgramBuilder$;
    this.$enclosingObjects$Newspeak2V8Compilation = enclosingObjects;
    this.$super$Newspeak2V8Compilation$slot = runtimeSuperclass;
    this.Newspeak2V8Compilation = function () {
     superBasicNew.call(this);
     this.$asts$slot = nil;
     this.$Collection$slot = nil;
     this.$Dictionary$slot = nil;
     this.$IdentityDictionary$slot = nil;
     this.$OrderedCollection$slot = nil;
     this.$SortedList$slot = nil;
     this.$Set$slot = nil;
     this.$ReadStream$slot = nil;
     this.$WriteStream$slot = nil;
     this.$MutableString$slot = nil;
     this.$Parser$slot = nil;
     this.$javascriptGeneration$slot = nil;
     this.$JavascriptWriter$slot = nil;
     this.$js$slot = nil;
     this.$names$slot = nil;
     this.$ASTTool$slot = nil;
     this.$ASTCopier$slot = nil;
     this.$AST$slot = nil;
     this.$AssignmentAST$slot = nil;
     this.$BlockAST$slot = nil;
     this.$CascadedSendAST$slot = nil;
     this.$CodeBodyAST$slot = nil;
     this.$MessageAST$slot = nil;
     this.$MessagePatternAST$slot = nil;
     this.$MethodAST$slot = nil;
     this.$NormalSendAST$slot = nil;
     this.$NumberAST$slot = nil;
     this.$ReturnStatAST$slot = nil;
     this.$SendAST$slot = nil;
     this.$SymbolAST$slot = nil;
     this.$TupleAST$slot = nil;
     this.$VarDeclAST$slot = nil;
     this.$VariableAST$slot = nil;
     this.$parser$slot = nil;
     this.$cachedCompilations$slot = nil;
     this.$sourcesList$slot = nil;
     this.$Newspeak2V8Compilation$CachedCompilation$slot = nil;
     this.$Newspeak2V8Compilation$Compiler$slot = nil;
     this.$Newspeak2V8Compilation$IntermediateClassDeclaration$slot = nil;
     this.$Newspeak2V8Compilation$IntermediateMethod$slot = nil;
     this.$Newspeak2V8Compilation$IntermediateMixin$slot = nil;
     this.$Newspeak2V8Compilation$IntermediateSlotDeclaration$slot = nil;
     this.$Newspeak2V8Compilation$NameMangler$slot = nil;
     this.$Newspeak2V8Compilation$ProgramBuilder$slot = nil;
    };
    this.basicNew = this.Newspeak2V8Compilation;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for Newspeak2V8Compilation";
   this.slots = [];
   this.methods = [new MM("usingPlatform:parsing:generation:mirrors:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$parsing$generation$mirrors$ = function ($platform, $parsing, $generation, $mirrors) {
    return (new this.nonMeta.basicNew()).$instance$initializer($platform, $parsing, $generation, $mirrors);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Newspeak2V8Compilation";
     this.$usingPlatform$parsing$generation$mirrors$ = this._$usingPlatform$parsing$generation$mirrors$ = $.$usingPlatform$parsing$generation$mirrors$;
     this.$enclosingObjects$Newspeak2V8Compilation = enclosingObjects;
     this.$super$Newspeak2V8Compilation = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$NewspeakCompilation = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for NewspeakCompilation";
  this.name = "NewspeakCompilation";
  this.header = 2553;
  this.slots = [
   new SM("Dictionary", false, false),
   new SM("OrderedCollection", false, false),
   new SM("AST", false, false),
   new SM("ASTTool", false, false),
   new SM("BlockAST", false, false),
   new SM("CascadedSendAST", false, false),
   new SM("CodeBodyAST", false, false),
   new SM("MessageAST", false, false),
   new SM("MessagePatternAST", false, false),
   new SM("MethodAST", false, false),
   new SM("NormalSendAST", false, false),
   new SM("NumberAST", false, false),
   new SM("ReturnStatAST", false, false),
   new SM("TupleAST", false, false),
   new SM("VariableAST", false, false),
   new SM("namer", false, false),
   new SM("NewspeakCompilation`ClassEntry", true, true),
   new SM("NewspeakCompilation`Compiler", true, true),
   new SM("NewspeakCompilation`LocalEntry", true, true),
   new SM("NewspeakCompilation`MethodEntry", true, true),
   new SM("NewspeakCompilation`Namer", true, true),
   new SM("NewspeakCompilation`Scope", true, true),
   new SM("NewspeakCompilation`SlotEntry", true, true),
   new SM("NewspeakCompilation`SymbolTableEntry", true, true)
  ];
  this.methods = [
   new MM("superInit`NewspeakCompilation", true, 2554),
   new MM("instance`initializer", true, 2555),
   new MM("ClassEntry", true, 0),
   new MM("Compiler", true, 0),
   new MM("LocalEntry", true, 0),
   new MM("MethodEntry", true, 0),
   new MM("Namer", true, 0),
   new MM("Scope", true, 0),
   new MM("SlotEntry", true, 0),
   new MM("SymbolTableEntry", true, 0),
   new MM("init`Dictionary:", true, 0),
   new MM("Dictionary", true, 0),
   new MM("init`OrderedCollection:", true, 0),
   new MM("OrderedCollection", true, 0),
   new MM("init`AST:", true, 0),
   new MM("AST", true, 0),
   new MM("init`ASTTool:", true, 0),
   new MM("ASTTool", true, 0),
   new MM("init`BlockAST:", true, 0),
   new MM("BlockAST", true, 0),
   new MM("init`CascadedSendAST:", true, 0),
   new MM("CascadedSendAST", true, 0),
   new MM("init`CodeBodyAST:", true, 0),
   new MM("CodeBodyAST", true, 0),
   new MM("init`MessageAST:", true, 0),
   new MM("MessageAST", true, 0),
   new MM("init`MessagePatternAST:", true, 0),
   new MM("MessagePatternAST", true, 0),
   new MM("init`MethodAST:", true, 0),
   new MM("MethodAST", true, 0),
   new MM("init`NormalSendAST:", true, 0),
   new MM("NormalSendAST", true, 0),
   new MM("init`NumberAST:", true, 0),
   new MM("NumberAST", true, 0),
   new MM("init`ReturnStatAST:", true, 0),
   new MM("ReturnStatAST", true, 0),
   new MM("init`TupleAST:", true, 0),
   new MM("TupleAST", true, 0),
   new MM("init`VariableAST:", true, 0),
   new MM("VariableAST", true, 0),
   new MM("init`namer:", true, 0),
   new MM("namer", true, 0),
   new MM("init`NewspeakCompilation`ClassEntry:", true, 0),
   new MM("NewspeakCompilation`ClassEntry", true, 0),
   new MM("NewspeakCompilation`ClassEntry:", true, 0),
   new MM("init`NewspeakCompilation`Compiler:", true, 0),
   new MM("NewspeakCompilation`Compiler", true, 0),
   new MM("NewspeakCompilation`Compiler:", true, 0),
   new MM("init`NewspeakCompilation`LocalEntry:", true, 0),
   new MM("NewspeakCompilation`LocalEntry", true, 0),
   new MM("NewspeakCompilation`LocalEntry:", true, 0),
   new MM("init`NewspeakCompilation`MethodEntry:", true, 0),
   new MM("NewspeakCompilation`MethodEntry", true, 0),
   new MM("NewspeakCompilation`MethodEntry:", true, 0),
   new MM("init`NewspeakCompilation`Namer:", true, 0),
   new MM("NewspeakCompilation`Namer", true, 0),
   new MM("NewspeakCompilation`Namer:", true, 0),
   new MM("init`NewspeakCompilation`Scope:", true, 0),
   new MM("NewspeakCompilation`Scope", true, 0),
   new MM("NewspeakCompilation`Scope:", true, 0),
   new MM("init`NewspeakCompilation`SlotEntry:", true, 0),
   new MM("NewspeakCompilation`SlotEntry", true, 0),
   new MM("NewspeakCompilation`SlotEntry:", true, 0),
   new MM("init`NewspeakCompilation`SymbolTableEntry:", true, 0),
   new MM("NewspeakCompilation`SymbolTableEntry", true, 0),
   new MM("NewspeakCompilation`SymbolTableEntry:", true, 0)
  ];
  this.nestedClasses = [
   "NewspeakCompilation`ClassEntry",
   "NewspeakCompilation`Compiler",
   "NewspeakCompilation`LocalEntry",
   "NewspeakCompilation`MethodEntry",
   "NewspeakCompilation`Namer",
   "NewspeakCompilation`Scope",
   "NewspeakCompilation`SlotEntry",
   "NewspeakCompilation`SymbolTableEntry"
  ];
  this.applications = [];
  this.$superInit$NewspeakCompilation = function ($p, $asts) {
   var self = this;
   self.$super$NewspeakCompilation$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p, $asts) {
   var self = this;
   self._$superInit$NewspeakCompilation($p, $asts);
   self._$init$Dictionary$($p.$collections().$Dictionary());
   self._$init$OrderedCollection$($p.$collections().$OrderedCollection());
   self._$init$AST$($asts.$AST());
   self._$init$ASTTool$($asts.$ASTTool());
   self._$init$BlockAST$($asts.$BlockAST());
   self._$init$CascadedSendAST$($asts.$CascadedSendAST());
   self._$init$CodeBodyAST$($asts.$CodeBodyAST());
   self._$init$MessageAST$($asts.$MessageAST());
   self._$init$MessagePatternAST$($asts.$MessagePatternAST());
   self._$init$MethodAST$($asts.$MethodAST());
   self._$init$NormalSendAST$($asts.$NormalSendAST());
   self._$init$NumberAST$($asts.$NumberAST());
   self._$init$ReturnStatAST$($asts.$ReturnStatAST());
   self._$init$TupleAST$($asts.$TupleAST());
   self._$init$VariableAST$($asts.$VariableAST());
   self._$init$namer$(self._$Namer().$new());
   return self;
  };
  this.$ClassEntry = function () {
   if (nil === this.$NewspeakCompilation$ClassEntry$slot) {
    var self = this;
    var superclass = self._$SymbolTableEntry();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$ClassEntry;
    this.$NewspeakCompilation$ClassEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$ClassEntry$slot;
  };
  this.$Compiler = function () {
   if (nil === this.$NewspeakCompilation$Compiler$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$Compiler;
    this.$NewspeakCompilation$Compiler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$Compiler$slot;
  };
  this.$LocalEntry = function () {
   if (nil === this.$NewspeakCompilation$LocalEntry$slot) {
    var self = this;
    var superclass = self._$SymbolTableEntry();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$LocalEntry;
    this.$NewspeakCompilation$LocalEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$LocalEntry$slot;
  };
  this.$MethodEntry = function () {
   if (nil === this.$NewspeakCompilation$MethodEntry$slot) {
    var self = this;
    var superclass = self._$SymbolTableEntry();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$MethodEntry;
    this.$NewspeakCompilation$MethodEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$MethodEntry$slot;
  };
  this.$Namer = function () {
   if (nil === this.$NewspeakCompilation$Namer$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$Namer;
    this.$NewspeakCompilation$Namer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$Namer$slot;
  };
  this.$Scope = function () {
   if (nil === this.$NewspeakCompilation$Scope$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$Scope;
    this.$NewspeakCompilation$Scope$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$Scope$slot;
  };
  this.$SlotEntry = function () {
   if (nil === this.$NewspeakCompilation$SlotEntry$slot) {
    var self = this;
    var superclass = self._$SymbolTableEntry();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$SlotEntry;
    this.$NewspeakCompilation$SlotEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$SlotEntry$slot;
  };
  this.$SymbolTableEntry = function () {
   if (nil === this.$NewspeakCompilation$SymbolTableEntry$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation);
    var mixin = $.$NewspeakCompilation$SymbolTableEntry;
    this.$NewspeakCompilation$SymbolTableEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$NewspeakCompilation$SymbolTableEntry$slot;
  };
  this.$init$Dictionary$ = function (v) {
   this.$Dictionary$slot = v;
   return this;
  };
  this.$Dictionary = function () {
   return this.$Dictionary$slot;
  };
  this.$init$OrderedCollection$ = function (v) {
   this.$OrderedCollection$slot = v;
   return this;
  };
  this.$OrderedCollection = function () {
   return this.$OrderedCollection$slot;
  };
  this.$init$AST$ = function (v) {
   this.$AST$slot = v;
   return this;
  };
  this.$AST = function () {
   return this.$AST$slot;
  };
  this.$init$ASTTool$ = function (v) {
   this.$ASTTool$slot = v;
   return this;
  };
  this.$ASTTool = function () {
   return this.$ASTTool$slot;
  };
  this.$init$BlockAST$ = function (v) {
   this.$BlockAST$slot = v;
   return this;
  };
  this.$BlockAST = function () {
   return this.$BlockAST$slot;
  };
  this.$init$CascadedSendAST$ = function (v) {
   this.$CascadedSendAST$slot = v;
   return this;
  };
  this.$CascadedSendAST = function () {
   return this.$CascadedSendAST$slot;
  };
  this.$init$CodeBodyAST$ = function (v) {
   this.$CodeBodyAST$slot = v;
   return this;
  };
  this.$CodeBodyAST = function () {
   return this.$CodeBodyAST$slot;
  };
  this.$init$MessageAST$ = function (v) {
   this.$MessageAST$slot = v;
   return this;
  };
  this.$MessageAST = function () {
   return this.$MessageAST$slot;
  };
  this.$init$MessagePatternAST$ = function (v) {
   this.$MessagePatternAST$slot = v;
   return this;
  };
  this.$MessagePatternAST = function () {
   return this.$MessagePatternAST$slot;
  };
  this.$init$MethodAST$ = function (v) {
   this.$MethodAST$slot = v;
   return this;
  };
  this.$MethodAST = function () {
   return this.$MethodAST$slot;
  };
  this.$init$NormalSendAST$ = function (v) {
   this.$NormalSendAST$slot = v;
   return this;
  };
  this.$NormalSendAST = function () {
   return this.$NormalSendAST$slot;
  };
  this.$init$NumberAST$ = function (v) {
   this.$NumberAST$slot = v;
   return this;
  };
  this.$NumberAST = function () {
   return this.$NumberAST$slot;
  };
  this.$init$ReturnStatAST$ = function (v) {
   this.$ReturnStatAST$slot = v;
   return this;
  };
  this.$ReturnStatAST = function () {
   return this.$ReturnStatAST$slot;
  };
  this.$init$TupleAST$ = function (v) {
   this.$TupleAST$slot = v;
   return this;
  };
  this.$TupleAST = function () {
   return this.$TupleAST$slot;
  };
  this.$init$VariableAST$ = function (v) {
   this.$VariableAST$slot = v;
   return this;
  };
  this.$VariableAST = function () {
   return this.$VariableAST$slot;
  };
  this.$init$namer$ = function (v) {
   this.$namer$slot = v;
   return this;
  };
  this.$namer = function () {
   return this.$namer$slot;
  };
  this.$init$NewspeakCompilation$ClassEntry$ = function (v) {
   this.$NewspeakCompilation$ClassEntry$slot = v;
   return this;
  };
  this.$NewspeakCompilation$ClassEntry = function () {
   return this.$NewspeakCompilation$ClassEntry$slot;
  };
  this.$NewspeakCompilation$ClassEntry$ = function (v) {
   this.$NewspeakCompilation$ClassEntry$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$Compiler$ = function (v) {
   this.$NewspeakCompilation$Compiler$slot = v;
   return this;
  };
  this.$NewspeakCompilation$Compiler = function () {
   return this.$NewspeakCompilation$Compiler$slot;
  };
  this.$NewspeakCompilation$Compiler$ = function (v) {
   this.$NewspeakCompilation$Compiler$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$LocalEntry$ = function (v) {
   this.$NewspeakCompilation$LocalEntry$slot = v;
   return this;
  };
  this.$NewspeakCompilation$LocalEntry = function () {
   return this.$NewspeakCompilation$LocalEntry$slot;
  };
  this.$NewspeakCompilation$LocalEntry$ = function (v) {
   this.$NewspeakCompilation$LocalEntry$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$MethodEntry$ = function (v) {
   this.$NewspeakCompilation$MethodEntry$slot = v;
   return this;
  };
  this.$NewspeakCompilation$MethodEntry = function () {
   return this.$NewspeakCompilation$MethodEntry$slot;
  };
  this.$NewspeakCompilation$MethodEntry$ = function (v) {
   this.$NewspeakCompilation$MethodEntry$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$Namer$ = function (v) {
   this.$NewspeakCompilation$Namer$slot = v;
   return this;
  };
  this.$NewspeakCompilation$Namer = function () {
   return this.$NewspeakCompilation$Namer$slot;
  };
  this.$NewspeakCompilation$Namer$ = function (v) {
   this.$NewspeakCompilation$Namer$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$Scope$ = function (v) {
   this.$NewspeakCompilation$Scope$slot = v;
   return this;
  };
  this.$NewspeakCompilation$Scope = function () {
   return this.$NewspeakCompilation$Scope$slot;
  };
  this.$NewspeakCompilation$Scope$ = function (v) {
   this.$NewspeakCompilation$Scope$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$SlotEntry$ = function (v) {
   this.$NewspeakCompilation$SlotEntry$slot = v;
   return this;
  };
  this.$NewspeakCompilation$SlotEntry = function () {
   return this.$NewspeakCompilation$SlotEntry$slot;
  };
  this.$NewspeakCompilation$SlotEntry$ = function (v) {
   this.$NewspeakCompilation$SlotEntry$slot = v;
   return this;
  };
  this.$init$NewspeakCompilation$SymbolTableEntry$ = function (v) {
   this.$NewspeakCompilation$SymbolTableEntry$slot = v;
   return this;
  };
  this.$NewspeakCompilation$SymbolTableEntry = function () {
   return this.$NewspeakCompilation$SymbolTableEntry$slot;
  };
  this.$NewspeakCompilation$SymbolTableEntry$ = function (v) {
   this.$NewspeakCompilation$SymbolTableEntry$slot = v;
   return this;
  };
  this.$NewspeakCompilation$ClassEntry = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`ClassEntry";
   this.name = "NewspeakCompilation`ClassEntry";
   this.header = 2556;
   this.slots = [new SM("enclosingClass", true, false)];
   this.methods = [
    new MM("superInit`NewspeakCompilation`ClassEntry", true, 2557),
    new MM("instance`initializer", true, 2558),
    new MM("isClassBinding", false, 2559),
    new MM("name", false, 2560),
    new MM("init`enclosingClass:", true, 0),
    new MM("enclosingClass", true, 0),
    new MM("enclosingClass:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$ClassEntry = function ($cd, $d) {
    var self = this;
    self.$super$NewspeakCompilation$ClassEntry$slot._$instance$initializer.call(self, $cd, $d);
    return self;
   };
   this.$instance$initializer = function ($cd, $d) {
    var self = this;
    self._$superInit$NewspeakCompilation$ClassEntry($cd, $d);
    return self;
   };
   this.$isClassBinding = function () {
    var self = this;
    return true;
   };
   this.$name = function () {
    var self = this;
    return self._$ast().$selector();
   };
   this.$init$enclosingClass$ = function (v) {
    this.$enclosingClass$slot = v;
    return this;
   };
   this.$enclosingClass = function () {
    return this.$enclosingClass$slot;
   };
   this.$enclosingClass$ = function (v) {
    this.$enclosingClass$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`ClassEntry";
     this._$superInit$NewspeakCompilation$ClassEntry = $.$superInit$NewspeakCompilation$ClassEntry;
     this.$superInit$NewspeakCompilation$ClassEntry = dnuCatcher("$superInit$NewspeakCompilation$ClassEntry");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isClassBinding = this._$isClassBinding = $.$isClassBinding;
     this.$name = this._$name = $.$name;
     this.$init$enclosingClass$ = this._$init$enclosingClass$ = $.$init$enclosingClass$;
     this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
     this.$enclosingClass$ = this._$enclosingClass$ = $.$enclosingClass$;
     this.$enclosingObjects$NewspeakCompilation$ClassEntry = enclosingObjects;
     this.$super$NewspeakCompilation$ClassEntry$slot = runtimeSuperclass;
     this["NewspeakCompilation`ClassEntry"] = function () {
      superBasicNew.call(this);
      this.$enclosingClass$slot = nil;
     };
     this.basicNew = this["NewspeakCompilation`ClassEntry"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`ClassEntry";
    this.slots = [];
    this.methods = [new MM("forDeclaration:atDepth:", true, 0)];
    this.nestedClasses = [];
    this.$forDeclaration$atDepth$ = function ($cd, $d) {
     return (new this.nonMeta.basicNew()).$instance$initializer($cd, $d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`ClassEntry";
      this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
      this.$enclosingObjects$NewspeakCompilation$ClassEntry = enclosingObjects;
      this.$super$NewspeakCompilation$ClassEntry = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$Compiler = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`Compiler";
   this.name = "NewspeakCompilation`Compiler";
   this.header = 2561;
   this.slots = [
    new SM("scopeMap", true, false),
    new SM("NewspeakCompilation`Compiler`Rewriter", true, true),
    new SM("NewspeakCompilation`Compiler`ScopeBuilder", true, true)
   ];
   this.methods = [
    new MM("superInit`NewspeakCompilation`Compiler", true, 2562),
    new MM("instance`initializer", true, 2563),
    new MM("checkForReservedWord:", false, 2564),
    new MM("setterSelectorFor:", false, 2565),
    new MM("compileClassHeader:of:into:within:", false, 2566),
    new MM("compileClassSource:within:", false, 2567),
    new MM("compileExpressionSource:inContext:inMixin:allowBlackMarket:", false, 2568),
    new MM("compileMethodSource:within:", false, 2569),
    new MM("Rewriter", true, 0),
    new MM("ScopeBuilder", true, 0),
    new MM("init`scopeMap:", true, 0),
    new MM("scopeMap", true, 0),
    new MM("scopeMap:", true, 0),
    new MM("init`NewspeakCompilation`Compiler`Rewriter:", true, 0),
    new MM("NewspeakCompilation`Compiler`Rewriter", true, 0),
    new MM("NewspeakCompilation`Compiler`Rewriter:", true, 0),
    new MM("init`NewspeakCompilation`Compiler`ScopeBuilder:", true, 0),
    new MM("NewspeakCompilation`Compiler`ScopeBuilder", true, 0),
    new MM("NewspeakCompilation`Compiler`ScopeBuilder:", true, 0)
   ];
   this.nestedClasses = [
    "NewspeakCompilation`Compiler`Rewriter",
    "NewspeakCompilation`Compiler`ScopeBuilder"
   ];
   this.applications = [];
   this.$superInit$NewspeakCompilation$Compiler = function () {
    var self = this;
    self.$super$NewspeakCompilation$Compiler$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakCompilation$Compiler();
    self._$init$scopeMap$(self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$Dictionary().$new());
    return self;
   };
   this.$checkForReservedWord$ = function ($selector) {
    var self = this;
    if (self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$namer().$isReservedWord$($selector)) {
     self._$Error().$signal$("\"".$$comma($selector).$$comma("\" is a reserved word"));
    } else {
     nil;
    };
    return self;
   };
   this.$setterSelectorFor$ = function ($slot) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$compileClassHeader$of$into$within$ = function ($source, $classDeclMirror, $oldNested, $enclosingDeclIR) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$compileClassSource$within$ = function ($source, $enclosing) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$compileExpressionSource$inContext$inMixin$allowBlackMarket$ = function ($source, $aContext, $enclosing, $allowBlackMarket) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$compileMethodSource$within$ = function ($source, $enclosing) {
    var self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$Rewriter = function () {
    if (nil === this.$NewspeakCompilation$Compiler$Rewriter$slot) {
     var self = this;
     var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$ASTTool();
     var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler);
     var mixin = $.$NewspeakCompilation$Compiler$Rewriter;
     this.$NewspeakCompilation$Compiler$Rewriter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$NewspeakCompilation$Compiler$Rewriter$slot;
   };
   this.$ScopeBuilder = function () {
    if (nil === this.$NewspeakCompilation$Compiler$ScopeBuilder$slot) {
     var self = this;
     var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$ASTTool();
     var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler);
     var mixin = $.$NewspeakCompilation$Compiler$ScopeBuilder;
     this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$NewspeakCompilation$Compiler$ScopeBuilder$slot;
   };
   this.$init$scopeMap$ = function (v) {
    this.$scopeMap$slot = v;
    return this;
   };
   this.$scopeMap = function () {
    return this.$scopeMap$slot;
   };
   this.$scopeMap$ = function (v) {
    this.$scopeMap$slot = v;
    return this;
   };
   this.$init$NewspeakCompilation$Compiler$Rewriter$ = function (v) {
    this.$NewspeakCompilation$Compiler$Rewriter$slot = v;
    return this;
   };
   this.$NewspeakCompilation$Compiler$Rewriter = function () {
    return this.$NewspeakCompilation$Compiler$Rewriter$slot;
   };
   this.$NewspeakCompilation$Compiler$Rewriter$ = function (v) {
    this.$NewspeakCompilation$Compiler$Rewriter$slot = v;
    return this;
   };
   this.$init$NewspeakCompilation$Compiler$ScopeBuilder$ = function (v) {
    this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = v;
    return this;
   };
   this.$NewspeakCompilation$Compiler$ScopeBuilder = function () {
    return this.$NewspeakCompilation$Compiler$ScopeBuilder$slot;
   };
   this.$NewspeakCompilation$Compiler$ScopeBuilder$ = function (v) {
    this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = v;
    return this;
   };
   this.$NewspeakCompilation$Compiler$Rewriter = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter";
    this.name = "NewspeakCompilation`Compiler`Rewriter";
    this.header = 2570;
    this.slots = [
     new SM("scopeStack", false, false),
     new SM("valueExpected", true, false),
     new SM("inClosure", true, false),
     new SM("NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`BooleanAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`ConditionalAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`LocalReadAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`LocalWriteAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`LoopAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`NilAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`OuterSendAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`ParameterAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`ReceiverAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`ReturnAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`SelfSendAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`SendAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`SuperSendAST", true, true),
     new SM("NewspeakCompilation`Compiler`Rewriter`TemporaryAST", true, true)
    ];
    this.methods = [
     new MM("superInit`NewspeakCompilation`Compiler`Rewriter", true, 2571),
     new MM("instance`initializer", true, 2572),
     new MM("applyForEffectTo:", false, 2573),
     new MM("applyForValueTo:", false, 2574),
     new MM("canInlineSeqexps", false, 2575),
     new MM("depthOfEnclosingClass:", false, 2576),
     new MM("emptyBody", false, 2577),
     new MM("futureFor:", false, 2578),
     new MM("implicitReceiverNode", false, 2579),
     new MM("inClosureDuring:", false, 2580),
     new MM("isImplicitReceiverNode:", false, 2581),
     new MM("isInlineableConditional:", false, 2582),
     new MM("isInlineableLoop:", false, 2583),
     new MM("isOuterNode:", false, 2584),
     new MM("isRemovableBlock:withArgs:", false, 2585),
     new MM("isSelfNode:", false, 2586),
     new MM("isSuperNode:", false, 2587),
     new MM("offsetOfEnclosingObjectForClass:", false, 2588),
     new MM("offsetOfImplicitReceiverTarget:", false, 2589),
     new MM("processEventualSend:", false, 2590),
     new MM("processImplicitReceiverSend:", false, 2591),
     new MM("processImplicitReceiverSend:binding:", false, 2592),
     new MM("processInlineableConditional:", false, 2593),
     new MM("processInlineableLoop:", false, 2594),
     new MM("processLocalAccess:of:", false, 2595),
     new MM("processLocalRead:from:", false, 2596),
     new MM("processLocalWrite:to:", false, 2597),
     new MM("processOuterExpression:", false, 2598),
     new MM("processOuterSend:", false, 2599),
     new MM("processSelfSend:", false, 2600),
     new MM("processSetterSend:binding:", false, 2601),
     new MM("processSuperSend:", false, 2602),
     new MM("rewriteBlockNode:forValue:", false, 2603),
     new MM("rewriteInlinedBlockNode:forValue:", false, 2604),
     new MM("blockNode:", false, 2605),
     new MM("cascadedSendNode:", false, 2606),
     new MM("charNode:", false, 2607),
     new MM("codeBodyNode:", false, 2608),
     new MM("messageNode:", false, 2609),
     new MM("messagePatternNode:", false, 2610),
     new MM("methodNode:", false, 2611),
     new MM("normalSendNode:", false, 2612),
     new MM("numberNode:", false, 2613),
     new MM("returnStatNode:", false, 2614),
     new MM("setterSendNode:", false, 2615),
     new MM("stringNode:", false, 2616),
     new MM("symbolNode:", false, 2617),
     new MM("tupleNode:", false, 2618),
     new MM("variableNode:", false, 2619),
     new MM("currentScope", false, 2620),
     new MM("popScope", false, 2621),
     new MM("pushScope:", false, 2622),
     new MM("pushScopeForNode:", false, 2623),
     new MM("BlockLocalReturnAST", true, 0),
     new MM("BooleanAST", true, 0),
     new MM("ConditionalAST", true, 0),
     new MM("EnclosingObjectAST", true, 0),
     new MM("ImplicitReceiverSendAST", true, 0),
     new MM("LocalReadAST", true, 0),
     new MM("LocalWriteAST", true, 0),
     new MM("LoopAST", true, 0),
     new MM("MethodLocalReturnAST", true, 0),
     new MM("NilAST", true, 0),
     new MM("NonlocalReturnAST", true, 0),
     new MM("OrdinarySendAST", true, 0),
     new MM("OuterSendAST", true, 0),
     new MM("ParameterAST", true, 0),
     new MM("ReceiverAST", true, 0),
     new MM("ReturnAST", true, 0),
     new MM("SelfSendAST", true, 0),
     new MM("SendAST", true, 0),
     new MM("SuperSendAST", true, 0),
     new MM("TemporaryAST", true, 0),
     new MM("init`scopeStack:", true, 0),
     new MM("scopeStack", true, 0),
     new MM("init`valueExpected:", true, 0),
     new MM("valueExpected", true, 0),
     new MM("valueExpected:", true, 0),
     new MM("init`inClosure:", true, 0),
     new MM("inClosure", true, 0),
     new MM("inClosure:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`BooleanAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`BooleanAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`BooleanAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`ConditionalAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ConditionalAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ConditionalAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`LocalReadAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`LocalReadAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`LocalReadAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`LocalWriteAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`LocalWriteAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`LocalWriteAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`LoopAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`LoopAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`LoopAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`NilAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`NilAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`NilAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`OuterSendAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`OuterSendAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`OuterSendAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`ParameterAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ParameterAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ParameterAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`ReceiverAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ReceiverAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ReceiverAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`ReturnAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ReturnAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`ReturnAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`SelfSendAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`SelfSendAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`SelfSendAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`SendAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`SendAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`SendAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`SuperSendAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`SuperSendAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`SuperSendAST:", true, 0),
     new MM("init`NewspeakCompilation`Compiler`Rewriter`TemporaryAST:", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`TemporaryAST", true, 0),
     new MM("NewspeakCompilation`Compiler`Rewriter`TemporaryAST:", true, 0)
    ];
    this.nestedClasses = [
     "NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST",
     "NewspeakCompilation`Compiler`Rewriter`BooleanAST",
     "NewspeakCompilation`Compiler`Rewriter`ConditionalAST",
     "NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST",
     "NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST",
     "NewspeakCompilation`Compiler`Rewriter`LocalReadAST",
     "NewspeakCompilation`Compiler`Rewriter`LocalWriteAST",
     "NewspeakCompilation`Compiler`Rewriter`LoopAST",
     "NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST",
     "NewspeakCompilation`Compiler`Rewriter`NilAST",
     "NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST",
     "NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST",
     "NewspeakCompilation`Compiler`Rewriter`OuterSendAST",
     "NewspeakCompilation`Compiler`Rewriter`ParameterAST",
     "NewspeakCompilation`Compiler`Rewriter`ReceiverAST",
     "NewspeakCompilation`Compiler`Rewriter`ReturnAST",
     "NewspeakCompilation`Compiler`Rewriter`SelfSendAST",
     "NewspeakCompilation`Compiler`Rewriter`SendAST",
     "NewspeakCompilation`Compiler`Rewriter`SuperSendAST",
     "NewspeakCompilation`Compiler`Rewriter`TemporaryAST"
    ];
    this.applications = [];
    this.$superInit$NewspeakCompilation$Compiler$Rewriter = function () {
     var self = this;
     self.$super$NewspeakCompilation$Compiler$Rewriter$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     var self = this;
     self._$superInit$NewspeakCompilation$Compiler$Rewriter();
     self._$init$scopeStack$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
     self._$init$valueExpected$(true);
     self._$init$inClosure$(false);
     return self;
    };
    this.$applyForEffectTo$ = function ($node) {
     var self = this;
     var $original = nil;
     var $result = nil;
     $original = self._$valueExpected();
     self._$valueExpected$(false);
     $result = $node.$apply$(self);
     self._$valueExpected$($original);
     return $result;
    };
    this.$applyForValueTo$ = function ($node) {
     var self = this;
     var $original = nil;
     var $result = nil;
     $original = self._$valueExpected();
     self._$valueExpected$(true);
     $result = $node.$apply$(self);
     self._$valueExpected$($original);
     return $result;
    };
    this.$canInlineSeqexps = function () {
     var self = this;
     return true;
    };
    this.$depthOfEnclosingClass$ = function ($name) {
     var self = this;
     var $entry = nil;
     $entry = self._$currentScope().$at$("@currentClass");
     {
      nil;
      for (; !$entry.$isNil(); ) {
       if ($entry.$name().$$equal($name)) {
        return $entry.$depth();
       } else {
        nil;
       };
       $entry = $entry.$enclosingClass();
      };
     };
     self._$Error().$signal$("No enclosing class named \"".$$comma($name).$$comma("\""));
     return self;
    };
    this.$emptyBody = function () {
     var self = this;
     var $body = nil;
     "BOGUS";
     $body = (function (cascadeReceiver) {
      cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
      cascadeReceiver.$temporaries$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
      return cascadeReceiver.$statements$((function (cascadeReceiver) {
       cascadeReceiver.$add$(self._$NilAST().$new());
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new()));
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new());
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($body, nil);
     return $body;
    };
    this.$futureFor$ = function ($expression) {
     var self = this;
     var $scope = nil;
     var $block = nil;
     var $codebody = nil;
     var $futureExp = nil;
     $scope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$Scope().$new();
     $scope.$superScope$(self._$currentScope());
     $futureExp = (function (cascadeReceiver) {
      cascadeReceiver.$receiver$((function (cascadeReceiver) {
       cascadeReceiver.$receiver$(self._$implicitReceiverNode());
       return cascadeReceiver.$message$((function (cascadeReceiver) {
        cascadeReceiver.$selector$("Future");
        return cascadeReceiver.$arguments$([]);
       })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new()));
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$NormalSendAST().$new()));
      return cascadeReceiver.$message$((function (cascadeReceiver) {
       cascadeReceiver.$selector$("computing:");
       return cascadeReceiver.$arguments$([$block = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$BlockAST().$new().$body$($codebody = (function (cascadeReceiver) {
        cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
        cascadeReceiver.$temporaries$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
        return cascadeReceiver.$statements$([$expression]);
       })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new()))]);
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new()));
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$NormalSendAST().$new());
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($codebody, $scope);
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($block, $scope);
     return $futureExp;
    };
    this.$implicitReceiverNode = function () {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$name$("@here");
      cascadeReceiver.$start$(0);
      return cascadeReceiver.$end$(0);
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$VariableAST().$new());
    };
    this.$inClosureDuring$ = function ($block) {
     var self = this;
     var $original = nil;
     $original = self._$inClosure();
     self._$inClosure$(true);
     return $block.$ensure$(function () {
      return (function ($setter_arg) {
       self._$inClosure$($setter_arg);
       return $setter_arg;
      }).$value$($original);
     });
    };
    this.$isImplicitReceiverNode$ = function ($node) {
     var self = this;
     if (!$node.$isVariableNode()) {
      return false;
     } else {
      nil;
     };
     return $node.$name().$$equal("@here");
    };
    this.$isInlineableConditional$ = function ($node) {
     var self = this;
     var NLR = new Object();
     try {
      if (!self._$canInlineSeqexps()) {
       if (self._$valueExpected()) {
        return false;
       } else {
        nil;
       };
      } else {
       nil;
      };
      if ($node.$message().$isEventual()) {
       return false;
      } else {
       nil;
      };
      if (![
       "ifTrue:",
       "ifFalse:",
       "ifTrue:ifFalse:",
       "ifFalse:ifTrue:"
      ].$includes$($node.$message().$selector())) {
       return false;
      } else {
       nil;
      };
      $node.$message().$arguments().$do$(function ($arg) {
       return self._$isRemovableBlock$withArgs$($arg, 0).$ifFalse$(function () {
        {
         NLR.value = false;
         throw NLR;
        };
       });
      });
      return true;
     } catch (NLR_exception) {
      if (NLR === NLR_exception) {
       return NLR_exception.value;
      } else {
       throw NLR_exception;
      };
     };
    };
    this.$isInlineableLoop$ = function ($node) {
     var self = this;
     var NLR = new Object();
     try {
      var $selector = nil;
      var $args = nil;
      if (!self._$canInlineSeqexps()) {
       if (self._$valueExpected()) {
        return false;
       } else {
        nil;
       };
      } else {
       nil;
      };
      if ($node.$message().$isEventual()) {
       return false;
      } else {
       nil;
      };
      $selector = $node.$message().$selector();
      $args = $node.$message().$arguments();
      if ([
       "whileTrue",
       "whileFalse",
       "whileTrue:",
       "whileFalse:",
       "repeat"
      ].$includes$($selector)) {
       $args.$do$(function ($each) {
        return self._$isRemovableBlock$withArgs$($each, 0).$ifFalse$(function () {
         {
          NLR.value = false;
          throw NLR;
         };
        });
       });
       return self._$isRemovableBlock$withArgs$($node.$receiver(), 0);
      } else {
       nil;
      };
      if ($selector.$$equal("timesRepeat:")) {
       return self._$isRemovableBlock$withArgs$($args.$last(), 0);
      } else {
       nil;
      };
      if (![
       "to:do:",
       "to:by:do:"
      ].$includes$($selector)) {
       return false;
      } else {
       nil;
      };
      if (!self._$isRemovableBlock$withArgs$($args.$last(), 1)) {
       return false;
      } else {
       nil;
      };
      if ($selector.$$equal("to:do:")) {
       return true;
      } else {
       nil;
      };
      return $args.$size().$$equal(3);
     } catch (NLR_exception) {
      if (NLR === NLR_exception) {
       return NLR_exception.value;
      } else {
       throw NLR_exception;
      };
     };
    };
    this.$isOuterNode$ = function ($node) {
     var self = this;
     if (!$node.$isVariableNode()) {
      return false;
     } else {
      nil;
     };
     return $node.$name().$$equal("outer");
    };
    this.$isRemovableBlock$withArgs$ = function ($block, $numArgs) {
     var self = this;
     if (!$block.$isBlockNode()) {
      return false;
     } else {
      nil;
     };
     if (!$block.$parameters().$size().$$equal($numArgs)) {
      return false;
     } else {
      nil;
     };
     return true;
    };
    this.$isSelfNode$ = function ($node) {
     var self = this;
     if (!$node.$isVariableNode()) {
      return false;
     } else {
      nil;
     };
     return $node.$name().$$equal("self");
    };
    this.$isSuperNode$ = function ($node) {
     var self = this;
     if (!$node.$isVariableNode()) {
      return false;
     } else {
      nil;
     };
     return $node.$name().$$equal("super");
    };
    this.$offsetOfEnclosingObjectForClass$ = function ($name) {
     var self = this;
     var $entry = nil;
     $entry = self._$currentScope().$at$("@currentClass");
     {
      nil;
      for (; !$entry.$isNil(); ) {
       if ($entry.$name().$$equal($name)) {
        var $offset = nil;
        $offset = (self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$currentDepth() - $entry.$depth()) - 1;
        self._$assert$message$(function () {
         return $offset >= 0;
        }, "Invalid enclosing object index");
        return $offset;
       } else {
        nil;
       };
       $entry = $entry.$enclosingClass();
      };
     };
     self._$Error().$signal$("No enclosing class named \"".$$comma($name).$$comma("\""));
     return self;
    };
    this.$offsetOfImplicitReceiverTarget$ = function ($binding) {
     var self = this;
     var $depth = nil;
     $depth = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$currentDepth() - $binding.$depth();
     self._$assert$message$(function () {
      return $depth >= 0;
     }, "Invalid enclosing object index");
     return $depth;
    };
    this.$processEventualSend$ = function ($node) {
     var self = this;
     self._$subclassResponsibility();
     return self;
    };
    this.$processImplicitReceiverSend$ = function ($node) {
     var self = this;
     var $message = nil;
     var $selector = nil;
     var $binding = nil;
     $message = $node.$message();
     $selector = $message.$selector();
     if ($selector.$$equal("self")) {
      return self._$ReceiverAST().$new().$copyPositionFrom$($message);
     } else {
      nil;
     };
     if ($selector.$$equal("nil")) {
      return self._$NilAST().$new().$copyPositionFrom$($message);
     } else {
      nil;
     };
     if ($selector.$$equal("false")) {
      return self._$BooleanAST().$withValue$(false).$copyPositionFrom$($message);
     } else {
      nil;
     };
     if ($selector.$$equal("true")) {
      return self._$BooleanAST().$withValue$(true).$copyPositionFrom$($message);
     } else {
      nil;
     };
     $binding = self._$currentScope().$at$ifAbsent$($selector, function () {
      return nil;
     });
     if ($binding.$isNil()) {
      return self._$processImplicitReceiverSend$binding$($message, nil);
     } else {
      nil;
     };
     if ($binding.$isLocalBinding()) {
      return self._$processLocalAccess$of$($message, $binding);
     } else {
      nil;
     };
     if ($binding.$isDebugMappedLocalEntry()) {
      return self._$processMappedVariable$decl$($message, $binding);
     } else {
      nil;
     };
     self._$assert$message$(function () {
      return $binding.$isMethodBinding().$$pipe($binding.$isSlotBinding()).$$pipe($binding.$isClassBinding());
     }, "Unknown binding type");
     return self._$processImplicitReceiverSend$binding$($message, $binding);
    };
    this.$processImplicitReceiverSend$binding$ = function ($msg, $binding) {
     var self = this;
     var $depth = nil;
     $depth = $binding.$isNil().$ifTrue$ifFalse$(function () {
      return 0;
     }, function () {
      return self._$offsetOfImplicitReceiverTarget$($binding);
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$depth$($depth);
      cascadeReceiver.$binding$($binding);
      return cascadeReceiver.$message$($msg.$apply$(self));
     })(self._$ImplicitReceiverSendAST().$new()).$copyPositionFrom$($msg);
    };
    this.$processInlineableConditional$ = function ($node) {
     var self = this;
     var $receiver = nil;
     var $selector = nil;
     var $numArgs = nil;
     var $arg1 = nil;
     var $arg2 = nil;
     $receiver = $node.$receiver().$apply$(self);
     $selector = $node.$message().$selector();
     $numArgs = $node.$message().$arguments().$size();
     $arg1 = ($numArgs > 0).$ifTrue$(function () {
      return self._$rewriteInlinedBlockNode$forValue$($node.$message().$arguments().$at$(1), self._$valueExpected()).$body();
     });
     $arg2 = ($numArgs > 1).$ifTrue$(function () {
      return self._$rewriteInlinedBlockNode$forValue$($node.$message().$arguments().$at$(2), self._$valueExpected()).$body();
     });
     if ($selector.$$equal("ifTrue:")) {
      return self._$ConditionalAST().$if$is$then$($receiver, true, $arg1);
     } else {
      nil;
     };
     if ($selector.$$equal("ifFalse:")) {
      return self._$ConditionalAST().$if$is$then$($receiver, false, $arg1);
     } else {
      nil;
     };
     if ($selector.$$equal("ifTrue:ifFalse:")) {
      return self._$ConditionalAST().$if$is$then$else$($receiver, true, $arg1, $arg2);
     } else {
      nil;
     };
     if ($selector.$$equal("ifFalse:ifTrue:")) {
      return self._$ConditionalAST().$if$is$then$else$($receiver, false, $arg1, $arg2);
     } else {
      nil;
     };
     self._$assert$message$(function () {
      return false;
     }, "Unknown conditional selector");
     return self;
    };
    this.$processInlineableLoop$ = function ($node) {
     var self = this;
     var $rcvr = nil;
     var $msg = nil;
     var $sel = nil;
     var $numArgs = nil;
     var $arg1 = nil;
     var $arg2 = nil;
     var $arg3 = nil;
     $rcvr = $node.$receiver();
     $msg = $node.$message();
     $sel = $msg.$selector();
     $numArgs = $msg.$arguments().$size();
     $arg1 = ($numArgs >= 1).$ifTrue$(function () {
      return $msg.$arguments().$at$(1);
     });
     $arg2 = ($numArgs >= 2).$ifTrue$(function () {
      return $msg.$arguments().$at$(2);
     });
     $arg3 = ($numArgs >= 3).$ifTrue$(function () {
      return $msg.$arguments().$at$(3);
     });
     if ($sel.$$equal("whileTrue")) {
      return self._$LoopAST().$new().$while$do$(true, self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body());
     } else {
      nil;
     };
     if ($sel.$$equal("whileFalse")) {
      return self._$LoopAST().$new().$while$do$(false, self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body());
     } else {
      nil;
     };
     if ($sel.$$equal("whileTrue:")) {
      return self._$LoopAST().$new().$while$is$do$(self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body(), true, self._$rewriteInlinedBlockNode$forValue$($arg1, false).$body());
     } else {
      nil;
     };
     if ($sel.$$equal("whileFalse:")) {
      return self._$LoopAST().$new().$while$is$do$(self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body(), false, self._$rewriteInlinedBlockNode$forValue$($arg1, false).$body());
     } else {
      nil;
     };
     if ($sel.$$equal("repeat")) {
      return self._$LoopAST().$new().$repeat$(self._$rewriteInlinedBlockNode$forValue$($rcvr, false).$body());
     } else {
      nil;
     };
     if ($sel.$$equal("timesRepeat:")) {
      return self._$LoopAST().$new().$do$timesRepeat$($rcvr.$apply$(self), self._$rewriteInlinedBlockNode$forValue$($arg1, false));
     } else {
      nil;
     };
     if ($sel.$$equal("to:do:")) {
      return self._$LoopAST().$new().$from$to$do$($rcvr.$apply$(self), $arg1.$apply$(self), self._$rewriteInlinedBlockNode$forValue$($arg2, false));
     } else {
      nil;
     };
     if ($sel.$$equal("to:by:do:")) {
      return self._$LoopAST().$new().$from$to$by$do$($rcvr.$apply$(self), $arg1.$apply$(self), $arg2.$apply$(self), self._$rewriteInlinedBlockNode$forValue$($arg3, false));
     } else {
      nil;
     };
     self._$assert$message$(function () {
      return false;
     }, "Unknown loop selector");
     return self;
    };
    this.$processLocalAccess$of$ = function ($msg, $decl) {
     var self = this;
     return $msg.$selector().$last().$$equal(":").$ifTrue$ifFalse$(function () {
      return self._$processLocalWrite$to$($msg, $decl);
     }, function () {
      return self._$processLocalRead$from$($msg, $decl);
     });
    };
    this.$processLocalRead$from$ = function ($message, $declaration) {
     var self = this;
     self._$assert$message$(function () {
      return $message.$arguments().$isEmpty();
     }, "");
     self._$assert$message$(function () {
      return $declaration.$isNil().$not();
     }, "");
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($message.$start());
      return cascadeReceiver.$end$($message.$end());
     })(self._$LocalReadAST().$of$($declaration));
    };
    this.$processLocalWrite$to$ = function ($message, $declaration) {
     var self = this;
     self._$assert$message$(function () {
      return $message.$arguments().$size().$$equal(1);
     }, "");
     self._$assert$message$(function () {
      return $declaration.$isTemporaryAST();
     }, "");
     return self._$LocalWriteAST().$to$assign$($declaration, self._$applyForValueTo$($message.$arguments().$first())).$copyPositionFrom$($message);
    };
    this.$processOuterExpression$ = function ($node) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$depth$(self._$offsetOfEnclosingObjectForClass$($node.$message().$selector()));
      cascadeReceiver.$start$($node.$receiver().$start());
      return cascadeReceiver.$end$($node.$message().$end());
     })(self._$EnclosingObjectAST().$new());
    };
    this.$processOuterSend$ = function ($node) {
     var self = this;
     var $binding = nil;
     $binding = self._$currentScope().$at$depth$($node.$message().$selector(), self._$depthOfEnclosingClass$($node.$receiver().$message().$selector()) + 1);
     return (function (cascadeReceiver) {
      cascadeReceiver.$depth$(self._$offsetOfEnclosingObjectForClass$($node.$receiver().$message().$selector()));
      cascadeReceiver.$binding$($binding);
      cascadeReceiver.$message$($node.$message().$apply$(self));
      cascadeReceiver.$start$($node.$receiver().$receiver().$start());
      return cascadeReceiver.$end$($node.$message().$end());
     })(self._$OuterSendAST().$new());
    };
    this.$processSelfSend$ = function ($node) {
     var self = this;
     var $binding = nil;
     $binding = self._$currentScope().$at$depth$($node.$message().$selector(), self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$currentDepth());
     return (function (cascadeReceiver) {
      cascadeReceiver.$message$($node.$message().$apply$(self));
      cascadeReceiver.$binding$($binding);
      return cascadeReceiver.$copyPositionFrom$($node);
     })(self._$SelfSendAST().$new());
    };
    this.$processSetterSend$binding$ = function ($node, $binding) {
     var self = this;
     var $setterTempBinding = nil;
     var $setterTempRead = nil;
     var $setterTempWrite = nil;
     var $message = nil;
     var $send = nil;
     var $depth = nil;
     var $body = nil;
     if (!self._$valueExpected()) {
      return self._$processImplicitReceiverSend$binding$($node.$message(), $binding);
     } else {
      nil;
     };
     $setterTempBinding = self._$currentScope().$at$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp());
     $setterTempBinding.$used$(true);
     $setterTempWrite = self._$LocalWriteAST().$to$assign$($setterTempBinding, $node.$message().$arguments().$first().$apply$(self));
     $setterTempRead = self._$LocalReadAST().$of$($setterTempBinding);
     $message = (function (cascadeReceiver) {
      cascadeReceiver.$selector$($node.$message().$selector());
      return cascadeReceiver.$arguments$([$setterTempRead]);
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new());
     self._$assert$message$(function () {
      return self._$isImplicitReceiverNode$($node.$receiver());
     }, "Setter send receiver should be implicit");
     $depth = $binding.$isNil().$ifTrue$ifFalse$(function () {
      return 0;
     }, function () {
      return self._$offsetOfImplicitReceiverTarget$($binding);
     });
     $send = (function (cascadeReceiver) {
      cascadeReceiver.$depth$($depth);
      cascadeReceiver.$binding$($binding);
      return cascadeReceiver.$message$($message);
     })(self._$ImplicitReceiverSendAST().$new());
     $body = (function (cascadeReceiver) {
      cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
      cascadeReceiver.$temporaries$([]);
      return cascadeReceiver.$statements$([
       $setterTempWrite,
       $send,
       $setterTempRead
      ]);
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new());
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($body, self._$currentScope());
     return $body;
    };
    this.$processSuperSend$ = function ($node) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$message$($node.$message().$apply$(self));
      return cascadeReceiver.$copyPositionFrom$($node);
     })(self._$SuperSendAST().$new());
    };
    this.$rewriteBlockNode$forValue$ = function ($node, $forValue) {
     var self = this;
     var $rewrittenNode = nil;
     var $params = nil;
     var $bodyScope = nil;
     if (!$node.$body().$start().$isNumber()) {
      $node.$body().$start$($node.$start());
      $node.$body().$end$($node.$end());
     } else {
      nil;
     };
     $params = $node.$parameters().$collect$(function ($p) {
      self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($p.$name());
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($p.$start());
       return cascadeReceiver.$end$($p.$end());
      })(self._$ParameterAST().$name$type$($p.$name(), $p.$type()));
     });
     $bodyScope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node.$body());
     $params.$do$(function ($each) {
      return $bodyScope.$at$($each.$name()).$ast$($each);
     });
     $rewrittenNode = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$BlockAST().$new().$body$($forValue.$ifTrue$ifFalse$(function () {
      return self._$applyForValueTo$($node.$body());
     }, function () {
      return self._$applyForEffectTo$($node.$body());
     }));
     (function (cascadeReceiver) {
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })($rewrittenNode);
     $rewrittenNode.$body().$parameters$($params);
     if ($node.$body().$statements().$isEmpty()) {
      $rewrittenNode.$body().$statements().$add$((function (cascadeReceiver) {
       cascadeReceiver.$start$($node.$body().$start());
       return cascadeReceiver.$end$($node.$body().$end());
      })(self._$NilAST().$new()));
     } else {
      nil;
     };
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($rewrittenNode, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node));
     return $rewrittenNode;
    };
    this.$rewriteInlinedBlockNode$forValue$ = function ($node, $forValue) {
     var self = this;
     return self._$rewriteBlockNode$forValue$($node, $forValue);
    };
    this.$blockNode$ = function ($node) {
     var self = this;
     var $rewrittenBlock = nil;
     var $last = nil;
     self._$inClosureDuring$(function () {
      $rewrittenBlock = self._$rewriteBlockNode$forValue$($node, true);
      $last = $rewrittenBlock.$body().$statements().$last();
      return ($last.$isReturnStatNode() || $last.$isBlockLocalReturnAST()).$ifFalse$(function () {
       $rewrittenBlock.$body().$statements().$removeLast();
       return $rewrittenBlock.$body().$statements().$add$(self._$BlockLocalReturnAST().$expression$($last).$copyPositionFrom$($last));
      });
     });
     return $rewrittenBlock;
    };
    this.$cascadedSendNode$ = function ($node) {
     var self = this;
     var $prevSend = nil;
     var $msg = nil;
     $prevSend = $node.$previousSend().$apply$(self);
     $msg = $node.$message().$apply$(self);
     return self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CascadedSendAST().$new().$to$cascade$($prevSend, $msg);
    };
    this.$charNode$ = function ($node) {
     var self = this;
     return $node;
    };
    this.$codeBodyNode$ = function ($node) {
     var self = this;
     var $bodyScope = nil;
     var $temporaries = nil;
     var $setterEntry = nil;
     var $statements = nil;
     var $result = nil;
     $bodyScope = self._$pushScopeForNode$($node);
     $temporaries = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new();
     $node.$temporaries().$do$(function ($varDecl) {
      var $t = nil;
      self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($varDecl.$name());
      $t = self._$TemporaryAST().$name$type$($varDecl.$name(), $varDecl.$type());
      $t.$copyPositionFrom$($varDecl);
      $bodyScope.$at$($t.$name()).$ast$($t);
      return $temporaries.$add$($t);
     });
     $setterEntry = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$LocalEntry().$forDeclaration$atDepth$(self._$TemporaryAST().$name$type$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp(), nil), nil);
     $bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp(), $setterEntry);
     $bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp().$$comma(":").$asSymbol(), $setterEntry);
     $temporaries.$add$($setterEntry.$ast());
     $statements = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new();
     $node.$temporaries().$do$(function ($varDecl) {
      var $initializer = nil;
      $initializer = $varDecl.$initializer();
      return nil.$$equal($initializer).$ifFalse$(function () {
       if (!$node.$isSeq()) {
        $initializer = self._$futureFor$($initializer);
       } else {
        nil;
       };
       return $statements.$add$(self._$LocalWriteAST().$to$assign$($bodyScope.$at$($varDecl.$name()), self._$applyForValueTo$($initializer)));
      });
     });
     $node.$statements().$keysAndValuesDo$(function ($index, $statement) {
      var $rewritten = nil;
      $rewritten = ($index.$$equal($node.$statements().$size()) && self._$valueExpected()).$ifTrue$ifFalse$(function () {
       return self._$applyForValueTo$($statement);
      }, function () {
       return self._$applyForEffectTo$($statement);
      });
      return $statements.$add$($rewritten);
     });
     if (!$setterEntry.$used()) {
      $bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp(), nil);
      $bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp().$$comma(":").$asSymbol(), nil);
      $temporaries.$remove$($setterEntry.$ast());
     } else {
      nil;
     };
     self._$popScope();
     $result = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new().$parameters$temporaries$statements$($node.$parameters(), $temporaries, $statements);
     $result.$literalMessages$($node.$literalMessages());
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($result, $bodyScope);
     return $result;
    };
    this.$messageNode$ = function ($node) {
     var self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$send$with$($node.$selector(), $node.$arguments().$collect$(function ($arg) {
       return self._$applyForValueTo$($arg);
      }));
      cascadeReceiver.$isEventual$($node.$isEventual());
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new());
    };
    this.$messagePatternNode$ = function ($node) {
     var self = this;
     var $params = nil;
     var $patternScope = nil;
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($node.$selector());
     $params = $node.$parameters().$collect$(function ($p) {
      self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($p.$name());
      return (function (cascadeReceiver) {
       cascadeReceiver.$start$($p.$start());
       return cascadeReceiver.$end$($p.$end());
      })(self._$ParameterAST().$name$type$($p.$name(), $p.$type()));
     });
     $patternScope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node);
     $params.$do$(function ($p) {
      return $patternScope.$at$($p.$name()).$ast$($p);
     });
     return (function (cascadeReceiver) {
      cascadeReceiver.$selector$parameters$($node.$selector(), $params);
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessagePatternAST().$new());
    };
    this.$methodNode$ = function ($node) {
     var self = this;
     var $pattern = nil;
     var $body = nil;
     var $accessModifier = nil;
     var $result = nil;
     $pattern = $node.$pattern().$apply$(self);
     if ($node.$body().$statements().$isEmpty() || $node.$body().$statements().$last().$isReturnStatNode().$not()) {
      $node.$body().$statements().$add$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$ReturnStatAST().$new().$expression$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$VariableAST().$new().$name$("self")));
     } else {
      nil;
     };
     $body = $node.$body().$apply$(self);
     $body.$parameters$($pattern.$parameters());
     self._$assert$message$(function () {
      return self._$inClosure().$not();
     }, "");
     $result = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MethodAST().$new().$pattern$body$accessModifier$($pattern, $body, $node.$accessModifier());
     self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($result, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node));
     return $result;
    };
    this.$normalSendNode$ = function ($node) {
     var self = this;
     if ($node.$message().$isEventual()) {
      return self._$processEventualSend$($node);
     } else {
      nil;
     };
     if (self._$isImplicitReceiverNode$($node.$receiver())) {
      return self._$processImplicitReceiverSend$($node);
     } else {
      nil;
     };
     if (self._$isSelfNode$($node.$receiver())) {
      return self._$processSelfSend$($node);
     } else {
      nil;
     };
     if (self._$isSuperNode$($node.$receiver())) {
      return self._$processSuperSend$($node);
     } else {
      nil;
     };
     if (self._$isOuterNode$($node.$receiver())) {
      return self._$processOuterExpression$($node);
     } else {
      nil;
     };
     if ($node.$receiver().$isSendNode() && self._$isOuterNode$($node.$receiver().$receiver())) {
      return self._$processOuterSend$($node);
     } else {
      nil;
     };
     if (self._$isInlineableConditional$($node)) {
      return self._$processInlineableConditional$($node);
     } else {
      nil;
     };
     if (self._$isInlineableLoop$($node)) {
      return self._$processInlineableLoop$($node);
     } else {
      nil;
     };
     return (function (cascadeReceiver) {
      cascadeReceiver.$start$($node.$start());
      return cascadeReceiver.$end$($node.$end());
     })(self._$OrdinarySendAST().$to$send$($node.$receiver().$apply$(self), $node.$message().$apply$(self)));
    };
    this.$numberNode$ = function ($node) {
     var self = this;
     return $node;
    };
    this.$returnStatNode$ = function ($node) {
     var self = this;
     return self._$inClosure().$ifTrue$ifFalse$(function () {
      return self._$NonlocalReturnAST();
     }, function () {
      return self._$MethodLocalReturnAST();
     }).$expression$(self._$applyForValueTo$($node.$expression())).$copyPositionFrom$($node);
    };
    this.$setterSendNode$ = function ($node) {
     var self = this;
     var $message = nil;
     var $selector = nil;
     var $binding = nil;
     $message = $node.$message();
     $selector = $message.$selector();
     $binding = self._$currentScope().$at$ifAbsent$($selector, function () {
      return nil;
     });
     if ($binding.$isNil()) {
      return self._$processSetterSend$binding$($node, nil);
     } else {
      nil;
     };
     if ($binding.$isLocalBinding()) {
      return self._$processLocalAccess$of$($message, $binding);
     } else {
      nil;
     };
     if ($binding.$isDebugMappedLocalEntry()) {
      return self._$processMappedVariable$decl$($message, $binding);
     } else {
      nil;
     };
     return self._$processSetterSend$binding$($node, $binding);
    };
    this.$stringNode$ = function ($node) {
     var self = this;
     return $node;
    };
    this.$symbolNode$ = function ($node) {
     var self = this;
     return $node;
    };
    this.$tupleNode$ = function ($node) {
     var self = this;
     return self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$TupleAST().$new().$elements$($node.$elements().$collect$(function ($e) {
      return self._$applyForValueTo$($e);
     }));
    };
    this.$variableNode$ = function ($aNode) {
     var self = this;
     "BOGUS";
     self._$assert$message$(function () {
      return $aNode.$start().$isNumber();
     }, "");
     if ($aNode.$name().$$equal("self")) {
      return self._$ReceiverAST().$new().$copyPositionFrom$($aNode);
     } else {
      nil;
     };
     if ($aNode.$name().$$equal("nil")) {
      return self._$NilAST().$new().$copyPositionFrom$($aNode);
     } else {
      nil;
     };
     if ($aNode.$name().$$equal("true")) {
      return self._$BooleanAST().$withValue$(true).$copyPositionFrom$($aNode);
     } else {
      nil;
     };
     if ($aNode.$name().$$equal("false")) {
      return self._$BooleanAST().$withValue$(false).$copyPositionFrom$($aNode);
     } else {
      nil;
     };
     self._$assert$message$(function () {
      return $aNode.$name().$$equal("super").$not();
     }, "\"super\" is not a valid expression");
     self._$assert$message$(function () {
      return $aNode.$name().$$equal("outer").$not();
     }, "\"outer\" is not a valid expression");
     self._$halt();
     return $aNode;
    };
    this.$currentScope = function () {
     var self = this;
     return self._$scopeStack().$last();
    };
    this.$popScope = function () {
     var self = this;
     return self._$scopeStack().$removeLast();
    };
    this.$pushScope$ = function ($scope) {
     var self = this;
     return self._$scopeStack().$addLast$($scope);
    };
    this.$pushScopeForNode$ = function ($node) {
     var self = this;
     return self._$pushScope$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node));
    };
    this.$BlockLocalReturnAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot) {
      var self = this;
      var superclass = self._$ReturnAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot;
    };
    this.$BooleanAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$BooleanAST;
      this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot;
    };
    this.$ConditionalAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot;
    };
    this.$EnclosingObjectAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST;
      this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot;
    };
    this.$ImplicitReceiverSendAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot) {
      var self = this;
      var superclass = self._$SendAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot;
    };
    this.$LocalReadAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST;
      this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot;
    };
    this.$LocalWriteAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST;
      this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot;
    };
    this.$LoopAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$LoopAST;
      this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot;
    };
    this.$MethodLocalReturnAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot) {
      var self = this;
      var superclass = self._$ReturnAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot;
    };
    this.$NilAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$NilAST;
      this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot;
    };
    this.$NonlocalReturnAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot) {
      var self = this;
      var superclass = self._$ReturnAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot;
    };
    this.$OrdinarySendAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot) {
      var self = this;
      var superclass = self._$SendAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot;
    };
    this.$OuterSendAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot) {
      var self = this;
      var superclass = self._$SendAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot;
    };
    this.$ParameterAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ParameterAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot;
    };
    this.$ReceiverAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot;
    };
    this.$ReturnAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot;
    };
    this.$SelfSendAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot) {
      var self = this;
      var superclass = self._$SendAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot;
    };
    this.$SendAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$SendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot;
    };
    this.$SuperSendAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot) {
      var self = this;
      var superclass = self._$SendAST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot;
    };
    this.$TemporaryAST = function () {
     if (nil === this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot) {
      var self = this;
      var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
      var enclosingObjects = [this].concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
      var mixin = $.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST;
      this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
     };
     return this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot;
    };
    this.$init$scopeStack$ = function (v) {
     this.$scopeStack$slot = v;
     return this;
    };
    this.$scopeStack = function () {
     return this.$scopeStack$slot;
    };
    this.$init$valueExpected$ = function (v) {
     this.$valueExpected$slot = v;
     return this;
    };
    this.$valueExpected = function () {
     return this.$valueExpected$slot;
    };
    this.$valueExpected$ = function (v) {
     this.$valueExpected$slot = v;
     return this;
    };
    this.$init$inClosure$ = function (v) {
     this.$inClosure$slot = v;
     return this;
    };
    this.$inClosure = function () {
     return this.$inClosure$slot;
    };
    this.$inClosure$ = function (v) {
     this.$inClosure$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$LoopAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$NilAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$NilAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$NilAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$SendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$SendAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$SendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = v;
     return this;
    };
    this.$init$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = function () {
     return this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = function (v) {
     this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = v;
     return this;
    };
    this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
     this.header = 2624;
     this.slots = [];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST", true, 2625),
      new MM("instance`initializer", true, 2626),
      new MM("apply:", false, 2627)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = function ($e) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot._$instance$initializer.call(self, $e);
      return self;
     };
     this.$instance$initializer = function ($e) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST($e);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$blockLocalReturnNode$(self);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
      this.slots = [];
      this.methods = [new MM("expression:", true, 0)];
      this.nestedClasses = [];
      this.$expression$ = function ($e) {
       return (new this.nonMeta.basicNew()).$instance$initializer($e);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
        this.$expression$ = this._$expression$ = $.$expression$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`BooleanAST";
     this.header = 2628;
     this.slots = [new SM("value", false, false)];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`BooleanAST", true, 2629),
      new MM("instance`initializer", true, 2630),
      new MM("apply:", false, 2631),
      new MM("isBoolNode", false, 2632),
      new MM("name", false, 2633),
      new MM("printOn:", false, 2634),
      new MM("init`value:", true, 0),
      new MM("value", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST = function ($b) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($b) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST($b);
      self._$init$value$($b);
      return self;
     };
     this.$apply$ = function ($aTool) {
      var self = this;
      return $aTool.$boolNode$(self);
     };
     this.$isBoolNode = function () {
      var self = this;
      return true;
     };
     this.$name = function () {
      var self = this;
      return self._$value().$printString().$asSymbol();
     };
     this.$printOn$ = function ($stream) {
      var self = this;
      $stream.$nextPutAll$("BooleanAST: ");
      self._$value().$printOn$($stream);
      return self;
     };
     this.$init$value$ = function (v) {
      this.$value$slot = v;
      return this;
     };
     this.$value = function () {
      return this.$value$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isBoolNode = this._$isBoolNode = $.$isBoolNode;
       this._$name = $.$name;
       this.$name = dnuCatcher("$name");
       this.$printOn$ = this._$printOn$ = $.$printOn$;
       this.$init$value$ = this._$init$value$ = $.$init$value$;
       this.$value = this._$value = $.$value;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BooleanAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`BooleanAST"] = function () {
        superBasicNew.call(this);
        this.$value$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`BooleanAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
      this.slots = [];
      this.methods = [new MM("withValue:", true, 0)];
      this.nestedClasses = [];
      this.$withValue$ = function ($b) {
       return (new this.nonMeta.basicNew()).$instance$initializer($b);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
        this.$withValue$ = this._$withValue$ = $.$withValue$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BooleanAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$BooleanAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
     this.header = 2635;
     this.slots = [
      new SM("condition", false, false),
      new SM("ifTrue", false, false),
      new SM("then", false, false),
      new SM("else", false, false),
      new SM("forValue", true, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ConditionalAST", true, 2636),
      new MM("instance`initializer", true, 2637),
      new MM("isExpressionNode", false, 2638),
      new MM("apply:", false, 2639),
      new MM("init`condition:", true, 0),
      new MM("condition", true, 0),
      new MM("init`ifTrue:", true, 0),
      new MM("ifTrue", true, 0),
      new MM("init`then:", true, 0),
      new MM("then", true, 0),
      new MM("init`else:", true, 0),
      new MM("else", true, 0),
      new MM("init`forValue:", true, 0),
      new MM("forValue", true, 0),
      new MM("forValue:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = function ($cond, $ifTrue_, $t, $e) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($cond, $ifTrue_, $t, $e) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST($cond, $ifTrue_, $t, $e);
      self._$init$condition$($cond);
      self._$init$ifTrue$($ifTrue_);
      self._$init$then$($t);
      self._$init$else$($e);
      self._$assert$message$(function () {
       return self._$then().$isCodeBodyNode();
      }, "");
      self._$assert$message$(function () {
       return self._$else().$isCodeBodyNode();
      }, "");
      self._$assert$message$(function () {
       return self._$then().$parameters().$size().$$equal(0);
      }, "");
      self._$assert$message$(function () {
       return self._$else().$parameters().$size().$$equal(0);
      }, "");
      return self;
     };
     this.$isExpressionNode = function () {
      var self = this;
      return self._$forValue();
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$conditionalNode$(self);
     };
     this.$init$condition$ = function (v) {
      this.$condition$slot = v;
      return this;
     };
     this.$condition = function () {
      return this.$condition$slot;
     };
     this.$init$ifTrue$ = function (v) {
      this.$ifTrue$slot = v;
      return this;
     };
     this.$ifTrue = function () {
      return this.$ifTrue$slot;
     };
     this.$init$then$ = function (v) {
      this.$then$slot = v;
      return this;
     };
     this.$then = function () {
      return this.$then$slot;
     };
     this.$init$else$ = function (v) {
      this.$else$slot = v;
      return this;
     };
     this.$else = function () {
      return this.$else$slot;
     };
     this.$init$forValue$ = function (v) {
      this.$forValue$slot = v;
      return this;
     };
     this.$forValue = function () {
      return this.$forValue$slot;
     };
     this.$forValue$ = function (v) {
      this.$forValue$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$init$condition$ = this._$init$condition$ = $.$init$condition$;
       this.$condition = this._$condition = $.$condition;
       this.$init$ifTrue$ = this._$init$ifTrue$ = $.$init$ifTrue$;
       this.$ifTrue = this._$ifTrue = $.$ifTrue;
       this.$init$then$ = this._$init$then$ = $.$init$then$;
       this.$then = this._$then = $.$then;
       this.$init$else$ = this._$init$else$ = $.$init$else$;
       this.$else = this._$else = $.$else;
       this.$init$forValue$ = this._$init$forValue$ = $.$init$forValue$;
       this.$forValue = this._$forValue = $.$forValue;
       this.$forValue$ = this._$forValue$ = $.$forValue$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`ConditionalAST"] = function () {
        superBasicNew.call(this);
        this.$condition$slot = nil;
        this.$ifTrue$slot = nil;
        this.$then$slot = nil;
        this.$else$slot = nil;
        this.$forValue$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ConditionalAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
      this.slots = [];
      this.methods = [
       new MM("if:is:then:else:", true, 0),
       new MM("if:is:then:", false, 2640)
      ];
      this.nestedClasses = [];
      this.$if$is$then$else$ = function ($cond, $ifTrue_, $t, $e) {
       return (new this.nonMeta.basicNew()).$instance$initializer($cond, $ifTrue_, $t, $e);
      };
      this.$if$is$then$ = function ($cond, $val, $t) {
       var self = this;
       return self._$if$is$then$else$($cond, $val, $t, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ConditionalAST[0]._$emptyBody());
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
        this.$if$is$then$else$ = this._$if$is$then$else$ = $.$if$is$then$else$;
        this.$if$is$then$ = this._$if$is$then$ = $.$if$is$then$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
     this.header = 2641;
     this.slots = [new SM("depth", true, false)];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST", true, 2642),
      new MM("instance`initializer", true, 2643),
      new MM("isExplicitRcvrNode", false, 2644),
      new MM("isExpressionNode", false, 2645),
      new MM("apply:", false, 2646),
      new MM("init`depth:", true, 0),
      new MM("depth", true, 0),
      new MM("depth:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST();
      return self;
     };
     this.$isExplicitRcvrNode = function () {
      var self = this;
      return true;
     };
     this.$isExpressionNode = function () {
      var self = this;
      return true;
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$enclosingObjectNode$(self);
     };
     this.$init$depth$ = function (v) {
      this.$depth$slot = v;
      return this;
     };
     this.$depth = function () {
      return this.$depth$slot;
     };
     this.$depth$ = function (v) {
      this.$depth$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isExplicitRcvrNode = this._$isExplicitRcvrNode = $.$isExplicitRcvrNode;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$init$depth$ = this._$init$depth$ = $.$init$depth$;
       this.$depth = this._$depth = $.$depth;
       this.$depth$ = this._$depth$ = $.$depth$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST"] = function () {
        superBasicNew.call(this);
        this.$depth$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
     this.header = 2647;
     this.slots = [
      new SM("depth", true, false),
      new SM("binding", true, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST", true, 2648),
      new MM("instance`initializer", true, 2649),
      new MM("isImplicitReceiverSendNode", false, 2650),
      new MM("apply:", false, 2651),
      new MM("init`depth:", true, 0),
      new MM("depth", true, 0),
      new MM("depth:", true, 0),
      new MM("init`binding:", true, 0),
      new MM("binding", true, 0),
      new MM("binding:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST();
      return self;
     };
     this.$isImplicitReceiverSendNode = function () {
      var self = this;
      return true;
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$implicitReceiverSendNode$(self);
     };
     this.$init$depth$ = function (v) {
      this.$depth$slot = v;
      return this;
     };
     this.$depth = function () {
      return this.$depth$slot;
     };
     this.$depth$ = function (v) {
      this.$depth$slot = v;
      return this;
     };
     this.$init$binding$ = function (v) {
      this.$binding$slot = v;
      return this;
     };
     this.$binding = function () {
      return this.$binding$slot;
     };
     this.$binding$ = function (v) {
      this.$binding$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isImplicitReceiverSendNode = this._$isImplicitReceiverSendNode = $.$isImplicitReceiverSendNode;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$init$depth$ = this._$init$depth$ = $.$init$depth$;
       this.$depth = this._$depth = $.$depth;
       this.$depth$ = this._$depth$ = $.$depth$;
       this.$init$binding$ = this._$init$binding$ = $.$init$binding$;
       this.$binding = this._$binding = $.$binding;
       this.$binding$ = this._$binding$ = $.$binding$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST"] = function () {
        superBasicNew.call(this);
        this.$depth$slot = nil;
        this.$binding$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
     this.header = 2652;
     this.slots = [new SM("variable", false, false)];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`LocalReadAST", true, 2653),
      new MM("instance`initializer", true, 2654),
      new MM("apply:", false, 2655),
      new MM("isExpressionNode", false, 2656),
      new MM("name", false, 2657),
      new MM("init`variable:", true, 0),
      new MM("variable", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = function ($var) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($var) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST($var);
      self._$init$variable$($var);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$localReadNode$(self);
     };
     this.$isExpressionNode = function () {
      var self = this;
      return true;
     };
     this.$name = function () {
      var self = this;
      return self._$variable().$ast().$name();
     };
     this.$init$variable$ = function (v) {
      this.$variable$slot = v;
      return this;
     };
     this.$variable = function () {
      return this.$variable$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$name = this._$name = $.$name;
       this.$init$variable$ = this._$init$variable$ = $.$init$variable$;
       this.$variable = this._$variable = $.$variable;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`LocalReadAST"] = function () {
        superBasicNew.call(this);
        this.$variable$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`LocalReadAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
      this.slots = [];
      this.methods = [new MM("of:", true, 0)];
      this.nestedClasses = [];
      this.$of$ = function ($var) {
       return (new this.nonMeta.basicNew()).$instance$initializer($var);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
        this.$of$ = this._$of$ = $.$of$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
     this.header = 2658;
     this.slots = [
      new SM("variable", false, false),
      new SM("value", false, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`LocalWriteAST", true, 2659),
      new MM("instance`initializer", true, 2660),
      new MM("apply:", false, 2661),
      new MM("isExpressionNode", false, 2662),
      new MM("name", false, 2663),
      new MM("init`variable:", true, 0),
      new MM("variable", true, 0),
      new MM("init`value:", true, 0),
      new MM("value", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = function ($var, $val) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($var, $val) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST($var, $val);
      self._$init$variable$($var);
      self._$init$value$($val);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$localWriteNode$(self);
     };
     this.$isExpressionNode = function () {
      var self = this;
      return true;
     };
     this.$name = function () {
      var self = this;
      return self._$variable().$ast().$name();
     };
     this.$init$variable$ = function (v) {
      this.$variable$slot = v;
      return this;
     };
     this.$variable = function () {
      return this.$variable$slot;
     };
     this.$init$value$ = function (v) {
      this.$value$slot = v;
      return this;
     };
     this.$value = function () {
      return this.$value$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$name = this._$name = $.$name;
       this.$init$variable$ = this._$init$variable$ = $.$init$variable$;
       this.$variable = this._$variable = $.$variable;
       this.$init$value$ = this._$init$value$ = $.$init$value$;
       this.$value = this._$value = $.$value;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`LocalWriteAST"] = function () {
        superBasicNew.call(this);
        this.$variable$slot = nil;
        this.$value$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`LocalWriteAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
      this.slots = [];
      this.methods = [new MM("to:assign:", true, 0)];
      this.nestedClasses = [];
      this.$to$assign$ = function ($var, $val) {
       return (new this.nonMeta.basicNew()).$instance$initializer($var, $val);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
        this.$to$assign$ = this._$to$assign$ = $.$to$assign$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$LoopAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`LoopAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`LoopAST";
     this.header = 2664;
     this.slots = [
      new SM("prologue", true, false),
      new SM("condition", true, false),
      new SM("isWhileTrue", true, false),
      new SM("body", true, false),
      new SM("forValue", true, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`LoopAST", true, 2665),
      new MM("instance`initializer", true, 2666),
      new MM("do:timesRepeat:", false, 2667),
      new MM("from:to:by:do:", false, 2668),
      new MM("from:to:do:", false, 2669),
      new MM("repeat:", false, 2670),
      new MM("while:do:", false, 2671),
      new MM("while:is:do:", false, 2672),
      new MM("isExpressionNode", false, 2673),
      new MM("apply:", false, 2674),
      new MM("init`prologue:", true, 0),
      new MM("prologue", true, 0),
      new MM("prologue:", true, 0),
      new MM("init`condition:", true, 0),
      new MM("condition", true, 0),
      new MM("condition:", true, 0),
      new MM("init`isWhileTrue:", true, 0),
      new MM("isWhileTrue", true, 0),
      new MM("isWhileTrue:", true, 0),
      new MM("init`body:", true, 0),
      new MM("body", true, 0),
      new MM("body:", true, 0),
      new MM("init`forValue:", true, 0),
      new MM("forValue", true, 0),
      new MM("forValue:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST();
      self._$init$prologue$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$emptyBody());
      return self;
     };
     this.$do$timesRepeat$ = function ($n, $b) {
      var self = this;
      var $skope = nil;
      var $loopVarName = nil;
      var $var = nil;
      $skope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[1]._$scopeMap().$at$($b);
      $loopVarName = ".i".$asSymbol();
      $var = (function (cascadeReceiver) {
       cascadeReceiver.$start$($b.$start());
       return cascadeReceiver.$end$($b.$end());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$ParameterAST().$name$type$($loopVarName, nil));
      $skope.$at$put$ifThere$($loopVarName, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$LocalEntry().$forDeclaration$atDepth$($var, 0), function () {
       return self._$halt();
      });
      self._$assert$(function () {
       return $b.$parameters().$isEmpty();
      });
      $b.$parameters().$add$($var);
      self._$from$to$do$((function (cascadeReceiver) {
       cascadeReceiver.$value$(1);
       cascadeReceiver.$start$($b.$start());
       return cascadeReceiver.$end$($b.$end());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$NumberAST().$new()), $n, $b);
      return self;
     };
     this.$from$to$by$do$ = function ($first, $last, $step, $block) {
      var self = this;
      var $blockScope = nil;
      var $counterVar = nil;
      var $counterEntry = nil;
      var $counter = nil;
      var $limitNeeded = nil;
      var $limitName = nil;
      var $limitVar = nil;
      var $limitEntry = nil;
      var $limit = nil;
      var $condSel = nil;
      var $condArg = nil;
      var $condExpr = nil;
      var $condBody = nil;
      var $condStats = nil;
      var $incArg = nil;
      var $incExpr = nil;
      var $incStat = nil;
      self._$assert$(function () {
       return $step.$isNumberNode() && $step.$value().$isInteger();
      });
      self._$assert$(function () {
       return $block.$isBlockNode();
      });
      $blockScope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[1]._$scopeMap().$at$($block.$body());
      $counterVar = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$TemporaryAST().$name$type$($block.$parameters().$removeFirst().$name(), nil);
      $counterEntry = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$LocalEntry().$forDeclaration$atDepth$($counterVar, nil);
      $counter = (function (cascadeReceiver) {
       cascadeReceiver.$start$($block.$start());
       return cascadeReceiver.$end$($block.$end());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalReadAST().$of$($counterEntry));
      if (!($limitNeeded = $last.$isLiteralNode().$not())) {
       $limit = $last;
      } else {
       $limitName = ".limit".$asSymbol();
       $limitVar = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$TemporaryAST().$name$type$($limitName, nil);
       (function (cascadeReceiver) {
        cascadeReceiver.$start$($block.$start());
        return cascadeReceiver.$end$($block.$end());
       })($limitVar);
       $limitEntry = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$LocalEntry().$forDeclaration$atDepth$($limitVar, nil);
       self._$prologue().$temporaries().$add$($limitVar);
       $blockScope.$at$put$ifThere$($limitName, $limitEntry, function () {
        return self._$assert$(function () {
         return false;
        });
       });
       $limit = (function (cascadeReceiver) {
        cascadeReceiver.$start$($block.$start());
        return cascadeReceiver.$end$($block.$end());
       })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalReadAST().$of$($limitEntry));
      };
      $condSel = ($step.$value() < 0).$ifTrue$ifFalse$(function () {
       return "<=";
      }, function () {
       return ">=";
      });
      $condArg = (function (cascadeReceiver) {
       cascadeReceiver.$add$($counter);
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
      $condExpr = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$OrdinarySendAST().$to$send$($limit, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$MessageAST().$new().$send$with$($condSel, $condArg));
      $condStats = (function (cascadeReceiver) {
       cascadeReceiver.$add$($condExpr);
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
      $condBody = (function (cascadeReceiver) {
       cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
       cascadeReceiver.$temporaries$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
       cascadeReceiver.$statements$($condStats);
       cascadeReceiver.$start$($block.$start());
       return cascadeReceiver.$end$($block.$end());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$CodeBodyAST().$new());
      self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[1]._$scopeMap().$at$put$($condBody, nil);
      $incArg = (function (cascadeReceiver) {
       cascadeReceiver.$add$($counter);
       return cascadeReceiver.$yourself();
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
      $incExpr = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$OrdinarySendAST().$to$send$($step, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$MessageAST().$new().$send$with$("+", $incArg));
      (function (cascadeReceiver) {
       cascadeReceiver.$start$($block.$start());
       return cascadeReceiver.$end$($block.$end());
      })($incExpr);
      $incStat = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalWriteAST().$to$assign$($counterEntry, $incExpr);
      (function (cascadeReceiver) {
       cascadeReceiver.$start$($block.$start());
       return cascadeReceiver.$end$($block.$end());
      })($incStat);
      $block.$body().$statements().$add$($incStat);
      self._$prologue().$temporaries().$add$($counterVar);
      self._$prologue().$statements().$add$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalWriteAST().$to$assign$($counterEntry, $first));
      if ($limitNeeded) {
       self._$prologue().$statements().$add$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalWriteAST().$to$assign$($limitEntry, $last));
      } else {
       nil;
      };
      self._$condition$($condBody);
      self._$isWhileTrue$(true);
      self._$body$($block.$body());
      return self;
     };
     this.$from$to$do$ = function ($first, $last, $block) {
      var self = this;
      self._$from$to$by$do$($first, $last, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$NumberAST().$new().$value$(1), $block);
      return self;
     };
     this.$repeat$ = function ($b) {
      var self = this;
      self._$assert$(function () {
       return $b.$isCodeBodyNode();
      });
      self._$condition$($b);
      self._$condition().$statements().$add$((function (cascadeReceiver) {
       cascadeReceiver.$start$(self._$condition().$end());
       return cascadeReceiver.$end$(self._$condition().$end());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$BooleanAST().$withValue$(true)));
      self._$isWhileTrue$(true);
      self._$body$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$emptyBody());
      return self;
     };
     this.$while$do$ = function ($v, $b) {
      var self = this;
      self._$assert$(function () {
       return $b.$isCodeBodyNode();
      });
      self._$condition$($b);
      self._$isWhileTrue$($v);
      self._$body$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$emptyBody());
      return self;
     };
     this.$while$is$do$ = function ($b1, $v, $b2) {
      var self = this;
      self._$assert$(function () {
       return $b1.$isCodeBodyNode();
      });
      self._$assert$(function () {
       return $b2.$isCodeBodyNode();
      });
      self._$condition$($b1);
      self._$isWhileTrue$($v);
      self._$body$($b2);
      return self;
     };
     this.$isExpressionNode = function () {
      var self = this;
      return self._$forValue();
     };
     this.$apply$ = function ($aTool) {
      var self = this;
      return $aTool.$loopNode$(self);
     };
     this.$init$prologue$ = function (v) {
      this.$prologue$slot = v;
      return this;
     };
     this.$prologue = function () {
      return this.$prologue$slot;
     };
     this.$prologue$ = function (v) {
      this.$prologue$slot = v;
      return this;
     };
     this.$init$condition$ = function (v) {
      this.$condition$slot = v;
      return this;
     };
     this.$condition = function () {
      return this.$condition$slot;
     };
     this.$condition$ = function (v) {
      this.$condition$slot = v;
      return this;
     };
     this.$init$isWhileTrue$ = function (v) {
      this.$isWhileTrue$slot = v;
      return this;
     };
     this.$isWhileTrue = function () {
      return this.$isWhileTrue$slot;
     };
     this.$isWhileTrue$ = function (v) {
      this.$isWhileTrue$slot = v;
      return this;
     };
     this.$init$body$ = function (v) {
      this.$body$slot = v;
      return this;
     };
     this.$body = function () {
      return this.$body$slot;
     };
     this.$body$ = function (v) {
      this.$body$slot = v;
      return this;
     };
     this.$init$forValue$ = function (v) {
      this.$forValue$slot = v;
      return this;
     };
     this.$forValue = function () {
      return this.$forValue$slot;
     };
     this.$forValue$ = function (v) {
      this.$forValue$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`LoopAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$do$timesRepeat$ = this._$do$timesRepeat$ = $.$do$timesRepeat$;
       this.$from$to$by$do$ = this._$from$to$by$do$ = $.$from$to$by$do$;
       this.$from$to$do$ = this._$from$to$do$ = $.$from$to$do$;
       this.$repeat$ = this._$repeat$ = $.$repeat$;
       this.$while$do$ = this._$while$do$ = $.$while$do$;
       this.$while$is$do$ = this._$while$is$do$ = $.$while$is$do$;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$init$prologue$ = this._$init$prologue$ = $.$init$prologue$;
       this.$prologue = this._$prologue = $.$prologue;
       this.$prologue$ = this._$prologue$ = $.$prologue$;
       this.$init$condition$ = this._$init$condition$ = $.$init$condition$;
       this.$condition = this._$condition = $.$condition;
       this.$condition$ = this._$condition$ = $.$condition$;
       this.$init$isWhileTrue$ = this._$init$isWhileTrue$ = $.$init$isWhileTrue$;
       this.$isWhileTrue = this._$isWhileTrue = $.$isWhileTrue;
       this.$isWhileTrue$ = this._$isWhileTrue$ = $.$isWhileTrue$;
       this.$init$body$ = this._$init$body$ = $.$init$body$;
       this.$body = this._$body = $.$body;
       this.$body$ = this._$body$ = $.$body$;
       this.$init$forValue$ = this._$init$forValue$ = $.$init$forValue$;
       this.$forValue = this._$forValue = $.$forValue;
       this.$forValue$ = this._$forValue$ = $.$forValue$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`LoopAST"] = function () {
        superBasicNew.call(this);
        this.$prologue$slot = nil;
        this.$condition$slot = nil;
        this.$isWhileTrue$slot = nil;
        this.$body$slot = nil;
        this.$forValue$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`LoopAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`LoopAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`LoopAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$LoopAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
     this.header = 2675;
     this.slots = [];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST", true, 2676),
      new MM("instance`initializer", true, 2677),
      new MM("apply:", false, 2678)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = function ($e) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot._$instance$initializer.call(self, $e);
      return self;
     };
     this.$instance$initializer = function ($e) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST($e);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$methodLocalReturnNode$(self);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
      this.slots = [];
      this.methods = [new MM("expression:", true, 0)];
      this.nestedClasses = [];
      this.$expression$ = function ($e) {
       return (new this.nonMeta.basicNew()).$instance$initializer($e);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
        this.$expression$ = this._$expression$ = $.$expression$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$NilAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`NilAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`NilAST";
     this.header = 2679;
     this.slots = [];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`NilAST", true, 2680),
      new MM("instance`initializer", true, 2681),
      new MM("apply:", false, 2682),
      new MM("isNilNode", false, 2683),
      new MM("name", false, 2684)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$NilAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST();
      return self;
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$nilNode$(self);
     };
     this.$isNilNode = function () {
      var self = this;
      return true;
     };
     this.$name = function () {
      var self = this;
      return "nil";
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`NilAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isNilNode = this._$isNilNode = $.$isNilNode;
       this.$name = this._$name = $.$name;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NilAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`NilAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`NilAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`NilAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`NilAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NilAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$NilAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
     this.header = 2685;
     this.slots = [];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST", true, 2686),
      new MM("instance`initializer", true, 2687),
      new MM("apply:", false, 2688)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = function ($e) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot._$instance$initializer.call(self, $e);
      return self;
     };
     this.$instance$initializer = function ($e) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST($e);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$nonLocalReturnNode$(self);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
      this.slots = [];
      this.methods = [new MM("expression:", true, 0)];
      this.nestedClasses = [];
      this.$expression$ = function ($e) {
       return (new this.nonMeta.basicNew()).$instance$initializer($e);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
        this.$expression$ = this._$expression$ = $.$expression$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
     this.header = 2689;
     this.slots = [
      new SM("receiver", false, false),
      new SM("message", false, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST", true, 2690),
      new MM("instance`initializer", true, 2691),
      new MM("apply:", false, 2692),
      new MM("isNormalSendNode", false, 2693),
      new MM("init`receiver:", true, 0),
      new MM("receiver", true, 0),
      new MM("init`message:", true, 0),
      new MM("message", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = function ($rcvr, $msg) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($rcvr, $msg) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST($rcvr, $msg);
      self._$init$receiver$($rcvr);
      self._$init$message$($msg);
      return self;
     };
     this.$apply$ = function ($aTool) {
      var self = this;
      return $aTool.$ordinarySendNode$(self);
     };
     this.$isNormalSendNode = function () {
      var self = this;
      return true;
     };
     this.$init$receiver$ = function (v) {
      this.$receiver$slot = v;
      return this;
     };
     this.$receiver = function () {
      return this.$receiver$slot;
     };
     this.$init$message$ = function (v) {
      this.$message$slot = v;
      return this;
     };
     this.$message = function () {
      return this.$message$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isNormalSendNode = this._$isNormalSendNode = $.$isNormalSendNode;
       this.$init$receiver$ = this._$init$receiver$ = $.$init$receiver$;
       this.$receiver = this._$receiver = $.$receiver;
       this.$init$message$ = this._$init$message$ = $.$init$message$;
       this.$message = this._$message = $.$message;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST"] = function () {
        superBasicNew.call(this);
        this.$receiver$slot = nil;
        this.$message$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
      this.slots = [];
      this.methods = [new MM("to:send:", true, 0)];
      this.nestedClasses = [];
      this.$to$send$ = function ($rcvr, $msg) {
       return (new this.nonMeta.basicNew()).$instance$initializer($rcvr, $msg);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
        this.$to$send$ = this._$to$send$ = $.$to$send$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
     this.header = 2694;
     this.slots = [
      new SM("depth", true, false),
      new SM("binding", true, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`OuterSendAST", true, 2695),
      new MM("instance`initializer", true, 2696),
      new MM("isOuterSendNode", false, 2697),
      new MM("apply:", false, 2698),
      new MM("init`depth:", true, 0),
      new MM("depth", true, 0),
      new MM("depth:", true, 0),
      new MM("init`binding:", true, 0),
      new MM("binding", true, 0),
      new MM("binding:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST();
      return self;
     };
     this.$isOuterSendNode = function () {
      var self = this;
      return true;
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$outerSendNode$(self);
     };
     this.$init$depth$ = function (v) {
      this.$depth$slot = v;
      return this;
     };
     this.$depth = function () {
      return this.$depth$slot;
     };
     this.$depth$ = function (v) {
      this.$depth$slot = v;
      return this;
     };
     this.$init$binding$ = function (v) {
      this.$binding$slot = v;
      return this;
     };
     this.$binding = function () {
      return this.$binding$slot;
     };
     this.$binding$ = function (v) {
      this.$binding$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isOuterSendNode = this._$isOuterSendNode = $.$isOuterSendNode;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$init$depth$ = this._$init$depth$ = $.$init$depth$;
       this.$depth = this._$depth = $.$depth;
       this.$depth$ = this._$depth$ = $.$depth$;
       this.$init$binding$ = this._$init$binding$ = $.$init$binding$;
       this.$binding = this._$binding = $.$binding;
       this.$binding$ = this._$binding$ = $.$binding$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`OuterSendAST"] = function () {
        superBasicNew.call(this);
        this.$depth$slot = nil;
        this.$binding$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`OuterSendAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`ParameterAST";
     this.header = 2699;
     this.slots = [
      new SM("name", false, false),
      new SM("type", false, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ParameterAST", true, 2700),
      new MM("instance`initializer", true, 2701),
      new MM("apply:", false, 2702),
      new MM("isVarDeclNode", false, 2703),
      new MM("printOn:", false, 2704),
      new MM("init`name:", true, 0),
      new MM("name", true, 0),
      new MM("init`type:", true, 0),
      new MM("type", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST = function ($n, $t) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($n, $t) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST($n, $t);
      self._$init$name$($n);
      self._$init$type$($t);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$parameterDeclNode$(self);
     };
     this.$isVarDeclNode = function () {
      var self = this;
      return true;
     };
     this.$printOn$ = function ($stream) {
      var self = this;
      (function (cascadeReceiver) {
       cascadeReceiver.$nextPutAll$("ParameterAST(");
       cascadeReceiver.$nextPutAll$(self._$name());
       return cascadeReceiver.$nextPutAll$(")");
      })($stream);
      return self;
     };
     this.$init$name$ = function (v) {
      this.$name$slot = v;
      return this;
     };
     this.$name = function () {
      return this.$name$slot;
     };
     this.$init$type$ = function (v) {
      this.$type$slot = v;
      return this;
     };
     this.$type = function () {
      return this.$type$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
       this.$printOn$ = this._$printOn$ = $.$printOn$;
       this.$init$name$ = this._$init$name$ = $.$init$name$;
       this.$name = this._$name = $.$name;
       this.$init$type$ = this._$init$type$ = $.$init$type$;
       this.$type = this._$type = $.$type;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ParameterAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`ParameterAST"] = function () {
        superBasicNew.call(this);
        this.$name$slot = nil;
        this.$type$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ParameterAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
      this.slots = [];
      this.methods = [new MM("name:type:", true, 0)];
      this.nestedClasses = [];
      this.$name$type$ = function ($n, $t) {
       return (new this.nonMeta.basicNew()).$instance$initializer($n, $t);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
        this.$name$type$ = this._$name$type$ = $.$name$type$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ParameterAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$ParameterAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
     this.header = 2705;
     this.slots = [];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ReceiverAST", true, 2706),
      new MM("instance`initializer", true, 2707),
      new MM("apply:", false, 2708),
      new MM("isExpressionNode", false, 2709),
      new MM("isReceiverNode", false, 2710)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST();
      return self;
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$receiverNode$(self);
     };
     this.$isExpressionNode = function () {
      var self = this;
      return true;
     };
     this.$isReceiverNode = function () {
      var self = this;
      return true;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$isReceiverNode = this._$isReceiverNode = $.$isReceiverNode;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`ReceiverAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ReceiverAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`ReturnAST";
     this.header = 2711;
     this.slots = [new SM("expression", false, false)];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ReturnAST", true, 2712),
      new MM("instance`initializer", true, 2713),
      new MM("isExpressionNode", false, 2714),
      new MM("isReturnStatNode", false, 2715),
      new MM("init`expression:", true, 0),
      new MM("expression", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST = function ($e) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($e) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST($e);
      self._$init$expression$($e);
      return self;
     };
     this.$isExpressionNode = function () {
      var self = this;
      return false;
     };
     this.$isReturnStatNode = function () {
      var self = this;
      return true;
     };
     this.$init$expression$ = function (v) {
      this.$expression$slot = v;
      return this;
     };
     this.$expression = function () {
      return this.$expression$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$isReturnStatNode = this._$isReturnStatNode = $.$isReturnStatNode;
       this.$init$expression$ = this._$init$expression$ = $.$init$expression$;
       this.$expression = this._$expression = $.$expression;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReturnAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`ReturnAST"] = function () {
        superBasicNew.call(this);
        this.$expression$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ReturnAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
      this.slots = [];
      this.methods = [new MM("expression:", true, 0)];
      this.nestedClasses = [];
      this.$expression$ = function ($e) {
       return (new this.nonMeta.basicNew()).$instance$initializer($e);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
        this.$expression$ = this._$expression$ = $.$expression$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReturnAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$ReturnAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
     this.header = 2716;
     this.slots = [new SM("binding", true, false)];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`SelfSendAST", true, 2717),
      new MM("instance`initializer", true, 2718),
      new MM("isSelfSendNode", false, 2719),
      new MM("receiver", false, 2720),
      new MM("apply:", false, 2721),
      new MM("init`binding:", true, 0),
      new MM("binding", true, 0),
      new MM("binding:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST();
      return self;
     };
     this.$isSelfSendNode = function () {
      var self = this;
      return true;
     };
     this.$receiver = function () {
      var self = this;
      return self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SelfSendAST[0]._$ReceiverAST().$new();
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$selfSendNode$(self);
     };
     this.$init$binding$ = function (v) {
      this.$binding$slot = v;
      return this;
     };
     this.$binding = function () {
      return this.$binding$slot;
     };
     this.$binding$ = function (v) {
      this.$binding$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isSelfSendNode = this._$isSelfSendNode = $.$isSelfSendNode;
       this.$receiver = this._$receiver = $.$receiver;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$init$binding$ = this._$init$binding$ = $.$init$binding$;
       this.$binding = this._$binding = $.$binding;
       this.$binding$ = this._$binding$ = $.$binding$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`SelfSendAST"] = function () {
        superBasicNew.call(this);
        this.$binding$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`SelfSendAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$SendAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`SendAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`SendAST";
     this.header = 2722;
     this.slots = [new SM("message", true, false)];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`SendAST", true, 2723),
      new MM("instance`initializer", true, 2724),
      new MM("isExpressionNode", false, 2725),
      new MM("isSendNode", false, 2726),
      new MM("init`message:", true, 0),
      new MM("message", true, 0),
      new MM("message:", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$SendAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST();
      return self;
     };
     this.$isExpressionNode = function () {
      var self = this;
      return true;
     };
     this.$isSendNode = function () {
      var self = this;
      return true;
     };
     this.$init$message$ = function (v) {
      this.$message$slot = v;
      return this;
     };
     this.$message = function () {
      return this.$message$slot;
     };
     this.$message$ = function (v) {
      this.$message$slot = v;
      return this;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`SendAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
       this.$isSendNode = this._$isSendNode = $.$isSendNode;
       this.$init$message$ = this._$init$message$ = $.$init$message$;
       this.$message = this._$message = $.$message;
       this.$message$ = this._$message$ = $.$message$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SendAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`SendAST"] = function () {
        superBasicNew.call(this);
        this.$message$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`SendAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`SendAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`SendAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SendAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$SendAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
     this.header = 2727;
     this.slots = [];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`SuperSendAST", true, 2728),
      new MM("instance`initializer", true, 2729),
      new MM("isSuperSendNode", false, 2730),
      new MM("apply:", false, 2731)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = function () {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function () {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST();
      return self;
     };
     this.$isSuperSendNode = function () {
      var self = this;
      return true;
     };
     this.$apply$ = function ($tool) {
      var self = this;
      return $tool.$superSendNode$(self);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$isSuperSendNode = this._$isSuperSendNode = $.$isSuperSendNode;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`SuperSendAST"] = function () {
        superBasicNew.call(this);
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`SuperSendAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
      this.slots = [];
      this.methods = [new MM("new", true, 0)];
      this.nestedClasses = [];
      this.$new = function () {
       return (new this.nonMeta.basicNew()).$instance$initializer();
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
        this.$new = this._$new = $.$new;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = new function () {
     var $ = this;
     var $3 = this;
     this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
     this.name = "NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
     this.header = 2732;
     this.slots = [
      new SM("name", false, false),
      new SM("type", false, false)
     ];
     this.methods = [
      new MM("superInit`NewspeakCompilation`Compiler`Rewriter`TemporaryAST", true, 2733),
      new MM("instance`initializer", true, 2734),
      new MM("apply:", false, 2735),
      new MM("isTemporaryAST", false, 2736),
      new MM("isVarDeclNode", false, 2737),
      new MM("printOn:", false, 2738),
      new MM("init`name:", true, 0),
      new MM("name", true, 0),
      new MM("init`type:", true, 0),
      new MM("type", true, 0)
     ];
     this.nestedClasses = [];
     this.applications = [];
     this.$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = function ($n, $t) {
      var self = this;
      self.$super$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot._$instance$initializer.call(self);
      return self;
     };
     this.$instance$initializer = function ($n, $t) {
      var self = this;
      self._$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST($n, $t);
      self._$init$name$($n);
      self._$init$type$($t);
      return self;
     };
     this.$apply$ = function ($visitor) {
      var self = this;
      return $visitor.$temporaryDeclNode$(self);
     };
     this.$isTemporaryAST = function () {
      var self = this;
      "BOGUS";
      return true;
     };
     this.$isVarDeclNode = function () {
      var self = this;
      return true;
     };
     this.$printOn$ = function ($stream) {
      var self = this;
      (function (cascadeReceiver) {
       cascadeReceiver.$nextPutAll$("TemporaryAST(");
       cascadeReceiver.$nextPutAll$(self._$name());
       return cascadeReceiver.$nextPutAll$(")");
      })($stream);
      return self;
     };
     this.$init$name$ = function (v) {
      this.$name$slot = v;
      return this;
     };
     this.$name = function () {
      return this.$name$slot;
     };
     this.$init$type$ = function (v) {
      this.$type$slot = v;
      return this;
     };
     this.$type = function () {
      return this.$type$slot;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
       this._$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST;
       this.$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST");
       this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
       this.$apply$ = this._$apply$ = $.$apply$;
       this.$isTemporaryAST = this._$isTemporaryAST = $.$isTemporaryAST;
       this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
       this.$printOn$ = this._$printOn$ = $.$printOn$;
       this.$init$name$ = this._$init$name$ = $.$init$name$;
       this.$name = this._$name = $.$name;
       this.$init$type$ = this._$init$type$ = $.$init$type$;
       this.$type = this._$type = $.$type;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = runtimeSuperclass;
       this["NewspeakCompilation`Compiler`Rewriter`TemporaryAST"] = function () {
        superBasicNew.call(this);
        this.$name$slot = nil;
        this.$type$slot = nil;
       };
       this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`TemporaryAST"];
       this.basicNew.prototype = this;
       this.meta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
     this.meta = new function () {
      var $ = this;
      this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
      this.slots = [];
      this.methods = [new MM("name:type:", true, 0)];
      this.nestedClasses = [];
      this.$name$type$ = function ($n, $t) {
       return (new this.nonMeta.basicNew()).$instance$initializer($n, $t);
      };
      this.invoke = function (runtimeSuperclass, enclosingObjects) {
       function constructRuntimeClass (superBasicNew) {
        this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
        this.$name$type$ = this._$name$type$ = $.$name$type$;
        this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = enclosingObjects;
        this.$super$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = runtimeSuperclass;
        this.basicNew = function () {
         superBasicNew.call(this);
        };
        this.basicNew.prototype = this;
        this.nonMeta = null;
        this.newspeakClass = null;
       };
       constructRuntimeClass.prototype = runtimeSuperclass;
       return new constructRuntimeClass(runtimeSuperclass.basicNew);
      };
     }();
     this.meta.nonMeta = this;
    }();
    this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$LoopAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$NilAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$SendAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST.enclosingMixin = this;
    this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST.enclosingMixin = this;
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter";
      this._$superInit$NewspeakCompilation$Compiler$Rewriter = $.$superInit$NewspeakCompilation$Compiler$Rewriter;
      this.$superInit$NewspeakCompilation$Compiler$Rewriter = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$applyForEffectTo$ = $.$applyForEffectTo$;
      this.$applyForEffectTo$ = dnuCatcher("$applyForEffectTo$");
      this._$applyForValueTo$ = $.$applyForValueTo$;
      this.$applyForValueTo$ = dnuCatcher("$applyForValueTo$");
      this._$canInlineSeqexps = $.$canInlineSeqexps;
      this.$canInlineSeqexps = dnuCatcher("$canInlineSeqexps");
      this._$depthOfEnclosingClass$ = $.$depthOfEnclosingClass$;
      this.$depthOfEnclosingClass$ = dnuCatcher("$depthOfEnclosingClass$");
      this._$emptyBody = $.$emptyBody;
      this.$emptyBody = dnuCatcher("$emptyBody");
      this._$futureFor$ = $.$futureFor$;
      this.$futureFor$ = dnuCatcher("$futureFor$");
      this._$implicitReceiverNode = $.$implicitReceiverNode;
      this.$implicitReceiverNode = dnuCatcher("$implicitReceiverNode");
      this._$inClosureDuring$ = $.$inClosureDuring$;
      this.$inClosureDuring$ = dnuCatcher("$inClosureDuring$");
      this._$isImplicitReceiverNode$ = $.$isImplicitReceiverNode$;
      this.$isImplicitReceiverNode$ = dnuCatcher("$isImplicitReceiverNode$");
      this._$isInlineableConditional$ = $.$isInlineableConditional$;
      this.$isInlineableConditional$ = dnuCatcher("$isInlineableConditional$");
      this._$isInlineableLoop$ = $.$isInlineableLoop$;
      this.$isInlineableLoop$ = dnuCatcher("$isInlineableLoop$");
      this._$isOuterNode$ = $.$isOuterNode$;
      this.$isOuterNode$ = dnuCatcher("$isOuterNode$");
      this._$isRemovableBlock$withArgs$ = $.$isRemovableBlock$withArgs$;
      this.$isRemovableBlock$withArgs$ = dnuCatcher("$isRemovableBlock$withArgs$");
      this._$isSelfNode$ = $.$isSelfNode$;
      this.$isSelfNode$ = dnuCatcher("$isSelfNode$");
      this._$isSuperNode$ = $.$isSuperNode$;
      this.$isSuperNode$ = dnuCatcher("$isSuperNode$");
      this._$offsetOfEnclosingObjectForClass$ = $.$offsetOfEnclosingObjectForClass$;
      this.$offsetOfEnclosingObjectForClass$ = dnuCatcher("$offsetOfEnclosingObjectForClass$");
      this._$offsetOfImplicitReceiverTarget$ = $.$offsetOfImplicitReceiverTarget$;
      this.$offsetOfImplicitReceiverTarget$ = dnuCatcher("$offsetOfImplicitReceiverTarget$");
      this._$processEventualSend$ = $.$processEventualSend$;
      this.$processEventualSend$ = dnuCatcher("$processEventualSend$");
      this._$processImplicitReceiverSend$ = $.$processImplicitReceiverSend$;
      this.$processImplicitReceiverSend$ = dnuCatcher("$processImplicitReceiverSend$");
      this._$processImplicitReceiverSend$binding$ = $.$processImplicitReceiverSend$binding$;
      this.$processImplicitReceiverSend$binding$ = dnuCatcher("$processImplicitReceiverSend$binding$");
      this._$processInlineableConditional$ = $.$processInlineableConditional$;
      this.$processInlineableConditional$ = dnuCatcher("$processInlineableConditional$");
      this._$processInlineableLoop$ = $.$processInlineableLoop$;
      this.$processInlineableLoop$ = dnuCatcher("$processInlineableLoop$");
      this._$processLocalAccess$of$ = $.$processLocalAccess$of$;
      this.$processLocalAccess$of$ = dnuCatcher("$processLocalAccess$of$");
      this._$processLocalRead$from$ = $.$processLocalRead$from$;
      this.$processLocalRead$from$ = dnuCatcher("$processLocalRead$from$");
      this._$processLocalWrite$to$ = $.$processLocalWrite$to$;
      this.$processLocalWrite$to$ = dnuCatcher("$processLocalWrite$to$");
      this._$processOuterExpression$ = $.$processOuterExpression$;
      this.$processOuterExpression$ = dnuCatcher("$processOuterExpression$");
      this._$processOuterSend$ = $.$processOuterSend$;
      this.$processOuterSend$ = dnuCatcher("$processOuterSend$");
      this._$processSelfSend$ = $.$processSelfSend$;
      this.$processSelfSend$ = dnuCatcher("$processSelfSend$");
      this._$processSetterSend$binding$ = $.$processSetterSend$binding$;
      this.$processSetterSend$binding$ = dnuCatcher("$processSetterSend$binding$");
      this._$processSuperSend$ = $.$processSuperSend$;
      this.$processSuperSend$ = dnuCatcher("$processSuperSend$");
      this._$rewriteBlockNode$forValue$ = $.$rewriteBlockNode$forValue$;
      this.$rewriteBlockNode$forValue$ = dnuCatcher("$rewriteBlockNode$forValue$");
      this._$rewriteInlinedBlockNode$forValue$ = $.$rewriteInlinedBlockNode$forValue$;
      this.$rewriteInlinedBlockNode$forValue$ = dnuCatcher("$rewriteInlinedBlockNode$forValue$");
      this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
      this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
      this.$charNode$ = this._$charNode$ = $.$charNode$;
      this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
      this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
      this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
      this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
      this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
      this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
      this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
      this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
      this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
      this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
      this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
      this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
      this._$currentScope = $.$currentScope;
      this.$currentScope = dnuCatcher("$currentScope");
      this.$popScope = this._$popScope = $.$popScope;
      this.$pushScope$ = this._$pushScope$ = $.$pushScope$;
      this._$pushScopeForNode$ = $.$pushScopeForNode$;
      this.$pushScopeForNode$ = dnuCatcher("$pushScopeForNode$");
      this.$BlockLocalReturnAST = this._$BlockLocalReturnAST = $.$BlockLocalReturnAST;
      this.$BooleanAST = this._$BooleanAST = $.$BooleanAST;
      this.$ConditionalAST = this._$ConditionalAST = $.$ConditionalAST;
      this._$EnclosingObjectAST = $.$EnclosingObjectAST;
      this.$EnclosingObjectAST = dnuCatcher("$EnclosingObjectAST");
      this.$ImplicitReceiverSendAST = this._$ImplicitReceiverSendAST = $.$ImplicitReceiverSendAST;
      this.$LocalReadAST = this._$LocalReadAST = $.$LocalReadAST;
      this.$LocalWriteAST = this._$LocalWriteAST = $.$LocalWriteAST;
      this.$LoopAST = this._$LoopAST = $.$LoopAST;
      this.$MethodLocalReturnAST = this._$MethodLocalReturnAST = $.$MethodLocalReturnAST;
      this.$NilAST = this._$NilAST = $.$NilAST;
      this.$NonlocalReturnAST = this._$NonlocalReturnAST = $.$NonlocalReturnAST;
      this.$OrdinarySendAST = this._$OrdinarySendAST = $.$OrdinarySendAST;
      this.$OuterSendAST = this._$OuterSendAST = $.$OuterSendAST;
      this.$ParameterAST = this._$ParameterAST = $.$ParameterAST;
      this._$ReceiverAST = $.$ReceiverAST;
      this.$ReceiverAST = dnuCatcher("$ReceiverAST");
      this._$ReturnAST = $.$ReturnAST;
      this.$ReturnAST = dnuCatcher("$ReturnAST");
      this.$SelfSendAST = this._$SelfSendAST = $.$SelfSendAST;
      this._$SendAST = $.$SendAST;
      this.$SendAST = dnuCatcher("$SendAST");
      this.$SuperSendAST = this._$SuperSendAST = $.$SuperSendAST;
      this.$TemporaryAST = this._$TemporaryAST = $.$TemporaryAST;
      this._$init$scopeStack$ = $.$init$scopeStack$;
      this.$init$scopeStack$ = dnuCatcher("$init$scopeStack$");
      this._$scopeStack = $.$scopeStack;
      this.$scopeStack = dnuCatcher("$scopeStack");
      this._$init$valueExpected$ = $.$init$valueExpected$;
      this.$init$valueExpected$ = dnuCatcher("$init$valueExpected$");
      this._$valueExpected = $.$valueExpected;
      this.$valueExpected = dnuCatcher("$valueExpected");
      this._$valueExpected$ = $.$valueExpected$;
      this.$valueExpected$ = dnuCatcher("$valueExpected$");
      this._$init$inClosure$ = $.$init$inClosure$;
      this.$init$inClosure$ = dnuCatcher("$init$inClosure$");
      this._$inClosure = $.$inClosure;
      this.$inClosure = dnuCatcher("$inClosure");
      this._$inClosure$ = $.$inClosure$;
      this.$inClosure$ = dnuCatcher("$inClosure$");
      this.$init$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$BooleanAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST = this._$NewspeakCompilation$Compiler$Rewriter$BooleanAST = $.$NewspeakCompilation$Compiler$Rewriter$BooleanAST;
      this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = this._$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = $.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = this._$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = $.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = this._$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = $.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST;
      this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = this._$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = $.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = this._$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = $.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = this._$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = $.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST;
      this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = this._$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = $.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = this._$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = $.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST;
      this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = this._$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = $.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$LoopAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$LoopAST = this._$NewspeakCompilation$Compiler$Rewriter$LoopAST = $.$NewspeakCompilation$Compiler$Rewriter$LoopAST;
      this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = this._$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = $.$NewspeakCompilation$Compiler$Rewriter$LoopAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$NilAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$NilAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$NilAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$NilAST = this._$NewspeakCompilation$Compiler$Rewriter$NilAST = $.$NewspeakCompilation$Compiler$Rewriter$NilAST;
      this.$NewspeakCompilation$Compiler$Rewriter$NilAST$ = this._$NewspeakCompilation$Compiler$Rewriter$NilAST$ = $.$NewspeakCompilation$Compiler$Rewriter$NilAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = this._$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = $.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = this._$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = $.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$ParameterAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST = this._$NewspeakCompilation$Compiler$Rewriter$ParameterAST = $.$NewspeakCompilation$Compiler$Rewriter$ParameterAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = this._$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = $.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$ReturnAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$ReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$ReturnAST;
      this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = this._$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = $.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$SendAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$SendAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$SendAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$SendAST = this._$NewspeakCompilation$Compiler$Rewriter$SendAST = $.$NewspeakCompilation$Compiler$Rewriter$SendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$SendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$SendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$SendAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = this._$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = $.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST;
      this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$;
      this.$init$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = this._$init$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = $.$init$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$;
      this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = this._$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = $.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST;
      this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = this._$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = $.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$;
      this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter = enclosingObjects;
      this.$super$NewspeakCompilation$Compiler$Rewriter$slot = runtimeSuperclass;
      this["NewspeakCompilation`Compiler`Rewriter"] = function () {
       superBasicNew.call(this);
       this.$scopeStack$slot = nil;
       this.$valueExpected$slot = nil;
       this.$inClosure$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = nil;
       this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = nil;
      };
      this.basicNew = this["NewspeakCompilation`Compiler`Rewriter"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter";
     this.slots = [];
     this.methods = [new MM("new", true, 0)];
     this.nestedClasses = [];
     this.$new = function () {
      return (new this.nonMeta.basicNew()).$instance$initializer();
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter";
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$Rewriter = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$NewspeakCompilation$Compiler$ScopeBuilder = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for NewspeakCompilation`Compiler`ScopeBuilder";
    this.name = "NewspeakCompilation`Compiler`ScopeBuilder";
    this.header = 2739;
    this.slots = [
     new SM("scopeStack", false, false),
     new SM("currentDepth", true, false)
    ];
    this.methods = [
     new MM("superInit`NewspeakCompilation`Compiler`ScopeBuilder", true, 2740),
     new MM("instance`initializer", true, 2741),
     new MM("buildScopeFor:", false, 2742),
     new MM("incrementalScopeFor:", false, 2743),
     new MM("blockNode:", false, 2744),
     new MM("cascadedSendNode:", false, 2745),
     new MM("charNode:", false, 2746),
     new MM("classHeaderNode:", false, 2747),
     new MM("classNode:", false, 2748),
     new MM("codeBodyNode:", false, 2749),
     new MM("keywordPatternNode:", false, 2750),
     new MM("literalPatternNode:", false, 2751),
     new MM("messageNode:", false, 2752),
     new MM("messagePatternNode:", false, 2753),
     new MM("methodNode:", false, 2754),
     new MM("mixinApplication:", false, 2755),
     new MM("mixinApplicationClass:", false, 2756),
     new MM("mixinClassNode:", false, 2757),
     new MM("normalSendNode:", false, 2758),
     new MM("numberNode:", false, 2759),
     new MM("returnStatNode:", false, 2760),
     new MM("setterSendNode:", false, 2761),
     new MM("sideNode:", false, 2762),
     new MM("stringNode:", false, 2763),
     new MM("symbolNode:", false, 2764),
     new MM("tupleNode:", false, 2765),
     new MM("varDeclNode:", false, 2766),
     new MM("variableNode:", false, 2767),
     new MM("wildcardPatternNode:", false, 2768),
     new MM("currentScope", false, 2769),
     new MM("isPseudoVariableNode:", false, 2770),
     new MM("nestScope:", false, 2771),
     new MM("popScope", false, 2772),
     new MM("pushScope:", false, 2773),
     new MM("init`scopeStack:", true, 0),
     new MM("scopeStack", true, 0),
     new MM("init`currentDepth:", true, 0),
     new MM("currentDepth", true, 0),
     new MM("currentDepth:", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$NewspeakCompilation$Compiler$ScopeBuilder = function ($initialScope, $initialDepth) {
     var self = this;
     self.$super$NewspeakCompilation$Compiler$ScopeBuilder$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($initialScope, $initialDepth) {
     var self = this;
     self._$superInit$NewspeakCompilation$Compiler$ScopeBuilder($initialScope, $initialDepth);
     self._$init$scopeStack$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$OrderedCollection().$new());
     self._$init$currentDepth$($initialDepth);
     self._$pushScope$($initialScope);
     return self;
    };
    this.$buildScopeFor$ = function ($mm) {
     var self = this;
     self._$assert$message$(function () {
      return $mm.$isMixinMirror();
     }, "");
     return self._$incrementalScopeFor$($mm);
    };
    this.$incrementalScopeFor$ = function ($mm) {
     var self = this;
     var $enclosingMixin = nil;
     var $enclosingScope = nil;
     var $scope = nil;
     var $currentClass = nil;
     var $depth = nil;
     $enclosingMixin = $mm.$declaration().$enclosingClass();
     if (nil.$$equal($enclosingMixin)) {
      $enclosingScope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
     } else {
      $enclosingScope = self._$incrementalScopeFor$($enclosingMixin.$instanceSide());
     };
     $scope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new().$superScope$($enclosingScope);
     $depth = $scope.$depth();
     $currentClass = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new().$selector$($mm.$declaration().$simpleName()), $depth);
     $currentClass.$enclosingClass$($scope.$at$ifAbsent$("@currentClass", function () {
      return nil;
     }));
     $scope.$at$put$("@currentClass", $currentClass);
     $depth = $depth + 1;
     $mm.$slots().$do$(function ($s) {
      var $se = nil;
      $se = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$SlotEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
       cascadeReceiver.$selector$($s.$name());
       return cascadeReceiver.$accessModifier$($s.$accessModifier());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), $depth);
      $scope.$at$put$($s.$name(), $se);
      $scope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$initializerSelectorForSlot$($s), $se);
      return $s.$isMutable().$ifTrue$(function () {
       return $scope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$setterSelectorFor$($s), $se);
      });
     });
     $mm.$methods().$do$(function ($m) {
      var $me = nil;
      $me = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MethodEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
       cascadeReceiver.$selector$($m.$name());
       return cascadeReceiver.$accessModifier$($m.$accessModifier());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), $depth);
      return $scope.$at$put$($m.$name(), $me);
     });
     $mm.$nestedClasses().$do$(function ($c) {
      var $ce = nil;
      $ce = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
       cascadeReceiver.$selector$($c.$simpleName());
       return cascadeReceiver.$accessModifier$($c.$accessModifier());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), $depth);
      $ce.$enclosingClass$($currentClass);
      return $scope.$at$put$($c.$simpleName(), $ce);
     });
     return $scope;
    };
    this.$blockNode$ = function ($aNode) {
     var self = this;
     var $parameterScope = nil;
     $parameterScope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
     $aNode.$parameters().$do$(function ($parameter) {
      return $parameterScope.$at$put$($parameter.$name(), self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$LocalEntry().$forDeclaration$atDepth$($parameter, self._$currentDepth()));
     });
     self._$nestScope$($parameterScope);
     $aNode.$body().$apply$(self);
     self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$($aNode.$body()));
     self._$popScope();
     return self;
    };
    this.$cascadedSendNode$ = function ($aNode) {
     var self = this;
     $aNode.$previousSend().$apply$(self);
     $aNode.$message().$apply$(self);
     return self;
    };
    this.$charNode$ = function ($aNode) {
     var self = this;
     return self;
    };
    this.$classHeaderNode$ = function ($aNode) {
     var self = this;
     $aNode.$constructor().$apply$(self);
     $aNode.$slots().$do$(function ($s) {
      return $s.$initializer().$ifNotNil$(function ($i) {
       return $i.$apply$(self);
      });
     });
     $aNode.$initExprs().$do$(function ($e) {
      return $e.$apply$(self);
     });
     return self;
    };
    this.$classNode$ = function ($aNode) {
     var self = this;
     var $thisClass = nil;
     var $vs = nil;
     $thisClass = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
      cascadeReceiver.$selector$($aNode.$name());
      return cascadeReceiver.$accessModifier$($aNode.$accessModifier());
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), self._$currentDepth());
     $thisClass.$enclosingClass$(self._$currentScope().$at$ifAbsent$("@currentClass", function () {
      return nil;
     }));
     self._$currentScope().$at$put$($aNode.$name(), $thisClass);
     $vs = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
     self._$currentDepth$(self._$currentDepth() + 1);
     $aNode.$header().$slots().$do$(function ($v) {
      var $se = nil;
      $se = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$SlotEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
       cascadeReceiver.$selector$($v.$name());
       return cascadeReceiver.$accessModifier$($v.$accessModifier());
      })(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), self._$currentDepth());
      $vs.$at$put$($v.$name(), $se);
      $vs.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$initializerSelectorForSlot$($v), $se);
      return $v.$isMutable().$ifTrue$(function () {
       return $vs.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$setterSelectorFor$($v), $se);
      });
     });
     self._$nestScope$($vs);
     self._$currentScope().$at$put$("@currentClass", $thisClass);
     $aNode.$instanceSide().$apply$(self);
     self._$popScope();
     self._$nestScope$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new());
     self._$currentScope().$at$put$("@currentClass", $thisClass);
     $aNode.$classSide().$apply$(self);
     self._$popScope();
     self._$currentDepth$(self._$currentDepth() - 1);
     return self;
    };
    this.$codeBodyNode$ = function ($aNode) {
     var self = this;
     var $ts = nil;
     $ts = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
     $aNode.$temporaries().$do$(function ($t) {
      var $svd = nil;
      $svd = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$LocalEntry().$forDeclaration$atDepth$($t.$slotDecl(), self._$currentDepth());
      $ts.$at$put$($t.$name(), $svd);
      $ts.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$initializerSelectorForSlot$($t), $svd);
      return $t.$isMutable().$ifTrue$(function () {
       return $ts.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$setterSelectorFor$($t), $svd);
      });
     });
     self._$nestScope$($ts);
     self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, $ts);
     $aNode.$temporaries().$do$(function ($t) {
      return $t.$initializer().$isNil().$ifFalse$(function () {
       return $t.$initializer().$apply$(self);
      });
     });
     $aNode.$statements().$do$(function ($statement) {
      return $statement.$apply$(self);
     });
     self._$popScope();
     return self;
    };
    this.$keywordPatternNode$ = function ($n) {
     var self = this;
     return self;
    };
    this.$literalPatternNode$ = function ($n) {
     var self = this;
     return self;
    };
    this.$messageNode$ = function ($aNode) {
     var self = this;
     $aNode.$arguments().$do$(function ($arg) {
      return $arg.$apply$(self);
     });
     return self;
    };
    this.$messagePatternNode$ = function ($aNode) {
     var self = this;
     var $parameterScope = nil;
     $parameterScope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
     $aNode.$parameters().$do$(function ($parameter) {
      return $parameterScope.$at$put$($parameter.$name(), self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$LocalEntry().$forDeclaration$atDepth$($parameter, self._$currentDepth()));
     });
     self._$nestScope$($parameterScope);
     self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, $parameterScope);
     return self;
    };
    this.$methodNode$ = function ($aNode) {
     var self = this;
     self._$currentScope().$at$put$($aNode.$pattern().$selector(), self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MethodEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
      cascadeReceiver.$selector$($aNode.$selector());
      return cascadeReceiver.$accessModifier$($aNode.$accessModifier());
     })(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), self._$currentDepth()));
     $aNode.$pattern().$apply$(self);
     $aNode.$body().$apply$(self);
     self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$($aNode.$body()));
     self._$popScope();
     return self;
    };
    this.$mixinApplication$ = function ($node) {
     var self = this;
     $node.$mixinExpr().$apply$(self);
     $node.$superclassExpr().$apply$(self);
     return self;
    };
    this.$mixinApplicationClass$ = function ($aNode) {
     var self = this;
     var $thisClass = nil;
     var $vs = nil;
     "BOGUS".$yourself();
     $thisClass = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new().$selector$($aNode.$name()), self._$currentDepth());
     $thisClass.$enclosingClass$(self._$currentScope().$at$ifAbsent$("@currentClass", function () {
      return nil;
     }));
     self._$currentScope().$at$put$($aNode.$name(), $thisClass);
     self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self._$currentScope());
     return self;
    };
    this.$mixinClassNode$ = function ($aNode) {
     var self = this;
     return self;
    };
    this.$normalSendNode$ = function ($aNode) {
     var self = this;
     $aNode.$receiver().$apply$(self);
     $aNode.$message().$apply$(self);
     return self;
    };
    this.$numberNode$ = function ($aNode) {
     var self = this;
     return self;
    };
    this.$returnStatNode$ = function ($aNode) {
     var self = this;
     $aNode.$expression().$apply$(self);
     return self;
    };
    this.$setterSendNode$ = function ($aNode) {
     var self = this;
     $aNode.$receiver().$apply$(self);
     $aNode.$message().$apply$(self);
     return self;
    };
    this.$sideNode$ = function ($aNode) {
     var self = this;
     self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self._$currentScope());
     $aNode.$categories().$do$(function ($c) {
      return $c.$methods().$do$(function ($m) {
       return $m.$apply$(self);
      });
     });
     $aNode.$nestedClasses().$do$(function ($nc) {
      return $nc.$apply$(self);
     });
     return self;
    };
    this.$stringNode$ = function ($aNode) {
     var self = this;
     return self;
    };
    this.$symbolNode$ = function ($aNode) {
     var self = this;
     return self;
    };
    this.$tupleNode$ = function ($aNode) {
     var self = this;
     $aNode.$elements().$do$(function ($e) {
      return $e.$apply$(self);
     });
     return self;
    };
    this.$varDeclNode$ = function ($aNode) {
     var self = this;
     return self;
    };
    this.$variableNode$ = function ($aNode) {
     var self = this;
     self._$assert$message$(function () {
      return $aNode.$name().$$equal("@here") || self._$isPseudoVariableNode$($aNode);
     }, "Unexpected variable name");
     return self;
    };
    this.$wildcardPatternNode$ = function ($node) {
     var self = this;
     return self;
    };
    this.$currentScope = function () {
     var self = this;
     return self._$scopeStack().$last();
    };
    this.$isPseudoVariableNode$ = function ($aNode) {
     var self = this;
     return $aNode.$name().$$equal("self") || ($aNode.$name().$$equal("super") || $aNode.$name().$$equal("outer"));
    };
    this.$nestScope$ = function ($s) {
     var self = this;
     $s.$superScope$(self._$currentScope());
     self._$pushScope$($s);
     return self;
    };
    this.$popScope = function () {
     var self = this;
     return self._$scopeStack().$removeLast();
    };
    this.$pushScope$ = function ($s) {
     var self = this;
     self._$scopeStack().$addLast$($s);
     return self;
    };
    this.$init$scopeStack$ = function (v) {
     this.$scopeStack$slot = v;
     return this;
    };
    this.$scopeStack = function () {
     return this.$scopeStack$slot;
    };
    this.$init$currentDepth$ = function (v) {
     this.$currentDepth$slot = v;
     return this;
    };
    this.$currentDepth = function () {
     return this.$currentDepth$slot;
    };
    this.$currentDepth$ = function (v) {
     this.$currentDepth$slot = v;
     return this;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for NewspeakCompilation`Compiler`ScopeBuilder";
      this._$superInit$NewspeakCompilation$Compiler$ScopeBuilder = $.$superInit$NewspeakCompilation$Compiler$ScopeBuilder;
      this.$superInit$NewspeakCompilation$Compiler$ScopeBuilder = dnuCatcher("$superInit$NewspeakCompilation$Compiler$ScopeBuilder");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$buildScopeFor$ = this._$buildScopeFor$ = $.$buildScopeFor$;
      this._$incrementalScopeFor$ = $.$incrementalScopeFor$;
      this.$incrementalScopeFor$ = dnuCatcher("$incrementalScopeFor$");
      this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
      this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
      this.$charNode$ = this._$charNode$ = $.$charNode$;
      this.$classHeaderNode$ = this._$classHeaderNode$ = $.$classHeaderNode$;
      this.$classNode$ = this._$classNode$ = $.$classNode$;
      this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
      this.$keywordPatternNode$ = this._$keywordPatternNode$ = $.$keywordPatternNode$;
      this.$literalPatternNode$ = this._$literalPatternNode$ = $.$literalPatternNode$;
      this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
      this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
      this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
      this.$mixinApplication$ = this._$mixinApplication$ = $.$mixinApplication$;
      this.$mixinApplicationClass$ = this._$mixinApplicationClass$ = $.$mixinApplicationClass$;
      this.$mixinClassNode$ = this._$mixinClassNode$ = $.$mixinClassNode$;
      this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
      this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
      this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
      this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
      this.$sideNode$ = this._$sideNode$ = $.$sideNode$;
      this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
      this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
      this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
      this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
      this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
      this.$wildcardPatternNode$ = this._$wildcardPatternNode$ = $.$wildcardPatternNode$;
      this._$currentScope = $.$currentScope;
      this.$currentScope = dnuCatcher("$currentScope");
      this._$isPseudoVariableNode$ = $.$isPseudoVariableNode$;
      this.$isPseudoVariableNode$ = dnuCatcher("$isPseudoVariableNode$");
      this._$nestScope$ = $.$nestScope$;
      this.$nestScope$ = dnuCatcher("$nestScope$");
      this._$popScope = $.$popScope;
      this.$popScope = dnuCatcher("$popScope");
      this._$pushScope$ = $.$pushScope$;
      this.$pushScope$ = dnuCatcher("$pushScope$");
      this._$init$scopeStack$ = $.$init$scopeStack$;
      this.$init$scopeStack$ = dnuCatcher("$init$scopeStack$");
      this._$scopeStack = $.$scopeStack;
      this.$scopeStack = dnuCatcher("$scopeStack");
      this._$init$currentDepth$ = $.$init$currentDepth$;
      this.$init$currentDepth$ = dnuCatcher("$init$currentDepth$");
      this._$currentDepth = $.$currentDepth;
      this.$currentDepth = dnuCatcher("$currentDepth");
      this._$currentDepth$ = $.$currentDepth$;
      this.$currentDepth$ = dnuCatcher("$currentDepth$");
      this.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder = enclosingObjects;
      this.$super$NewspeakCompilation$Compiler$ScopeBuilder$slot = runtimeSuperclass;
      this["NewspeakCompilation`Compiler`ScopeBuilder"] = function () {
       superBasicNew.call(this);
       this.$scopeStack$slot = nil;
       this.$currentDepth$slot = nil;
      };
      this.basicNew = this["NewspeakCompilation`Compiler`ScopeBuilder"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`ScopeBuilder";
     this.slots = [];
     this.methods = [
      new MM("nestedIn:atLevel:", true, 0),
      new MM("new", false, 2774)
     ];
     this.nestedClasses = [];
     this.$nestedIn$atLevel$ = function ($initialScope, $initialDepth) {
      return (new this.nonMeta.basicNew()).$instance$initializer($initialScope, $initialDepth);
     };
     this.$new = function () {
      var self = this;
      return self._$nestedIn$atLevel$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new(), 0);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for NewspeakCompilation`Compiler`ScopeBuilder";
       this.$nestedIn$atLevel$ = this._$nestedIn$atLevel$ = $.$nestedIn$atLevel$;
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder = enclosingObjects;
       this.$super$NewspeakCompilation$Compiler$ScopeBuilder = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$NewspeakCompilation$Compiler$Rewriter.enclosingMixin = this;
   this.$NewspeakCompilation$Compiler$ScopeBuilder.enclosingMixin = this;
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`Compiler";
     this._$superInit$NewspeakCompilation$Compiler = $.$superInit$NewspeakCompilation$Compiler;
     this.$superInit$NewspeakCompilation$Compiler = dnuCatcher("$superInit$NewspeakCompilation$Compiler");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$checkForReservedWord$ = $.$checkForReservedWord$;
     this.$checkForReservedWord$ = dnuCatcher("$checkForReservedWord$");
     this._$setterSelectorFor$ = $.$setterSelectorFor$;
     this.$setterSelectorFor$ = dnuCatcher("$setterSelectorFor$");
     this.$compileClassHeader$of$into$within$ = this._$compileClassHeader$of$into$within$ = $.$compileClassHeader$of$into$within$;
     this.$compileClassSource$within$ = this._$compileClassSource$within$ = $.$compileClassSource$within$;
     this.$compileExpressionSource$inContext$inMixin$allowBlackMarket$ = this._$compileExpressionSource$inContext$inMixin$allowBlackMarket$ = $.$compileExpressionSource$inContext$inMixin$allowBlackMarket$;
     this.$compileMethodSource$within$ = this._$compileMethodSource$within$ = $.$compileMethodSource$within$;
     this._$Rewriter = $.$Rewriter;
     this.$Rewriter = dnuCatcher("$Rewriter");
     this._$ScopeBuilder = $.$ScopeBuilder;
     this.$ScopeBuilder = dnuCatcher("$ScopeBuilder");
     this._$init$scopeMap$ = $.$init$scopeMap$;
     this.$init$scopeMap$ = dnuCatcher("$init$scopeMap$");
     this._$scopeMap = $.$scopeMap;
     this.$scopeMap = dnuCatcher("$scopeMap");
     this._$scopeMap$ = $.$scopeMap$;
     this.$scopeMap$ = dnuCatcher("$scopeMap$");
     this.$init$NewspeakCompilation$Compiler$Rewriter$ = this._$init$NewspeakCompilation$Compiler$Rewriter$ = $.$init$NewspeakCompilation$Compiler$Rewriter$;
     this.$NewspeakCompilation$Compiler$Rewriter = this._$NewspeakCompilation$Compiler$Rewriter = $.$NewspeakCompilation$Compiler$Rewriter;
     this.$NewspeakCompilation$Compiler$Rewriter$ = this._$NewspeakCompilation$Compiler$Rewriter$ = $.$NewspeakCompilation$Compiler$Rewriter$;
     this.$init$NewspeakCompilation$Compiler$ScopeBuilder$ = this._$init$NewspeakCompilation$Compiler$ScopeBuilder$ = $.$init$NewspeakCompilation$Compiler$ScopeBuilder$;
     this.$NewspeakCompilation$Compiler$ScopeBuilder = this._$NewspeakCompilation$Compiler$ScopeBuilder = $.$NewspeakCompilation$Compiler$ScopeBuilder;
     this.$NewspeakCompilation$Compiler$ScopeBuilder$ = this._$NewspeakCompilation$Compiler$ScopeBuilder$ = $.$NewspeakCompilation$Compiler$ScopeBuilder$;
     this.$enclosingObjects$NewspeakCompilation$Compiler = enclosingObjects;
     this.$super$NewspeakCompilation$Compiler$slot = runtimeSuperclass;
     this["NewspeakCompilation`Compiler"] = function () {
      superBasicNew.call(this);
      this.$scopeMap$slot = nil;
      this.$NewspeakCompilation$Compiler$Rewriter$slot = nil;
      this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = nil;
     };
     this.basicNew = this["NewspeakCompilation`Compiler"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`Compiler";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakCompilation$Compiler = enclosingObjects;
      this.$super$NewspeakCompilation$Compiler = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$LocalEntry = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`LocalEntry";
   this.name = "NewspeakCompilation`LocalEntry";
   this.header = 2775;
   this.slots = [
    new SM("offset", true, false),
    new SM("remote", true, false),
    new SM("remoteVector", true, false),
    new SM("used", true, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakCompilation`LocalEntry", true, 2776),
    new MM("instance`initializer", true, 2777),
    new MM("isLocalBinding", false, 2778),
    new MM("isTemporaryAST", false, 2779),
    new MM("name", false, 2780),
    new MM("init`offset:", true, 0),
    new MM("offset", true, 0),
    new MM("offset:", true, 0),
    new MM("init`remote:", true, 0),
    new MM("remote", true, 0),
    new MM("remote:", true, 0),
    new MM("init`remoteVector:", true, 0),
    new MM("remoteVector", true, 0),
    new MM("remoteVector:", true, 0),
    new MM("init`used:", true, 0),
    new MM("used", true, 0),
    new MM("used:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$LocalEntry = function ($decl, $d) {
    var self = this;
    self.$super$NewspeakCompilation$LocalEntry$slot._$instance$initializer.call(self, $decl, $d);
    return self;
   };
   this.$instance$initializer = function ($decl, $d) {
    var self = this;
    self._$superInit$NewspeakCompilation$LocalEntry($decl, $d);
    self._$init$remote$(false);
    self._$init$used$(false);
    return self;
   };
   this.$isLocalBinding = function () {
    var self = this;
    return true;
   };
   this.$isTemporaryAST = function () {
    var self = this;
    return self._$ast().$isTemporaryAST();
   };
   this.$name = function () {
    var self = this;
    return self._$ast().$name();
   };
   this.$init$offset$ = function (v) {
    this.$offset$slot = v;
    return this;
   };
   this.$offset = function () {
    return this.$offset$slot;
   };
   this.$offset$ = function (v) {
    this.$offset$slot = v;
    return this;
   };
   this.$init$remote$ = function (v) {
    this.$remote$slot = v;
    return this;
   };
   this.$remote = function () {
    return this.$remote$slot;
   };
   this.$remote$ = function (v) {
    this.$remote$slot = v;
    return this;
   };
   this.$init$remoteVector$ = function (v) {
    this.$remoteVector$slot = v;
    return this;
   };
   this.$remoteVector = function () {
    return this.$remoteVector$slot;
   };
   this.$remoteVector$ = function (v) {
    this.$remoteVector$slot = v;
    return this;
   };
   this.$init$used$ = function (v) {
    this.$used$slot = v;
    return this;
   };
   this.$used = function () {
    return this.$used$slot;
   };
   this.$used$ = function (v) {
    this.$used$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`LocalEntry";
     this._$superInit$NewspeakCompilation$LocalEntry = $.$superInit$NewspeakCompilation$LocalEntry;
     this.$superInit$NewspeakCompilation$LocalEntry = dnuCatcher("$superInit$NewspeakCompilation$LocalEntry");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isLocalBinding = this._$isLocalBinding = $.$isLocalBinding;
     this.$isTemporaryAST = this._$isTemporaryAST = $.$isTemporaryAST;
     this.$name = this._$name = $.$name;
     this.$init$offset$ = this._$init$offset$ = $.$init$offset$;
     this.$offset = this._$offset = $.$offset;
     this.$offset$ = this._$offset$ = $.$offset$;
     this.$init$remote$ = this._$init$remote$ = $.$init$remote$;
     this.$remote = this._$remote = $.$remote;
     this.$remote$ = this._$remote$ = $.$remote$;
     this.$init$remoteVector$ = this._$init$remoteVector$ = $.$init$remoteVector$;
     this.$remoteVector = this._$remoteVector = $.$remoteVector;
     this.$remoteVector$ = this._$remoteVector$ = $.$remoteVector$;
     this.$init$used$ = this._$init$used$ = $.$init$used$;
     this.$used = this._$used = $.$used;
     this.$used$ = this._$used$ = $.$used$;
     this.$enclosingObjects$NewspeakCompilation$LocalEntry = enclosingObjects;
     this.$super$NewspeakCompilation$LocalEntry$slot = runtimeSuperclass;
     this["NewspeakCompilation`LocalEntry"] = function () {
      superBasicNew.call(this);
      this.$offset$slot = nil;
      this.$remote$slot = nil;
      this.$remoteVector$slot = nil;
      this.$used$slot = nil;
     };
     this.basicNew = this["NewspeakCompilation`LocalEntry"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`LocalEntry";
    this.slots = [];
    this.methods = [new MM("forDeclaration:atDepth:", true, 0)];
    this.nestedClasses = [];
    this.$forDeclaration$atDepth$ = function ($decl, $d) {
     return (new this.nonMeta.basicNew()).$instance$initializer($decl, $d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`LocalEntry";
      this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
      this.$enclosingObjects$NewspeakCompilation$LocalEntry = enclosingObjects;
      this.$super$NewspeakCompilation$LocalEntry = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$MethodEntry = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`MethodEntry";
   this.name = "NewspeakCompilation`MethodEntry";
   this.header = 2781;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakCompilation`MethodEntry", true, 2782),
    new MM("instance`initializer", true, 2783),
    new MM("isMethodBinding", false, 2784)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$MethodEntry = function ($decl, $d) {
    var self = this;
    self.$super$NewspeakCompilation$MethodEntry$slot._$instance$initializer.call(self, $decl, $d);
    return self;
   };
   this.$instance$initializer = function ($decl, $d) {
    var self = this;
    self._$superInit$NewspeakCompilation$MethodEntry($decl, $d);
    return self;
   };
   this.$isMethodBinding = function () {
    var self = this;
    return true;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`MethodEntry";
     this._$superInit$NewspeakCompilation$MethodEntry = $.$superInit$NewspeakCompilation$MethodEntry;
     this.$superInit$NewspeakCompilation$MethodEntry = dnuCatcher("$superInit$NewspeakCompilation$MethodEntry");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isMethodBinding = this._$isMethodBinding = $.$isMethodBinding;
     this.$enclosingObjects$NewspeakCompilation$MethodEntry = enclosingObjects;
     this.$super$NewspeakCompilation$MethodEntry$slot = runtimeSuperclass;
     this["NewspeakCompilation`MethodEntry"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakCompilation`MethodEntry"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`MethodEntry";
    this.slots = [];
    this.methods = [new MM("forDeclaration:atDepth:", true, 0)];
    this.nestedClasses = [];
    this.$forDeclaration$atDepth$ = function ($decl, $d) {
     return (new this.nonMeta.basicNew()).$instance$initializer($decl, $d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`MethodEntry";
      this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
      this.$enclosingObjects$NewspeakCompilation$MethodEntry = enclosingObjects;
      this.$super$NewspeakCompilation$MethodEntry = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$Namer = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`Namer";
   this.name = "NewspeakCompilation`Namer";
   this.header = 2785;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakCompilation`Namer", true, 2786),
    new MM("instance`initializer", true, 2787),
    new MM("fullyQualifiedNameToSimple:", false, 2788),
    new MM("fullyQualifySimpleName:with:", false, 2789),
    new MM("initializerSelectorForSlot:", false, 2790),
    new MM("isReservedWord:", false, 2791),
    new MM("mixinNameOfClassNamed:", false, 2792),
    new MM("mixinSlotNameFor:", false, 2793),
    new MM("setterSelectorFor:", false, 2794),
    new MM("setterTemp", false, 2795),
    new MM("slotNameForNestedClassNamed:within:", false, 2796),
    new MM("syntheticNameSeparator", false, 2797)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$Namer = function () {
    var self = this;
    self.$super$NewspeakCompilation$Namer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakCompilation$Namer();
    return self;
   };
   this.$fullyQualifiedNameToSimple$ = function ($name) {
    var self = this;
    var $index = nil;
    $index = $name.$lastIndexOf$("`");
    if ($index.$$equal(0)) {
     return $name;
    } else {
     nil;
    };
    return $name.$copyFrom$to$(1 + $index, $name.$size()).$asSymbol();
   };
   this.$fullyQualifySimpleName$with$ = function ($sn, $fqp) {
    var self = this;
    return $fqp.$$comma(self._$syntheticNameSeparator()).$$comma($sn).$asSymbol();
   };
   this.$initializerSelectorForSlot$ = function ($slot) {
    var self = this;
    return "init`".$$comma($slot.$name()).$$comma(":").$asSymbol();
   };
   this.$isReservedWord$ = function ($selector) {
    var self = this;
    return [
     "self",
     "super",
     "outer",
     "true",
     "false",
     "nil"
    ].$includes$($selector);
   };
   this.$mixinNameOfClassNamed$ = function ($className) {
    var self = this;
    return $className;
   };
   this.$mixinSlotNameFor$ = function ($nestedName) {
    var self = this;
    var $mixinName = nil;
    $mixinName = self._$mixinNameOfClassNamed$($nestedName);
    return $mixinName.$$comma(self._$syntheticNameSeparator()).$$comma("slot").$asSymbol();
   };
   this.$setterSelectorFor$ = function ($slot) {
    var self = this;
    if (!$slot.$isMutable()) {
     self._$warnObsolete();
    } else {
     nil;
    };
    return $slot.$isMutable().$ifTrue$ifFalse$(function () {
     return "";
    }, function () {
     return "setOnce`";
    }).$$comma($slot.$name()).$$comma(":").$asSymbol();
   };
   this.$setterTemp = function () {
    var self = this;
    return "@setterTemp";
   };
   this.$slotNameForNestedClassNamed$within$ = function ($ncn, $outerName) {
    var self = this;
    return self._$mixinSlotNameFor$($ncn);
   };
   this.$syntheticNameSeparator = function () {
    var self = this;
    return "`";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`Namer";
     this._$superInit$NewspeakCompilation$Namer = $.$superInit$NewspeakCompilation$Namer;
     this.$superInit$NewspeakCompilation$Namer = dnuCatcher("$superInit$NewspeakCompilation$Namer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$fullyQualifiedNameToSimple$ = this._$fullyQualifiedNameToSimple$ = $.$fullyQualifiedNameToSimple$;
     this.$fullyQualifySimpleName$with$ = this._$fullyQualifySimpleName$with$ = $.$fullyQualifySimpleName$with$;
     this.$initializerSelectorForSlot$ = this._$initializerSelectorForSlot$ = $.$initializerSelectorForSlot$;
     this.$isReservedWord$ = this._$isReservedWord$ = $.$isReservedWord$;
     this.$mixinNameOfClassNamed$ = this._$mixinNameOfClassNamed$ = $.$mixinNameOfClassNamed$;
     this.$mixinSlotNameFor$ = this._$mixinSlotNameFor$ = $.$mixinSlotNameFor$;
     this.$setterSelectorFor$ = this._$setterSelectorFor$ = $.$setterSelectorFor$;
     this.$setterTemp = this._$setterTemp = $.$setterTemp;
     this.$slotNameForNestedClassNamed$within$ = this._$slotNameForNestedClassNamed$within$ = $.$slotNameForNestedClassNamed$within$;
     this.$syntheticNameSeparator = this._$syntheticNameSeparator = $.$syntheticNameSeparator;
     this.$enclosingObjects$NewspeakCompilation$Namer = enclosingObjects;
     this.$super$NewspeakCompilation$Namer$slot = runtimeSuperclass;
     this["NewspeakCompilation`Namer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakCompilation`Namer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`Namer";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`Namer";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakCompilation$Namer = enclosingObjects;
      this.$super$NewspeakCompilation$Namer = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$Scope = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`Scope";
   this.name = "NewspeakCompilation`Scope";
   this.header = 2798;
   this.slots = [
    new SM("superScope", true, false),
    new SM("bindings", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakCompilation`Scope", true, 2799),
    new MM("instance`initializer", true, 2800),
    new MM("at:", false, 2801),
    new MM("at:depth:", false, 2802),
    new MM("at:ifAbsent:", false, 2803),
    new MM("at:put:", false, 2804),
    new MM("at:put:ifThere:", false, 2805),
    new MM("depth", false, 2806),
    new MM("printOn:", false, 2807),
    new MM("setSuperScope:", false, 2808),
    new MM("init`superScope:", true, 0),
    new MM("superScope", true, 0),
    new MM("superScope:", true, 0),
    new MM("init`bindings:", true, 0),
    new MM("bindings", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$Scope = function () {
    var self = this;
    self.$super$NewspeakCompilation$Scope$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    var self = this;
    self._$superInit$NewspeakCompilation$Scope();
    self._$init$bindings$(self.$enclosingObjects$NewspeakCompilation$Scope[0]._$Dictionary().$new());
    return self;
   };
   this.$at$ = function ($key) {
    var self = this;
    return self._$at$ifAbsent$($key, function () {
     return self._$Error().$signal$("Key ".$$comma($key).$$comma(" not found!"));
    });
   };
   this.$at$depth$ = function ($key, $d) {
    var self = this;
    if (!self._$depth().$$equal($d)) {
     if (nil.$$equal(self._$superScope())) {
      return nil;
     } else {
      return self._$superScope().$at$depth$($key, $d);
     };
    } else {
     nil;
    };
    return self._$bindings().$at$ifAbsent$($key, function () {
     return nil;
    });
   };
   this.$at$ifAbsent$ = function ($key, $blk) {
    var self = this;
    var $val = nil;
    $val = self._$bindings().$at$ifAbsent$($key, function () {
     return nil;
    });
    if (!nil.$$equal($val)) {
     return $val;
    } else {
     nil;
    };
    if (nil.$$equal(self._$superScope())) {
     return $blk.$value();
    } else {
     nil;
    };
    $val = self._$superScope().$at$ifAbsent$($key, function () {
     return nil;
    });
    if (!nil.$$equal($val)) {
     return $val;
    } else {
     nil;
    };
    return $blk.$value();
   };
   this.$at$put$ = function ($key, $value) {
    var self = this;
    return self._$bindings().$at$put$($key, $value);
   };
   this.$at$put$ifThere$ = function ($key, $value, $aBlock) {
    var self = this;
    var $wasAbsent = nil;
    $wasAbsent = false;
    self._$bindings().$at$ifAbsent$($key, function () {
     self._$bindings().$at$put$($key, $value);
     return $wasAbsent = true;
    });
    return $wasAbsent.$ifTrue$ifFalse$(function () {
     return $value;
    }, function () {
     return $aBlock.$value();
    });
   };
   this.$depth = function () {
    var self = this;
    if (self._$superScope().$isNil()) {
     return 0;
    } else {
     nil;
    };
    return self._$superScope().$depth() + 1;
   };
   this.$printOn$ = function ($stm) {
    var self = this;
    $stm.$nextPutAll$("Scope(");
    self._$bindings().$keys().$do$separatedBy$(function ($key) {
     return $stm.$nextPutAll$($key);
    }, function () {
     return $stm.$nextPutAll$(", ");
    });
    $stm.$nextPutAll$(") in ");
    self._$superScope().$printOn$($stm);
    return self;
   };
   this.$setSuperScope$ = function ($sc) {
    var self = this;
    if (self._$superScope().$isNil()) {
     self._$superScope$($sc);
    } else {
     self._$superScope().$setSuperScope$($sc);
    };
    return self;
   };
   this.$init$superScope$ = function (v) {
    this.$superScope$slot = v;
    return this;
   };
   this.$superScope = function () {
    return this.$superScope$slot;
   };
   this.$superScope$ = function (v) {
    this.$superScope$slot = v;
    return this;
   };
   this.$init$bindings$ = function (v) {
    this.$bindings$slot = v;
    return this;
   };
   this.$bindings = function () {
    return this.$bindings$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`Scope";
     this._$superInit$NewspeakCompilation$Scope = $.$superInit$NewspeakCompilation$Scope;
     this.$superInit$NewspeakCompilation$Scope = dnuCatcher("$superInit$NewspeakCompilation$Scope");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$depth$ = this._$at$depth$ = $.$at$depth$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$at$put$ifThere$ = this._$at$put$ifThere$ = $.$at$put$ifThere$;
     this.$depth = this._$depth = $.$depth;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$setSuperScope$ = this._$setSuperScope$ = $.$setSuperScope$;
     this.$init$superScope$ = this._$init$superScope$ = $.$init$superScope$;
     this.$superScope = this._$superScope = $.$superScope;
     this.$superScope$ = this._$superScope$ = $.$superScope$;
     this._$init$bindings$ = $.$init$bindings$;
     this.$init$bindings$ = dnuCatcher("$init$bindings$");
     this._$bindings = $.$bindings;
     this.$bindings = dnuCatcher("$bindings");
     this.$enclosingObjects$NewspeakCompilation$Scope = enclosingObjects;
     this.$super$NewspeakCompilation$Scope$slot = runtimeSuperclass;
     this["NewspeakCompilation`Scope"] = function () {
      superBasicNew.call(this);
      this.$superScope$slot = nil;
      this.$bindings$slot = nil;
     };
     this.basicNew = this["NewspeakCompilation`Scope"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`Scope";
    this.slots = [];
    this.methods = [new MM("new", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     return (new this.nonMeta.basicNew()).$instance$initializer();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`Scope";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$NewspeakCompilation$Scope = enclosingObjects;
      this.$super$NewspeakCompilation$Scope = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$SlotEntry = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`SlotEntry";
   this.name = "NewspeakCompilation`SlotEntry";
   this.header = 2809;
   this.slots = [];
   this.methods = [
    new MM("superInit`NewspeakCompilation`SlotEntry", true, 2810),
    new MM("instance`initializer", true, 2811),
    new MM("isSlotBinding", false, 2812),
    new MM("name", false, 2813)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$SlotEntry = function ($decl, $d) {
    var self = this;
    self.$super$NewspeakCompilation$SlotEntry$slot._$instance$initializer.call(self, $decl, $d);
    return self;
   };
   this.$instance$initializer = function ($decl, $d) {
    var self = this;
    self._$superInit$NewspeakCompilation$SlotEntry($decl, $d);
    return self;
   };
   this.$isSlotBinding = function () {
    var self = this;
    return true;
   };
   this.$name = function () {
    var self = this;
    return self._$ast().$name();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`SlotEntry";
     this._$superInit$NewspeakCompilation$SlotEntry = $.$superInit$NewspeakCompilation$SlotEntry;
     this.$superInit$NewspeakCompilation$SlotEntry = dnuCatcher("$superInit$NewspeakCompilation$SlotEntry");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isSlotBinding = this._$isSlotBinding = $.$isSlotBinding;
     this.$name = this._$name = $.$name;
     this.$enclosingObjects$NewspeakCompilation$SlotEntry = enclosingObjects;
     this.$super$NewspeakCompilation$SlotEntry$slot = runtimeSuperclass;
     this["NewspeakCompilation`SlotEntry"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["NewspeakCompilation`SlotEntry"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`SlotEntry";
    this.slots = [];
    this.methods = [new MM("forDeclaration:atDepth:", true, 0)];
    this.nestedClasses = [];
    this.$forDeclaration$atDepth$ = function ($decl, $d) {
     return (new this.nonMeta.basicNew()).$instance$initializer($decl, $d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`SlotEntry";
      this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
      this.$enclosingObjects$NewspeakCompilation$SlotEntry = enclosingObjects;
      this.$super$NewspeakCompilation$SlotEntry = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$SymbolTableEntry = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for NewspeakCompilation`SymbolTableEntry";
   this.name = "NewspeakCompilation`SymbolTableEntry";
   this.header = 2814;
   this.slots = [
    new SM("ast", true, false),
    new SM("depth", false, false)
   ];
   this.methods = [
    new MM("superInit`NewspeakCompilation`SymbolTableEntry", true, 2815),
    new MM("instance`initializer", true, 2816),
    new MM("isMessagePatternNode", false, 2817),
    new MM("isVarDeclNode", false, 2818),
    new MM("init`ast:", true, 0),
    new MM("ast", true, 0),
    new MM("ast:", true, 0),
    new MM("init`depth:", true, 0),
    new MM("depth", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$NewspeakCompilation$SymbolTableEntry = function ($tree, $d) {
    var self = this;
    self.$super$NewspeakCompilation$SymbolTableEntry$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($tree, $d) {
    var self = this;
    self._$superInit$NewspeakCompilation$SymbolTableEntry($tree, $d);
    self._$init$ast$($tree);
    self._$init$depth$($d);
    return self;
   };
   this.$isMessagePatternNode = function () {
    var self = this;
    return self._$ast().$isMessagePatternNode();
   };
   this.$isVarDeclNode = function () {
    var self = this;
    return self._$ast().$isVarDeclNode();
   };
   this.$init$ast$ = function (v) {
    this.$ast$slot = v;
    return this;
   };
   this.$ast = function () {
    return this.$ast$slot;
   };
   this.$ast$ = function (v) {
    this.$ast$slot = v;
    return this;
   };
   this.$init$depth$ = function (v) {
    this.$depth$slot = v;
    return this;
   };
   this.$depth = function () {
    return this.$depth$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for NewspeakCompilation`SymbolTableEntry";
     this._$superInit$NewspeakCompilation$SymbolTableEntry = $.$superInit$NewspeakCompilation$SymbolTableEntry;
     this.$superInit$NewspeakCompilation$SymbolTableEntry = dnuCatcher("$superInit$NewspeakCompilation$SymbolTableEntry");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isMessagePatternNode = this._$isMessagePatternNode = $.$isMessagePatternNode;
     this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
     this.$init$ast$ = this._$init$ast$ = $.$init$ast$;
     this.$ast = this._$ast = $.$ast;
     this.$ast$ = this._$ast$ = $.$ast$;
     this.$init$depth$ = this._$init$depth$ = $.$init$depth$;
     this.$depth = this._$depth = $.$depth;
     this.$enclosingObjects$NewspeakCompilation$SymbolTableEntry = enclosingObjects;
     this.$super$NewspeakCompilation$SymbolTableEntry$slot = runtimeSuperclass;
     this["NewspeakCompilation`SymbolTableEntry"] = function () {
      superBasicNew.call(this);
      this.$ast$slot = nil;
      this.$depth$slot = nil;
     };
     this.basicNew = this["NewspeakCompilation`SymbolTableEntry"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for NewspeakCompilation`SymbolTableEntry";
    this.slots = [];
    this.methods = [new MM("forAST:atDepth:", true, 0)];
    this.nestedClasses = [];
    this.$forAST$atDepth$ = function ($tree, $d) {
     return (new this.nonMeta.basicNew()).$instance$initializer($tree, $d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for NewspeakCompilation`SymbolTableEntry";
      this.$forAST$atDepth$ = this._$forAST$atDepth$ = $.$forAST$atDepth$;
      this.$enclosingObjects$NewspeakCompilation$SymbolTableEntry = enclosingObjects;
      this.$super$NewspeakCompilation$SymbolTableEntry = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$NewspeakCompilation$ClassEntry.enclosingMixin = this;
  this.$NewspeakCompilation$Compiler.enclosingMixin = this;
  this.$NewspeakCompilation$LocalEntry.enclosingMixin = this;
  this.$NewspeakCompilation$MethodEntry.enclosingMixin = this;
  this.$NewspeakCompilation$Namer.enclosingMixin = this;
  this.$NewspeakCompilation$Scope.enclosingMixin = this;
  this.$NewspeakCompilation$SlotEntry.enclosingMixin = this;
  this.$NewspeakCompilation$SymbolTableEntry.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for NewspeakCompilation";
    this._$superInit$NewspeakCompilation = $.$superInit$NewspeakCompilation;
    this.$superInit$NewspeakCompilation = dnuCatcher("$superInit$NewspeakCompilation");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$ClassEntry = $.$ClassEntry;
    this.$ClassEntry = dnuCatcher("$ClassEntry");
    this._$Compiler = $.$Compiler;
    this.$Compiler = dnuCatcher("$Compiler");
    this._$LocalEntry = $.$LocalEntry;
    this.$LocalEntry = dnuCatcher("$LocalEntry");
    this._$MethodEntry = $.$MethodEntry;
    this.$MethodEntry = dnuCatcher("$MethodEntry");
    this._$Namer = $.$Namer;
    this.$Namer = dnuCatcher("$Namer");
    this._$Scope = $.$Scope;
    this.$Scope = dnuCatcher("$Scope");
    this._$SlotEntry = $.$SlotEntry;
    this.$SlotEntry = dnuCatcher("$SlotEntry");
    this._$SymbolTableEntry = $.$SymbolTableEntry;
    this.$SymbolTableEntry = dnuCatcher("$SymbolTableEntry");
    this._$init$Dictionary$ = $.$init$Dictionary$;
    this.$init$Dictionary$ = dnuCatcher("$init$Dictionary$");
    this._$Dictionary = $.$Dictionary;
    this.$Dictionary = dnuCatcher("$Dictionary");
    this._$init$OrderedCollection$ = $.$init$OrderedCollection$;
    this.$init$OrderedCollection$ = dnuCatcher("$init$OrderedCollection$");
    this._$OrderedCollection = $.$OrderedCollection;
    this.$OrderedCollection = dnuCatcher("$OrderedCollection");
    this._$init$AST$ = $.$init$AST$;
    this.$init$AST$ = dnuCatcher("$init$AST$");
    this._$AST = $.$AST;
    this.$AST = dnuCatcher("$AST");
    this._$init$ASTTool$ = $.$init$ASTTool$;
    this.$init$ASTTool$ = dnuCatcher("$init$ASTTool$");
    this._$ASTTool = $.$ASTTool;
    this.$ASTTool = dnuCatcher("$ASTTool");
    this._$init$BlockAST$ = $.$init$BlockAST$;
    this.$init$BlockAST$ = dnuCatcher("$init$BlockAST$");
    this._$BlockAST = $.$BlockAST;
    this.$BlockAST = dnuCatcher("$BlockAST");
    this._$init$CascadedSendAST$ = $.$init$CascadedSendAST$;
    this.$init$CascadedSendAST$ = dnuCatcher("$init$CascadedSendAST$");
    this._$CascadedSendAST = $.$CascadedSendAST;
    this.$CascadedSendAST = dnuCatcher("$CascadedSendAST");
    this._$init$CodeBodyAST$ = $.$init$CodeBodyAST$;
    this.$init$CodeBodyAST$ = dnuCatcher("$init$CodeBodyAST$");
    this._$CodeBodyAST = $.$CodeBodyAST;
    this.$CodeBodyAST = dnuCatcher("$CodeBodyAST");
    this._$init$MessageAST$ = $.$init$MessageAST$;
    this.$init$MessageAST$ = dnuCatcher("$init$MessageAST$");
    this._$MessageAST = $.$MessageAST;
    this.$MessageAST = dnuCatcher("$MessageAST");
    this._$init$MessagePatternAST$ = $.$init$MessagePatternAST$;
    this.$init$MessagePatternAST$ = dnuCatcher("$init$MessagePatternAST$");
    this._$MessagePatternAST = $.$MessagePatternAST;
    this.$MessagePatternAST = dnuCatcher("$MessagePatternAST");
    this._$init$MethodAST$ = $.$init$MethodAST$;
    this.$init$MethodAST$ = dnuCatcher("$init$MethodAST$");
    this._$MethodAST = $.$MethodAST;
    this.$MethodAST = dnuCatcher("$MethodAST");
    this._$init$NormalSendAST$ = $.$init$NormalSendAST$;
    this.$init$NormalSendAST$ = dnuCatcher("$init$NormalSendAST$");
    this._$NormalSendAST = $.$NormalSendAST;
    this.$NormalSendAST = dnuCatcher("$NormalSendAST");
    this._$init$NumberAST$ = $.$init$NumberAST$;
    this.$init$NumberAST$ = dnuCatcher("$init$NumberAST$");
    this._$NumberAST = $.$NumberAST;
    this.$NumberAST = dnuCatcher("$NumberAST");
    this._$init$ReturnStatAST$ = $.$init$ReturnStatAST$;
    this.$init$ReturnStatAST$ = dnuCatcher("$init$ReturnStatAST$");
    this._$ReturnStatAST = $.$ReturnStatAST;
    this.$ReturnStatAST = dnuCatcher("$ReturnStatAST");
    this._$init$TupleAST$ = $.$init$TupleAST$;
    this.$init$TupleAST$ = dnuCatcher("$init$TupleAST$");
    this._$TupleAST = $.$TupleAST;
    this.$TupleAST = dnuCatcher("$TupleAST");
    this._$init$VariableAST$ = $.$init$VariableAST$;
    this.$init$VariableAST$ = dnuCatcher("$init$VariableAST$");
    this._$VariableAST = $.$VariableAST;
    this.$VariableAST = dnuCatcher("$VariableAST");
    this.$init$namer$ = this._$init$namer$ = $.$init$namer$;
    this.$namer = this._$namer = $.$namer;
    this.$init$NewspeakCompilation$ClassEntry$ = this._$init$NewspeakCompilation$ClassEntry$ = $.$init$NewspeakCompilation$ClassEntry$;
    this.$NewspeakCompilation$ClassEntry = this._$NewspeakCompilation$ClassEntry = $.$NewspeakCompilation$ClassEntry;
    this.$NewspeakCompilation$ClassEntry$ = this._$NewspeakCompilation$ClassEntry$ = $.$NewspeakCompilation$ClassEntry$;
    this.$init$NewspeakCompilation$Compiler$ = this._$init$NewspeakCompilation$Compiler$ = $.$init$NewspeakCompilation$Compiler$;
    this.$NewspeakCompilation$Compiler = this._$NewspeakCompilation$Compiler = $.$NewspeakCompilation$Compiler;
    this.$NewspeakCompilation$Compiler$ = this._$NewspeakCompilation$Compiler$ = $.$NewspeakCompilation$Compiler$;
    this.$init$NewspeakCompilation$LocalEntry$ = this._$init$NewspeakCompilation$LocalEntry$ = $.$init$NewspeakCompilation$LocalEntry$;
    this.$NewspeakCompilation$LocalEntry = this._$NewspeakCompilation$LocalEntry = $.$NewspeakCompilation$LocalEntry;
    this.$NewspeakCompilation$LocalEntry$ = this._$NewspeakCompilation$LocalEntry$ = $.$NewspeakCompilation$LocalEntry$;
    this.$init$NewspeakCompilation$MethodEntry$ = this._$init$NewspeakCompilation$MethodEntry$ = $.$init$NewspeakCompilation$MethodEntry$;
    this.$NewspeakCompilation$MethodEntry = this._$NewspeakCompilation$MethodEntry = $.$NewspeakCompilation$MethodEntry;
    this.$NewspeakCompilation$MethodEntry$ = this._$NewspeakCompilation$MethodEntry$ = $.$NewspeakCompilation$MethodEntry$;
    this.$init$NewspeakCompilation$Namer$ = this._$init$NewspeakCompilation$Namer$ = $.$init$NewspeakCompilation$Namer$;
    this.$NewspeakCompilation$Namer = this._$NewspeakCompilation$Namer = $.$NewspeakCompilation$Namer;
    this.$NewspeakCompilation$Namer$ = this._$NewspeakCompilation$Namer$ = $.$NewspeakCompilation$Namer$;
    this.$init$NewspeakCompilation$Scope$ = this._$init$NewspeakCompilation$Scope$ = $.$init$NewspeakCompilation$Scope$;
    this.$NewspeakCompilation$Scope = this._$NewspeakCompilation$Scope = $.$NewspeakCompilation$Scope;
    this.$NewspeakCompilation$Scope$ = this._$NewspeakCompilation$Scope$ = $.$NewspeakCompilation$Scope$;
    this.$init$NewspeakCompilation$SlotEntry$ = this._$init$NewspeakCompilation$SlotEntry$ = $.$init$NewspeakCompilation$SlotEntry$;
    this.$NewspeakCompilation$SlotEntry = this._$NewspeakCompilation$SlotEntry = $.$NewspeakCompilation$SlotEntry;
    this.$NewspeakCompilation$SlotEntry$ = this._$NewspeakCompilation$SlotEntry$ = $.$NewspeakCompilation$SlotEntry$;
    this.$init$NewspeakCompilation$SymbolTableEntry$ = this._$init$NewspeakCompilation$SymbolTableEntry$ = $.$init$NewspeakCompilation$SymbolTableEntry$;
    this.$NewspeakCompilation$SymbolTableEntry = this._$NewspeakCompilation$SymbolTableEntry = $.$NewspeakCompilation$SymbolTableEntry;
    this.$NewspeakCompilation$SymbolTableEntry$ = this._$NewspeakCompilation$SymbolTableEntry$ = $.$NewspeakCompilation$SymbolTableEntry$;
    this.$enclosingObjects$NewspeakCompilation = enclosingObjects;
    this.$super$NewspeakCompilation$slot = runtimeSuperclass;
    this.NewspeakCompilation = function () {
     superBasicNew.call(this);
     this.$Dictionary$slot = nil;
     this.$OrderedCollection$slot = nil;
     this.$AST$slot = nil;
     this.$ASTTool$slot = nil;
     this.$BlockAST$slot = nil;
     this.$CascadedSendAST$slot = nil;
     this.$CodeBodyAST$slot = nil;
     this.$MessageAST$slot = nil;
     this.$MessagePatternAST$slot = nil;
     this.$MethodAST$slot = nil;
     this.$NormalSendAST$slot = nil;
     this.$NumberAST$slot = nil;
     this.$ReturnStatAST$slot = nil;
     this.$TupleAST$slot = nil;
     this.$VariableAST$slot = nil;
     this.$namer$slot = nil;
     this.$NewspeakCompilation$ClassEntry$slot = nil;
     this.$NewspeakCompilation$Compiler$slot = nil;
     this.$NewspeakCompilation$LocalEntry$slot = nil;
     this.$NewspeakCompilation$MethodEntry$slot = nil;
     this.$NewspeakCompilation$Namer$slot = nil;
     this.$NewspeakCompilation$Scope$slot = nil;
     this.$NewspeakCompilation$SlotEntry$slot = nil;
     this.$NewspeakCompilation$SymbolTableEntry$slot = nil;
    };
    this.basicNew = this.NewspeakCompilation;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for NewspeakCompilation";
   this.slots = [];
   this.methods = [new MM("usingPlatform:asts:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$asts$ = function ($p, $asts) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p, $asts);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for NewspeakCompilation";
     this.$usingPlatform$asts$ = this._$usingPlatform$asts$ = $.$usingPlatform$asts$;
     this.$enclosingObjects$NewspeakCompilation = enclosingObjects;
     this.$super$NewspeakCompilation = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Ampleforth = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for Ampleforth";
  this.name = "Ampleforth";
  this.header = 2819;
  this.slots = [
   new SM("BrowsingForHTML", false, false),
   new SM("Ampleforth`Embedder", true, true)
  ];
  this.methods = [
   new MM("superInit`Ampleforth", true, 2820),
   new MM("instance`initializer", true, 2821),
   new MM("main:args:", false, 2822),
   new MM("Embedder", true, 0),
   new MM("init`BrowsingForHTML:", true, 0),
   new MM("BrowsingForHTML", true, 0),
   new MM("init`Ampleforth`Embedder:", true, 0),
   new MM("Ampleforth`Embedder", true, 0),
   new MM("Ampleforth`Embedder:", true, 0)
  ];
  this.nestedClasses = ["Ampleforth`Embedder"];
  this.applications = [];
  this.$superInit$Ampleforth = function ($manifest) {
   var self = this;
   self.$super$Ampleforth$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($manifest) {
   var self = this;
   self._$superInit$Ampleforth($manifest);
   self._$init$BrowsingForHTML$($manifest.$BrowsingForHTML());
   return self;
  };
  this.$main$args$ = function ($platform, $args) {
   var self = this;
   var $embedder = nil;
   var $elements = nil;
   var $browsing = nil;
   $browsing = self._$BrowsingForHTML().$usingPlatform$($platform);
   $browsing.$namespace().$at$put$("Ampleforth", self._$class());
   $embedder = self._$Embedder().$usingPlatform$browsing$($platform, $browsing);
   (function (cascadeReceiver) {
    cascadeReceiver.$processEvaluators();
    cascadeReceiver.$processMinibrowsers();
    return cascadeReceiver.$processClassPresenters();
   })($embedder);
   return self;
  };
  this.$Embedder = function () {
   if (nil === this.$Ampleforth$Embedder$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$Ampleforth);
    var mixin = $.$Ampleforth$Embedder;
    this.$Ampleforth$Embedder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Ampleforth$Embedder$slot;
  };
  this.$init$BrowsingForHTML$ = function (v) {
   this.$BrowsingForHTML$slot = v;
   return this;
  };
  this.$BrowsingForHTML = function () {
   return this.$BrowsingForHTML$slot;
  };
  this.$init$Ampleforth$Embedder$ = function (v) {
   this.$Ampleforth$Embedder$slot = v;
   return this;
  };
  this.$Ampleforth$Embedder = function () {
   return this.$Ampleforth$Embedder$slot;
  };
  this.$Ampleforth$Embedder$ = function (v) {
   this.$Ampleforth$Embedder$slot = v;
   return this;
  };
  this.$Ampleforth$Embedder = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for Ampleforth`Embedder";
   this.name = "Ampleforth`Embedder";
   this.header = 2823;
   this.slots = [
    new SM("Subject", false, false),
    new SM("Presenter", false, false),
    new SM("ObjectSubject", false, false),
    new SM("TextEditorFragment", false, false),
    new SM("Color", false, false),
    new SM("Gradient", false, false),
    new SM("List", false, false),
    new SM("ObjectMirror", false, false),
    new SM("ClassDeclarationMirror", false, false),
    new SM("MixinBuilder", false, false),
    new SM("EmbeddedHopscotchWindow", false, false),
    new SM("browsing", false, false),
    new SM("document", false, false),
    new SM("platformMirror", false, false),
    new SM("Ampleforth`Embedder`ErrorPresenter", true, true),
    new SM("Ampleforth`Embedder`ErrorSubject", true, true),
    new SM("Ampleforth`Embedder`SnippetPresenter", true, true),
    new SM("Ampleforth`Embedder`SnippetSubject", true, true)
   ];
   this.methods = [
    new MM("superInit`Ampleforth`Embedder", true, 2824),
    new MM("instance`initializer", true, 2825),
    new MM("evaluateSubject:", false, 2826),
    new MM("processClassPresenters", false, 2827),
    new MM("processEvaluators", false, 2828),
    new MM("processHopscotchSubjects", false, 2829),
    new MM("processMinibrowsers", false, 2830),
    new MM("withoutNbsp:", false, 2831),
    new MM("ErrorPresenter", true, 0),
    new MM("ErrorSubject", true, 0),
    new MM("SnippetPresenter", true, 0),
    new MM("SnippetSubject", true, 0),
    new MM("init`Subject:", true, 0),
    new MM("Subject", true, 0),
    new MM("init`Presenter:", true, 0),
    new MM("Presenter", true, 0),
    new MM("init`ObjectSubject:", true, 0),
    new MM("ObjectSubject", true, 0),
    new MM("init`TextEditorFragment:", true, 0),
    new MM("TextEditorFragment", true, 0),
    new MM("init`Color:", true, 0),
    new MM("Color", true, 0),
    new MM("init`Gradient:", true, 0),
    new MM("Gradient", true, 0),
    new MM("init`List:", true, 0),
    new MM("List", true, 0),
    new MM("init`ObjectMirror:", true, 0),
    new MM("ObjectMirror", true, 0),
    new MM("init`ClassDeclarationMirror:", true, 0),
    new MM("ClassDeclarationMirror", true, 0),
    new MM("init`MixinBuilder:", true, 0),
    new MM("MixinBuilder", true, 0),
    new MM("init`EmbeddedHopscotchWindow:", true, 0),
    new MM("EmbeddedHopscotchWindow", true, 0),
    new MM("init`browsing:", true, 0),
    new MM("browsing", true, 0),
    new MM("init`document:", true, 0),
    new MM("document", true, 0),
    new MM("init`platformMirror:", true, 0),
    new MM("platformMirror", true, 0),
    new MM("init`Ampleforth`Embedder`ErrorPresenter:", true, 0),
    new MM("Ampleforth`Embedder`ErrorPresenter", true, 0),
    new MM("Ampleforth`Embedder`ErrorPresenter:", true, 0),
    new MM("init`Ampleforth`Embedder`ErrorSubject:", true, 0),
    new MM("Ampleforth`Embedder`ErrorSubject", true, 0),
    new MM("Ampleforth`Embedder`ErrorSubject:", true, 0),
    new MM("init`Ampleforth`Embedder`SnippetPresenter:", true, 0),
    new MM("Ampleforth`Embedder`SnippetPresenter", true, 0),
    new MM("Ampleforth`Embedder`SnippetPresenter:", true, 0),
    new MM("init`Ampleforth`Embedder`SnippetSubject:", true, 0),
    new MM("Ampleforth`Embedder`SnippetSubject", true, 0),
    new MM("Ampleforth`Embedder`SnippetSubject:", true, 0)
   ];
   this.nestedClasses = [
    "Ampleforth`Embedder`ErrorPresenter",
    "Ampleforth`Embedder`ErrorSubject",
    "Ampleforth`Embedder`SnippetPresenter",
    "Ampleforth`Embedder`SnippetSubject"
   ];
   this.applications = [];
   this.$superInit$Ampleforth$Embedder = function ($p, $b) {
    var self = this;
    self.$super$Ampleforth$Embedder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p, $b) {
    var self = this;
    self._$superInit$Ampleforth$Embedder($p, $b);
    self._$init$Subject$($p.$hopscotch().$core().$Subject());
    self._$init$Presenter$($p.$hopscotch().$core().$Presenter());
    self._$init$ObjectSubject$($b.$ObjectSubject());
    self._$init$TextEditorFragment$($p.$hopscotch().$fragments().$TextEditorFragment());
    self._$init$Color$($p.$graphics().$Color());
    self._$init$Gradient$($p.$hopscotch().$Gradient());
    self._$init$List$($p.$collections().$OrderedCollection());
    self._$init$ObjectMirror$($p.$mirrors().$ObjectMirror());
    self._$init$ClassDeclarationMirror$($p.$mirrors().$ClassDeclarationMirror());
    self._$init$MixinBuilder$($p.$mirrors().$MixinBuilder());
    self._$init$EmbeddedHopscotchWindow$($p.$hopscotch().$core().$EmbeddedHopscotchWindow());
    self._$init$browsing$($b);
    self._$init$document$($p.$aliens().$global().$at$("document"));
    self._$init$platformMirror$(self._$ObjectMirror().$reflecting$($p));
    return self;
   };
   this.$evaluateSubject$ = function ($se) {
    var self = this;
    var NLR = new Object();
    try {
     var $blk = nil;
     $blk = self._$platformMirror().$evaluate$ifCompilerError$ifError$(self._$withoutNbsp$($se), function ($e) {
      {
       NLR.value = self._$ErrorSubject().$onModel$("compile-time error: ".$$comma($e.$printString()));
       throw NLR;
      };
     }, function ($e) {
      {
       NLR.value = self._$ErrorSubject().$onModel$("runtime error: ".$$comma($e.$printString()));
       throw NLR;
      };
     });
     return $blk.$value$(self._$browsing());
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$processClassPresenters = function () {
    var self = this;
    var NLR = new Object();
    try {
     var $elements = nil;
     $elements = self._$document().$getElementsByClassName$("classPresenter");
     {
      var $$limit = nil;
      var $i = nil;
      nil;
      $i = 1;
      $$limit = $elements.$at$("length");
      for (; $$limit.$$greater$equal($i); ) {
       var $element = nil;
       var $errorBlock = nil;
       var $className = nil;
       var $klass = nil;
       var $cm = nil;
       $element = $elements.$at$($i - 1);
       $errorBlock = function ($errorMessage) {
        {
         NLR.value = self._$EmbeddedHopscotchWindow().$into$openSubject$($element, self._$ErrorSubject().$onModel$($errorMessage));
         throw NLR;
        };
       };
       $className = $element.$getAttribute$("className");
       $klass = self._$browsing().$namespace().$at$($className);
       if (!$klass.$isBehavior()) {
        $errorBlock.$value$($className.$$comma(" is not a class"));
       } else {
        nil;
       };
       $cm = self._$ClassDeclarationMirror().$reflecting$($klass.$mixin());
       self._$EmbeddedHopscotchWindow().$into$openSubject$($element, self._$browsing().$ClassSubject().$onModel$($cm));
       $i = (1).$$plus($i);
      };
     };
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$processEvaluators = function () {
    var self = this;
    var $elements = nil;
    $elements = self._$document().$getElementsByClassName$("evaluator");
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $elements.$at$("length");
     for (; $$limit.$$greater$equal($i); ) {
      var $element = nil;
      var $expression = nil;
      $element = $elements.$at$($i - 1);
      $expression = $element.$getAttribute$("expression");
      self._$EmbeddedHopscotchWindow().$into$openSubject$($element, self._$SnippetSubject().$onModel$($expression));
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$processHopscotchSubjects = function () {
    var self = this;
    var $elements = nil;
    $elements = self._$document().$getElementsByClassName$("hopscotch-subject");
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $elements.$at$("length");
     for (; $$limit.$$greater$equal($i); ) {
      var $element = nil;
      var $expression = nil;
      $element = $elements.$at$($i - 1);
      $expression = $element.$getAttribute$("expression");
      self._$EmbeddedHopscotchWindow().$into$openSubject$($element, self._$evaluateSubject$($expression));
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$processMinibrowsers = function () {
    var self = this;
    var $elements = nil;
    $elements = self._$document().$getElementsByClassName$("minibrowser");
    {
     var $$limit = nil;
     var $i = nil;
     nil;
     $i = 1;
     $$limit = $elements.$at$("length");
     for (; $$limit.$$greater$equal($i); ) {
      var $element = nil;
      $element = $elements.$at$($i - 1);
      self._$EmbeddedHopscotchWindow().$into$openSubject$($element, self._$browsing().$ObjectSubject().$onModel$(self._$platformMirror()));
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$withoutNbsp$ = function ($string) {
    var self = this;
    var $nonbreakingSpace = nil;
    var $space = nil;
    $nonbreakingSpace = (function () {
     return self._$String().$fromCharCode$(160);
    }).$on$do$(self._$Error(), function () {
     return self._$String().$value$(160);
    });
    $space = (function () {
     return self._$String().$fromCharCode$(32);
    }).$on$do$(self._$Error(), function () {
     return self._$String().$value$(32);
    });
    return $string.$replaceAll$with$($nonbreakingSpace, $space);
   };
   this.$ErrorPresenter = function () {
    if (nil === this.$Ampleforth$Embedder$ErrorPresenter$slot) {
     var self = this;
     var superclass = self._$Presenter();
     var enclosingObjects = [this].concat(this.$enclosingObjects$Ampleforth$Embedder);
     var mixin = $.$Ampleforth$Embedder$ErrorPresenter;
     this.$Ampleforth$Embedder$ErrorPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Ampleforth$Embedder$ErrorPresenter$slot;
   };
   this.$ErrorSubject = function () {
    if (nil === this.$Ampleforth$Embedder$ErrorSubject$slot) {
     var self = this;
     var superclass = self._$Subject();
     var enclosingObjects = [this].concat(this.$enclosingObjects$Ampleforth$Embedder);
     var mixin = $.$Ampleforth$Embedder$ErrorSubject;
     this.$Ampleforth$Embedder$ErrorSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Ampleforth$Embedder$ErrorSubject$slot;
   };
   this.$SnippetPresenter = function () {
    if (nil === this.$Ampleforth$Embedder$SnippetPresenter$slot) {
     var self = this;
     var superclass = self._$Presenter();
     var enclosingObjects = [this].concat(this.$enclosingObjects$Ampleforth$Embedder);
     var mixin = $.$Ampleforth$Embedder$SnippetPresenter;
     this.$Ampleforth$Embedder$SnippetPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Ampleforth$Embedder$SnippetPresenter$slot;
   };
   this.$SnippetSubject = function () {
    if (nil === this.$Ampleforth$Embedder$SnippetSubject$slot) {
     var self = this;
     var superclass = self._$Subject();
     var enclosingObjects = [this].concat(this.$enclosingObjects$Ampleforth$Embedder);
     var mixin = $.$Ampleforth$Embedder$SnippetSubject;
     this.$Ampleforth$Embedder$SnippetSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Ampleforth$Embedder$SnippetSubject$slot;
   };
   this.$init$Subject$ = function (v) {
    this.$Subject$slot = v;
    return this;
   };
   this.$Subject = function () {
    return this.$Subject$slot;
   };
   this.$init$Presenter$ = function (v) {
    this.$Presenter$slot = v;
    return this;
   };
   this.$Presenter = function () {
    return this.$Presenter$slot;
   };
   this.$init$ObjectSubject$ = function (v) {
    this.$ObjectSubject$slot = v;
    return this;
   };
   this.$ObjectSubject = function () {
    return this.$ObjectSubject$slot;
   };
   this.$init$TextEditorFragment$ = function (v) {
    this.$TextEditorFragment$slot = v;
    return this;
   };
   this.$TextEditorFragment = function () {
    return this.$TextEditorFragment$slot;
   };
   this.$init$Color$ = function (v) {
    this.$Color$slot = v;
    return this;
   };
   this.$Color = function () {
    return this.$Color$slot;
   };
   this.$init$Gradient$ = function (v) {
    this.$Gradient$slot = v;
    return this;
   };
   this.$Gradient = function () {
    return this.$Gradient$slot;
   };
   this.$init$List$ = function (v) {
    this.$List$slot = v;
    return this;
   };
   this.$List = function () {
    return this.$List$slot;
   };
   this.$init$ObjectMirror$ = function (v) {
    this.$ObjectMirror$slot = v;
    return this;
   };
   this.$ObjectMirror = function () {
    return this.$ObjectMirror$slot;
   };
   this.$init$ClassDeclarationMirror$ = function (v) {
    this.$ClassDeclarationMirror$slot = v;
    return this;
   };
   this.$ClassDeclarationMirror = function () {
    return this.$ClassDeclarationMirror$slot;
   };
   this.$init$MixinBuilder$ = function (v) {
    this.$MixinBuilder$slot = v;
    return this;
   };
   this.$MixinBuilder = function () {
    return this.$MixinBuilder$slot;
   };
   this.$init$EmbeddedHopscotchWindow$ = function (v) {
    this.$EmbeddedHopscotchWindow$slot = v;
    return this;
   };
   this.$EmbeddedHopscotchWindow = function () {
    return this.$EmbeddedHopscotchWindow$slot;
   };
   this.$init$browsing$ = function (v) {
    this.$browsing$slot = v;
    return this;
   };
   this.$browsing = function () {
    return this.$browsing$slot;
   };
   this.$init$document$ = function (v) {
    this.$document$slot = v;
    return this;
   };
   this.$document = function () {
    return this.$document$slot;
   };
   this.$init$platformMirror$ = function (v) {
    this.$platformMirror$slot = v;
    return this;
   };
   this.$platformMirror = function () {
    return this.$platformMirror$slot;
   };
   this.$init$Ampleforth$Embedder$ErrorPresenter$ = function (v) {
    this.$Ampleforth$Embedder$ErrorPresenter$slot = v;
    return this;
   };
   this.$Ampleforth$Embedder$ErrorPresenter = function () {
    return this.$Ampleforth$Embedder$ErrorPresenter$slot;
   };
   this.$Ampleforth$Embedder$ErrorPresenter$ = function (v) {
    this.$Ampleforth$Embedder$ErrorPresenter$slot = v;
    return this;
   };
   this.$init$Ampleforth$Embedder$ErrorSubject$ = function (v) {
    this.$Ampleforth$Embedder$ErrorSubject$slot = v;
    return this;
   };
   this.$Ampleforth$Embedder$ErrorSubject = function () {
    return this.$Ampleforth$Embedder$ErrorSubject$slot;
   };
   this.$Ampleforth$Embedder$ErrorSubject$ = function (v) {
    this.$Ampleforth$Embedder$ErrorSubject$slot = v;
    return this;
   };
   this.$init$Ampleforth$Embedder$SnippetPresenter$ = function (v) {
    this.$Ampleforth$Embedder$SnippetPresenter$slot = v;
    return this;
   };
   this.$Ampleforth$Embedder$SnippetPresenter = function () {
    return this.$Ampleforth$Embedder$SnippetPresenter$slot;
   };
   this.$Ampleforth$Embedder$SnippetPresenter$ = function (v) {
    this.$Ampleforth$Embedder$SnippetPresenter$slot = v;
    return this;
   };
   this.$init$Ampleforth$Embedder$SnippetSubject$ = function (v) {
    this.$Ampleforth$Embedder$SnippetSubject$slot = v;
    return this;
   };
   this.$Ampleforth$Embedder$SnippetSubject = function () {
    return this.$Ampleforth$Embedder$SnippetSubject$slot;
   };
   this.$Ampleforth$Embedder$SnippetSubject$ = function (v) {
    this.$Ampleforth$Embedder$SnippetSubject$slot = v;
    return this;
   };
   this.$Ampleforth$Embedder$ErrorPresenter = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Ampleforth`Embedder`ErrorPresenter";
    this.name = "Ampleforth`Embedder`ErrorPresenter";
    this.header = 2832;
    this.slots = [];
    this.methods = [
     new MM("superInit`Ampleforth`Embedder`ErrorPresenter", true, 2833),
     new MM("instance`initializer", true, 2834),
     new MM("definition", false, 2835)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Ampleforth$Embedder$ErrorPresenter = function ($s) {
     var self = this;
     self.$super$Ampleforth$Embedder$ErrorPresenter$slot._$instance$initializer.call(self, $s);
     return self;
    };
    this.$instance$initializer = function ($s) {
     var self = this;
     self._$superInit$Ampleforth$Embedder$ErrorPresenter($s);
     return self;
    };
    this.$definition = function () {
     var self = this;
     return self._$label$(self._$subject().$errorMessage());
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Ampleforth`Embedder`ErrorPresenter";
      this._$superInit$Ampleforth$Embedder$ErrorPresenter = $.$superInit$Ampleforth$Embedder$ErrorPresenter;
      this.$superInit$Ampleforth$Embedder$ErrorPresenter = dnuCatcher("$superInit$Ampleforth$Embedder$ErrorPresenter");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$definition = this._$definition = $.$definition;
      this.$enclosingObjects$Ampleforth$Embedder$ErrorPresenter = enclosingObjects;
      this.$super$Ampleforth$Embedder$ErrorPresenter$slot = runtimeSuperclass;
      this["Ampleforth`Embedder`ErrorPresenter"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["Ampleforth`Embedder`ErrorPresenter"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Ampleforth`Embedder`ErrorPresenter";
     this.slots = [];
     this.methods = [new MM("onSubject:", true, 0)];
     this.nestedClasses = [];
     this.$onSubject$ = function ($s) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Ampleforth`Embedder`ErrorPresenter";
       this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
       this.$enclosingObjects$Ampleforth$Embedder$ErrorPresenter = enclosingObjects;
       this.$super$Ampleforth$Embedder$ErrorPresenter = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Ampleforth$Embedder$ErrorSubject = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Ampleforth`Embedder`ErrorSubject";
    this.name = "Ampleforth`Embedder`ErrorSubject";
    this.header = 2836;
    this.slots = [new SM("errorMessage", false, false)];
    this.methods = [
     new MM("superInit`Ampleforth`Embedder`ErrorSubject", true, 2837),
     new MM("instance`initializer", true, 2838),
     new MM("createPresenter", false, 2839),
     new MM("init`errorMessage:", true, 0),
     new MM("errorMessage", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Ampleforth$Embedder$ErrorSubject = function ($s) {
     var self = this;
     self.$super$Ampleforth$Embedder$ErrorSubject$slot._$instance$initializer.call(self, $s);
     return self;
    };
    this.$instance$initializer = function ($s) {
     var self = this;
     self._$superInit$Ampleforth$Embedder$ErrorSubject($s);
     self._$init$errorMessage$($s);
     return self;
    };
    this.$createPresenter = function () {
     var self = this;
     return self.$enclosingObjects$Ampleforth$Embedder$ErrorSubject[0]._$ErrorPresenter().$onSubject$(self);
    };
    this.$init$errorMessage$ = function (v) {
     this.$errorMessage$slot = v;
     return this;
    };
    this.$errorMessage = function () {
     return this.$errorMessage$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Ampleforth`Embedder`ErrorSubject";
      this._$superInit$Ampleforth$Embedder$ErrorSubject = $.$superInit$Ampleforth$Embedder$ErrorSubject;
      this.$superInit$Ampleforth$Embedder$ErrorSubject = dnuCatcher("$superInit$Ampleforth$Embedder$ErrorSubject");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$createPresenter = this._$createPresenter = $.$createPresenter;
      this.$init$errorMessage$ = this._$init$errorMessage$ = $.$init$errorMessage$;
      this.$errorMessage = this._$errorMessage = $.$errorMessage;
      this.$enclosingObjects$Ampleforth$Embedder$ErrorSubject = enclosingObjects;
      this.$super$Ampleforth$Embedder$ErrorSubject$slot = runtimeSuperclass;
      this["Ampleforth`Embedder`ErrorSubject"] = function () {
       superBasicNew.call(this);
       this.$errorMessage$slot = nil;
      };
      this.basicNew = this["Ampleforth`Embedder`ErrorSubject"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Ampleforth`Embedder`ErrorSubject";
     this.slots = [];
     this.methods = [new MM("onModel:", true, 0)];
     this.nestedClasses = [];
     this.$onModel$ = function ($s) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Ampleforth`Embedder`ErrorSubject";
       this.$onModel$ = this._$onModel$ = $.$onModel$;
       this.$enclosingObjects$Ampleforth$Embedder$ErrorSubject = enclosingObjects;
       this.$super$Ampleforth$Embedder$ErrorSubject = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Ampleforth$Embedder$SnippetPresenter = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Ampleforth`Embedder`SnippetPresenter";
    this.name = "Ampleforth`Embedder`SnippetPresenter";
    this.header = 2840;
    this.slots = [new SM("resultHolder", false, false)];
    this.methods = [
     new MM("superInit`Ampleforth`Embedder`SnippetPresenter", true, 2841),
     new MM("instance`initializer", true, 2842),
     new MM("definition", false, 2843),
     new MM("evaluate:", false, 2844),
     new MM("init`resultHolder:", true, 0),
     new MM("resultHolder", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Ampleforth$Embedder$SnippetPresenter = function ($s) {
     var self = this;
     self.$super$Ampleforth$Embedder$SnippetPresenter$slot._$instance$initializer.call(self, $s);
     return self;
    };
    this.$instance$initializer = function ($s) {
     var self = this;
     self._$superInit$Ampleforth$Embedder$SnippetPresenter($s);
     self._$init$resultHolder$(self._$holder$(function () {
      return self._$nothing();
     }));
     return self;
    };
    this.$definition = function () {
     var self = this;
     var $result = nil;
     return self._$column$([
      (function (cascadeReceiver) {
       cascadeReceiver.$text$(self._$subject().$snippet());
       return cascadeReceiver.$changeResponse$(function ($editor) {
        return $result.$content$(self._$evaluate$($editor.$textBeingAccepted().$asString()));
       });
      })(self.$enclosingObjects$Ampleforth$Embedder$SnippetPresenter[0]._$TextEditorFragment().$new()),
      $result = self._$holder$(function () {
       return self._$evaluate$(self._$subject().$snippet());
      })
     ]);
    };
    this.$evaluate$ = function ($expression) {
     var self = this;
     var NLR = new Object();
     try {
      var $s = nil;
      $s = self.$enclosingObjects$Ampleforth$Embedder$SnippetPresenter[0]._$platformMirror().$evaluate$ifCompilerError$ifError$(self.$enclosingObjects$Ampleforth$Embedder$SnippetPresenter[0]._$withoutNbsp$($expression), function ($e) {
       {
        NLR.value = self._$label$("compile-time error: ".$$comma($e.$printString()));
        throw NLR;
       };
      }, function ($e) {
       {
        NLR.value = self._$label$("runtime error: ".$$comma($e.$printString()));
        throw NLR;
       };
      });
      return self._$resultHolder().$content$(self._$link$action$($s.$reflectee().$printString(), function () {
       return self._$enterSubject$fromSnippet$(self.$enclosingObjects$Ampleforth$Embedder$SnippetPresenter[0]._$ObjectSubject().$onModel$($s), self._$subject());
      }));
     } catch (NLR_exception) {
      if (NLR === NLR_exception) {
       return NLR_exception.value;
      } else {
       throw NLR_exception;
      };
     };
    };
    this.$init$resultHolder$ = function (v) {
     this.$resultHolder$slot = v;
     return this;
    };
    this.$resultHolder = function () {
     return this.$resultHolder$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Ampleforth`Embedder`SnippetPresenter";
      this._$superInit$Ampleforth$Embedder$SnippetPresenter = $.$superInit$Ampleforth$Embedder$SnippetPresenter;
      this.$superInit$Ampleforth$Embedder$SnippetPresenter = dnuCatcher("$superInit$Ampleforth$Embedder$SnippetPresenter");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$definition = $.$definition;
      this.$definition = dnuCatcher("$definition");
      this._$evaluate$ = $.$evaluate$;
      this.$evaluate$ = dnuCatcher("$evaluate$");
      this._$init$resultHolder$ = $.$init$resultHolder$;
      this.$init$resultHolder$ = dnuCatcher("$init$resultHolder$");
      this._$resultHolder = $.$resultHolder;
      this.$resultHolder = dnuCatcher("$resultHolder");
      this.$enclosingObjects$Ampleforth$Embedder$SnippetPresenter = enclosingObjects;
      this.$super$Ampleforth$Embedder$SnippetPresenter$slot = runtimeSuperclass;
      this["Ampleforth`Embedder`SnippetPresenter"] = function () {
       superBasicNew.call(this);
       this.$resultHolder$slot = nil;
      };
      this.basicNew = this["Ampleforth`Embedder`SnippetPresenter"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Ampleforth`Embedder`SnippetPresenter";
     this.slots = [];
     this.methods = [new MM("onSubject:", true, 0)];
     this.nestedClasses = [];
     this.$onSubject$ = function ($s) {
      return (new this.nonMeta.basicNew()).$instance$initializer($s);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Ampleforth`Embedder`SnippetPresenter";
       this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
       this.$enclosingObjects$Ampleforth$Embedder$SnippetPresenter = enclosingObjects;
       this.$super$Ampleforth$Embedder$SnippetPresenter = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Ampleforth$Embedder$SnippetSubject = new function () {
    var $ = this;
    var $2 = this;
    this.debug = "Runtime mixin for Ampleforth`Embedder`SnippetSubject";
    this.name = "Ampleforth`Embedder`SnippetSubject";
    this.header = 2845;
    this.slots = [];
    this.methods = [
     new MM("superInit`Ampleforth`Embedder`SnippetSubject", true, 2846),
     new MM("instance`initializer", true, 2847),
     new MM("createPresenter", false, 2848),
     new MM("snippet", false, 2849)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Ampleforth$Embedder$SnippetSubject = function ($m) {
     var self = this;
     self.$super$Ampleforth$Embedder$SnippetSubject$slot._$instance$initializer.call(self, $m);
     return self;
    };
    this.$instance$initializer = function ($m) {
     var self = this;
     self._$superInit$Ampleforth$Embedder$SnippetSubject($m);
     return self;
    };
    this.$createPresenter = function () {
     var self = this;
     return self.$enclosingObjects$Ampleforth$Embedder$SnippetSubject[0]._$SnippetPresenter().$onSubject$(self);
    };
    this.$snippet = function () {
     var self = this;
     return self._$model();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Ampleforth`Embedder`SnippetSubject";
      this._$superInit$Ampleforth$Embedder$SnippetSubject = $.$superInit$Ampleforth$Embedder$SnippetSubject;
      this.$superInit$Ampleforth$Embedder$SnippetSubject = dnuCatcher("$superInit$Ampleforth$Embedder$SnippetSubject");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$createPresenter = $.$createPresenter;
      this.$createPresenter = dnuCatcher("$createPresenter");
      this.$snippet = this._$snippet = $.$snippet;
      this.$enclosingObjects$Ampleforth$Embedder$SnippetSubject = enclosingObjects;
      this.$super$Ampleforth$Embedder$SnippetSubject$slot = runtimeSuperclass;
      this["Ampleforth`Embedder`SnippetSubject"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["Ampleforth`Embedder`SnippetSubject"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     var $ = this;
     this.debug = "Runtime meta mixin for Ampleforth`Embedder`SnippetSubject";
     this.slots = [];
     this.methods = [new MM("onModel:", true, 0)];
     this.nestedClasses = [];
     this.$onModel$ = function ($m) {
      return (new this.nonMeta.basicNew()).$instance$initializer($m);
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Ampleforth`Embedder`SnippetSubject";
       this.$onModel$ = this._$onModel$ = $.$onModel$;
       this.$enclosingObjects$Ampleforth$Embedder$SnippetSubject = enclosingObjects;
       this.$super$Ampleforth$Embedder$SnippetSubject = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Ampleforth$Embedder$ErrorPresenter.enclosingMixin = this;
   this.$Ampleforth$Embedder$ErrorSubject.enclosingMixin = this;
   this.$Ampleforth$Embedder$SnippetPresenter.enclosingMixin = this;
   this.$Ampleforth$Embedder$SnippetSubject.enclosingMixin = this;
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Ampleforth`Embedder";
     this._$superInit$Ampleforth$Embedder = $.$superInit$Ampleforth$Embedder;
     this.$superInit$Ampleforth$Embedder = dnuCatcher("$superInit$Ampleforth$Embedder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$evaluateSubject$ = $.$evaluateSubject$;
     this.$evaluateSubject$ = dnuCatcher("$evaluateSubject$");
     this.$processClassPresenters = this._$processClassPresenters = $.$processClassPresenters;
     this.$processEvaluators = this._$processEvaluators = $.$processEvaluators;
     this.$processHopscotchSubjects = this._$processHopscotchSubjects = $.$processHopscotchSubjects;
     this.$processMinibrowsers = this._$processMinibrowsers = $.$processMinibrowsers;
     this._$withoutNbsp$ = $.$withoutNbsp$;
     this.$withoutNbsp$ = dnuCatcher("$withoutNbsp$");
     this._$ErrorPresenter = $.$ErrorPresenter;
     this.$ErrorPresenter = dnuCatcher("$ErrorPresenter");
     this._$ErrorSubject = $.$ErrorSubject;
     this.$ErrorSubject = dnuCatcher("$ErrorSubject");
     this._$SnippetPresenter = $.$SnippetPresenter;
     this.$SnippetPresenter = dnuCatcher("$SnippetPresenter");
     this.$SnippetSubject = this._$SnippetSubject = $.$SnippetSubject;
     this._$init$Subject$ = $.$init$Subject$;
     this.$init$Subject$ = dnuCatcher("$init$Subject$");
     this._$Subject = $.$Subject;
     this.$Subject = dnuCatcher("$Subject");
     this._$init$Presenter$ = $.$init$Presenter$;
     this.$init$Presenter$ = dnuCatcher("$init$Presenter$");
     this._$Presenter = $.$Presenter;
     this.$Presenter = dnuCatcher("$Presenter");
     this._$init$ObjectSubject$ = $.$init$ObjectSubject$;
     this.$init$ObjectSubject$ = dnuCatcher("$init$ObjectSubject$");
     this._$ObjectSubject = $.$ObjectSubject;
     this.$ObjectSubject = dnuCatcher("$ObjectSubject");
     this._$init$TextEditorFragment$ = $.$init$TextEditorFragment$;
     this.$init$TextEditorFragment$ = dnuCatcher("$init$TextEditorFragment$");
     this._$TextEditorFragment = $.$TextEditorFragment;
     this.$TextEditorFragment = dnuCatcher("$TextEditorFragment");
     this._$init$Color$ = $.$init$Color$;
     this.$init$Color$ = dnuCatcher("$init$Color$");
     this._$Color = $.$Color;
     this.$Color = dnuCatcher("$Color");
     this._$init$Gradient$ = $.$init$Gradient$;
     this.$init$Gradient$ = dnuCatcher("$init$Gradient$");
     this._$Gradient = $.$Gradient;
     this.$Gradient = dnuCatcher("$Gradient");
     this._$init$List$ = $.$init$List$;
     this.$init$List$ = dnuCatcher("$init$List$");
     this._$List = $.$List;
     this.$List = dnuCatcher("$List");
     this._$init$ObjectMirror$ = $.$init$ObjectMirror$;
     this.$init$ObjectMirror$ = dnuCatcher("$init$ObjectMirror$");
     this._$ObjectMirror = $.$ObjectMirror;
     this.$ObjectMirror = dnuCatcher("$ObjectMirror");
     this._$init$ClassDeclarationMirror$ = $.$init$ClassDeclarationMirror$;
     this.$init$ClassDeclarationMirror$ = dnuCatcher("$init$ClassDeclarationMirror$");
     this._$ClassDeclarationMirror = $.$ClassDeclarationMirror;
     this.$ClassDeclarationMirror = dnuCatcher("$ClassDeclarationMirror");
     this._$init$MixinBuilder$ = $.$init$MixinBuilder$;
     this.$init$MixinBuilder$ = dnuCatcher("$init$MixinBuilder$");
     this._$MixinBuilder = $.$MixinBuilder;
     this.$MixinBuilder = dnuCatcher("$MixinBuilder");
     this._$init$EmbeddedHopscotchWindow$ = $.$init$EmbeddedHopscotchWindow$;
     this.$init$EmbeddedHopscotchWindow$ = dnuCatcher("$init$EmbeddedHopscotchWindow$");
     this._$EmbeddedHopscotchWindow = $.$EmbeddedHopscotchWindow;
     this.$EmbeddedHopscotchWindow = dnuCatcher("$EmbeddedHopscotchWindow");
     this._$init$browsing$ = $.$init$browsing$;
     this.$init$browsing$ = dnuCatcher("$init$browsing$");
     this._$browsing = $.$browsing;
     this.$browsing = dnuCatcher("$browsing");
     this._$init$document$ = $.$init$document$;
     this.$init$document$ = dnuCatcher("$init$document$");
     this._$document = $.$document;
     this.$document = dnuCatcher("$document");
     this._$init$platformMirror$ = $.$init$platformMirror$;
     this.$init$platformMirror$ = dnuCatcher("$init$platformMirror$");
     this._$platformMirror = $.$platformMirror;
     this.$platformMirror = dnuCatcher("$platformMirror");
     this.$init$Ampleforth$Embedder$ErrorPresenter$ = this._$init$Ampleforth$Embedder$ErrorPresenter$ = $.$init$Ampleforth$Embedder$ErrorPresenter$;
     this.$Ampleforth$Embedder$ErrorPresenter = this._$Ampleforth$Embedder$ErrorPresenter = $.$Ampleforth$Embedder$ErrorPresenter;
     this.$Ampleforth$Embedder$ErrorPresenter$ = this._$Ampleforth$Embedder$ErrorPresenter$ = $.$Ampleforth$Embedder$ErrorPresenter$;
     this.$init$Ampleforth$Embedder$ErrorSubject$ = this._$init$Ampleforth$Embedder$ErrorSubject$ = $.$init$Ampleforth$Embedder$ErrorSubject$;
     this.$Ampleforth$Embedder$ErrorSubject = this._$Ampleforth$Embedder$ErrorSubject = $.$Ampleforth$Embedder$ErrorSubject;
     this.$Ampleforth$Embedder$ErrorSubject$ = this._$Ampleforth$Embedder$ErrorSubject$ = $.$Ampleforth$Embedder$ErrorSubject$;
     this.$init$Ampleforth$Embedder$SnippetPresenter$ = this._$init$Ampleforth$Embedder$SnippetPresenter$ = $.$init$Ampleforth$Embedder$SnippetPresenter$;
     this.$Ampleforth$Embedder$SnippetPresenter = this._$Ampleforth$Embedder$SnippetPresenter = $.$Ampleforth$Embedder$SnippetPresenter;
     this.$Ampleforth$Embedder$SnippetPresenter$ = this._$Ampleforth$Embedder$SnippetPresenter$ = $.$Ampleforth$Embedder$SnippetPresenter$;
     this.$init$Ampleforth$Embedder$SnippetSubject$ = this._$init$Ampleforth$Embedder$SnippetSubject$ = $.$init$Ampleforth$Embedder$SnippetSubject$;
     this.$Ampleforth$Embedder$SnippetSubject = this._$Ampleforth$Embedder$SnippetSubject = $.$Ampleforth$Embedder$SnippetSubject;
     this.$Ampleforth$Embedder$SnippetSubject$ = this._$Ampleforth$Embedder$SnippetSubject$ = $.$Ampleforth$Embedder$SnippetSubject$;
     this.$enclosingObjects$Ampleforth$Embedder = enclosingObjects;
     this.$super$Ampleforth$Embedder$slot = runtimeSuperclass;
     this["Ampleforth`Embedder"] = function () {
      superBasicNew.call(this);
      this.$Subject$slot = nil;
      this.$Presenter$slot = nil;
      this.$ObjectSubject$slot = nil;
      this.$TextEditorFragment$slot = nil;
      this.$Color$slot = nil;
      this.$Gradient$slot = nil;
      this.$List$slot = nil;
      this.$ObjectMirror$slot = nil;
      this.$ClassDeclarationMirror$slot = nil;
      this.$MixinBuilder$slot = nil;
      this.$EmbeddedHopscotchWindow$slot = nil;
      this.$browsing$slot = nil;
      this.$document$slot = nil;
      this.$platformMirror$slot = nil;
      this.$Ampleforth$Embedder$ErrorPresenter$slot = nil;
      this.$Ampleforth$Embedder$ErrorSubject$slot = nil;
      this.$Ampleforth$Embedder$SnippetPresenter$slot = nil;
      this.$Ampleforth$Embedder$SnippetSubject$slot = nil;
     };
     this.basicNew = this["Ampleforth`Embedder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for Ampleforth`Embedder";
    this.slots = [];
    this.methods = [new MM("usingPlatform:browsing:", true, 0)];
    this.nestedClasses = [];
    this.$usingPlatform$browsing$ = function ($p, $b) {
     return (new this.nonMeta.basicNew()).$instance$initializer($p, $b);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Ampleforth`Embedder";
      this.$usingPlatform$browsing$ = this._$usingPlatform$browsing$ = $.$usingPlatform$browsing$;
      this.$enclosingObjects$Ampleforth$Embedder = enclosingObjects;
      this.$super$Ampleforth$Embedder = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Ampleforth$Embedder.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Ampleforth";
    this._$superInit$Ampleforth = $.$superInit$Ampleforth;
    this.$superInit$Ampleforth = dnuCatcher("$superInit$Ampleforth");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$main$args$ = this._$main$args$ = $.$main$args$;
    this._$Embedder = $.$Embedder;
    this.$Embedder = dnuCatcher("$Embedder");
    this._$init$BrowsingForHTML$ = $.$init$BrowsingForHTML$;
    this.$init$BrowsingForHTML$ = dnuCatcher("$init$BrowsingForHTML$");
    this._$BrowsingForHTML = $.$BrowsingForHTML;
    this.$BrowsingForHTML = dnuCatcher("$BrowsingForHTML");
    this.$init$Ampleforth$Embedder$ = this._$init$Ampleforth$Embedder$ = $.$init$Ampleforth$Embedder$;
    this.$Ampleforth$Embedder = this._$Ampleforth$Embedder = $.$Ampleforth$Embedder;
    this.$Ampleforth$Embedder$ = this._$Ampleforth$Embedder$ = $.$Ampleforth$Embedder$;
    this.$enclosingObjects$Ampleforth = enclosingObjects;
    this.$super$Ampleforth$slot = runtimeSuperclass;
    this.Ampleforth = function () {
     superBasicNew.call(this);
     this.$BrowsingForHTML$slot = nil;
     this.$Ampleforth$Embedder$slot = nil;
    };
    this.basicNew = this.Ampleforth;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for Ampleforth";
   this.slots = [];
   this.methods = [new MM("packageUsing:", true, 0)];
   this.nestedClasses = [];
   this.$packageUsing$ = function ($manifest) {
    return (new this.nonMeta.basicNew()).$instance$initializer($manifest);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Ampleforth";
     this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
     this.$enclosingObjects$Ampleforth = enclosingObjects;
     this.$super$Ampleforth = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$BrowsingForHTML = new function () {
  var $ = this;
  var $0 = this;
  this.debug = "Runtime mixin for BrowsingForHTML";
  this.name = "BrowsingForHTML";
  this.header = 2850;
  this.slots = [
   new SM("Subject", false, false),
   new SM("Presenter", false, false),
   new SM("TextEditorFragment", false, false),
   new SM("Color", false, false),
   new SM("Gradient", false, false),
   new SM("List", false, false),
   new SM("Map", false, false),
   new SM("ObjectMirror", false, false),
   new SM("MixinBuilder", false, false),
   new SM("namespace", false, false),
   new SM("detailAreaRatio", false, false),
   new SM("captionColor", false, false),
   new SM("BrowsingForHTML`ClassPresenter", true, true),
   new SM("BrowsingForHTML`ClassSubject", true, true),
   new SM("BrowsingForHTML`Namespace", true, true),
   new SM("BrowsingForHTML`ObjectPresenter", true, true),
   new SM("BrowsingForHTML`ObjectSubject", true, true)
  ];
  this.methods = [
   new MM("superInit`BrowsingForHTML", true, 2851),
   new MM("instance`initializer", true, 2852),
   new MM("ClassPresenter", true, 0),
   new MM("ClassSubject", true, 0),
   new MM("Namespace", true, 0),
   new MM("ObjectPresenter", true, 0),
   new MM("ObjectSubject", true, 0),
   new MM("init`Subject:", true, 0),
   new MM("Subject", true, 0),
   new MM("init`Presenter:", true, 0),
   new MM("Presenter", true, 0),
   new MM("init`TextEditorFragment:", true, 0),
   new MM("TextEditorFragment", true, 0),
   new MM("init`Color:", true, 0),
   new MM("Color", true, 0),
   new MM("init`Gradient:", true, 0),
   new MM("Gradient", true, 0),
   new MM("init`List:", true, 0),
   new MM("List", true, 0),
   new MM("init`Map:", true, 0),
   new MM("Map", true, 0),
   new MM("init`ObjectMirror:", true, 0),
   new MM("ObjectMirror", true, 0),
   new MM("init`MixinBuilder:", true, 0),
   new MM("MixinBuilder", true, 0),
   new MM("init`namespace:", true, 0),
   new MM("namespace", true, 0),
   new MM("init`detailAreaRatio:", true, 0),
   new MM("detailAreaRatio", true, 0),
   new MM("init`captionColor:", true, 0),
   new MM("captionColor", true, 0),
   new MM("init`BrowsingForHTML`ClassPresenter:", true, 0),
   new MM("BrowsingForHTML`ClassPresenter", true, 0),
   new MM("BrowsingForHTML`ClassPresenter:", true, 0),
   new MM("init`BrowsingForHTML`ClassSubject:", true, 0),
   new MM("BrowsingForHTML`ClassSubject", true, 0),
   new MM("BrowsingForHTML`ClassSubject:", true, 0),
   new MM("init`BrowsingForHTML`Namespace:", true, 0),
   new MM("BrowsingForHTML`Namespace", true, 0),
   new MM("BrowsingForHTML`Namespace:", true, 0),
   new MM("init`BrowsingForHTML`ObjectPresenter:", true, 0),
   new MM("BrowsingForHTML`ObjectPresenter", true, 0),
   new MM("BrowsingForHTML`ObjectPresenter:", true, 0),
   new MM("init`BrowsingForHTML`ObjectSubject:", true, 0),
   new MM("BrowsingForHTML`ObjectSubject", true, 0),
   new MM("BrowsingForHTML`ObjectSubject:", true, 0)
  ];
  this.nestedClasses = [
   "BrowsingForHTML`ClassPresenter",
   "BrowsingForHTML`ClassSubject",
   "BrowsingForHTML`Namespace",
   "BrowsingForHTML`ObjectPresenter",
   "BrowsingForHTML`ObjectSubject"
  ];
  this.applications = [];
  this.$superInit$BrowsingForHTML = function ($p) {
   var self = this;
   self.$super$BrowsingForHTML$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   var self = this;
   self._$superInit$BrowsingForHTML($p);
   self._$init$Subject$($p.$hopscotch().$core().$Subject());
   self._$init$Presenter$($p.$hopscotch().$core().$Presenter());
   self._$init$TextEditorFragment$($p.$hopscotch().$fragments().$TextEditorFragment());
   self._$init$Color$($p.$graphics().$Color());
   self._$init$Gradient$($p.$hopscotch().$Gradient());
   self._$init$List$($p.$collections().$OrderedCollection());
   self._$init$Map$($p.$collections().$Dictionary());
   self._$init$ObjectMirror$($p.$mirrors().$ObjectMirror());
   self._$init$MixinBuilder$($p.$mirrors().$MixinBuilder());
   self._$init$namespace$(self._$Namespace().$basedOn$($p.$namespace()));
   self._$init$detailAreaRatio$((8/5));
   self._$init$captionColor$(self._$Color().$h$s$v$(240, (1/20), (9/10)));
   self._$namespace().$at$put$("BrowsingForHTML", self._$class());
   return self;
  };
  this.$ClassPresenter = function () {
   if (nil === this.$BrowsingForHTML$ClassPresenter$slot) {
    var self = this;
    var superclass = self._$Presenter();
    var enclosingObjects = [this].concat(this.$enclosingObjects$BrowsingForHTML);
    var mixin = $.$BrowsingForHTML$ClassPresenter;
    this.$BrowsingForHTML$ClassPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$BrowsingForHTML$ClassPresenter$slot;
  };
  this.$ClassSubject = function () {
   if (nil === this.$BrowsingForHTML$ClassSubject$slot) {
    var self = this;
    var superclass = self._$Subject();
    var enclosingObjects = [this].concat(this.$enclosingObjects$BrowsingForHTML);
    var mixin = $.$BrowsingForHTML$ClassSubject;
    this.$BrowsingForHTML$ClassSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$BrowsingForHTML$ClassSubject$slot;
  };
  this.$Namespace = function () {
   if (nil === this.$BrowsingForHTML$Namespace$slot) {
    var self = this;
    var superclass = self._$Object();
    var enclosingObjects = [this].concat(this.$enclosingObjects$BrowsingForHTML);
    var mixin = $.$BrowsingForHTML$Namespace;
    this.$BrowsingForHTML$Namespace$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$BrowsingForHTML$Namespace$slot;
  };
  this.$ObjectPresenter = function () {
   if (nil === this.$BrowsingForHTML$ObjectPresenter$slot) {
    var self = this;
    var superclass = self._$Presenter();
    var enclosingObjects = [this].concat(this.$enclosingObjects$BrowsingForHTML);
    var mixin = $.$BrowsingForHTML$ObjectPresenter;
    this.$BrowsingForHTML$ObjectPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$BrowsingForHTML$ObjectPresenter$slot;
  };
  this.$ObjectSubject = function () {
   if (nil === this.$BrowsingForHTML$ObjectSubject$slot) {
    var self = this;
    var superclass = self._$Subject();
    var enclosingObjects = [this].concat(this.$enclosingObjects$BrowsingForHTML);
    var mixin = $.$BrowsingForHTML$ObjectSubject;
    this.$BrowsingForHTML$ObjectSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$BrowsingForHTML$ObjectSubject$slot;
  };
  this.$init$Subject$ = function (v) {
   this.$Subject$slot = v;
   return this;
  };
  this.$Subject = function () {
   return this.$Subject$slot;
  };
  this.$init$Presenter$ = function (v) {
   this.$Presenter$slot = v;
   return this;
  };
  this.$Presenter = function () {
   return this.$Presenter$slot;
  };
  this.$init$TextEditorFragment$ = function (v) {
   this.$TextEditorFragment$slot = v;
   return this;
  };
  this.$TextEditorFragment = function () {
   return this.$TextEditorFragment$slot;
  };
  this.$init$Color$ = function (v) {
   this.$Color$slot = v;
   return this;
  };
  this.$Color = function () {
   return this.$Color$slot;
  };
  this.$init$Gradient$ = function (v) {
   this.$Gradient$slot = v;
   return this;
  };
  this.$Gradient = function () {
   return this.$Gradient$slot;
  };
  this.$init$List$ = function (v) {
   this.$List$slot = v;
   return this;
  };
  this.$List = function () {
   return this.$List$slot;
  };
  this.$init$Map$ = function (v) {
   this.$Map$slot = v;
   return this;
  };
  this.$Map = function () {
   return this.$Map$slot;
  };
  this.$init$ObjectMirror$ = function (v) {
   this.$ObjectMirror$slot = v;
   return this;
  };
  this.$ObjectMirror = function () {
   return this.$ObjectMirror$slot;
  };
  this.$init$MixinBuilder$ = function (v) {
   this.$MixinBuilder$slot = v;
   return this;
  };
  this.$MixinBuilder = function () {
   return this.$MixinBuilder$slot;
  };
  this.$init$namespace$ = function (v) {
   this.$namespace$slot = v;
   return this;
  };
  this.$namespace = function () {
   return this.$namespace$slot;
  };
  this.$init$detailAreaRatio$ = function (v) {
   this.$detailAreaRatio$slot = v;
   return this;
  };
  this.$detailAreaRatio = function () {
   return this.$detailAreaRatio$slot;
  };
  this.$init$captionColor$ = function (v) {
   this.$captionColor$slot = v;
   return this;
  };
  this.$captionColor = function () {
   return this.$captionColor$slot;
  };
  this.$init$BrowsingForHTML$ClassPresenter$ = function (v) {
   this.$BrowsingForHTML$ClassPresenter$slot = v;
   return this;
  };
  this.$BrowsingForHTML$ClassPresenter = function () {
   return this.$BrowsingForHTML$ClassPresenter$slot;
  };
  this.$BrowsingForHTML$ClassPresenter$ = function (v) {
   this.$BrowsingForHTML$ClassPresenter$slot = v;
   return this;
  };
  this.$init$BrowsingForHTML$ClassSubject$ = function (v) {
   this.$BrowsingForHTML$ClassSubject$slot = v;
   return this;
  };
  this.$BrowsingForHTML$ClassSubject = function () {
   return this.$BrowsingForHTML$ClassSubject$slot;
  };
  this.$BrowsingForHTML$ClassSubject$ = function (v) {
   this.$BrowsingForHTML$ClassSubject$slot = v;
   return this;
  };
  this.$init$BrowsingForHTML$Namespace$ = function (v) {
   this.$BrowsingForHTML$Namespace$slot = v;
   return this;
  };
  this.$BrowsingForHTML$Namespace = function () {
   return this.$BrowsingForHTML$Namespace$slot;
  };
  this.$BrowsingForHTML$Namespace$ = function (v) {
   this.$BrowsingForHTML$Namespace$slot = v;
   return this;
  };
  this.$init$BrowsingForHTML$ObjectPresenter$ = function (v) {
   this.$BrowsingForHTML$ObjectPresenter$slot = v;
   return this;
  };
  this.$BrowsingForHTML$ObjectPresenter = function () {
   return this.$BrowsingForHTML$ObjectPresenter$slot;
  };
  this.$BrowsingForHTML$ObjectPresenter$ = function (v) {
   this.$BrowsingForHTML$ObjectPresenter$slot = v;
   return this;
  };
  this.$init$BrowsingForHTML$ObjectSubject$ = function (v) {
   this.$BrowsingForHTML$ObjectSubject$slot = v;
   return this;
  };
  this.$BrowsingForHTML$ObjectSubject = function () {
   return this.$BrowsingForHTML$ObjectSubject$slot;
  };
  this.$BrowsingForHTML$ObjectSubject$ = function (v) {
   this.$BrowsingForHTML$ObjectSubject$slot = v;
   return this;
  };
  this.$BrowsingForHTML$ClassPresenter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for BrowsingForHTML`ClassPresenter";
   this.name = "BrowsingForHTML`ClassPresenter";
   this.header = 2853;
   this.slots = [];
   this.methods = [
    new MM("superInit`BrowsingForHTML`ClassPresenter", true, 2854),
    new MM("instance`initializer", true, 2855),
    new MM("collapsedHeadingDefinition", false, 2856),
    new MM("crToLf:", false, 2857),
    new MM("definition", false, 2858),
    new MM("expandedHeadingDefinition", false, 2859),
    new MM("headingDefinition", false, 2860),
    new MM("inspectSelf", false, 2861),
    new MM("method:", false, 2862),
    new MM("minorClassHeadingBlock:", false, 2863),
    new MM("minorClassHeadingColor", false, 2864),
    new MM("nestedClass:", false, 2865)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$BrowsingForHTML$ClassPresenter = function ($s) {
    var self = this;
    self.$super$BrowsingForHTML$ClassPresenter$slot._$instance$initializer.call(self, $s);
    return self;
   };
   this.$instance$initializer = function ($s) {
    var self = this;
    self._$superInit$BrowsingForHTML$ClassPresenter($s);
    return self;
   };
   this.$collapsedHeadingDefinition = function () {
    var self = this;
    return self._$link$action$(self._$subject().$name(), function () {
     return (function ($setter_arg) {
      self._$enterSubject$($setter_arg);
      return $setter_arg;
     }).$value$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ClassSubject().$onModel$(self._$subject().$classMirror()));
    });
   };
   this.$crToLf$ = function ($string) {
    var self = this;
    var $cr = nil;
    var $lf = nil;
    $cr = (function () {
     return self._$String().$fromCharCode$(13);
    }).$on$do$(self._$Error(), function () {
     return self._$String().$value$(13);
    });
    $lf = (function () {
     return self._$String().$fromCharCode$(10);
    }).$on$do$(self._$Error(), function () {
     return self._$String().$value$(10);
    });
    return $string.$replaceAll$with$($cr, $lf);
   };
   this.$definition = function () {
    var self = this;
    return self._$column$([
     self._$headingDefinition(),
     self._$minorClassHeadingBlock$(self._$label$("Classes")),
     self._$column$(self._$subject().$classMirror().$instanceSide().$nestedClasses().$collect$(function ($ea) {
      return self._$nestedClass$($ea);
     })),
     self._$minorClassHeadingBlock$(self._$label$("Methods")),
     self._$column$(self._$subject().$classMirror().$instanceSide().$methods().$collect$(function ($ea) {
      return self._$method$($ea);
     })),
     self._$minorClassHeadingBlock$(self._$label$("Class Methods")),
     self._$column$(self._$subject().$classMirror().$classSide().$methods().$collect$(function ($ea) {
      return self._$method$($ea);
     }))
    ]);
   };
   this.$expandedHeadingDefinition = function () {
    var self = this;
    var $parts = nil;
    $parts = self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$List().$new();
    self._$subject().$enclosingClassSubjects().$do$separatedBy$(function ($ecs) {
     return $parts.$add$(self._$link$action$($ecs.$name(), function () {
      return (function ($setter_arg) {
       self._$enterSubject$($setter_arg);
       return $setter_arg;
      }).$value$($ecs);
     }));
    }, function () {
     return $parts.$add$(self._$label$(" in "));
    });
    return self._$column$([
     self._$blank$(5),
     self._$row$($parts),
     self._$inspectSelf(),
     self._$label$("Slots"),
     self._$row$([
      self._$mediumBlank(),
      self._$column$(self._$subject().$classMirror().$instanceSide().$slots().$collect$(function ($ea) {
       return self._$label$($ea.$name());
      }))
     ])
    ]);
   };
   this.$headingDefinition = function () {
    var self = this;
    return self._$column$([self._$expanded$collapsed$(function () {
     return self._$expandedHeadingDefinition();
    }, function () {
     return self._$collapsedHeadingDefinition();
    })]).$color$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$h$s$v$(240, (1/20), (9/10)));
   };
   this.$inspectSelf = function () {
    var self = this;
    return self._$row$([
     self._$filler(),
     self._$link$action$("Inspect Presenter", function () {
      return (function ($setter_arg) {
       self._$enterSubject$($setter_arg);
       return $setter_arg;
      }).$value$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ObjectSubject().$onModel$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ObjectMirror().$reflecting$(self)));
     })
    ]);
   };
   this.$method$ = function ($mm) {
    var self = this;
    var $toggle = nil;
    $toggle = self._$collapsed$expanded$(function () {
     return self._$link$action$($mm.$name(), function () {
      return $toggle.$expand();
     }).$color$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$black());
    }, function () {
     return self._$column$([
      self._$link$action$($mm.$name(), function () {
       return $toggle.$collapse();
      }).$color$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$black()),
      (function (cascadeReceiver) {
       cascadeReceiver.$text$(self._$crToLf$($mm.$source()));
       return cascadeReceiver.$acceptResponse$(function ($ed) {
        var $b = nil;
        $b = self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$MixinBuilder().$reflecting$($mm.$definingMixin().$reflectee());
        $b.$methods().$addFromSource$($ed.$textBeingAccepted());
        $b.$declaration().$install();
        return $ed.$defaultAcceptResponse();
       });
      })(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$TextEditorFragment().$new())
     ]);
    });
    return $toggle;
   };
   this.$minorClassHeadingBlock$ = function ($body) {
    var self = this;
    return self._$padded$with$($body, [
     10,
     5,
     5,
     5
    ]).$color$(self._$minorClassHeadingColor());
   };
   this.$minorClassHeadingColor = function () {
    var self = this;
    return self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Gradient().$from$to$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$h$s$v$(240, (1/50), (47/50)), self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$h$s$v$(240, (1/50), (9/10)));
   };
   this.$nestedClass$ = function ($cdm) {
    var self = this;
    return self._$collapsed$expanded$(function () {
     return self._$link$action$($cdm.$simpleName(), function () {
      return (function ($setter_arg) {
       self._$enterSubject$($setter_arg);
       return $setter_arg;
      }).$value$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ClassSubject().$onModel$($cdm));
     });
    }, function () {
     return self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ClassSubject().$onModel$($cdm).$presenter();
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for BrowsingForHTML`ClassPresenter";
     this._$superInit$BrowsingForHTML$ClassPresenter = $.$superInit$BrowsingForHTML$ClassPresenter;
     this.$superInit$BrowsingForHTML$ClassPresenter = dnuCatcher("$superInit$BrowsingForHTML$ClassPresenter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$collapsedHeadingDefinition = $.$collapsedHeadingDefinition;
     this.$collapsedHeadingDefinition = dnuCatcher("$collapsedHeadingDefinition");
     this._$crToLf$ = $.$crToLf$;
     this.$crToLf$ = dnuCatcher("$crToLf$");
     this.$definition = this._$definition = $.$definition;
     this._$expandedHeadingDefinition = $.$expandedHeadingDefinition;
     this.$expandedHeadingDefinition = dnuCatcher("$expandedHeadingDefinition");
     this._$headingDefinition = $.$headingDefinition;
     this.$headingDefinition = dnuCatcher("$headingDefinition");
     this._$inspectSelf = $.$inspectSelf;
     this.$inspectSelf = dnuCatcher("$inspectSelf");
     this._$method$ = $.$method$;
     this.$method$ = dnuCatcher("$method$");
     this._$minorClassHeadingBlock$ = $.$minorClassHeadingBlock$;
     this.$minorClassHeadingBlock$ = dnuCatcher("$minorClassHeadingBlock$");
     this._$minorClassHeadingColor = $.$minorClassHeadingColor;
     this.$minorClassHeadingColor = dnuCatcher("$minorClassHeadingColor");
     this._$nestedClass$ = $.$nestedClass$;
     this.$nestedClass$ = dnuCatcher("$nestedClass$");
     this.$enclosingObjects$BrowsingForHTML$ClassPresenter = enclosingObjects;
     this.$super$BrowsingForHTML$ClassPresenter$slot = runtimeSuperclass;
     this["BrowsingForHTML`ClassPresenter"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["BrowsingForHTML`ClassPresenter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for BrowsingForHTML`ClassPresenter";
    this.slots = [];
    this.methods = [new MM("onSubject:", true, 0)];
    this.nestedClasses = [];
    this.$onSubject$ = function ($s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for BrowsingForHTML`ClassPresenter";
      this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
      this.$enclosingObjects$BrowsingForHTML$ClassPresenter = enclosingObjects;
      this.$super$BrowsingForHTML$ClassPresenter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$BrowsingForHTML$ClassSubject = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for BrowsingForHTML`ClassSubject";
   this.name = "BrowsingForHTML`ClassSubject";
   this.header = 2866;
   this.slots = [];
   this.methods = [
    new MM("superInit`BrowsingForHTML`ClassSubject", true, 2867),
    new MM("instance`initializer", true, 2868),
    new MM("classMirror", false, 2869),
    new MM("createPresenter", false, 2870),
    new MM("enclosingClassSubjects", false, 2871),
    new MM("name", false, 2872),
    new MM("title", false, 2873)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$BrowsingForHTML$ClassSubject = function ($m) {
    var self = this;
    self.$super$BrowsingForHTML$ClassSubject$slot._$instance$initializer.call(self, $m);
    return self;
   };
   this.$instance$initializer = function ($m) {
    var self = this;
    self._$superInit$BrowsingForHTML$ClassSubject($m);
    return self;
   };
   this.$classMirror = function () {
    var self = this;
    return self._$model();
   };
   this.$createPresenter = function () {
    var self = this;
    return self.$enclosingObjects$BrowsingForHTML$ClassSubject[0]._$ClassPresenter().$onSubject$(self);
   };
   this.$enclosingClassSubjects = function () {
    var self = this;
    var $them = nil;
    var $c = nil;
    $them = self.$enclosingObjects$BrowsingForHTML$ClassSubject[0]._$List().$new();
    $c = self._$model();
    {
     nil;
     for (; !$c.$isNil(); ) {
      $them.$add$(self.$enclosingObjects$BrowsingForHTML$ClassSubject[0]._$ClassSubject().$onModel$($c));
      $c = $c.$enclosingClass();
     };
    };
    return $them;
   };
   this.$name = function () {
    var self = this;
    return self._$model().$simpleName();
   };
   this.$title = function () {
    var self = this;
    return self._$name();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for BrowsingForHTML`ClassSubject";
     this._$superInit$BrowsingForHTML$ClassSubject = $.$superInit$BrowsingForHTML$ClassSubject;
     this.$superInit$BrowsingForHTML$ClassSubject = dnuCatcher("$superInit$BrowsingForHTML$ClassSubject");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$classMirror = this._$classMirror = $.$classMirror;
     this.$createPresenter = this._$createPresenter = $.$createPresenter;
     this.$enclosingClassSubjects = this._$enclosingClassSubjects = $.$enclosingClassSubjects;
     this.$name = this._$name = $.$name;
     this.$title = this._$title = $.$title;
     this.$enclosingObjects$BrowsingForHTML$ClassSubject = enclosingObjects;
     this.$super$BrowsingForHTML$ClassSubject$slot = runtimeSuperclass;
     this["BrowsingForHTML`ClassSubject"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["BrowsingForHTML`ClassSubject"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for BrowsingForHTML`ClassSubject";
    this.slots = [];
    this.methods = [new MM("onModel:", true, 0)];
    this.nestedClasses = [];
    this.$onModel$ = function ($m) {
     return (new this.nonMeta.basicNew()).$instance$initializer($m);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for BrowsingForHTML`ClassSubject";
      this.$onModel$ = this._$onModel$ = $.$onModel$;
      this.$enclosingObjects$BrowsingForHTML$ClassSubject = enclosingObjects;
      this.$super$BrowsingForHTML$ClassSubject = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$BrowsingForHTML$Namespace = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for BrowsingForHTML`Namespace";
   this.name = "BrowsingForHTML`Namespace";
   this.header = 2874;
   this.slots = [
    new SM("platformNamespace", false, false),
    new SM("map", false, false)
   ];
   this.methods = [
    new MM("superInit`BrowsingForHTML`Namespace", true, 2875),
    new MM("instance`initializer", true, 2876),
    new MM("at:", false, 2877),
    new MM("at:ifAbsent:", false, 2878),
    new MM("at:put:", false, 2879),
    new MM("init`platformNamespace:", true, 0),
    new MM("platformNamespace", true, 0),
    new MM("init`map:", true, 0),
    new MM("map", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$BrowsingForHTML$Namespace = function ($ns) {
    var self = this;
    self.$super$BrowsingForHTML$Namespace$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ns) {
    var self = this;
    self._$superInit$BrowsingForHTML$Namespace($ns);
    self._$init$platformNamespace$(self.$enclosingObjects$BrowsingForHTML$Namespace[0]._$ObjectMirror().$reflecting$($ns));
    self._$init$map$(self.$enclosingObjects$BrowsingForHTML$Namespace[0]._$Map().$new());
    return self;
   };
   this.$at$ = function ($s) {
    var self = this;
    return self._$at$ifAbsent$($s, function () {
     return nil;
    });
   };
   this.$at$ifAbsent$ = function ($s, $blk) {
    var self = this;
    return self._$map().$at$ifAbsent$($s, function () {
     return self._$platformNamespace().$evaluate$ifCompilerError$ifError$($s, function () {
      return nil;
     }, $blk).$reflectee();
    });
   };
   this.$at$put$ = function ($s, $v) {
    var self = this;
    return self._$map().$at$put$($s, $v);
   };
   this.$init$platformNamespace$ = function (v) {
    this.$platformNamespace$slot = v;
    return this;
   };
   this.$platformNamespace = function () {
    return this.$platformNamespace$slot;
   };
   this.$init$map$ = function (v) {
    this.$map$slot = v;
    return this;
   };
   this.$map = function () {
    return this.$map$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for BrowsingForHTML`Namespace";
     this._$superInit$BrowsingForHTML$Namespace = $.$superInit$BrowsingForHTML$Namespace;
     this.$superInit$BrowsingForHTML$Namespace = dnuCatcher("$superInit$BrowsingForHTML$Namespace");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$init$platformNamespace$ = $.$init$platformNamespace$;
     this.$init$platformNamespace$ = dnuCatcher("$init$platformNamespace$");
     this._$platformNamespace = $.$platformNamespace;
     this.$platformNamespace = dnuCatcher("$platformNamespace");
     this._$init$map$ = $.$init$map$;
     this.$init$map$ = dnuCatcher("$init$map$");
     this._$map = $.$map;
     this.$map = dnuCatcher("$map");
     this.$enclosingObjects$BrowsingForHTML$Namespace = enclosingObjects;
     this.$super$BrowsingForHTML$Namespace$slot = runtimeSuperclass;
     this["BrowsingForHTML`Namespace"] = function () {
      superBasicNew.call(this);
      this.$platformNamespace$slot = nil;
      this.$map$slot = nil;
     };
     this.basicNew = this["BrowsingForHTML`Namespace"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for BrowsingForHTML`Namespace";
    this.slots = [];
    this.methods = [new MM("basedOn:", true, 0)];
    this.nestedClasses = [];
    this.$basedOn$ = function ($ns) {
     return (new this.nonMeta.basicNew()).$instance$initializer($ns);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for BrowsingForHTML`Namespace";
      this.$basedOn$ = this._$basedOn$ = $.$basedOn$;
      this.$enclosingObjects$BrowsingForHTML$Namespace = enclosingObjects;
      this.$super$BrowsingForHTML$Namespace = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$BrowsingForHTML$ObjectPresenter = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for BrowsingForHTML`ObjectPresenter";
   this.name = "BrowsingForHTML`ObjectPresenter";
   this.header = 2880;
   this.slots = [new SM("resultHolder", true, false)];
   this.methods = [
    new MM("superInit`BrowsingForHTML`ObjectPresenter", true, 2881),
    new MM("instance`initializer", true, 2882),
    new MM("captionBar:", false, 2883),
    new MM("classInfoLine", false, 2884),
    new MM("definition", false, 2885),
    new MM("enclosingInfoLine", false, 2886),
    new MM("evaluate:", false, 2887),
    new MM("goToSelf", false, 2888),
    new MM("inspectSelf", false, 2889),
    new MM("objectDetails", false, 2890),
    new MM("selfCaption", false, 2891),
    new MM("selfInfoLine", false, 2892),
    new MM("smallBlank", false, 2893),
    new MM("withoutNbsp:", false, 2894),
    new MM("init`resultHolder:", true, 0),
    new MM("resultHolder", true, 0),
    new MM("resultHolder:", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$BrowsingForHTML$ObjectPresenter = function ($s) {
    var self = this;
    self.$super$BrowsingForHTML$ObjectPresenter$slot._$instance$initializer.call(self, $s);
    return self;
   };
   this.$instance$initializer = function ($s) {
    var self = this;
    self._$superInit$BrowsingForHTML$ObjectPresenter($s);
    return self;
   };
   this.$captionBar$ = function ($body) {
    var self = this;
    return self._$column$([
     self._$smallBlank(),
     self._$row$([
      self._$mediumBlank(),
      $body.$elasticity$(1),
      self._$smallBlank()
     ])
    ]).$color$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$captionColor());
   };
   this.$classInfoLine = function () {
    var self = this;
    return self._$row$([
     self._$label$("class").$width$elasticity$(0, 1),
     self._$row$([self._$link$action$(self._$subject().$className(), function () {
      return self._$enterSubject$(self._$subject().$classSubject());
     })]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
    ]);
   };
   this.$definition = function () {
    var self = this;
    return self._$column$([
     self._$captionBar$(self._$column$([
      self._$selfInfoLine(),
      self._$enclosingInfoLine(),
      self._$classInfoLine(),
      self._$smallBlank(),
      self._$inspectSelf(),
      self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$TextEditorFragment().$new().$changeResponse$(function ($editor) {
       return self._$evaluate$($editor.$textBeingAccepted().$asString());
      }),
      self._$smallBlank(),
      (function ($setter_arg) {
       self._$resultHolder$($setter_arg);
       return $setter_arg;
      }).$value$(self._$holder$(function () {
       return self._$nothing();
      }))
     ])),
     self._$objectDetails()
    ]);
   };
   this.$enclosingInfoLine = function () {
    var self = this;
    return self._$row$([
     self._$label$("enclosingObject").$width$elasticity$(0, 1),
     self._$row$([self._$link$action$(self._$subject().$enclosingObjectName(), function () {
      return (function ($setter_arg) {
       self._$enterSubject$($setter_arg);
       return $setter_arg;
      }).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$(self._$subject().$classMirror().$enclosingObject()));
     })]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
    ]);
   };
   this.$evaluate$ = function ($expression) {
    var self = this;
    var NLR = new Object();
    try {
     var $s = nil;
     $s = self._$subject().$objectMirror().$evaluate$ifCompilerError$ifError$(self._$withoutNbsp$($expression), function ($e) {
      {
       NLR.value = self._$resultHolder().$content$(self._$label$("compile-time error: ".$$comma($e.$printString())));
       throw NLR;
      };
     }, function ($e) {
      {
       NLR.value = self._$resultHolder().$content$(self._$label$("runtime error: ".$$comma($e.$printString())));
       throw NLR;
      };
     });
     self._$resultHolder().$content$(self._$link$action$($s.$reflectee().$printString(), function () {
      return (function ($setter_arg) {
       self._$enterSubject$($setter_arg);
       return $setter_arg;
      }).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$($s));
     }));
     return self;
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$goToSelf = function () {
    var self = this;
    self._$enterSubject$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$(self._$subject().$objectMirror()));
    return self;
   };
   this.$inspectSelf = function () {
    var self = this;
    return self._$row$([
     self._$filler(),
     self._$link$action$("Inspect Presenter", function () {
      return (function ($setter_arg) {
       self._$enterSubject$($setter_arg);
       return $setter_arg;
      }).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectMirror().$reflecting$(self)));
     })
    ]);
   };
   this.$objectDetails = function () {
    var self = this;
    return self._$row$([
     self._$mediumBlank(),
     self._$column$(self._$subject().$classMirror().$slots().$collect$(function ($slot) {
      var $val = nil;
      $val = self._$subject().$objectMirror().$getSlot$ifFail$($slot.$name(), function () {
       return nil;
      });
      return self._$row$([
       self._$label$($slot.$name()).$width$elasticity$(0, 1),
       self._$row$([self._$link$action$($val.$reflectee().$printString(), function () {
        return (function ($setter_arg) {
         self._$enterSubject$($setter_arg);
         return $setter_arg;
        }).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$($val));
       })]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
      ]);
     })).$elasticity$(1),
     self._$smallBlank()
    ]);
   };
   this.$selfCaption = function () {
    var self = this;
    return "self";
   };
   this.$selfInfoLine = function () {
    var self = this;
    return self._$row$([
     self._$label$(self._$selfCaption()).$width$elasticity$(0, 1),
     self._$row$([
      self._$link$action$(self._$subject().$title(), function () {
       return self._$goToSelf();
      }).$compressibility$(1),
      self._$filler().$compressibility$(0),
      self._$mediumBlank()
     ]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
    ]);
   };
   this.$smallBlank = function () {
    var self = this;
    return self._$blank$(5);
   };
   this.$withoutNbsp$ = function ($string) {
    var self = this;
    var $nonbreakingSpace = nil;
    var $space = nil;
    $nonbreakingSpace = (function () {
     return self._$String().$fromCharCode$(160);
    }).$on$do$(self._$Error(), function () {
     return self._$String().$value$(160);
    });
    $space = (function () {
     return self._$String().$fromCharCode$(32);
    }).$on$do$(self._$Error(), function () {
     return self._$String().$value$(32);
    });
    return $string.$replaceAll$with$($nonbreakingSpace, $space);
   };
   this.$init$resultHolder$ = function (v) {
    this.$resultHolder$slot = v;
    return this;
   };
   this.$resultHolder = function () {
    return this.$resultHolder$slot;
   };
   this.$resultHolder$ = function (v) {
    this.$resultHolder$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for BrowsingForHTML`ObjectPresenter";
     this._$superInit$BrowsingForHTML$ObjectPresenter = $.$superInit$BrowsingForHTML$ObjectPresenter;
     this.$superInit$BrowsingForHTML$ObjectPresenter = dnuCatcher("$superInit$BrowsingForHTML$ObjectPresenter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$captionBar$ = $.$captionBar$;
     this.$captionBar$ = dnuCatcher("$captionBar$");
     this._$classInfoLine = $.$classInfoLine;
     this.$classInfoLine = dnuCatcher("$classInfoLine");
     this.$definition = this._$definition = $.$definition;
     this._$enclosingInfoLine = $.$enclosingInfoLine;
     this.$enclosingInfoLine = dnuCatcher("$enclosingInfoLine");
     this._$evaluate$ = $.$evaluate$;
     this.$evaluate$ = dnuCatcher("$evaluate$");
     this._$goToSelf = $.$goToSelf;
     this.$goToSelf = dnuCatcher("$goToSelf");
     this._$inspectSelf = $.$inspectSelf;
     this.$inspectSelf = dnuCatcher("$inspectSelf");
     this._$objectDetails = $.$objectDetails;
     this.$objectDetails = dnuCatcher("$objectDetails");
     this._$selfCaption = $.$selfCaption;
     this.$selfCaption = dnuCatcher("$selfCaption");
     this._$selfInfoLine = $.$selfInfoLine;
     this.$selfInfoLine = dnuCatcher("$selfInfoLine");
     this._$smallBlank = $.$smallBlank;
     this.$smallBlank = dnuCatcher("$smallBlank");
     this._$withoutNbsp$ = $.$withoutNbsp$;
     this.$withoutNbsp$ = dnuCatcher("$withoutNbsp$");
     this._$init$resultHolder$ = $.$init$resultHolder$;
     this.$init$resultHolder$ = dnuCatcher("$init$resultHolder$");
     this._$resultHolder = $.$resultHolder;
     this.$resultHolder = dnuCatcher("$resultHolder");
     this._$resultHolder$ = $.$resultHolder$;
     this.$resultHolder$ = dnuCatcher("$resultHolder$");
     this.$enclosingObjects$BrowsingForHTML$ObjectPresenter = enclosingObjects;
     this.$super$BrowsingForHTML$ObjectPresenter$slot = runtimeSuperclass;
     this["BrowsingForHTML`ObjectPresenter"] = function () {
      superBasicNew.call(this);
      this.$resultHolder$slot = nil;
     };
     this.basicNew = this["BrowsingForHTML`ObjectPresenter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for BrowsingForHTML`ObjectPresenter";
    this.slots = [];
    this.methods = [new MM("onSubject:", true, 0)];
    this.nestedClasses = [];
    this.$onSubject$ = function ($s) {
     return (new this.nonMeta.basicNew()).$instance$initializer($s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for BrowsingForHTML`ObjectPresenter";
      this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
      this.$enclosingObjects$BrowsingForHTML$ObjectPresenter = enclosingObjects;
      this.$super$BrowsingForHTML$ObjectPresenter = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$BrowsingForHTML$ObjectSubject = new function () {
   var $ = this;
   var $1 = this;
   this.debug = "Runtime mixin for BrowsingForHTML`ObjectSubject";
   this.name = "BrowsingForHTML`ObjectSubject";
   this.header = 2895;
   this.slots = [];
   this.methods = [
    new MM("superInit`BrowsingForHTML`ObjectSubject", true, 2896),
    new MM("instance`initializer", true, 2897),
    new MM("classMirror", false, 2898),
    new MM("className", false, 2899),
    new MM("classSubject", false, 2900),
    new MM("createPresenter", false, 2901),
    new MM("enclosingObjectName", false, 2902),
    new MM("objectMirror", false, 2903),
    new MM("title", false, 2904)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$BrowsingForHTML$ObjectSubject = function ($m) {
    var self = this;
    self.$super$BrowsingForHTML$ObjectSubject$slot._$instance$initializer.call(self, $m);
    return self;
   };
   this.$instance$initializer = function ($m) {
    var self = this;
    self._$superInit$BrowsingForHTML$ObjectSubject($m);
    return self;
   };
   this.$classMirror = function () {
    var self = this;
    return self._$model().$getClassIfFail$(function () {
     return self._$halt();
    });
   };
   this.$className = function () {
    var self = this;
    return self._$classMirror().$simpleName();
   };
   this.$classSubject = function () {
    var self = this;
    return self.$enclosingObjects$BrowsingForHTML$ObjectSubject[0]._$ClassSubject().$onModel$(self._$classMirror().$mixin().$declaration());
   };
   this.$createPresenter = function () {
    var self = this;
    return self.$enclosingObjects$BrowsingForHTML$ObjectSubject[0]._$ObjectPresenter().$onSubject$(self);
   };
   this.$enclosingObjectName = function () {
    var self = this;
    return self._$classMirror().$enclosingObject().$reflectee().$printString();
   };
   this.$objectMirror = function () {
    var self = this;
    return self._$model();
   };
   this.$title = function () {
    var self = this;
    return self._$model().$reflectee().$printString();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for BrowsingForHTML`ObjectSubject";
     this._$superInit$BrowsingForHTML$ObjectSubject = $.$superInit$BrowsingForHTML$ObjectSubject;
     this.$superInit$BrowsingForHTML$ObjectSubject = dnuCatcher("$superInit$BrowsingForHTML$ObjectSubject");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$classMirror = this._$classMirror = $.$classMirror;
     this.$className = this._$className = $.$className;
     this.$classSubject = this._$classSubject = $.$classSubject;
     this.$createPresenter = this._$createPresenter = $.$createPresenter;
     this.$enclosingObjectName = this._$enclosingObjectName = $.$enclosingObjectName;
     this.$objectMirror = this._$objectMirror = $.$objectMirror;
     this.$title = this._$title = $.$title;
     this.$enclosingObjects$BrowsingForHTML$ObjectSubject = enclosingObjects;
     this.$super$BrowsingForHTML$ObjectSubject$slot = runtimeSuperclass;
     this["BrowsingForHTML`ObjectSubject"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["BrowsingForHTML`ObjectSubject"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    var $ = this;
    this.debug = "Runtime meta mixin for BrowsingForHTML`ObjectSubject";
    this.slots = [];
    this.methods = [new MM("onModel:", true, 0)];
    this.nestedClasses = [];
    this.$onModel$ = function ($m) {
     return (new this.nonMeta.basicNew()).$instance$initializer($m);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for BrowsingForHTML`ObjectSubject";
      this.$onModel$ = this._$onModel$ = $.$onModel$;
      this.$enclosingObjects$BrowsingForHTML$ObjectSubject = enclosingObjects;
      this.$super$BrowsingForHTML$ObjectSubject = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$BrowsingForHTML$ClassPresenter.enclosingMixin = this;
  this.$BrowsingForHTML$ClassSubject.enclosingMixin = this;
  this.$BrowsingForHTML$Namespace.enclosingMixin = this;
  this.$BrowsingForHTML$ObjectPresenter.enclosingMixin = this;
  this.$BrowsingForHTML$ObjectSubject.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for BrowsingForHTML";
    this._$superInit$BrowsingForHTML = $.$superInit$BrowsingForHTML;
    this.$superInit$BrowsingForHTML = dnuCatcher("$superInit$BrowsingForHTML");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$ClassPresenter = $.$ClassPresenter;
    this.$ClassPresenter = dnuCatcher("$ClassPresenter");
    this.$ClassSubject = this._$ClassSubject = $.$ClassSubject;
    this._$Namespace = $.$Namespace;
    this.$Namespace = dnuCatcher("$Namespace");
    this._$ObjectPresenter = $.$ObjectPresenter;
    this.$ObjectPresenter = dnuCatcher("$ObjectPresenter");
    this.$ObjectSubject = this._$ObjectSubject = $.$ObjectSubject;
    this._$init$Subject$ = $.$init$Subject$;
    this.$init$Subject$ = dnuCatcher("$init$Subject$");
    this._$Subject = $.$Subject;
    this.$Subject = dnuCatcher("$Subject");
    this._$init$Presenter$ = $.$init$Presenter$;
    this.$init$Presenter$ = dnuCatcher("$init$Presenter$");
    this._$Presenter = $.$Presenter;
    this.$Presenter = dnuCatcher("$Presenter");
    this._$init$TextEditorFragment$ = $.$init$TextEditorFragment$;
    this.$init$TextEditorFragment$ = dnuCatcher("$init$TextEditorFragment$");
    this._$TextEditorFragment = $.$TextEditorFragment;
    this.$TextEditorFragment = dnuCatcher("$TextEditorFragment");
    this._$init$Color$ = $.$init$Color$;
    this.$init$Color$ = dnuCatcher("$init$Color$");
    this._$Color = $.$Color;
    this.$Color = dnuCatcher("$Color");
    this._$init$Gradient$ = $.$init$Gradient$;
    this.$init$Gradient$ = dnuCatcher("$init$Gradient$");
    this._$Gradient = $.$Gradient;
    this.$Gradient = dnuCatcher("$Gradient");
    this._$init$List$ = $.$init$List$;
    this.$init$List$ = dnuCatcher("$init$List$");
    this._$List = $.$List;
    this.$List = dnuCatcher("$List");
    this._$init$Map$ = $.$init$Map$;
    this.$init$Map$ = dnuCatcher("$init$Map$");
    this._$Map = $.$Map;
    this.$Map = dnuCatcher("$Map");
    this._$init$ObjectMirror$ = $.$init$ObjectMirror$;
    this.$init$ObjectMirror$ = dnuCatcher("$init$ObjectMirror$");
    this._$ObjectMirror = $.$ObjectMirror;
    this.$ObjectMirror = dnuCatcher("$ObjectMirror");
    this._$init$MixinBuilder$ = $.$init$MixinBuilder$;
    this.$init$MixinBuilder$ = dnuCatcher("$init$MixinBuilder$");
    this._$MixinBuilder = $.$MixinBuilder;
    this.$MixinBuilder = dnuCatcher("$MixinBuilder");
    this.$init$namespace$ = this._$init$namespace$ = $.$init$namespace$;
    this.$namespace = this._$namespace = $.$namespace;
    this._$init$detailAreaRatio$ = $.$init$detailAreaRatio$;
    this.$init$detailAreaRatio$ = dnuCatcher("$init$detailAreaRatio$");
    this._$detailAreaRatio = $.$detailAreaRatio;
    this.$detailAreaRatio = dnuCatcher("$detailAreaRatio");
    this._$init$captionColor$ = $.$init$captionColor$;
    this.$init$captionColor$ = dnuCatcher("$init$captionColor$");
    this._$captionColor = $.$captionColor;
    this.$captionColor = dnuCatcher("$captionColor");
    this.$init$BrowsingForHTML$ClassPresenter$ = this._$init$BrowsingForHTML$ClassPresenter$ = $.$init$BrowsingForHTML$ClassPresenter$;
    this.$BrowsingForHTML$ClassPresenter = this._$BrowsingForHTML$ClassPresenter = $.$BrowsingForHTML$ClassPresenter;
    this.$BrowsingForHTML$ClassPresenter$ = this._$BrowsingForHTML$ClassPresenter$ = $.$BrowsingForHTML$ClassPresenter$;
    this.$init$BrowsingForHTML$ClassSubject$ = this._$init$BrowsingForHTML$ClassSubject$ = $.$init$BrowsingForHTML$ClassSubject$;
    this.$BrowsingForHTML$ClassSubject = this._$BrowsingForHTML$ClassSubject = $.$BrowsingForHTML$ClassSubject;
    this.$BrowsingForHTML$ClassSubject$ = this._$BrowsingForHTML$ClassSubject$ = $.$BrowsingForHTML$ClassSubject$;
    this.$init$BrowsingForHTML$Namespace$ = this._$init$BrowsingForHTML$Namespace$ = $.$init$BrowsingForHTML$Namespace$;
    this.$BrowsingForHTML$Namespace = this._$BrowsingForHTML$Namespace = $.$BrowsingForHTML$Namespace;
    this.$BrowsingForHTML$Namespace$ = this._$BrowsingForHTML$Namespace$ = $.$BrowsingForHTML$Namespace$;
    this.$init$BrowsingForHTML$ObjectPresenter$ = this._$init$BrowsingForHTML$ObjectPresenter$ = $.$init$BrowsingForHTML$ObjectPresenter$;
    this.$BrowsingForHTML$ObjectPresenter = this._$BrowsingForHTML$ObjectPresenter = $.$BrowsingForHTML$ObjectPresenter;
    this.$BrowsingForHTML$ObjectPresenter$ = this._$BrowsingForHTML$ObjectPresenter$ = $.$BrowsingForHTML$ObjectPresenter$;
    this.$init$BrowsingForHTML$ObjectSubject$ = this._$init$BrowsingForHTML$ObjectSubject$ = $.$init$BrowsingForHTML$ObjectSubject$;
    this.$BrowsingForHTML$ObjectSubject = this._$BrowsingForHTML$ObjectSubject = $.$BrowsingForHTML$ObjectSubject;
    this.$BrowsingForHTML$ObjectSubject$ = this._$BrowsingForHTML$ObjectSubject$ = $.$BrowsingForHTML$ObjectSubject$;
    this.$enclosingObjects$BrowsingForHTML = enclosingObjects;
    this.$super$BrowsingForHTML$slot = runtimeSuperclass;
    this.BrowsingForHTML = function () {
     superBasicNew.call(this);
     this.$Subject$slot = nil;
     this.$Presenter$slot = nil;
     this.$TextEditorFragment$slot = nil;
     this.$Color$slot = nil;
     this.$Gradient$slot = nil;
     this.$List$slot = nil;
     this.$Map$slot = nil;
     this.$ObjectMirror$slot = nil;
     this.$MixinBuilder$slot = nil;
     this.$namespace$slot = nil;
     this.$detailAreaRatio$slot = nil;
     this.$captionColor$slot = nil;
     this.$BrowsingForHTML$ClassPresenter$slot = nil;
     this.$BrowsingForHTML$ClassSubject$slot = nil;
     this.$BrowsingForHTML$Namespace$slot = nil;
     this.$BrowsingForHTML$ObjectPresenter$slot = nil;
     this.$BrowsingForHTML$ObjectSubject$slot = nil;
    };
    this.basicNew = this.BrowsingForHTML;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   var $ = this;
   this.debug = "Runtime meta mixin for BrowsingForHTML";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    return (new this.nonMeta.basicNew()).$instance$initializer($p);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for BrowsingForHTML";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$BrowsingForHTML = enclosingObjects;
     this.$super$BrowsingForHTML = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
}();


var vmmirror = new function(){
	
	this.ImplementationBase$slot = new function(){
		this.debug = "ImplementationBase";
		this.$runtimeClass$slot = new function(){
			this.debug = "Runtime class for ImplementationBase";
			this.basicNew = function(){ this.hashCode = 0; };
			this.$instance$initializer = function(){};
			this._$instance$initializer = function(){};
			this.toString = function(){ return this.$printString(); }
		};
	};
	this.$ImplementationBase = function(){return this.ImplementationBase$slot;};
	this.$Array = function(){return Array;};
	this.$String = function(){return String;};
	this.$printString = function(){return "VMMirrorForV8"};
	
	this.createKernel = function(){
		
		var enclosingObjects = ["patch me with kernel", "patch me with nil"];
		var enclosingObjects2 = ["patch me with nil"];
		
		var Object$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.invoke(this.$ImplementationBase().$runtimeClass$slot, enclosingObjects);
		var Class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.invoke(Object$runtimeClass, enclosingObjects);
		var Metaclass$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.invoke(Object$runtimeClass, enclosingObjects);
		var Mixin$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.invoke(Object$runtimeClass, enclosingObjects);
		var UndefinedObject$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.invoke(Object$runtimeClass, enclosingObjects);
		var Kernel$runtimeClass = mixins.$KernelForV8.invoke(Object$runtimeClass, enclosingObjects2);
		
		var Object$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Class$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Metaclass$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Mixin$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.meta.invoke(Class$runtimeClass, enclosingObjects);
		var UndefinedObject$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Kernel$class$runtimeClass = mixins.$KernelForV8.meta.invoke(Class$runtimeClass, enclosingObjects2);
		
		Object$runtimeClass.meta = Object$class$runtimeClass;
		Class$runtimeClass.meta = Class$class$runtimeClass;
		Metaclass$runtimeClass.meta = Metaclass$class$runtimeClass;
		Mixin$runtimeClass.meta = Mixin$class$runtimeClass;
		UndefinedObject$runtimeClass.meta = UndefinedObject$class$runtimeClass;
		Kernel$runtimeClass.meta = Kernel$class$runtimeClass;
		
		Object$class$runtimeClass.nonMeta = Object$runtimeClass;
		Class$class$runtimeClass.nonMeta = Class$runtimeClass;
		Metaclass$class$runtimeClass.nonMeta = Metaclass$runtimeClass;
		Mixin$class$runtimeClass.nonMeta = Mixin$runtimeClass;
		UndefinedObject$class$runtimeClass.nonMeta = UndefinedObject$runtimeClass;
		Kernel$class$runtimeClass.nonMeta = Kernel$runtimeClass;
		
		nil = new UndefinedObject$runtimeClass.basicNew();
		
		var Object = new Object$class$runtimeClass.basicNew();
		var Class = new Class$class$runtimeClass.basicNew();
		var Metaclass = new Metaclass$class$runtimeClass.basicNew();
		var Mixin = new Mixin$class$runtimeClass.basicNew();
		var UndefinedObject = new UndefinedObject$class$runtimeClass.basicNew();
		var Kernel = new Kernel$class$runtimeClass.basicNew();
		
		var Object$class = new Metaclass$runtimeClass.basicNew();
		var Class$class = new Metaclass$runtimeClass.basicNew();
		var Metaclass$class = new Metaclass$runtimeClass.basicNew();
		var Mixin$class = new Metaclass$runtimeClass.basicNew();
		var UndefinedObject$class = new Metaclass$runtimeClass.basicNew();
		var Kernel$class = new Metaclass$runtimeClass.basicNew();
		
		Object$class$runtimeClass.newspeakClass = Object$class;
		Class$class$runtimeClass.newspeakClass = Class$class;
		Metaclass$class$runtimeClass.newspeakClass = Metaclass$class;
		Mixin$class$runtimeClass.newspeakClass = Mixin$class;
		UndefinedObject$class$runtimeClass.newspeakClass = UndefinedObject$class;
		Kernel$class$runtimeClass.newspeakClass = Kernel$class;
		
		Object$runtimeClass.newspeakClass = Object;
		Class$runtimeClass.newspeakClass = Class;
		Metaclass$runtimeClass.newspeakClass = Metaclass;
		Mixin$runtimeClass.newspeakClass = Mixin;
		UndefinedObject$runtimeClass.newspeakClass = UndefinedObject;
		Kernel$runtimeClass.newspeakClass = Kernel;
		
		var kernel = Kernel.$usingVmMirror$(this);
		
		//superclass$slot
		Object.$superclass$slot = nil;
		Class.$superclass$slot = Object;
		Metaclass.$superclass$slot = Object;
		Mixin.$superclass$slot = Object;
		UndefinedObject.$superclass$slot = Object;
		Kernel.$superclass$slot = Object;
		
		Object$class.$superclass$slot = Class;
		Class$class.$superclass$slot = Class;
		Metaclass$class.$superclass$slot = Class;
		Mixin$class.$superclass$slot = Class;
		UndefinedObject$class.$superclass$slot = Class;
		Kernel$class.$superclass$slot = Class;
		
		//mixin$slot
		Object.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object);
		Class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class);
		Metaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass);
		Mixin.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin);
		UndefinedObject.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject);
		Kernel.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8);

		Object$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object.meta);
		Class$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class.meta);
		Metaclass$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass.meta);
		Mixin$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin.meta);
		UndefinedObject$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta);
		Kernel$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.meta);
		
		//enclosingObject$slot
		Object.$enclosingObject$slot = kernel;
		Class.$enclosingObject$slot = kernel;
		Metaclass.$enclosingObject$slot = kernel;
		Mixin.$enclosingObject$slot = kernel;
		UndefinedObject.$enclosingObject$slot = kernel;
		Kernel.$enclosingObject$slot = nil;
		
		Object$class.$enclosingObject$slot = kernel;
		Class$class.$enclosingObject$slot = kernel;
		Metaclass$class.$enclosingObject$slot = kernel;
		Mixin$class.$enclosingObject$slot = kernel;
		UndefinedObject$class.$enclosingObject$slot = kernel;
		Kernel$class.$enclosingObject$slot = nil;
		
		enclosingObjects[0] = kernel;
		enclosingObjects[1] = nil;
		enclosingObjects2[0] = nil;
		
		//name$slot
		Object.$name$slot = "Object";
		Class.$name$slot = "Class";
		Metaclass.$name$slot = "Metaclass";
		Mixin.$name$slot = "Mixin";
		Kernel.$name$slot = "Kernel";
		
		Object$class.$name$slot = "Object class";
		Class$class.$name$slot = "Class class";
		Metaclass$class.$name$slot = "Metaclass class";
		Mixin$class.$name$slot = "Mixin class";
		Kernel$class.$name$slot = "Kernel class";
		
		//runtimeClass
		Object.runtimeClass = Object$runtimeClass;
		Class.runtimeClass = Class$runtimeClass;
		Metaclass.runtimeClass = Metaclass$runtimeClass;
		Mixin.runtimeClass = Mixin$runtimeClass;
		Kernel.runtimeClass = Kernel$runtimeClass;
		
		Object$class.runtimeClass = Metaclass$runtimeClass;
		Class$class.runtimeClass = Metaclass$runtimeClass;
		Metaclass$class.runtimeClass = Metaclass$runtimeClass;
		Mixin$class.runtimeClass = Metaclass$runtimeClass;
		Kernel$class.runtimeClass = Metaclass$runtimeClass;
		
		//thisClass$slot
		Object$class.$thisClass$slot = Object;
		Class$class.$thisClass$slot = Class;
		Metaclass$class.$thisClass$slot = Metaclass;
		Mixin$class.$thisClass$slot = Mixin;
		Kernel$class.$thisClass$slot = Kernel;
		
		kernel.$KernelForV8$Object$slot = Object;
		kernel.$KernelForV8$Class$slot = Class;
		kernel.$KernelForV8$Metaclass$slot = Metaclass;
		kernel.$KernelForV8$Mixin$slot = Mixin;
		
		return kernel;
	};
	this.kernel = this.createKernel();
	
	this.applyTopLevelMixin = function(runtimeMixin){
		return this.$applyMixin$toSuperclass$withEnclosingObjects$(runtimeMixin, this.kernel._$Object(), [nil]);
	};
	
	this.$applyMixin$toSuperclass$withEnclosingObjects$ = function(runtimeMixin, newspeakSuperclass, enclosingObjects){
		
		var Class = this.kernel.$Class();
		var Metaclass = this.kernel.$Metaclass();
		var Mixin = this.kernel.$Mixin();
		
		var runtimeSuperclass = newspeakSuperclass.runtimeClass;
		var runtimeClass = runtimeMixin.invoke(runtimeSuperclass, enclosingObjects);
		var runtimeMetaclass = runtimeMixin.meta.invoke(Class.runtimeClass, enclosingObjects);
		runtimeClass.meta = runtimeMetaclass;
		runtimeMetaclass.nonMeta = runtimeClass;
		
		var newspeakMetaclass = Metaclass.$new();
		var newspeakClass = new runtimeMetaclass.basicNew();
		
		runtimeClass.newspeakClass = newspeakClass;
		runtimeMetaclass.newspeakClass = newspeakMetaclass;//Class;
		
		newspeakMetaclass.$superclass$slot = Class;
		newspeakMetaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin.meta);
		newspeakMetaclass.$enclosingObject$slot = enclosingObjects[0];
		newspeakMetaclass.$enclosingObjects$slot = enclosingObjects;
		newspeakMetaclass.$name$slot = runtimeMixin.name + " class";
		newspeakMetaclass.$thisClass$slot = newspeakClass;
		newspeakMetaclass.runtimeClass = runtimeMetaclass;
		
		newspeakClass.$superclass$slot = newspeakSuperclass;
		newspeakClass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin);
		newspeakClass.$enclosingObject$slot = enclosingObjects[0];
		newspeakClass.$enclosingObjects$slot = enclosingObjects;
		newspeakClass.$name$slot = runtimeMixin.name;
		newspeakClass.runtimeClass = runtimeClass;

		runtimeMixin.applications.push(runtimeClass);
		return newspeakClass;
	};
	
	var specialCharacters = new Object();
	specialCharacters["plus"] = "+";
	specialCharacters["minus"] = "-";
	specialCharacters["times"] = "*";
	specialCharacters["over"] = "/";
	specialCharacters["back"] = "\\";
	specialCharacters["less"] = "<";
	specialCharacters["greater"] = ">";
	specialCharacters["tilde"] = "~";
	specialCharacters["equal"] = "=";
	specialCharacters["at"] = "@";
	specialCharacters["percent"] = "%";
	specialCharacters["pipe"] = "|";
	specialCharacters["amp"] = "&";
	specialCharacters["question"] = "?";
	specialCharacters["bang"] = "!";
	specialCharacters["comma"] = ",";
	
	this.$unmangleSelector$ = function(s) {
		if(s[0] != "$") return "<jsSelector:"+s+">";
		if(s[s.length-1] == "$")
			// Keyword
			return s.substring(1).replace(/\$/g,":");
		if(s[1] == "$")
			// Binary
			return s.substring(2).split("$").map(function(x) {return specialCharacters[x];}).join("");
		// Unary / qualified
	   	return s.substring(1).replace(/\$/g,"`");
	};
	
	this.$mangleSelector$ = function(s) {
		return "$" + s.replace(/\:/g,"$").replace(/\`/g,"$");
	};
};
;

var ns = new function () {
 this.$RuntimeForV8WithMirrorBuilders$slot = vmmirror.applyTopLevelMixin(mixins.$RuntimeForV8WithMirrorBuilders);
 this.$KernelForV8$slot = vmmirror.applyTopLevelMixin(mixins.$KernelForV8);
 this.$ActorsForV8$slot = vmmirror.applyTopLevelMixin(mixins.$ActorsForV8);
 this.$AliensForV8$slot = vmmirror.applyTopLevelMixin(mixins.$AliensForV8);
 this.$Collections$slot = vmmirror.applyTopLevelMixin(mixins.$Collections);
 this.$GraphicsForHTML5$slot = vmmirror.applyTopLevelMixin(mixins.$GraphicsForHTML5);
 this.$HopscotchForHTML5$slot = vmmirror.applyTopLevelMixin(mixins.$HopscotchForHTML5);
 this.$MirrorsForV8$slot = vmmirror.applyTopLevelMixin(mixins.$MirrorsForV8);
 this.$MirrorGroups$slot = vmmirror.applyTopLevelMixin(mixins.$MirrorGroups);
 this.$Streams$slot = vmmirror.applyTopLevelMixin(mixins.$Streams);
 this.$CombinatorialParsing$slot = vmmirror.applyTopLevelMixin(mixins.$CombinatorialParsing);
 this.$NewspeakGrammar$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakGrammar);
 this.$NewspeakASTs$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakASTs);
 this.$NewspeakParsing$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakParsing);
 this.$JavascriptGeneration$slot = vmmirror.applyTopLevelMixin(mixins.$JavascriptGeneration);
 this.$Newspeak2V8Compilation$slot = vmmirror.applyTopLevelMixin(mixins.$Newspeak2V8Compilation);
 this.$NewspeakCompilation$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakCompilation);
 this.$Ampleforth$slot = vmmirror.applyTopLevelMixin(mixins.$Ampleforth);
 this.$BrowsingForHTML$slot = vmmirror.applyTopLevelMixin(mixins.$BrowsingForHTML);
 this.$RuntimeForV8WithMirrorBuilders = function () {
  return this.$RuntimeForV8WithMirrorBuilders$slot;
 };
 this.$KernelForV8 = function () {
  return this.$KernelForV8$slot;
 };
 this.$ActorsForV8 = function () {
  return this.$ActorsForV8$slot;
 };
 this.$AliensForV8 = function () {
  return this.$AliensForV8$slot;
 };
 this.$Collections = function () {
  return this.$Collections$slot;
 };
 this.$GraphicsForHTML5 = function () {
  return this.$GraphicsForHTML5$slot;
 };
 this.$HopscotchForHTML5 = function () {
  return this.$HopscotchForHTML5$slot;
 };
 this.$MirrorsForV8 = function () {
  return this.$MirrorsForV8$slot;
 };
 this.$MirrorGroups = function () {
  return this.$MirrorGroups$slot;
 };
 this.$Streams = function () {
  return this.$Streams$slot;
 };
 this.$CombinatorialParsing = function () {
  return this.$CombinatorialParsing$slot;
 };
 this.$NewspeakGrammar = function () {
  return this.$NewspeakGrammar$slot;
 };
 this.$NewspeakASTs = function () {
  return this.$NewspeakASTs$slot;
 };
 this.$NewspeakParsing = function () {
  return this.$NewspeakParsing$slot;
 };
 this.$JavascriptGeneration = function () {
  return this.$JavascriptGeneration$slot;
 };
 this.$Newspeak2V8Compilation = function () {
  return this.$Newspeak2V8Compilation$slot;
 };
 this.$NewspeakCompilation = function () {
  return this.$NewspeakCompilation$slot;
 };
 this.$Ampleforth = function () {
  return this.$Ampleforth$slot;
 };
 this.$BrowsingForHTML = function () {
  return this.$BrowsingForHTML$slot;
 };
 this.$accept16px = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="accept16px.png"; return i;}() );});
 };
 this.$cancel16px = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="cancel16px.png"; return i;}() );});
 };
 this.$disclosureClosedImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureClosedImage.png"; return i;}() );});
 };
 this.$disclosureTransitionImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureTransitionImage.png"; return i;}() );});
 };
 this.$disclosureOpenImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureOpenImage.png"; return i;}() );});
 };
}();

function installDnuHandlersOn (p) {
 [
  "$$amp",
  "$$times$times",
  "$$plus",
  "$$comma",
  "$$over$over",
  "$$less",
  "$$less$equal",
  "$$equal",
  "$$greater",
  "$$greater$equal",
  "$$at",
  "$AST",
  "$ASTCopier",
  "$ASTModule",
  "$ASTTool",
  "$Actors",
  "$ActorsForV8",
  "$AddableList",
  "$Alien",
  "$Aliens",
  "$AliensForV8",
  "$AlternatingParser",
  "$Array",
  "$ArrayExpression",
  "$AssignmentAST",
  "$AssignmentExpression",
  "$Association",
  "$Bag",
  "$BasicIExStream",
  "$BasicInputStream",
  "$BasicOutputReadStream",
  "$BasicOutputStream",
  "$BasicReadStream",
  "$BasicReadWriteStream",
  "$BinaryTypeOpAST",
  "$BlankFragment",
  "$Block",
  "$BlockAST",
  "$BlockLocalReturnAST",
  "$BlockTypeAST",
  "$Boolean",
  "$BooleanAST",
  "$BooleanLiteral",
  "$BrowsingForHTML",
  "$ButtonFragment",
  "$ByteArray",
  "$CachedCompilation",
  "$CallExpression",
  "$Canvas",
  "$CanvasFragment",
  "$CascadedSendAST",
  "$CategoryAST",
  "$CharAST",
  "$CharParser",
  "$Character",
  "$CharacterConverterWithOutput",
  "$CharacterIStream",
  "$CharacterInput",
  "$CharacterInputConverter",
  "$CharacterOStream",
  "$CharacterOutput",
  "$CharacterReadStream",
  "$CharacterReadWriteStream",
  "$CharacterSequenceReadStream",
  "$CharacterSequenceReadWriteStream",
  "$CharacterWriteStream",
  "$ClassBodyAST",
  "$ClassDeclarationAST",
  "$ClassDeclarationBuilder",
  "$ClassDeclarationMirror",
  "$ClassEntry",
  "$ClassHeaderAST",
  "$ClassHeaderMirror",
  "$ClassMirror",
  "$ClassPrefixAST",
  "$ClassPresenter",
  "$ClassSubject",
  "$CodeBodyAST",
  "$CollectingCommentParser",
  "$Collection",
  "$Collections",
  "$Color",
  "$ColumnComposer",
  "$CombinatorialParser",
  "$CombinatorialParsing",
  "$CommentParser",
  "$Compilation",
  "$Compiler",
  "$Composer",
  "$ConditionalAST",
  "$Context",
  "$DOMActor",
  "$DeferredContentComposer",
  "$Dictionary",
  "$EIOStream",
  "$EIStream",
  "$EOIParser",
  "$EOStream",
  "$EmbeddedHopscotchWindow",
  "$Embedder",
  "$EmptyParser",
  "$EnclosingObjectAST",
  "$Error",
  "$ErrorPresenter",
  "$ErrorSubject",
  "$EventualSendReactor",
  "$ExecutableGrammar",
  "$Expat",
  "$ExternalInputStream",
  "$ExternalOutputStream",
  "$ExternalReadStream",
  "$ExternalStream",
  "$Factory",
  "$FailingParser",
  "$ForInStatement",
  "$ForStatement",
  "$ForwardReferenceParser",
  "$ForwardingWrappingParser",
  "$Fragment",
  "$FunctionExpression",
  "$FunctionStatement",
  "$Future",
  "$Gradient",
  "$Graphics",
  "$GraphicsForHTML5",
  "$HashedCollection",
  "$HolderComposer",
  "$Hopscotch",
  "$HopscotchForHTML5",
  "$HopscotchShell",
  "$HyperlinkFragment",
  "$HyperlinkImageFragment",
  "$IdentifierExpression",
  "$IdentityDictionary",
  "$IdentityMutableHashedMap",
  "$IfStatement",
  "$ImmutableMirrorGroup",
  "$ImmutableSlotDefAST",
  "$ImplementationBase",
  "$ImplicitReceiverSendAST",
  "$InitializerAST",
  "$InlinedOperatorAST",
  "$IntermediateClassDeclaration",
  "$IntermediateMethod",
  "$IntermediateMixin",
  "$IntermediateSlotDeclaration",
  "$InternalActor",
  "$InternalBrokenRef",
  "$InternalFarReference",
  "$InternalLocalPromise",
  "$InternalNearRef",
  "$InternalRef",
  "$InternalRemotePromise",
  "$Interval",
  "$JavascriptGeneration",
  "$JavascriptWriter",
  "$KernelForV8",
  "$KeywordPatternAST",
  "$KeywordPatternPairAST",
  "$LeafFragment",
  "$List",
  "$ListReadStream",
  "$ListReadWriteStream",
  "$LiteralAST",
  "$LiteralPatternAST",
  "$LocalEntry",
  "$LocalNavigationHistory",
  "$LocalReadAST",
  "$LocalWriteAST",
  "$LoopAST",
  "$Map",
  "$MemberExpression",
  "$Message",
  "$MessageAST",
  "$MessageNotUnderstood",
  "$MessagePatternAST",
  "$MethodAST",
  "$MethodBuilder",
  "$MethodEntry",
  "$MethodLocalReturnAST",
  "$MethodMirror",
  "$MirrorGroups",
  "$Mirrors",
  "$MirrorsForV8",
  "$Mixin",
  "$MixinApplicationAST",
  "$MixinApplicationClassAST",
  "$MixinBuilder",
  "$MixinMirror",
  "$MutableAddableList",
  "$MutableArrayList",
  "$MutableHashedMap",
  "$MutableList",
  "$MutableMethodGroup",
  "$MutableMirrorGroup",
  "$MutableNestedClassGroup",
  "$MutableSlotDefAST",
  "$MutableString",
  "$NS3Grammar",
  "$NSCommentParser",
  "$NSSideAST",
  "$NameMangler",
  "$NamedWrappingParser",
  "$Namer",
  "$Namespace",
  "$NavigationHistory",
  "$NegatingParser",
  "$NewExpression",
  "$Newspeak2V8Compilation",
  "$NewspeakASTs",
  "$NewspeakCompilation",
  "$NewspeakGrammar",
  "$NewspeakParsing",
  "$NilAST",
  "$Node",
  "$NonlocalReturnAST",
  "$NormalSendAST",
  "$Number",
  "$NumberAST",
  "$NumberLiteral",
  "$Object",
  "$ObjectLiteral",
  "$ObjectMirror",
  "$ObjectPresenter",
  "$ObjectSubject",
  "$OperatorExpression",
  "$OrderedCollection",
  "$OrdinarySendAST",
  "$OuterSendAST",
  "$OutputInputConverter",
  "$PaddedFrameComposer",
  "$ParameterAST",
  "$ParameterizedTypeAST",
  "$Parser",
  "$ParserError",
  "$ParserStream",
  "$PatternAST",
  "$PendingDelivery",
  "$Platform",
  "$PlusParser",
  "$Point",
  "$PredicateTokenParser",
  "$Presenter",
  "$Promise",
  "$PromiseUtils",
  "$PropertyCallAST",
  "$ReadExternalOutputStream",
  "$ReceiverAST",
  "$Rectangle",
  "$RedirectReactor",
  "$Ref",
  "$Resolver",
  "$ReturnAST",
  "$ReturnStatAST",
  "$ReturnStatement",
  "$Rewriter",
  "$RowComposer",
  "$SchedulerAST",
  "$Scope",
  "$ScopeBuilder",
  "$Script",
  "$SelfSendAST",
  "$SendAST",
  "$SeqCltnReadStream",
  "$SeqCltnReadWriteStream",
  "$SequenceComposer",
  "$SequentialParser",
  "$Set",
  "$SetterSendAST",
  "$SideAST",
  "$SlotDeclarationMirror",
  "$SlotDefAST",
  "$SlotEntry",
  "$SnippetPresenter",
  "$SnippetSubject",
  "$SortedList",
  "$StarParser",
  "$StaticImageFragment",
  "$StaticLabelFragment",
  "$Streams",
  "$String",
  "$StringAST",
  "$StringLiteral",
  "$Subject",
  "$SuperSendAST",
  "$SymbolAST",
  "$SymbolTableEntry",
  "$SymbolicTokenParser",
  "$Syntax",
  "$TemporaryAST",
  "$TernaryOperatorExpression",
  "$TextDisplayFragment",
  "$TextEditorFragment",
  "$ThrowStatement",
  "$Timer",
  "$ToggleComposer",
  "$Token",
  "$TokenizingParser",
  "$Translator",
  "$TryStatement",
  "$TupleAST",
  "$TypeIdAST",
  "$TypePatternAST",
  "$TypedGrammar",
  "$TypedNS3Grammar",
  "$UnaryOperatorExpression",
  "$UnarySelectorParser",
  "$UnaryTypeOpAST",
  "$VarDeclAST",
  "$VariableAST",
  "$VariablePatternAST",
  "$VariableStatement",
  "$VerbatimNode",
  "$WeakArray",
  "$WeakMap",
  "$WhenReactor",
  "$WhitespaceParser",
  "$WildcardPatternAST",
  "$WrappingParser",
  "$WriteStream",
  "$Writer",
  "$$back$back",
  "$_",
  "$__duration$callback$repeating$",
  "$__owner",
  "$__owner$",
  "$_concreteEnd",
  "$_concreteEnd$",
  "$_concreteStart",
  "$_concreteStart$",
  "$_mangleSelector$",
  "$_nsTarget",
  "$_targetActor$",
  "$_targetPromise$",
  "$accept16px",
  "$accept$errorMsg$",
  "$acceptResponse",
  "$acceptResponse$",
  "$accessModifier",
  "$accessModifier$",
  "$accessorForNestedClassNamed$in$superCall$",
  "$accessorForSuperclass$inScope$",
  "$accumulateUntil$",
  "$action",
  "$actors",
  "$actualAtEnd",
  "$actualContent",
  "$actualContent$",
  "$actualNext",
  "$actualPosition",
  "$actualPosition$",
  "$actualPosition_slot",
  "$actualPosition_slot$",
  "$add$",
  "$add$beforeIndex$",
  "$add$withOccurrences$",
  "$addAll$",
  "$addCascadedSend$to$",
  "$addEventListener$with$",
  "$addFirst$",
  "$addFromSource$",
  "$addLast$",
  "$addMirror$",
  "$addReactor$",
  "$addSlot$value$",
  "$advanceAmount",
  "$advanceBuffer",
  "$advanceBufferLocation",
  "$after$do$",
  "$alert$",
  "$alien",
  "$alienate$",
  "$aliens",
  "$allButLast$",
  "$allSuperclasses",
  "$allVisits",
  "$allVisits$",
  "$alpha",
  "$appendChild$",
  "$applicationConfiguration",
  "$applicationConfiguration$",
  "$apply$",
  "$applyConstructorUsingEval$",
  "$applyForEffectTo$",
  "$applyForValueTo$",
  "$applyMixin$toSuperclass$withEnclosingObjects$",
  "$applyTo$withName$",
  "$applyToStyle$",
  "$arc$with$with$with$with$",
  "$arg",
  "$args",
  "$arguments",
  "$arguments$",
  "$arrangeForFinalization",
  "$array$",
  "$asArray",
  "$asBag",
  "$asBlock",
  "$asCSSString",
  "$asFloat",
  "$asInteger",
  "$asInternalRef$",
  "$asMutableArrayList",
  "$asOrderedCollection",
  "$asSet",
  "$asString",
  "$asSymbol",
  "$asciiValue",
  "$assert$",
  "$assert$message$",
  "$assign$toBe$",
  "$assignmentNode$",
  "$associationAt$ifAbsent$",
  "$associationsDo$",
  "$ast",
  "$ast$",
  "$asts",
  "$at$",
  "$at$depth$",
  "$at$ifAbsent$",
  "$at$ifAbsentPut$",
  "$at$ifPresent$ifAbsentPut$",
  "$at$put$",
  "$at$put$ifNew$",
  "$at$put$ifThere$",
  "$at$putUnicode$",
  "$atEnd",
  "$atEndOrPeekIs$",
  "$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$",
  "$augment$withPropertiesOf$",
  "$augmentPrototypes",
  "$backTick",
  "$backTickIdentifier",
  "$basedOn$",
  "$basicNew",
  "$basicNewMeta",
  "$beginNSComment",
  "$beginNewTranslationCycle",
  "$beginNewWriteCycleUsing$",
  "$beginPath",
  "$between$and$",
  "$binSel",
  "$binaryExpression",
  "$binaryMsg",
  "$binaryMsgPattern",
  "$binarySearchFor$between$and$toCompare$",
  "$binarySelector",
  "$binaryStream",
  "$binaryStream$",
  "$binaryTypeOpNode$",
  "$bind$",
  "$bindForwardReferences",
  "$binding",
  "$binding$",
  "$bindingRoutine",
  "$bindingRoutine$",
  "$bindings",
  "$bitAnd$",
  "$bitShift$",
  "$bitXor$",
  "$black",
  "$blank$",
  "$block",
  "$block$",
  "$block$catch$with$finally$",
  "$blockLocalReturnNode$",
  "$blockNode$",
  "$blockOrValue000",
  "$blockOrValue000$",
  "$blockParameter",
  "$blockParameters",
  "$blockReturnType",
  "$blockType",
  "$blockTypeArgList",
  "$blockTypeNode$",
  "$blue",
  "$body",
  "$body$",
  "$boolNode$",
  "$bottomColor",
  "$break$",
  "$browsing",
  "$buffer",
  "$buffer$",
  "$bufferNumElements",
  "$bufferNumElements$",
  "$bufferOrigin",
  "$bufferOrigin$",
  "$bufferSize",
  "$bufferSize$",
  "$buildScopeFor$",
  "$buildValForKey$element$",
  "$byteAt$",
  "$cachedCompilations",
  "$call$with$",
  "$canInlineSeqexps",
  "$cancel16px",
  "$cancelResponse",
  "$cancelled",
  "$cancelled$",
  "$captionBar$",
  "$captionColor",
  "$cascadeMsg",
  "$cascadedMessageExpression",
  "$cascadedSendNode$",
  "$catchBlock",
  "$catchVar",
  "$categories",
  "$categories$",
  "$category",
  "$category$",
  "$categoryNode$",
  "$changeResponse",
  "$changeResponse$",
  "$char$",
  "$charBetween$and$",
  "$charIncludingQuotesAndSpace",
  "$charNode$",
  "$character",
  "$characterConstant",
  "$checkCurrentActor",
  "$checkCycle",
  "$checkForDuplicateNames$",
  "$checkForReservedWord$",
  "$class",
  "$classBody",
  "$classCategory",
  "$classComment",
  "$classComment$",
  "$classDecl",
  "$classDeclIRFor$within$",
  "$classDeclaration",
  "$classHeader",
  "$classHeaderNode$",
  "$classInfoLine",
  "$classMethodsMetadata",
  "$classMirror",
  "$className",
  "$classNode$",
  "$classOf$",
  "$classPrefix",
  "$classPrefix$",
  "$classSide",
  "$classSide$",
  "$classSideDecl",
  "$classSubject",
  "$clone",
  "$cloneNode$",
  "$close",
  "$codeBody",
  "$codeBodyNode$",
  "$coerce$",
  "$coerce$else$",
  "$collapse",
  "$collapsed$expanded$",
  "$collapsed$expanded$initiallyExpanded$",
  "$collapsedDefinition",
  "$collapsedDefinition$expandedDefinition$initiallyExpanded$",
  "$collapsedHeadingDefinition",
  "$collapsedPresenter",
  "$collapsedPresenter$",
  "$collect$",
  "$collectUsingAdd$",
  "$collectUsingAtPut$",
  "$collection",
  "$collection$",
  "$collection$matchesElementsAt$",
  "$collections",
  "$colon",
  "$color",
  "$color$",
  "$column$",
  "$combineErrors$and$at$with$",
  "$comma",
  "$comment",
  "$compilation",
  "$compilationUnit",
  "$compileClassSource$",
  "$compileClassSource$within$",
  "$compileExpressionSource$inMixin$",
  "$compileMethodSource$within$",
  "$compileNestedClasses$within$",
  "$compileNestedClassesOf$within$",
  "$compileSource$enableIntrinsics$",
  "$compiler",
  "$compressibility",
  "$compressibility$",
  "$computeDigits$",
  "$computeDigits$radix$",
  "$computeFraction$",
  "$computeFraction$radix$",
  "$computeMethod$inScope$",
  "$computeMirrorGroup$",
  "$computeMixinFrom$",
  "$computing$",
  "$concreteEnd",
  "$concreteEnd$",
  "$concreteStart",
  "$concreteStart$",
  "$condition",
  "$condition$",
  "$conditionalNode$",
  "$conditionalSelectors",
  "$constructor",
  "$constructor$",
  "$containsNonLocalReturn",
  "$containsNonLocalReturn$",
  "$content",
  "$content$",
  "$content$offsets$",
  "$contentHolder",
  "$contentHolder$",
  "$contentSource",
  "$contents",
  "$contents$",
  "$contentsDo$",
  "$contentsRemaining",
  "$contentsWritten",
  "$contents_private",
  "$contents_private$",
  "$controlBarColor",
  "$copy",
  "$copyFrom$to$",
  "$copyMethods$",
  "$copyPositionFrom$",
  "$copyReplaceAll$with$",
  "$copyReplaceFrom$to$with$",
  "$copyUntilFirstColon$",
  "$copyWith$",
  "$copyWithSize$",
  "$core",
  "$corner",
  "$cos",
  "$counterfactualBarX",
  "$counterfactualBarX$",
  "$cr",
  "$crTab$",
  "$crToLf$",
  "$createElement$",
  "$createFarReferenceTo$in$for$",
  "$createFirstTable",
  "$createNestedClassAccessorFrom$within$",
  "$createPresenter",
  "$createTextNode$",
  "$createVisual",
  "$cull$",
  "$cumulativeMillis",
  "$cumulativeMillis$",
  "$current",
  "$currentActor",
  "$currentDepth",
  "$currentDepth$",
  "$currentHopscotchWindow",
  "$currentHopscotchWindow$",
  "$currentMixinUID",
  "$currentMixinUID$",
  "$currentMonotonicMillis",
  "$currentScope",
  "$currentSelector",
  "$currentSelector$",
  "$currentVisitSlot",
  "$currentVisitSlot$",
  "$decimalNum",
  "$declaration",
  "$defaultAcceptResponse",
  "$defaultActor",
  "$defaultCancelResponse",
  "$defaultCapacity",
  "$defaultChangeResponse",
  "$defaultConstructorCall",
  "$defaultConstructorPattern",
  "$defaultConstructorSelector",
  "$defaultExpected",
  "$defaultMedianOf$and$and$",
  "$defaultSort$to$",
  "$defaultSortBlock",
  "$defaultSuperCallAt$ending$",
  "$defaultSuperclassAndBody",
  "$deferAction$",
  "$deferredContentQueue",
  "$definingMixin",
  "$definition",
  "$definitions",
  "$definitions$",
  "$deleted",
  "$deleted$",
  "$deliverIn$",
  "$depth",
  "$depth$",
  "$depthOfEnclosingClass$",
  "$description",
  "$description$",
  "$descriptor",
  "$descriptor$",
  "$destinationActor",
  "$detailAreaRatio",
  "$detect$ifNone$",
  "$digit",
  "$digits",
  "$dirty",
  "$dirty$",
  "$disclosureClosedImage",
  "$disclosureOpenImage",
  "$disclosureTransitionImage",
  "$displayPresenter$",
  "$dnuCatcherFor$",
  "$dnuHandlers",
  "$do$",
  "$do$separatedBy$",
  "$do$timesRepeat$",
  "$doClose",
  "$doItExpression",
  "$document",
  "$doesNotUnderstand$",
  "$dot",
  "$editorX",
  "$editorX$",
  "$either$or$",
  "$elapsedMilliseconds",
  "$elasticity$",
  "$elementFor$",
  "$elementForCopy$",
  "$elements",
  "$elements$",
  "$elements_",
  "$else",
  "$elseStatement",
  "$embeddedWindowMap",
  "$empty",
  "$emptyBody",
  "$enableIntrinsics",
  "$enableIntrinsics$",
  "$enclosingClass",
  "$enclosingClass$",
  "$enclosingClassSubjects",
  "$enclosingInfoLine",
  "$enclosingMixin",
  "$enclosingObject",
  "$enclosingObjectName",
  "$enclosingObjectNode$",
  "$enclosingObjects",
  "$encodeSource$",
  "$end",
  "$end$",
  "$endGap",
  "$endNSComment",
  "$enqueueMessage$",
  "$ensure$",
  "$enterEditState",
  "$enterPresenter$",
  "$enterSubject$",
  "$enterSubject$fromSnippet$",
  "$eoi",
  "$equalSign",
  "$equalsBag$",
  "$erase",
  "$eraseFuture",
  "$erasePast",
  "$errMsg",
  "$errMsg$",
  "$error$",
  "$errorMessage",
  "$evaluate$",
  "$evaluate$ifCompilerError$ifError$",
  "$evaluateSubject$",
  "$eventualSend$arguments$",
  "$eventualSendOperator",
  "$eventualSendTo$selector$arguments$",
  "$expand",
  "$expanded$collapsed$",
  "$expandedDefinition",
  "$expandedHeadingDefinition",
  "$expandedPresenter",
  "$expandedPresenter$",
  "$expansibility",
  "$expansibility$",
  "$expatriate$",
  "$expatriateBlock$",
  "$explicitInheritanceListAndOrBody",
  "$exponent",
  "$expression",
  "$expression$",
  "$expression$arguments$",
  "$expression$then$else$",
  "$expressionS",
  "$extendedDigits",
  "$extendedFraction",
  "$extent",
  "$externalFlush",
  "$externalRef",
  "$factory",
  "$factoryName$",
  "$fail",
  "$failures",
  "$fill",
  "$fillBuffer",
  "$fillText$with$with$",
  "$filler",
  "$finalBindForwardReferences",
  "$finallyBlock",
  "$find$in$",
  "$findMirrorNamed$",
  "$first",
  "$firstIndex",
  "$firstTableSize",
  "$flexDirection",
  "$floor",
  "$flush",
  "$flushIfFail$",
  "$for",
  "$for$",
  "$for$isMeta$",
  "$for$start$end$",
  "$for$while$step$do$",
  "$forClassDeclaration$ir$em$",
  "$forDeclaration$atDepth$",
  "$forSymbol$",
  "$forValue",
  "$formals",
  "$formals$",
  "$formals$return$",
  "$forwardReferenceTable",
  "$forwardee",
  "$forwardee$",
  "$fraction",
  "$fragments",
  "$from$to$",
  "$from$to$by$",
  "$from$to$by$do$",
  "$from$to$do$",
  "$from$to$resolver$",
  "$fromCharCode$",
  "$fromIR$forExistingMixin$within$",
  "$fromIR$within$",
  "$fromRune$",
  "$fromRunes$",
  "$fromRuntimeMixin$",
  "$fromUnitSource$",
  "$fulfill$",
  "$fullyQualifiedNameToSimple$",
  "$fullyQualifySimpleName$with$",
  "$function",
  "$function$arguments$",
  "$function$of$body$",
  "$functionOf$body$",
  "$furtherStatements",
  "$future",
  "$future$",
  "$futureFor$",
  "$generateSlotAccessorsFor$",
  "$generateSlotGetterFor$in$",
  "$generateSlotInitializerFor$in$",
  "$generateSlotSetterFor$in$",
  "$generateSourceFor$on$",
  "$generation",
  "$generic",
  "$generic$",
  "$genericInvocationNode$",
  "$getAttribute$",
  "$getClass",
  "$getClassIfFail$",
  "$getContext$",
  "$getElementsByClassName$",
  "$getSlot$",
  "$getSlot$ifFail$",
  "$global",
  "$goBack",
  "$goForward",
  "$goToSelf",
  "$goodBufferOriginForPosition$",
  "$grammar",
  "$graphics",
  "$green",
  "$group$",
  "$group$within$ir$",
  "$growIfNeeded",
  "$growTable",
  "$h$s$v$",
  "$halt",
  "$hasChildNodes",
  "$hasVisual",
  "$hash",
  "$hashAt$",
  "$hashFor$",
  "$hat",
  "$havePeeked",
  "$havePeeked$",
  "$havePeeked_0",
  "$havePeeked_0$",
  "$header",
  "$header$",
  "$headerSource",
  "$headerSource$",
  "$headingDefinition",
  "$hereNode",
  "$hereSendFrom$",
  "$hereSendFromMsg$",
  "$hereSetterSendFromMsg$",
  "$history",
  "$holder$",
  "$hopscotch",
  "$id",
  "$idFor$",
  "$ident$",
  "$identifier",
  "$identityHash",
  "$ids",
  "$if$is$then$",
  "$if$is$then$else$",
  "$if$then$",
  "$if$then$else$",
  "$ifFalse$",
  "$ifFalse$ifTrue$",
  "$ifNil$",
  "$ifNil$ifNotNil$",
  "$ifNotNil$",
  "$ifTrue",
  "$ifTrue$",
  "$ifTrue$ifFalse$",
  "$image",
  "$image$",
  "$image$action$",
  "$immediateSend$",
  "$implicitReceiverNode",
  "$implicitReceiverSendNode$",
  "$inClosure",
  "$inClosure$",
  "$inClosureDuring$",
  "$inIndentedBlock$",
  "$include$",
  "$include$ifNew$",
  "$includeAll$",
  "$includes$",
  "$includesIndex$",
  "$includesKey$",
  "$increment",
  "$incrementExpression",
  "$incrementalScopeFor$",
  "$indentCr",
  "$indexFor$",
  "$indexOf$",
  "$indexOf$ifAbsent$",
  "$indexOf$tableMask$",
  "$indexOfSubCollection$startingAt$ifAbsent$",
  "$indicesOfSubCollection$",
  "$indicesOfSubCollection$startingAt$",
  "$inferenceClause",
  "$inheritanceChain",
  "$inheritanceChain$",
  "$inheritanceClause",
  "$inheritanceListAndOrBody",
  "$inheritedTypeOf",
  "$initBinaryStream$",
  "$initBuffer",
  "$initBuffer$",
  "$initCapacity$",
  "$initCollection$",
  "$initDescriptor$",
  "$initExpression",
  "$initExpression$test$increment$body$",
  "$initExprs",
  "$initExprs$",
  "$init$AST$",
  "$init$ASTCopier$",
  "$init$ASTModule$",
  "$init$ASTTool$",
  "$init$Actors$",
  "$init$Aliens$",
  "$init$AssignmentAST$",
  "$init$BasicIExStream$",
  "$init$BasicOutputReadStream$",
  "$init$BinaryTypeOpAST$",
  "$init$BlockAST$",
  "$init$BlockTypeAST$",
  "$init$BrowsingForHTML$",
  "$init$CascadedSendAST$",
  "$init$CategoryAST$",
  "$init$CharAST$",
  "$init$CharacterConverterWithOutput$",
  "$init$CharacterIStream$",
  "$init$CharacterOStream$",
  "$init$CharacterReadStream$",
  "$init$CharacterSequenceReadStream$",
  "$init$CharacterSequenceReadWriteStream$",
  "$init$CharacterWriteStream$",
  "$init$ClassBodyAST$",
  "$init$ClassDeclarationAST$",
  "$init$ClassDeclarationMirror$",
  "$init$ClassHeaderAST$",
  "$init$ClassPrefixAST$",
  "$init$CodeBodyAST$",
  "$init$CollectingCommentParser$",
  "$init$Collection$",
  "$init$Collections$",
  "$init$Color$",
  "$init$CombinatorialParser$",
  "$init$CombinatorialParsing$",
  "$init$Compilation$",
  "$init$Context$",
  "$init$Dictionary$",
  "$init$EIOStream$",
  "$init$EIStream$",
  "$init$EOStream$",
  "$init$EmbeddedHopscotchWindow$",
  "$init$ExecutableGrammar$",
  "$init$Gradient$",
  "$init$Graphics$",
  "$init$Hopscotch$",
  "$init$IdentityDictionary$",
  "$init$ImmutableMirrorGroup$",
  "$init$ImmutableSlotDefAST$",
  "$init$InitializerAST$",
  "$init$JavascriptGeneration$",
  "$init$JavascriptWriter$",
  "$init$Kernel$",
  "$init$KeywordPatternAST$",
  "$init$KeywordPatternPairAST$",
  "$init$List$",
  "$init$ListReadStream$",
  "$init$ListReadWriteStream$",
  "$init$LiteralPatternAST$",
  "$init$Map$",
  "$init$MessageAST$",
  "$init$MessagePatternAST$",
  "$init$MethodAST$",
  "$init$MirrorGroups$",
  "$init$Mirrors$",
  "$init$Mixin$",
  "$init$MixinApplicationAST$",
  "$init$MixinApplicationClassAST$",
  "$init$MixinBuilder$",
  "$init$MutableAddableList$",
  "$init$MutableSlotDefAST$",
  "$init$MutableString$",
  "$init$NSSideAST$",
  "$init$NewspeakASTs$",
  "$init$NewspeakGrammar$",
  "$init$NewspeakParsing$",
  "$init$NormalSendAST$",
  "$init$NumberAST$",
  "$init$ObjectMirror$",
  "$init$ObjectSubject$",
  "$init$OrderedCollection$",
  "$init$OutputInputConverter$",
  "$init$ParameterizedTypeAST$",
  "$init$Parser$",
  "$init$ParserError$",
  "$init$PredicateTokenParser$",
  "$init$Presenter$",
  "$init$Promise$",
  "$init$ReadExternalOutputStream$",
  "$init$ReadStream$",
  "$init$ReturnStatAST$",
  "$init$SendAST$",
  "$init$Set$",
  "$init$SetterSendAST$",
  "$init$SideAST$",
  "$init$SortedCollection$",
  "$init$SortedList$",
  "$init$Streams$",
  "$init$String$",
  "$init$StringAST$",
  "$init$Subject$",
  "$init$SymbolAST$",
  "$init$TextEditorFragment$",
  "$init$Timer$",
  "$init$Token$",
  "$init$TupleAST$",
  "$init$TypeIdAST$",
  "$init$TypedGrammar$",
  "$init$UnaryTypeOpAST$",
  "$init$VarDeclAST$",
  "$init$VariableAST$",
  "$init$VariablePatternAST$",
  "$init$WeakArray$",
  "$init$WeakMap$",
  "$init$WildcardPatternAST$",
  "$init$WriteStream$",
  "$init$__owner$",
  "$init$_nsTarget$",
  "$init$accept16px$",
  "$init$accessModifier$",
  "$init$action$",
  "$init$actors$",
  "$init$actualPosition_slot$",
  "$init$alien$",
  "$init$aliens$",
  "$init$alpha$",
  "$init$arg$",
  "$init$arguments$",
  "$init$ast$",
  "$init$asts$",
  "$init$backTick$",
  "$init$backTickIdentifier$",
  "$init$beginNSComment$",
  "$init$binSel$",
  "$init$binaryExpression$",
  "$init$binaryMsg$",
  "$init$binaryMsgPattern$",
  "$init$binarySelector$",
  "$init$bindings$",
  "$init$block$",
  "$init$blockOrValue000$",
  "$init$blockParameter$",
  "$init$blockParameters$",
  "$init$blockReturnType$",
  "$init$blockType$",
  "$init$blockTypeArgList$",
  "$init$blue$",
  "$init$body$",
  "$init$bottomColor$",
  "$init$browsing$",
  "$init$cachedCompilations$",
  "$init$cancel16px$",
  "$init$cancelled$",
  "$init$captionColor$",
  "$init$cascadeMsg$",
  "$init$cascadedMessageExpression$",
  "$init$catchBlock$",
  "$init$catchVar$",
  "$init$category$",
  "$init$charIncludingQuotesAndSpace$",
  "$init$character$",
  "$init$characterConstant$",
  "$init$classBody$",
  "$init$classCategory$",
  "$init$classComment$",
  "$init$classDecl$",
  "$init$classDeclaration$",
  "$init$classHeader$",
  "$init$classPrefix$",
  "$init$classSide$",
  "$init$classSideDecl$",
  "$init$codeBody$",
  "$init$collapsedDefinition$",
  "$init$collections$",
  "$init$colon$",
  "$init$color$",
  "$init$comma$",
  "$init$comment$",
  "$init$compilation$",
  "$init$compilationUnit$",
  "$init$compiler$",
  "$init$compressibility$",
  "$init$condition$",
  "$init$constructor$",
  "$init$content$",
  "$init$contentHolder$",
  "$init$contentSource$",
  "$init$contents$",
  "$init$contents_private$",
  "$init$core$",
  "$init$corner$",
  "$init$cumulativeMillis$",
  "$init$currentDepth$",
  "$init$decimalNum$",
  "$init$declaration$",
  "$init$defaultActor$",
  "$init$defaultSuperclassAndBody$",
  "$init$deferredContentQueue$",
  "$init$definingMixin$",
  "$init$definingMixinX$",
  "$init$definitions$",
  "$init$depth$",
  "$init$description$",
  "$init$destinationActor$",
  "$init$detailAreaRatio$",
  "$init$digit$",
  "$init$digits$",
  "$init$dirty$",
  "$init$disclosureClosedImage$",
  "$init$disclosureOpenImage$",
  "$init$disclosureTransitionImage$",
  "$init$doItExpression$",
  "$init$document$",
  "$init$dollar$",
  "$init$dot$",
  "$init$elements_$",
  "$init$else$",
  "$init$elseStatement$",
  "$init$embeddedWindowMap$",
  "$init$enableIntrinsics$",
  "$init$enclosingClass$",
  "$init$enclosingMixin$",
  "$init$end$",
  "$init$endNSComment$",
  "$init$equalSign$",
  "$init$errorMessage$",
  "$init$eventualSendOperator$",
  "$init$expandedDefinition$",
  "$init$expansibility$",
  "$init$explicitInheritanceListAndOrBody$",
  "$init$exponent$",
  "$init$expression$",
  "$init$expressionS$",
  "$init$extendedDigits$",
  "$init$extendedFraction$",
  "$init$factory$",
  "$init$failures$",
  "$init$finallyBlock$",
  "$init$for$",
  "$init$formals$",
  "$init$forwardReferenceTable$",
  "$init$fraction$",
  "$init$fragments$",
  "$init$function$",
  "$init$furtherStatements$",
  "$init$generation$",
  "$init$generic$",
  "$init$global$",
  "$init$grammar$",
  "$init$graphics$",
  "$init$green$",
  "$init$hat$",
  "$init$havePeeked_0$",
  "$init$history$",
  "$init$hopscotch$",
  "$init$id$",
  "$init$identifier$",
  "$init$ids$",
  "$init$ifTrue$",
  "$init$image$",
  "$init$inClosure$",
  "$init$increment$",
  "$init$incrementExpression$",
  "$init$inferenceClause$",
  "$init$inheritanceChain$",
  "$init$inheritanceClause$",
  "$init$inheritanceListAndOrBody$",
  "$init$inheritedTypeOf$",
  "$init$initExpression$",
  "$init$initExprs$",
  "$init$initialContent$",
  "$init$initializationExpressions$",
  "$init$initializer$",
  "$init$inlinableNumericOperators$",
  "$init$inlinableOperators$",
  "$init$inlineOperators$",
  "$init$instanceInitializer$",
  "$init$instanceSide$",
  "$init$internalActor$",
  "$init$internalRef$",
  "$init$internalRefs$",
  "$init$internalResolver$",
  "$init$inverseMixinOperator$",
  "$init$is$",
  "$init$isEventual$",
  "$init$isExpanded$",
  "$init$isFactory$",
  "$init$isInEditState$",
  "$init$isMeta$",
  "$init$isMutable$",
  "$init$isPostfix$",
  "$init$isSeq$",
  "$init$isSynthetic$",
  "$init$javascriptGeneration$",
  "$init$js$",
  "$init$jsWriter$",
  "$init$kernel$",
  "$init$key$",
  "$init$keyword$",
  "$init$keywordAndLiteral$",
  "$init$keywordExpression$",
  "$init$keywordHereSend$",
  "$init$keywordMessages$",
  "$init$keywordMsg$",
  "$init$keywordMsgPattern$",
  "$init$keywordPattern$",
  "$init$kw$",
  "$init$kwPatternPair$",
  "$init$kwPatternValue$",
  "$init$kwds$",
  "$init$label$",
  "$init$langleBracket$",
  "$init$languageId$",
  "$init$lbracket$",
  "$init$lcurly$",
  "$init$left$",
  "$init$leftHandSide$",
  "$init$letter$",
  "$init$literal$",
  "$init$literalMessage$",
  "$init$literalMessageComment$",
  "$init$literalPattern$",
  "$init$localNavigator$",
  "$init$lparen$",
  "$init$mangledSelector$",
  "$init$map$",
  "$init$message$",
  "$init$messagePattern$",
  "$init$methodDecl$",
  "$init$methods$",
  "$init$mirrors$",
  "$init$mixinAppSuffix$",
  "$init$mixinApplication$",
  "$init$mixinIR$",
  "$init$mixinOperator$",
  "$init$mixinSpec$",
  "$init$mixins$",
  "$init$model$",
  "$init$msgCascade$",
  "$init$msgSelector$",
  "$init$mssg$",
  "$init$name$",
  "$init$nameS$",
  "$init$namer$",
  "$init$names$",
  "$init$namespace$",
  "$init$navigator$",
  "$init$nestedClasses$",
  "$init$nestedPatternLiteral$",
  "$init$newBlockArgType$",
  "$init$newBlockReturnType$",
  "$init$newBlockType$",
  "$init$newChar$",
  "$init$newNonEmptyBlockArgList$",
  "$init$nextId$",
  "$init$nonEmptyBlockTypeArgList$",
  "$init$nonEmptyMessages$",
  "$init$nontrivialBinaryMessages$",
  "$init$nontrivialUnaryMessages$",
  "$init$num$",
  "$init$number$",
  "$init$of$",
  "$init$offsets$",
  "$init$oldChar$",
  "$init$onError$",
  "$init$onValue$",
  "$init$operand$",
  "$init$operatorName$",
  "$init$optionalFactorySection$",
  "$init$origin$",
  "$init$outerReceiver$",
  "$init$p$",
  "$init$parameters$",
  "$init$parenthesizedExpression$",
  "$init$parenthesizedTypeExpression$",
  "$init$parser$",
  "$init$parserLib$",
  "$init$parsing$",
  "$init$pattern$",
  "$init$patternLiteral$",
  "$init$platformMirror$",
  "$init$platformNamespace$",
  "$init$position$",
  "$init$pound$",
  "$init$primary$",
  "$init$problem$",
  "$init$prologue$",
  "$init$promise$",
  "$init$property$",
  "$init$protectedBlock$",
  "$init$prvtClassDeclIR$",
  "$init$prvtExistingMixin$",
  "$init$q$",
  "$init$radix$",
  "$init$radixNum$",
  "$init$rangleBracket$",
  "$init$rbracket$",
  "$init$rcurly$",
  "$init$receiver$",
  "$init$receiverType$",
  "$init$red$",
  "$init$reflectee$",
  "$init$reflecteeX$",
  "$init$remote$",
  "$init$resolver$",
  "$init$resources$",
  "$init$resultHolder$",
  "$init$return$",
  "$init$returnStatement$",
  "$init$returnType$",
  "$init$returnTypeInferenceClause$",
  "$init$rewriter$",
  "$init$right$",
  "$init$rightHandSide$",
  "$init$rparen$",
  "$init$scopeMap$",
  "$init$scopeStack$",
  "$init$selector$",
  "$init$selfMirror$",
  "$init$semicolon$",
  "$init$sendExpression$",
  "$init$sentSelectors$",
  "$init$seqSlotDecls$",
  "$init$setterKeyword$",
  "$init$setterKw$",
  "$init$sideDecl$",
  "$init$simSlotDecls$",
  "$init$size$",
  "$init$slash$",
  "$init$slotDecl$",
  "$init$slotDecls$",
  "$init$slotDef$",
  "$init$slotDefs$",
  "$init$slotName$",
  "$init$slotNames$",
  "$init$slotValues$",
  "$init$slots$",
  "$init$source$",
  "$init$sourceActor$",
  "$init$sourceIndex$",
  "$init$sourcesList$",
  "$init$specialCharacter$",
  "$init$specialCharacterManglings$",
  "$init$start$",
  "$init$state000$",
  "$init$state$",
  "$init$statementSequence$",
  "$init$statements$",
  "$init$statementsS$",
  "$init$statements_$",
  "$init$stop$",
  "$init$str$",
  "$init$streams$",
  "$init$string$",
  "$init$stringTranslation$",
  "$init$subject$",
  "$init$subparser$",
  "$init$subparsers$",
  "$init$subtypeOf$",
  "$init$superConstructorCall$",
  "$init$superclassCall$",
  "$init$superclassClause$",
  "$init$superclassName$",
  "$init$superclassPrefix$",
  "$init$supportDoesNotUnderstand$",
  "$init$sym$",
  "$init$symbol$",
  "$init$symbolConstant$",
  "$init$syntax$",
  "$init$target$",
  "$init$targetsActor$",
  "$init$temporaries$",
  "$init$testExpression$",
  "$init$text$",
  "$init$textX$",
  "$init$then$",
  "$init$thenStatement$",
  "$init$topColor$",
  "$init$toplevelClass$",
  "$init$transientTestBlock$",
  "$init$translator$",
  "$init$tuple$",
  "$init$tupleType$",
  "$init$type$",
  "$init$typeArg$",
  "$init$typeArgInferenceClause$",
  "$init$typeArguments$",
  "$init$typeBoundQualifier$",
  "$init$typeExpr$",
  "$init$typeFactor$",
  "$init$typeFormal$",
  "$init$typeParamConstraint$",
  "$init$typePattern$",
  "$init$typePrimary$",
  "$init$typeTerm$",
  "$init$unaryExpression$",
  "$init$unaryMsg$",
  "$init$unaryMsgPattern$",
  "$init$unarySelector$",
  "$init$uppercaseLetter$",
  "$init$used$",
  "$init$value$",
  "$init$valueExpected$",
  "$init$valueS$",
  "$init$varName$",
  "$init$variable$",
  "$init$variablePattern$",
  "$init$vbar$",
  "$init$vmmirror$",
  "$init$where$",
  "$init$whitespace$",
  "$init$wildcardPattern$",
  "$init$window$",
  "$init$x$",
  "$init$y$",
  "$initialContent",
  "$initialContent$contentSource$",
  "$initializationExpressions",
  "$initializer",
  "$initializer$",
  "$initializer$instanceSide$classSide$",
  "$initializerFor$",
  "$initializerSelectorForSlot$",
  "$inject$into$",
  "$inlinableConditionalNode$",
  "$inlinableNumericOperators",
  "$inlinableOperators",
  "$inline$as$selector$rewriteArgsAs$",
  "$inlineOperators",
  "$inlinedOperatorNode$",
  "$input",
  "$input$",
  "$inspectSelf",
  "$install",
  "$installCollapsedPresenter",
  "$installContentVisual$",
  "$installExpandedPresenter",
  "$instanceInitializer",
  "$instanceSide",
  "$instanceSide$",
  "$instance$initializer",
  "$internalActor",
  "$internalIndexIsValid$",
  "$internalRangeCheck$",
  "$internalRef",
  "$internalRefs",
  "$internalResolve$",
  "$internalResolver",
  "$into$openSubject$",
  "$inverseMixinOperator",
  "$invoke",
  "$invokeMeta",
  "$ir",
  "$ir$",
  "$is",
  "$isAST",
  "$isAlien",
  "$isArray",
  "$isBehavior",
  "$isBlock",
  "$isBlockLocalReturnAST",
  "$isBlockNode",
  "$isCascadedSendNode",
  "$isCharacter",
  "$isClassBinding",
  "$isCodeBodyNode",
  "$isCollection",
  "$isDebugMappedLocalEntry",
  "$isEmpty",
  "$isEventual",
  "$isEventual$",
  "$isExpanded",
  "$isExpanded$",
  "$isExpat",
  "$isExpressionNode",
  "$isFactory$",
  "$isFunctionExpression",
  "$isFuture",
  "$isFutureEmpty",
  "$isImplicitReceiverNode$",
  "$isImplicitReceiverSendNode",
  "$isInEditState",
  "$isInEditState$",
  "$isInlinableBooleanOperator$",
  "$isInlinableNumericOperator$",
  "$isInlinableOperator$",
  "$isInlineableConditional$",
  "$isInlineableLoop$",
  "$isInteger",
  "$isInternalRef",
  "$isJsNode",
  "$isKindOfBag",
  "$isKindOfCollection",
  "$isKindOfCombinatorialParser",
  "$isLegalIdentifier$",
  "$isLetter",
  "$isLiteralNode",
  "$isLocalBinding",
  "$isMessageNode",
  "$isMessagePatternNode",
  "$isMeta",
  "$isMethodBinding",
  "$isMixinMirror",
  "$isMutable",
  "$isNil",
  "$isNormalSendNode",
  "$isNumber",
  "$isNumberLiteral",
  "$isNumberNode",
  "$isOperatorExpression",
  "$isOuterNode$",
  "$isPastEmpty",
  "$isPoint",
  "$isPostfix",
  "$isProtected",
  "$isPseudoVariableNode$",
  "$isPublic",
  "$isRectangle",
  "$isRef$",
  "$isRemovableBlock$withArgs$",
  "$isReservedWord$",
  "$isReturnStatNode",
  "$isSelfNode$",
  "$isSendNode",
  "$isSeq",
  "$isSeq$",
  "$isSlotBinding",
  "$isSortedBy$",
  "$isString",
  "$isStringLiteral",
  "$isSuperNode$",
  "$isSymbolNode",
  "$isSynthetic",
  "$isSynthetic$",
  "$isTemporaryAST",
  "$isTransient$",
  "$isTupleNode",
  "$isUndefined",
  "$isValueObject$",
  "$isVarDeclNode",
  "$isVariableNode",
  "$isWhileTrue",
  "$isWhileTrue$",
  "$javascriptGeneration",
  "$js",
  "$kernel",
  "$key",
  "$key$matches$",
  "$key$value$",
  "$keyAtValue$",
  "$keyFor$",
  "$keys",
  "$keysAndValuesDo$",
  "$keysDo$",
  "$keyword",
  "$keyword$",
  "$keywordAndLiteral",
  "$keywordExpression",
  "$keywordHereSend",
  "$keywordMessages",
  "$keywordMsg",
  "$keywordMsgPattern",
  "$keywordPattern",
  "$keywordPatternNode$",
  "$keywords$",
  "$kw",
  "$kwPatternPair",
  "$kwPatternValue",
  "$kwds",
  "$label",
  "$label$",
  "$label$action$",
  "$langleBracket",
  "$languageId",
  "$last",
  "$lastIndex",
  "$lastIndex$",
  "$lastIndexOf$",
  "$lbracket",
  "$lcurly",
  "$leaveEditState",
  "$left",
  "$left$",
  "$leftHandSide",
  "$leftHandSide$rightHandSide$",
  "$leftOperand",
  "$leftOperand$",
  "$letter",
  "$lf",
  "$lineTo$with$",
  "$link$action$",
  "$listenForBackButton",
  "$literal",
  "$literal$",
  "$literalMessage",
  "$literalMessageComment",
  "$literalMessages",
  "$literalMessages$",
  "$literalPattern",
  "$literalPatternNode$",
  "$localNavigator",
  "$localReadNode$",
  "$localWriteNode$",
  "$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$",
  "$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$",
  "$loopNode$",
  "$lparen",
  "$main",
  "$makeMixinNamed$factoryMsg$inheriting$body$",
  "$makeSpace$beforeIndex$",
  "$makeSpaceAtStart$",
  "$mangle$",
  "$mangleLocal$",
  "$mangleProtected$",
  "$manglePublic$",
  "$mangleSelector$",
  "$mangleSlot$",
  "$mangleSynthetic$",
  "$mangledSelector",
  "$map",
  "$markDeleted$",
  "$max$",
  "$maxPrintElements",
  "$maybeCaptureReceiver",
  "$medianOf$and$and$using$",
  "$mediumBlank",
  "$message",
  "$message$",
  "$message$position$",
  "$messageNode$",
  "$messagePattern",
  "$messagePatternNode$",
  "$messageText$",
  "$method",
  "$method$",
  "$methodDecl",
  "$methodIsPrivate",
  "$methodIsPrivate$",
  "$methodLocalReturnNode$",
  "$methodNode$",
  "$methods",
  "$methods$",
  "$methodsMetadata",
  "$min$",
  "$minTableSize",
  "$minTableSizeForCapacity$",
  "$minorClassHeadingBlock$",
  "$minorClassHeadingColor",
  "$mirrors",
  "$mirrors$",
  "$mixin",
  "$mixinAppSuffix",
  "$mixinApplication",
  "$mixinApplication$",
  "$mixinApplicationClass$",
  "$mixinApply$",
  "$mixinExpr",
  "$mixinExpr$",
  "$mixinIR",
  "$mixinNameOfClassNamed$",
  "$mixinSlotNameFor$",
  "$mixinSpec",
  "$mixins",
  "$model",
  "$moveTo$with$",
  "$msg",
  "$msgCascade",
  "$msgSelector",
  "$mssg",
  "$name",
  "$name$",
  "$name$constructor$superclassName$superclassCall$superConstructorCall$",
  "$name$initializer$",
  "$name$parameters$body$",
  "$name$type$",
  "$nameS",
  "$named$",
  "$named$accessModifier$function$source$",
  "$named$factoryMsg$inheriting$",
  "$named$factoryMsg$inheriting$body$",
  "$named$in$source$",
  "$named$mutable$accessModifier$",
  "$namer",
  "$names",
  "$namespace",
  "$navigationHistory",
  "$navigator",
  "$needSpaceAtEnd$",
  "$needSpaceAtStart$",
  "$nestScope$",
  "$nestedClass$",
  "$nestedClassDecl",
  "$nestedClasses",
  "$nestedClasses$",
  "$nestedClassesMetadata",
  "$nestedIn$atLevel$",
  "$nestedMixinWrapperFor$in$",
  "$nestedPatternLiteral",
  "$new",
  "$new$",
  "$new$sortBlock$",
  "$new$with$",
  "$new$withAll$",
  "$newBlockArgType",
  "$newBlockReturnType",
  "$newBlockType",
  "$newBlockTypeArgList",
  "$newBuildStream",
  "$newChar",
  "$newCollectionOfSize$",
  "$newCopyOfSize$thatCanAlsoHoldElementsOf$",
  "$newForCollectUsingAdd$",
  "$newForCollectUsingAtPut$",
  "$newNonEmptyBlockArgList",
  "$newTableWithSize$",
  "$next",
  "$next$",
  "$nextBufferPosition",
  "$nextBufferPosition$",
  "$nextDeferredAction",
  "$nextFrameDo$",
  "$nextFromPeek",
  "$nextId",
  "$nextId$",
  "$nextIfAbsent$",
  "$nextPut$",
  "$nextPutAll$",
  "$nilNode$",
  "$nlrName",
  "$nlrValuePropertyName",
  "$noPeekVal",
  "$nonEmptyBlockTypeArgList",
  "$nonEmptyMessages",
  "$nonLocalReturnNode$",
  "$nontrivialBinaryMessages",
  "$nontrivialUnaryMessages",
  "$normalSendNode$",
  "$not",
  "$notNil",
  "$nothing",
  "$num",
  "$numArgs",
  "$numCharsUpToAscii$",
  "$number",
  "$numberNode$",
  "$objToIncludeFor$withExisting$",
  "$objectDetails",
  "$objectMirror",
  "$occupied",
  "$occurrencesOf$",
  "$odd",
  "$of",
  "$of$",
  "$offsetOfEnclosingObjectForClass$",
  "$offsetOfImplicitReceiverTarget$",
  "$offsets",
  "$oldChar",
  "$on$",
  "$on$do$",
  "$on$numElements$",
  "$onError",
  "$onModel$",
  "$onSubject$",
  "$onValue",
  "$onValue$onError$resolver$",
  "$operand",
  "$operand$",
  "$operator",
  "$operator$",
  "$operator$postfix$on$",
  "$operator$with$and$",
  "$operatorName",
  "$opt",
  "$optionalFactorySection",
  "$ordinarySendNode$",
  "$origin",
  "$origin$corner$",
  "$origin$extent$",
  "$out",
  "$outerReceiver",
  "$outerSendNode$",
  "$output",
  "$output$",
  "$over$",
  "$p",
  "$p$",
  "$padded$with$",
  "$parameterDeclNode$",
  "$parameters",
  "$parameters$",
  "$parameters$temporaries$statements$",
  "$parent",
  "$parent$",
  "$parenthesizedExpression",
  "$parenthesizedTypeExpression",
  "$parse$",
  "$parse$ifError$",
  "$parse$ifErrorNoContext$",
  "$parse$inContext$ifError$",
  "$parseString$",
  "$parser",
  "$parser$",
  "$parserLib",
  "$parserToForwardTo",
  "$parsing",
  "$pass",
  "$past",
  "$past$",
  "$pattern",
  "$pattern$",
  "$pattern$body$accessModifier$",
  "$patternLiteral",
  "$patterns$",
  "$peek",
  "$peekIfAbsent$",
  "$peekVal",
  "$peekVal$",
  "$perform$withArguments$",
  "$platform",
  "$platform$",
  "$platformMirror",
  "$platformNamespace",
  "$plus",
  "$plusSeparatedBy$",
  "$plusSeparatedOrTerminatedBy$",
  "$popScope",
  "$position",
  "$position$",
  "$postCopy",
  "$postedTo$",
  "$pound",
  "$predicate",
  "$predicate$",
  "$prefix$mixin$",
  "$prefixOperator$on$",
  "$presenter",
  "$presenterFor$",
  "$presenterX",
  "$presenterX$",
  "$previousSend",
  "$previousSend$",
  "$primary",
  "$primary$property$",
  "$print$",
  "$printCharacter",
  "$printElementsDo$",
  "$printOn$",
  "$printString",
  "$privateDnu",
  "$problem",
  "$problem$__owner$",
  "$process",
  "$process$",
  "$processClassPresenters",
  "$processClassSideOf$ofMixin$",
  "$processEvaluators",
  "$processEventualSend$",
  "$processFactoryFor$in$",
  "$processImplicitReceiverSend$",
  "$processImplicitReceiverSend$binding$",
  "$processInitializerFor$in$",
  "$processInlineableConditional$",
  "$processInlineableLoop$",
  "$processInstanceSideOf$ofMixin$",
  "$processIntrinsic$",
  "$processIntrinsicArg$",
  "$processLexicalSend$to$binding$",
  "$processLocalAccess$of$",
  "$processLocalRead$from$",
  "$processLocalWrite$to$",
  "$processMappedVariable$decl$",
  "$processMethod$inScope$in$",
  "$processMinibrowsers",
  "$processOuterExpression$",
  "$processOuterReceiverAtDepth$",
  "$processOuterSend$",
  "$processSelfSend$",
  "$processSetterSend$binding$",
  "$processSide$ofMixin$",
  "$processSuperSend$",
  "$prologue",
  "$promise",
  "$property",
  "$propertyCallNode$",
  "$propertyOf$at$",
  "$propertyOf$atPath$",
  "$protectedBlock",
  "$protectedMessage$",
  "$prvtClassDeclIR",
  "$prvtExistingMixin",
  "$prvtExistingMixin$",
  "$pseudoVariableNode$",
  "$publicMessage$",
  "$pushScope$",
  "$pushScopeForNode$",
  "$pushState$title$",
  "$q",
  "$qualifiedName",
  "$qualifiedName$",
  "$quo$",
  "$r$g$b$",
  "$radix",
  "$radixNum",
  "$rangleBracket",
  "$rbracket",
  "$rcurly",
  "$reactBroken$",
  "$reactMoreResolved$",
  "$reactResolved$",
  "$reactors",
  "$reactors$",
  "$readAt$ifFail$",
  "$readWriteStream",
  "$receiver",
  "$receiver$",
  "$receiver$message$",
  "$receiver$selector$arguments$resolver$",
  "$receiverNode$",
  "$receiverType",
  "$recordFailure$",
  "$rect$with$with$with$",
  "$red",
  "$redirectFrom$to$resolving$",
  "$reduce$ifEmpty$",
  "$refPrintOn$",
  "$reflectee",
  "$reflecteeX",
  "$reflecting$",
  "$reflecting$in$source$",
  "$refresh",
  "$reject$",
  "$rem$",
  "$remove$",
  "$remove$at$",
  "$remove$ifAbsent$",
  "$remove$withOccurrences$ifAbsent$",
  "$removeAllSuchThat$",
  "$removeAt$",
  "$removeChild$",
  "$removeEvery$startingAt$",
  "$removeFirst",
  "$removeKey$",
  "$removeKey$ifAbsent$",
  "$removeLast",
  "$removeMirror$",
  "$removeMirrorNamed$",
  "$repeat$",
  "$replace$with$",
  "$replaceAll$with$",
  "$replaceChild$from$",
  "$replaceChild$with$",
  "$replaceFrom$to$with$",
  "$replaceFrom$to$with$startingAt$",
  "$repositioningAt$",
  "$requestAnimationFrame$",
  "$resolution",
  "$resolution$",
  "$resolve",
  "$resolver",
  "$resources",
  "$respondToAccept",
  "$respondToCancel",
  "$respondToChange",
  "$resultHolder",
  "$resultHolder$",
  "$return",
  "$return$",
  "$returnStatNode$",
  "$returnStatement",
  "$returnType",
  "$returnType$",
  "$returnTypeInferenceClause",
  "$reverse",
  "$rewriteBlockNode$forValue$",
  "$rewriteInlinedBlockNode$forValue$",
  "$rewriter",
  "$right",
  "$right$",
  "$rightHandSide",
  "$rightOperand",
  "$rightOperand$",
  "$row$",
  "$rparen",
  "$runeAt$",
  "$runtimeConfiguration",
  "$runtimeConfiguration$",
  "$runtimeMetamixin",
  "$runtimeMixin",
  "$runtimeMixinNamespace",
  "$scaledR$g$b$a$",
  "$schedule$after$",
  "$schedule$every$",
  "$schedulerNode$",
  "$scopeMap",
  "$scopeMap$",
  "$scopeStack",
  "$scopeStack$",
  "$script",
  "$script$",
  "$scrollIntoView$",
  "$sel",
  "$select$",
  "$select$thenDo$",
  "$selector",
  "$selector$",
  "$selector$arguments$",
  "$selector$arguments$resolver$",
  "$selector$parameters$",
  "$selector$parameters$returnType$typePattern$",
  "$selfCaption",
  "$selfInfoLine",
  "$selfMirror",
  "$selfName",
  "$selfSendNode$",
  "$semicolon",
  "$send$with$",
  "$sendExpression",
  "$sendMessages$to$",
  "$sendTo$",
  "$sentSelectors",
  "$sentSelectors$",
  "$seqSlotDecls",
  "$setInput$",
  "$setProperty$to$",
  "$setScopeFor$in$",
  "$setSlot$to$",
  "$setSuperScope$",
  "$setTable$",
  "$setToEnd",
  "$setVisualText$",
  "$setterBlockArgName",
  "$setterKeyword",
  "$setterKw",
  "$setterSelectorFor$",
  "$setterSendNode$",
  "$setterTemp",
  "$setupForwardReferences",
  "$sharedBackButtonListener",
  "$sharedBackButtonListener$",
  "$sharedNavigationHistory",
  "$sharedNavigationHistory$",
  "$sharedNavigator",
  "$shell",
  "$shouldNotHappen",
  "$sideDecl",
  "$sideNode$",
  "$sign",
  "$signal",
  "$signal$",
  "$simSlotDecls",
  "$simpleName",
  "$sin",
  "$size",
  "$size$",
  "$size_0",
  "$size_0$",
  "$skipTo$",
  "$slash",
  "$slotCount",
  "$slotDecl",
  "$slotDecl$",
  "$slotDecls",
  "$slotDef",
  "$slotDefNode$",
  "$slotDefs",
  "$slotName",
  "$slotNames",
  "$slotNames$values$",
  "$slotValues",
  "$slots",
  "$slots$",
  "$slots$initializerExpressions$comment$slotsAreSequential$",
  "$slotsDo$betweenDo$",
  "$slotsMetadata",
  "$smallBlank",
  "$snippet",
  "$something$",
  "$sort",
  "$sort$",
  "$sort$to$using$",
  "$sortBlock",
  "$sortBlock$",
  "$sortBlock_private",
  "$sortBlock_private$",
  "$source",
  "$source$",
  "$sourceActor",
  "$sourceForNode$",
  "$sourceIndex",
  "$sourceIndexForMethod$ofMixin$",
  "$sourcesList",
  "$sourcesList$",
  "$sourcesScript",
  "$space",
  "$specialCharacter",
  "$specialCharacterManglings",
  "$split$at$",
  "$splitBy$",
  "$splitFullyQualifiedName$",
  "$sqrt",
  "$squeak",
  "$star",
  "$starSeparatedBy$",
  "$starSeparatedOrTerminatedBy$",
  "$start",
  "$start$",
  "$startGap",
  "$startGap$",
  "$startMicros$",
  "$startMillis",
  "$startMillis$",
  "$startsWith$",
  "$state",
  "$state000",
  "$state000$",
  "$state$",
  "$statementSequence",
  "$statements",
  "$statements$",
  "$statementsS",
  "$statements_",
  "$stop",
  "$stop5",
  "$str",
  "$streamContents$",
  "$streams",
  "$string",
  "$stringBody",
  "$stringNode$",
  "$stringTranslation",
  "$stroke",
  "$subclassResponsibility",
  "$subject",
  "$subparser",
  "$subparsers",
  "$subtypeOf",
  "$superConstructorCall",
  "$superConstructorCall$",
  "$superConstructorCallFor$",
  "$superConstructorMethodFor$",
  "$superConstructorNameFor$",
  "$superInit$ActorsForV8",
  "$superInit$ActorsForV8$Actor",
  "$superInit$ActorsForV8$DOMActor",
  "$superInit$ActorsForV8$EventualSendReactor",
  "$superInit$ActorsForV8$InternalActor",
  "$superInit$ActorsForV8$InternalBrokenRef",
  "$superInit$ActorsForV8$InternalFarReference",
  "$superInit$ActorsForV8$InternalLocalPromise",
  "$superInit$ActorsForV8$InternalNearRef",
  "$superInit$ActorsForV8$InternalRef",
  "$superInit$ActorsForV8$InternalRemotePromise",
  "$superInit$ActorsForV8$PendingDelivery",
  "$superInit$ActorsForV8$PromiseUtils",
  "$superInit$ActorsForV8$RedirectReactor",
  "$superInit$ActorsForV8$Ref",
  "$superInit$ActorsForV8$Resolver",
  "$superInit$ActorsForV8$Scheduler",
  "$superInit$ActorsForV8$Timer",
  "$superInit$ActorsForV8$WhenReactor",
  "$superInit$AliensForV8",
  "$superInit$AliensForV8$Alien",
  "$superInit$AliensForV8$Expat",
  "$superInit$Ampleforth",
  "$superInit$Ampleforth$Embedder",
  "$superInit$Ampleforth$Embedder$ErrorPresenter",
  "$superInit$Ampleforth$Embedder$ErrorSubject",
  "$superInit$Ampleforth$Embedder$SnippetPresenter",
  "$superInit$Ampleforth$Embedder$SnippetSubject",
  "$superInit$BrowsingForHTML",
  "$superInit$BrowsingForHTML$ClassPresenter",
  "$superInit$BrowsingForHTML$ClassSubject",
  "$superInit$BrowsingForHTML$Namespace",
  "$superInit$BrowsingForHTML$ObjectPresenter",
  "$superInit$BrowsingForHTML$ObjectSubject",
  "$superInit$Collections",
  "$superInit$Collections$AddableList",
  "$superInit$Collections$Association",
  "$superInit$Collections$Bag",
  "$superInit$Collections$Collection",
  "$superInit$Collections$HashedCollection",
  "$superInit$Collections$IdentityMutableHashedMap",
  "$superInit$Collections$IdentitySet",
  "$superInit$Collections$Interval",
  "$superInit$Collections$List",
  "$superInit$Collections$MutableArrayList",
  "$superInit$Collections$MutableHashedMap",
  "$superInit$Collections$MutableList",
  "$superInit$Collections$Set",
  "$superInit$Collections$SortedList",
  "$superInit$CombinatorialParsing",
  "$superInit$CombinatorialParsing$AlternatingParser",
  "$superInit$CombinatorialParsing$CharParser",
  "$superInit$CombinatorialParsing$CollectingCommentParser",
  "$superInit$CombinatorialParsing$CombinatorialParser",
  "$superInit$CombinatorialParsing$CommentParser",
  "$superInit$CombinatorialParsing$EOIParser",
  "$superInit$CombinatorialParsing$EmptyParser",
  "$superInit$CombinatorialParsing$ExecutableGrammar",
  "$superInit$CombinatorialParsing$FailingParser",
  "$superInit$CombinatorialParsing$ForwardReferenceParser",
  "$superInit$CombinatorialParsing$ForwardingWrappingParser",
  "$superInit$CombinatorialParsing$NamedWrappingParser",
  "$superInit$CombinatorialParsing$NegatingParser",
  "$superInit$CombinatorialParsing$ParserContext",
  "$superInit$CombinatorialParsing$ParserError",
  "$superInit$CombinatorialParsing$ParserStream",
  "$superInit$CombinatorialParsing$PlusParser",
  "$superInit$CombinatorialParsing$PredicateTokenParser",
  "$superInit$CombinatorialParsing$SequentialParser",
  "$superInit$CombinatorialParsing$StarParser",
  "$superInit$CombinatorialParsing$SymbolicTokenParser",
  "$superInit$CombinatorialParsing$Token",
  "$superInit$CombinatorialParsing$TokenParser",
  "$superInit$CombinatorialParsing$TokenizingParser",
  "$superInit$CombinatorialParsing$WhitespaceParser",
  "$superInit$CombinatorialParsing$WrappingParser",
  "$superInit$GraphicsForHTML5",
  "$superInit$GraphicsForHTML5$Canvas",
  "$superInit$GraphicsForHTML5$Color",
  "$superInit$GraphicsForHTML5$Context",
  "$superInit$GraphicsForHTML5$Point",
  "$superInit$GraphicsForHTML5$Rectangle",
  "$superInit$HopscotchForHTML5",
  "$superInit$HopscotchForHTML5$BlankFragment",
  "$superInit$HopscotchForHTML5$ButtonFragment",
  "$superInit$HopscotchForHTML5$CanvasFragment",
  "$superInit$HopscotchForHTML5$ColumnComposer",
  "$superInit$HopscotchForHTML5$Composer",
  "$superInit$HopscotchForHTML5$DeferredContentComposer",
  "$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow",
  "$superInit$HopscotchForHTML5$Fragment",
  "$superInit$HopscotchForHTML5$Gradient",
  "$superInit$HopscotchForHTML5$HolderComposer",
  "$superInit$HopscotchForHTML5$HopscotchShell",
  "$superInit$HopscotchForHTML5$HopscotchWindow",
  "$superInit$HopscotchForHTML5$HyperlinkFragment",
  "$superInit$HopscotchForHTML5$HyperlinkImageFragment",
  "$superInit$HopscotchForHTML5$LeafFragment",
  "$superInit$HopscotchForHTML5$LocalNavigationHistory",
  "$superInit$HopscotchForHTML5$NavigationHistory",
  "$superInit$HopscotchForHTML5$PaddedFrameComposer",
  "$superInit$HopscotchForHTML5$Presenter",
  "$superInit$HopscotchForHTML5$RowComposer",
  "$superInit$HopscotchForHTML5$SequenceComposer",
  "$superInit$HopscotchForHTML5$StaticImageFragment",
  "$superInit$HopscotchForHTML5$StaticLabelFragment",
  "$superInit$HopscotchForHTML5$Subject",
  "$superInit$HopscotchForHTML5$TextDisplayFragment",
  "$superInit$HopscotchForHTML5$TextEditorFragment",
  "$superInit$HopscotchForHTML5$ToggleComposer",
  "$superInit$JavascriptGeneration",
  "$superInit$JavascriptGeneration$Factory",
  "$superInit$JavascriptGeneration$Syntax",
  "$superInit$JavascriptGeneration$Syntax$ArrayExpression",
  "$superInit$JavascriptGeneration$Syntax$AssignmentExpression",
  "$superInit$JavascriptGeneration$Syntax$Block",
  "$superInit$JavascriptGeneration$Syntax$BooleanLiteral",
  "$superInit$JavascriptGeneration$Syntax$CallExpression",
  "$superInit$JavascriptGeneration$Syntax$ForInStatement",
  "$superInit$JavascriptGeneration$Syntax$ForStatement",
  "$superInit$JavascriptGeneration$Syntax$FunctionExpression",
  "$superInit$JavascriptGeneration$Syntax$FunctionStatement",
  "$superInit$JavascriptGeneration$Syntax$IdentifierExpression",
  "$superInit$JavascriptGeneration$Syntax$IfStatement",
  "$superInit$JavascriptGeneration$Syntax$MemberExpression",
  "$superInit$JavascriptGeneration$Syntax$NewExpression",
  "$superInit$JavascriptGeneration$Syntax$Node",
  "$superInit$JavascriptGeneration$Syntax$NumberLiteral",
  "$superInit$JavascriptGeneration$Syntax$ObjectLiteral",
  "$superInit$JavascriptGeneration$Syntax$OperatorExpression",
  "$superInit$JavascriptGeneration$Syntax$ReturnStatement",
  "$superInit$JavascriptGeneration$Syntax$Script",
  "$superInit$JavascriptGeneration$Syntax$StringLiteral",
  "$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression",
  "$superInit$JavascriptGeneration$Syntax$ThrowStatement",
  "$superInit$JavascriptGeneration$Syntax$TryStatement",
  "$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression",
  "$superInit$JavascriptGeneration$Syntax$VariableStatement",
  "$superInit$JavascriptGeneration$Syntax$VerbatimNode",
  "$superInit$JavascriptGeneration$Writer",
  "$superInit$KernelForV8",
  "$superInit$KernelForV8$Array",
  "$superInit$KernelForV8$Block",
  "$superInit$KernelForV8$Boolean",
  "$superInit$KernelForV8$Class",
  "$superInit$KernelForV8$Error",
  "$superInit$KernelForV8$Future",
  "$superInit$KernelForV8$Message",
  "$superInit$KernelForV8$MessageNotUnderstood",
  "$superInit$KernelForV8$Metaclass",
  "$superInit$KernelForV8$Mixin",
  "$superInit$KernelForV8$Number",
  "$superInit$KernelForV8$Object",
  "$superInit$KernelForV8$Stopwatch",
  "$superInit$KernelForV8$String",
  "$superInit$KernelForV8$UndefinedObject",
  "$superInit$MirrorGroups",
  "$superInit$MirrorGroups$ImmutableMirrorGroup",
  "$superInit$MirrorGroups$MirrorGroup",
  "$superInit$MirrorsForV8",
  "$superInit$MirrorsForV8$ClassDeclarationBuilder",
  "$superInit$MirrorsForV8$ClassDeclarationMirror",
  "$superInit$MirrorsForV8$ClassHeaderMirror",
  "$superInit$MirrorsForV8$ClassMirror",
  "$superInit$MirrorsForV8$MethodBuilder",
  "$superInit$MirrorsForV8$MethodMirror",
  "$superInit$MirrorsForV8$MixinBuilder",
  "$superInit$MirrorsForV8$MixinMirror",
  "$superInit$MirrorsForV8$MutableMethodGroup",
  "$superInit$MirrorsForV8$MutableMirrorGroup",
  "$superInit$MirrorsForV8$MutableNestedClassGroup",
  "$superInit$MirrorsForV8$ObjectMirror",
  "$superInit$MirrorsForV8$SlotDeclarationMirror",
  "$superInit$Newspeak2V8Compilation",
  "$superInit$Newspeak2V8Compilation$CachedCompilation",
  "$superInit$Newspeak2V8Compilation$Compiler",
  "$superInit$Newspeak2V8Compilation$Compiler$PropertyCallAST",
  "$superInit$Newspeak2V8Compilation$Compiler$Rewriter",
  "$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST",
  "$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST",
  "$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder",
  "$superInit$Newspeak2V8Compilation$Compiler$Translator",
  "$superInit$Newspeak2V8Compilation$IntermediateClassDeclaration",
  "$superInit$Newspeak2V8Compilation$IntermediateMethod",
  "$superInit$Newspeak2V8Compilation$IntermediateMixin",
  "$superInit$Newspeak2V8Compilation$IntermediateSlotDeclaration",
  "$superInit$Newspeak2V8Compilation$NameMangler",
  "$superInit$Newspeak2V8Compilation$ProgramBuilder",
  "$superInit$NewspeakASTs",
  "$superInit$NewspeakASTs$AST",
  "$superInit$NewspeakASTs$ASTCopier",
  "$superInit$NewspeakASTs$ASTTool",
  "$superInit$NewspeakASTs$ASTTraverser",
  "$superInit$NewspeakASTs$AssignmentAST",
  "$superInit$NewspeakASTs$BinaryTypeOpAST",
  "$superInit$NewspeakASTs$BlockAST",
  "$superInit$NewspeakASTs$BlockTypeAST",
  "$superInit$NewspeakASTs$CascadedSendAST",
  "$superInit$NewspeakASTs$CategoryAST",
  "$superInit$NewspeakASTs$CharAST",
  "$superInit$NewspeakASTs$ClassBodyAST",
  "$superInit$NewspeakASTs$ClassDeclarationAST",
  "$superInit$NewspeakASTs$ClassHeaderAST",
  "$superInit$NewspeakASTs$ClassPrefixAST",
  "$superInit$NewspeakASTs$CodeBodyAST",
  "$superInit$NewspeakASTs$ImmutableSlotDefAST",
  "$superInit$NewspeakASTs$InitializerAST",
  "$superInit$NewspeakASTs$KeywordPatternAST",
  "$superInit$NewspeakASTs$KeywordPatternPairAST",
  "$superInit$NewspeakASTs$LiteralAST",
  "$superInit$NewspeakASTs$LiteralPatternAST",
  "$superInit$NewspeakASTs$MessageAST",
  "$superInit$NewspeakASTs$MessagePatternAST",
  "$superInit$NewspeakASTs$MethodAST",
  "$superInit$NewspeakASTs$MixinApplicationAST",
  "$superInit$NewspeakASTs$MixinApplicationClassAST",
  "$superInit$NewspeakASTs$MutableSlotDefAST",
  "$superInit$NewspeakASTs$NSSideAST",
  "$superInit$NewspeakASTs$NormalSendAST",
  "$superInit$NewspeakASTs$NumberAST",
  "$superInit$NewspeakASTs$ParameterizedTypeAST",
  "$superInit$NewspeakASTs$PatternAST",
  "$superInit$NewspeakASTs$ReturnStatAST",
  "$superInit$NewspeakASTs$SendAST",
  "$superInit$NewspeakASTs$SetterSendAST",
  "$superInit$NewspeakASTs$SideAST",
  "$superInit$NewspeakASTs$SlotDefAST",
  "$superInit$NewspeakASTs$StringAST",
  "$superInit$NewspeakASTs$SymbolAST",
  "$superInit$NewspeakASTs$TupleAST",
  "$superInit$NewspeakASTs$TypeIdAST",
  "$superInit$NewspeakASTs$UnaryTypeOpAST",
  "$superInit$NewspeakASTs$VarDeclAST",
  "$superInit$NewspeakASTs$VariableAST",
  "$superInit$NewspeakASTs$VariablePatternAST",
  "$superInit$NewspeakASTs$WildcardPatternAST",
  "$superInit$NewspeakCompilation",
  "$superInit$NewspeakCompilation$ClassEntry",
  "$superInit$NewspeakCompilation$Compiler",
  "$superInit$NewspeakCompilation$Compiler$Rewriter",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST",
  "$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST",
  "$superInit$NewspeakCompilation$Compiler$ScopeBuilder",
  "$superInit$NewspeakCompilation$LocalEntry",
  "$superInit$NewspeakCompilation$MethodEntry",
  "$superInit$NewspeakCompilation$Namer",
  "$superInit$NewspeakCompilation$Scope",
  "$superInit$NewspeakCompilation$SlotEntry",
  "$superInit$NewspeakCompilation$SymbolTableEntry",
  "$superInit$NewspeakGrammar",
  "$superInit$NewspeakGrammar$NS3Grammar",
  "$superInit$NewspeakGrammar$NSCommentParser",
  "$superInit$NewspeakGrammar$TypedNS3Grammar",
  "$superInit$NewspeakGrammar$UnarySelectorParser",
  "$superInit$NewspeakParsing",
  "$superInit$NewspeakParsing$InternalParser",
  "$superInit$NewspeakParsing$Parser",
  "$superInit$RuntimeForV8WithMirrorBuilders",
  "$superInit$RuntimeForV8WithMirrorBuilders$Platform",
  "$superInit$Streams",
  "$superInit$Streams$BasicInputStream",
  "$superInit$Streams$BasicOutputStream",
  "$superInit$Streams$BasicReadStream",
  "$superInit$Streams$BasicReadWriteStream",
  "$superInit$Streams$CharacterInput",
  "$superInit$Streams$CharacterInputConverter",
  "$superInit$Streams$CharacterInputOutputConverter",
  "$superInit$Streams$CharacterOutput",
  "$superInit$Streams$CharacterOutputConverter",
  "$superInit$Streams$CharacterReadConverter",
  "$superInit$Streams$CharacterReadStream",
  "$superInit$Streams$CharacterReadWriteStream",
  "$superInit$Streams$ExternalInputStream",
  "$superInit$Streams$ExternalOutputStream",
  "$superInit$Streams$ExternalReadStream",
  "$superInit$Streams$ExternalReadWriteStream",
  "$superInit$Streams$ExternalStream",
  "$superInit$Streams$SeqCltnReadStream",
  "$superInit$Streams$SeqCltnReadWriteStream",
  "$superInit$Streams$TempTranscript",
  "$superScope",
  "$superScope$",
  "$superSendNode$",
  "$superclass",
  "$superclassCall",
  "$superclassCall$",
  "$superclassClause",
  "$superclassExpr",
  "$superclassExpr$",
  "$superclassName",
  "$superclassName$",
  "$superclassPrefix",
  "$sym",
  "$symbol",
  "$symbol$",
  "$symbolConstant",
  "$symbolNode$",
  "$syntax",
  "$syntheticNameSeparator",
  "$tab",
  "$tabLevel",
  "$tabLevel$",
  "$table",
  "$table$",
  "$tableAt$put$ifNew$",
  "$tableAt$put$inDeletedSlot$",
  "$tableAt$put$inEmptySlot$",
  "$tableAt$put$inMatchingSlot$value$",
  "$tableAt$put$inUnusedSlot$",
  "$tableSizeForCapacity$",
  "$table_0",
  "$table_0$",
  "$target",
  "$target$targetsActor$__owner$",
  "$targetsActor",
  "$temporaries",
  "$temporaries$",
  "$temporaries$statements$",
  "$temporaryDeclNode$",
  "$termBlock",
  "$termBlock$",
  "$terminate",
  "$ternaryIf$then$else$",
  "$testExpression",
  "$text",
  "$text$",
  "$textBeingAccepted",
  "$textBeingAccepted$",
  "$textX",
  "$textX$",
  "$then",
  "$thenStatement",
  "$throw$",
  "$timesRepeat$",
  "$title",
  "$to$assign$",
  "$to$cascade$",
  "$to$send$",
  "$to$send$start$end$",
  "$toggleWidget",
  "$toggleWidget$",
  "$token",
  "$token$",
  "$tokenFor$",
  "$tokenFromChar$",
  "$tokenFromSymbol$",
  "$topColor",
  "$toplevelClass",
  "$transientTestBlock",
  "$translator",
  "$trueWrappingParser",
  "$truncated",
  "$try$catch$with$",
  "$tuple",
  "$tupleNode$",
  "$tupleType",
  "$type",
  "$typeArg",
  "$typeArgInferenceClause",
  "$typeArguments",
  "$typeBoundQualifier",
  "$typeExpr",
  "$typeFactor",
  "$typeFormal",
  "$typeIdNode$",
  "$typeParamConstraint",
  "$typePattern",
  "$typePattern$",
  "$typePrimary",
  "$typeTerm",
  "$ultimateParser",
  "$unaryExpression",
  "$unaryMsg",
  "$unaryMsgPattern",
  "$unarySelector",
  "$unaryTypeOpNode$",
  "$unicodeValue",
  "$unimplemented",
  "$unindentCr",
  "$unmangleSelector$",
  "$unsignedByteAt$",
  "$unsignedByteAt$put$",
  "$upTo$",
  "$updateBufferLocationAfterFlush",
  "$updateMixin$from$by$",
  "$updateMixinFrom$",
  "$uppercaseLetter",
  "$used",
  "$used$",
  "$userBack$",
  "$userToggle",
  "$usesDefaultSortBlock",
  "$usesDefaultSortBlock_private",
  "$usesDefaultSortBlock_private$",
  "$usingCrLfConvention",
  "$usingLib$",
  "$usingPlatform$",
  "$usingPlatform$browsing$",
  "$usingPlatform$grammar$asts$",
  "$usingPlatform$parsers$",
  "$usingPlatform$parsing$generation$mirrors$",
  "$usingPlatform$vmMirror$",
  "$usingVmMirror$",
  "$val$",
  "$valAt$ifAbsent$",
  "$value",
  "$value$",
  "$value$value$",
  "$value$with$",
  "$valueExpected",
  "$valueExpected$",
  "$valueS",
  "$valueWithArguments$",
  "$var",
  "$var$",
  "$var$value$",
  "$varDeclNode$",
  "$varName",
  "$varName$expression$body$",
  "$variable",
  "$variable$",
  "$variableName$",
  "$variableNode$",
  "$variablePattern",
  "$variablePatternNode$",
  "$variables$",
  "$variables$categories$",
  "$vars",
  "$vbar",
  "$verbatim$",
  "$visit$",
  "$visitArrayExpression$",
  "$visitAssignmentExpression$",
  "$visitBlock$",
  "$visitBooleanLiteral$",
  "$visitBy$",
  "$visitCallExpression$",
  "$visitForInStatement$",
  "$visitForStatement$",
  "$visitFunctionExpression$",
  "$visitFunctionStatement$",
  "$visitIdentifierExpression$",
  "$visitIfStatement$",
  "$visitMemberExpression$",
  "$visitNewExpression$",
  "$visitNumberLiteral$",
  "$visitObjectLiteral$",
  "$visitOperatorExpression$",
  "$visitReturnStatement$",
  "$visitScript$",
  "$visitStringLiteral$",
  "$visitTernaryOperatorExpression$",
  "$visitThrowStatement$",
  "$visitTryStatement$",
  "$visitUnaryOperatorExpression$",
  "$visitVariableStatement$",
  "$visitVerbatimNode$",
  "$visual",
  "$visualX",
  "$visualX$",
  "$vmmirror",
  "$warnObsolete",
  "$whenFulfilled$whenBroken$",
  "$where",
  "$while$do$",
  "$while$is$do$",
  "$whitespace",
  "$width$elasticity$",
  "$width$height$",
  "$wildcardPattern",
  "$wildcardPatternNode$",
  "$window",
  "$with$",
  "$with$do$",
  "$with$with$",
  "$withAll$",
  "$withContent$",
  "$withExtent$",
  "$withSubparser$",
  "$withSubparsers$",
  "$withValue$",
  "$withoutNbsp$",
  "$wrap$",
  "$wrap$name$",
  "$wrapArgument$from$to$",
  "$wrapArguments$from$to$",
  "$wrapBodyForNlrHandling$",
  "$wrapBodyNoNlrHandling$",
  "$wrapFor$",
  "$wrapParser$withWrapper$",
  "$wrapper$",
  "$wrapperBlock",
  "$wrapperBlock$",
  "$wrapping$",
  "$wrapping$__owner$",
  "$wrappingParser",
  "$wrappingParser$",
  "$write$",
  "$write$at$ifFail$",
  "$writeBlock$",
  "$writeBuffer",
  "$writeIfNeededBeforePositionChange",
  "$x",
  "$x$y$",
  "$y",
  "$yourself",
  "$$pipe",
  "$$tilde$equal"
 ].forEach(function (sel) {
  p["_" + sel] = dnuCatcher(sel);
  p[sel] = dnuCatcher(sel);
 });
};

var runtime = ns.$RuntimeForV8WithMirrorBuilders().$packageUsing$(ns);
vmmirror.platform = runtime.$using$(vmmirror);
var app = ns.$Ampleforth().$packageUsing$(ns);
app.$main$args$(vmmirror.platform, []);